<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170825 16:19:03.788">
<suite source="/tmp/fspcibld/14837/obmc-robot/tests" name="Tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170825 16:19:04.475" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170825 16:19:04.475" starttime="20170825 16:19:04.475" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:04.475" level="INFO">${has_host} = False</msg>
<status endtime="20170825 16:19:04.475" starttime="20170825 16:19:04.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170825 16:19:04.476" starttime="20170825 16:19:04.476" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:04.476" starttime="20170825 16:19:04.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170825 16:19:04.478" level="INFO">${port_num} = 22</msg>
<status endtime="20170825 16:19:04.478" starttime="20170825 16:19:04.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170825 16:19:04.478" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170825 16:19:04.479" starttime="20170825 16:19:04.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170825 16:19:04.479" level="INFO">${https_num} = 443</msg>
<status endtime="20170825 16:19:04.479" starttime="20170825 16:19:04.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170825 16:19:04.480" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170825 16:19:04.480" starttime="20170825 16:19:04.479" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:04.480" starttime="20170825 16:19:04.477" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:04.480" starttime="20170825 16:19:04.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170825 16:19:04.481" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170825 16:19:04.481" starttime="20170825 16:19:04.481" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:04.481" level="INFO">${has_port} = False</msg>
<status endtime="20170825 16:19:04.481" starttime="20170825 16:19:04.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170825 16:19:04.483" starttime="20170825 16:19:04.482" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170825 16:19:04.483" starttime="20170825 16:19:04.483" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:04.483" starttime="20170825 16:19:04.482" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:04.483" starttime="20170825 16:19:04.481" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170825 16:19:04.484" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170825 16:19:06.200" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170825 16:19:06.201" starttime="20170825 16:19:04.484" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:06.201" starttime="20170825 16:19:04.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:19:06.202" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170825 16:19:06.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170825 16:19:06.303" level="INFO">${output} = VERSION_ID="v1.99.9-1-g6ab08ae"</msg>
<msg timestamp="20170825 16:19:06.303" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:19:06.303" starttime="20170825 16:19:06.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170825 16:19:06.304" level="INFO">Length is 0</msg>
<status endtime="20170825 16:19:06.304" starttime="20170825 16:19:06.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170825 16:19:06.304" level="INFO">VERSION_ID="v1.99.9-1-g6ab08ae"</msg>
<status endtime="20170825 16:19:06.304" starttime="20170825 16:19:06.304" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:06.304" starttime="20170825 16:19:06.201" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:06.304" starttime="20170825 16:19:06.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:19:06.306" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170825 16:19:06.433" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170825 16:19:06.433" level="INFO">${stdout} = </msg>
<msg timestamp="20170825 16:19:06.433" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170825 16:19:06.433" starttime="20170825 16:19:06.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170825 16:19:06.434" level="INFO">Length is 105</msg>
<msg timestamp="20170825 16:19:06.434" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170825 16:19:06.434" starttime="20170825 16:19:06.434" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:06.434" starttime="20170825 16:19:06.305" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:06.434" starttime="20170825 16:19:06.305" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:06.435" starttime="20170825 16:19:06.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170825 16:19:06.615" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:19:06.615" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170825 16:19:07.364" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170825 16:19:07.364" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170825 16:19:07.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170825 16:19:07.448" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170825 16:19:07.449" level="INFO">${stderr} = </msg>
<msg timestamp="20170825 16:19:07.449" level="INFO">${rc} = 0</msg>
<status endtime="20170825 16:19:07.449" starttime="20170825 16:19:06.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170825 16:19:07.449" level="INFO">Length is 0</msg>
<status endtime="20170825 16:19:07.449" starttime="20170825 16:19:07.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170825 16:19:07.450" level="INFO">Length is 11</msg>
<status endtime="20170825 16:19:07.450" starttime="20170825 16:19:07.449" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:07.450" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170825 16:19:07.450" starttime="20170825 16:19:06.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170825 16:19:07.450" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170825 16:19:07.450" starttime="20170825 16:19:07.450" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.451" starttime="20170825 16:19:06.435" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.451" starttime="20170825 16:19:06.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170825 16:19:07.453" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170825 16:19:07.453" starttime="20170825 16:19:07.452" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:07.453" level="INFO">${has_host} = False</msg>
<status endtime="20170825 16:19:07.453" starttime="20170825 16:19:07.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170825 16:19:07.454" starttime="20170825 16:19:07.454" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.454" starttime="20170825 16:19:07.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170825 16:19:07.455" level="INFO">${port_num} = 22</msg>
<status endtime="20170825 16:19:07.455" starttime="20170825 16:19:07.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170825 16:19:07.456" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170825 16:19:07.456" starttime="20170825 16:19:07.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170825 16:19:07.456" level="INFO">${https_num} = 443</msg>
<status endtime="20170825 16:19:07.457" starttime="20170825 16:19:07.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170825 16:19:07.457" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170825 16:19:07.457" starttime="20170825 16:19:07.457" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.458" starttime="20170825 16:19:07.455" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.458" starttime="20170825 16:19:07.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170825 16:19:07.459" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170825 16:19:07.459" starttime="20170825 16:19:07.458" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:07.459" level="INFO">${has_port} = False</msg>
<status endtime="20170825 16:19:07.459" starttime="20170825 16:19:07.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170825 16:19:07.460" starttime="20170825 16:19:07.460" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170825 16:19:07.461" starttime="20170825 16:19:07.461" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.461" starttime="20170825 16:19:07.460" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:07.461" starttime="20170825 16:19:07.459" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170825 16:19:07.462" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170825 16:19:09.132" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170825 16:19:09.132" starttime="20170825 16:19:07.461" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.132" starttime="20170825 16:19:07.451" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:19:09.133" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170825 16:19:09.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170825 16:19:09.230" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170825 16:19:09.230" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:19:09.230" starttime="20170825 16:19:09.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.230" level="INFO">Length is 0</msg>
<status endtime="20170825 16:19:09.230" starttime="20170825 16:19:09.230" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.231" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170825 16:19:09.231" starttime="20170825 16:19:09.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170825 16:19:09.231" starttime="20170825 16:19:09.231" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.231" starttime="20170825 16:19:07.451" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.231" starttime="20170825 16:19:07.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170825 16:19:09.232" starttime="20170825 16:19:09.232" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.232" starttime="20170825 16:19:04.473" status="PASS"></status>
</kw>
<suite source="/tmp/fspcibld/14837/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/14837/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:09.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:09.315" starttime="20170825 16:19:09.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:09.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:09.316" starttime="20170825 16:19:09.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:09.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:09.317" starttime="20170825 16:19:09.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:09.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:09.317" starttime="20170825 16:19:09.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:09.498" starttime="20170825 16:19:09.318" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:09.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:09.498" starttime="20170825 16:19:09.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:09.499" starttime="20170825 16:19:09.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:09.499" starttime="20170825 16:19:09.499" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.499" starttime="20170825 16:19:09.314" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.499" starttime="20170825 16:19:09.313" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.500" starttime="20170825 16:19:09.313" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:09.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:09.506" starttime="20170825 16:19:09.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:09.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:09.506" starttime="20170825 16:19:09.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:09.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:09.507" starttime="20170825 16:19:09.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:09.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:09.507" starttime="20170825 16:19:09.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:09.701" starttime="20170825 16:19:09.508" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.701" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:09.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:09.701" starttime="20170825 16:19:09.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:09.701" starttime="20170825 16:19:09.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:09.702" starttime="20170825 16:19:09.702" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.702" starttime="20170825 16:19:09.504" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.702" starttime="20170825 16:19:09.504" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.702" starttime="20170825 16:19:09.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:09.703" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 16:19:09.703" starttime="20170825 16:19:09.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:09.705" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:09.706" starttime="20170825 16:19:09.705" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:09.706" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:09.707" starttime="20170825 16:19:09.706" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.707" starttime="20170825 16:19:09.706" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.707" starttime="20170825 16:19:09.704" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.707" starttime="20170825 16:19:09.703" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:09.823" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:09.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:09.823" starttime="20170825 16:19:09.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:09.825" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:09.825" starttime="20170825 16:19:09.824" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:09.827" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:09.827" starttime="20170825 16:19:09.826" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.827" starttime="20170825 16:19:09.825" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.827" starttime="20170825 16:19:09.824" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.827" starttime="20170825 16:19:09.823" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:09.827" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:09.828" starttime="20170825 16:19:09.827" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:09.828" starttime="20170825 16:19:09.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:09.829" starttime="20170825 16:19:09.828" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:09.829" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:09.829" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:09.829" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170825 16:19:09.829" starttime="20170825 16:19:09.829" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.830" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 16:19:09.830" starttime="20170825 16:19:09.502" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.830" level="INFO">${host_state} = Off</msg>
<status endtime="20170825 16:19:09.830" starttime="20170825 16:19:09.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170825 16:19:09.831" level="FAIL">Off != Quiesced</msg>
<status endtime="20170825 16:19:09.831" starttime="20170825 16:19:09.831" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:09.831" level="INFO">${status} = False</msg>
<status endtime="20170825 16:19:09.831" starttime="20170825 16:19:09.830" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.831" level="INFO">${status} = False</msg>
<status endtime="20170825 16:19:09.831" starttime="20170825 16:19:09.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170825 16:19:09.832" starttime="20170825 16:19:09.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170825 16:19:09.833" starttime="20170825 16:19:09.832" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170825 16:19:09.848" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170825 16:19:09.849" starttime="20170825 16:19:09.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170825 16:19:09.864" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170825 16:19:09.864" starttime="20170825 16:19:09.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:19:09.866" level="INFO">${cur_time} = 2017-08-25 16:19:09:866249</msg>
<status endtime="20170825 16:19:09.867" starttime="20170825 16:19:09.866" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:19:09.867" level="INFO">${cur_time} = 20170825161909866249</msg>
<status endtime="20170825 16:19:09.867" starttime="20170825 16:19:09.867" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.868" starttime="20170825 16:19:09.865" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.875" level="INFO">${FFDC_TIME} = 20170825161909866249</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170825 16:19:09.876" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170825 16:19:09.876" starttime="20170825 16:19:09.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170825 16:19:09.877" level="INFO">${suite_name} = 20170825161909866249_TestsSecurityTestSsl</msg>
<status endtime="20170825 16:19:09.877" starttime="20170825 16:19:09.876" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170825 16:19:09.877" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170825 16:19:09.877" starttime="20170825 16:19:09.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170825 16:19:09.878" level="INFO">${test_name} = 20170825161909866249_TestSSLConnection</msg>
<status endtime="20170825 16:19:09.878" starttime="20170825 16:19:09.877" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.878" starttime="20170825 16:19:09.875" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.878" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14837/obmc-robot/logs/20170825161909866249_TestsSecurityTestSsl/20170825161909866249_TestSSLConnection/</msg>
<msg timestamp="20170825 16:19:09.883" level="INFO">${FFDC_PREFIX} = 20170825161909866249_</msg>
<status endtime="20170825 16:19:09.883" starttime="20170825 16:19:09.865" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.883" starttime="20170825 16:19:09.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170825 16:19:09.884" starttime="20170825 16:19:09.883" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:19:09.884" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs"&gt;/tmp/fspcibld/14837/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170825 16:19:09.885" starttime="20170825 16:19:09.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.886" level="FAIL">File '/tmp/fspcibld/14837/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170825 16:19:09.886" starttime="20170825 16:19:09.885" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:19:09.886" level="INFO">${exist} = False</msg>
<status endtime="20170825 16:19:09.886" starttime="20170825 16:19:09.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:19:09.887" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:19:09.887" starttime="20170825 16:19:09.887" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.887" starttime="20170825 16:19:09.886" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170825 16:19:09.888" starttime="20170825 16:19:09.887" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:19:09.889" level="INFO">${cur_time} = 2017-08-25 16:19:09:888608</msg>
<status endtime="20170825 16:19:09.889" starttime="20170825 16:19:09.888" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:19:09.889" level="INFO">${cur_time} = 20170825161909888608</msg>
<status endtime="20170825 16:19:09.889" starttime="20170825 16:19:09.889" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.890" level="INFO">${cur_time} = 20170825161909888608</msg>
<status endtime="20170825 16:19:09.890" starttime="20170825 16:19:09.888" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:19:09.890" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:19:09.890" starttime="20170825 16:19:09.890" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.891" starttime="20170825 16:19:09.833" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.891" starttime="20170825 16:19:09.500" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170825 16:19:09.891" starttime="20170825 16:19:09.312" status="PASS" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:09.891" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:09.892" starttime="20170825 16:19:09.891" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170825 16:19:09.892" starttime="20170825 16:19:09.234" status="PASS"></status>
</suite>
<status endtime="20170825 16:19:09.893" starttime="20170825 16:19:09.232" status="PASS"></status>
</suite>
<suite source="/tmp/fspcibld/14837/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170825 16:19:09.929" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.929" starttime="20170825 16:19:09.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170825 16:19:09.930" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.930" starttime="20170825 16:19:09.929" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.930" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.930" starttime="20170825 16:19:09.928" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170825 16:19:09.932" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.932" starttime="20170825 16:19:09.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170825 16:19:09.932" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.932" starttime="20170825 16:19:09.932" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.933" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:19:09.933" starttime="20170825 16:19:09.931" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:09.934" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 16:19:09.934" starttime="20170825 16:19:09.933" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:19:09.934" starttime="20170825 16:19:09.934" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:19:09.938" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:19:09.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:19:09.941" level="INFO">${output} = /tmp/fspcibld/14837/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 16:19:09.941" starttime="20170825 16:19:09.934" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 16:19:09.943" starttime="20170825 16:19:09.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 16:19:09.944" starttime="20170825 16:19:09.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:09.944" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:19:09.945" starttime="20170825 16:19:09.944" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:09.945" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:19:09.945" starttime="20170825 16:19:09.933" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20170825 16:19:09.946" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20170825 16:19:09.946" starttime="20170825 16:19:09.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:09.946" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170825 16:19:09.946" starttime="20170825 16:19:09.946" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:19:09.947" starttime="20170825 16:19:09.947" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170825 16:19:09.950" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:19:09.968" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:19:09.968" level="INFO">${os_con_pid} = </msg>
<status endtime="20170825 16:19:09.969" starttime="20170825 16:19:09.947" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170825 16:19:09.982" starttime="20170825 16:19:09.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:09.982" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170825 16:19:09.983" starttime="20170825 16:19:09.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:19:09.984" starttime="20170825 16:19:09.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:19:09.984" level="INFO">${rc} = None</msg>
<msg timestamp="20170825 16:19:09.984" level="INFO">${output} = None</msg>
<status endtime="20170825 16:19:09.984" starttime="20170825 16:19:09.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 16:19:09.985" starttime="20170825 16:19:09.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170825 16:19:09.988" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170825 16:19:09.988" starttime="20170825 16:19:09.988" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:09.989" starttime="20170825 16:19:09.987" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:09.989" starttime="20170825 16:19:09.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:19:09.989" level="INFO">${output} = </msg>
<status endtime="20170825 16:19:09.989" starttime="20170825 16:19:09.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170825 16:19:09.991" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170825 16:19:09.991" starttime="20170825 16:19:09.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170825 16:19:10.052" starttime="20170825 16:19:09.992" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:10.053" level="INFO">${rc} = 1</msg>
<msg timestamp="20170825 16:19:10.053" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170825 16:19:10.053" starttime="20170825 16:19:09.992" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:10.053" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170825 16:19:10.054" starttime="20170825 16:19:09.930" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:19:10.055" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170825 16:19:10.055" starttime="20170825 16:19:10.055" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:10.056" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 16:19:10.056" starttime="20170825 16:19:10.056" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:19:10.057" starttime="20170825 16:19:10.057" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:19:10.060" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:19:10.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:19:10.062" level="INFO">${output} = /tmp/fspcibld/14837/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 16:19:10.062" starttime="20170825 16:19:10.057" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 16:19:10.065" starttime="20170825 16:19:10.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 16:19:10.066" starttime="20170825 16:19:10.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:10.067" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:19:10.067" starttime="20170825 16:19:10.066" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:10.067" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:19:10.067" starttime="20170825 16:19:10.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:19:10.068" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170825 16:19:10.068" starttime="20170825 16:19:10.067" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:19:10.068" starttime="20170825 16:19:10.068" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:19:10.071" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170825 16:19:10.075" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:19:10.075" level="INFO">${output} = </msg>
<status endtime="20170825 16:19:10.075" starttime="20170825 16:19:10.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170825 16:19:10.078" starttime="20170825 16:19:10.077" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.078" starttime="20170825 16:19:09.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170825 16:19:10.079" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170825 16:19:10.081" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170825 16:19:10.081" starttime="20170825 16:19:10.080" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:10.083" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170825 16:19:10.083" starttime="20170825 16:19:10.082" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:10.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:10.094" starttime="20170825 16:19:10.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:10.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:10.095" starttime="20170825 16:19:10.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:10.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:10.096" starttime="20170825 16:19:10.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:10.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:10.097" starttime="20170825 16:19:10.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:10.554" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:10.554" starttime="20170825 16:19:10.100" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:10.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:10.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:10.554" starttime="20170825 16:19:10.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:10.555" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:10.555" starttime="20170825 16:19:10.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:10.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:10.555" starttime="20170825 16:19:10.555" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.556" starttime="20170825 16:19:10.090" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.556" starttime="20170825 16:19:10.088" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.556" starttime="20170825 16:19:10.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:10.556" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170825 16:19:10.556" starttime="20170825 16:19:10.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:10.557" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:10.557" starttime="20170825 16:19:10.557" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170825 16:19:10.558" starttime="20170825 16:19:10.557" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:10.559" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170825 16:19:10.559" starttime="20170825 16:19:10.558" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:10.560" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170825 16:19:10.560" starttime="20170825 16:19:10.560" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.560" starttime="20170825 16:19:10.559" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:10.560" starttime="20170825 16:19:10.558" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:11.234" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170825 16:19:11.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:11.234" starttime="20170825 16:19:10.561" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:11.235" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:11.235" starttime="20170825 16:19:11.235" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:11.236" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:11.236" starttime="20170825 16:19:11.236" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:11.237" starttime="20170825 16:19:11.236" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:11.237" starttime="20170825 16:19:11.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:11.237" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:11.237" starttime="20170825 16:19:11.237" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:11.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:11.237" starttime="20170825 16:19:10.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:11.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:11.238" starttime="20170825 16:19:11.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170825 16:19:11.239" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:11.239" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:11.239" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170825 16:19:11.239" starttime="20170825 16:19:11.238" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:11.239" starttime="20170825 16:19:10.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 16:19:11.239" starttime="20170825 16:19:11.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:11.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:11.246" starttime="20170825 16:19:11.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:11.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:11.247" starttime="20170825 16:19:11.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:11.247" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:11.248" starttime="20170825 16:19:11.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:11.248" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:11.248" starttime="20170825 16:19:11.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:12.483" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:12.483" starttime="20170825 16:19:11.250" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:12.483" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:12.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:12.483" starttime="20170825 16:19:11.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:12.484" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:12.484" starttime="20170825 16:19:12.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:12.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:12.485" starttime="20170825 16:19:12.484" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.485" starttime="20170825 16:19:11.244" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.485" starttime="20170825 16:19:11.243" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.485" starttime="20170825 16:19:11.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:12.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:19:12.486" starttime="20170825 16:19:12.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:12.489" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:12.489" starttime="20170825 16:19:12.488" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:12.490" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:12.490" starttime="20170825 16:19:12.490" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.490" starttime="20170825 16:19:12.489" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.491" starttime="20170825 16:19:12.487" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:12.491" starttime="20170825 16:19:12.486" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:13.926" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:13.926" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:13.926" starttime="20170825 16:19:12.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:13.928" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:13.928" starttime="20170825 16:19:13.927" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:13.929" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:13.929" starttime="20170825 16:19:13.929" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:13.929" starttime="20170825 16:19:13.928" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:13.929" starttime="20170825 16:19:13.927" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:13.929" starttime="20170825 16:19:13.927" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:13.930" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:13.930" starttime="20170825 16:19:13.930" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:13.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:13.930" starttime="20170825 16:19:11.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:13.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:13.931" starttime="20170825 16:19:13.930" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:13.931" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:13.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:13.931" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:19:13.931" starttime="20170825 16:19:13.931" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:13.932" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:19:13.932" starttime="20170825 16:19:11.242" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:13.932" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:19:13.932" starttime="20170825 16:19:11.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 16:19:13.933" starttime="20170825 16:19:13.932" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:13.933" starttime="20170825 16:19:11.241" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:13.938" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:13.939" starttime="20170825 16:19:13.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:13.939" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:13.939" starttime="20170825 16:19:13.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:13.940" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:13.940" starttime="20170825 16:19:13.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:13.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:13.941" starttime="20170825 16:19:13.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:14.486" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:14.486" starttime="20170825 16:19:13.942" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:14.486" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:14.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:14.486" starttime="20170825 16:19:13.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:14.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:14.487" starttime="20170825 16:19:14.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:14.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:14.488" starttime="20170825 16:19:14.487" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.488" starttime="20170825 16:19:13.937" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.488" starttime="20170825 16:19:13.936" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.488" starttime="20170825 16:19:13.935" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:14.488" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 16:19:14.489" starttime="20170825 16:19:14.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:14.491" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:14.491" starttime="20170825 16:19:14.490" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:14.491" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:14.492" starttime="20170825 16:19:14.491" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.492" starttime="20170825 16:19:14.491" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.492" starttime="20170825 16:19:14.489" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:14.492" starttime="20170825 16:19:14.489" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:17.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:17.939" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:17.939" starttime="20170825 16:19:14.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:17.943" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:17.943" starttime="20170825 16:19:17.942" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:17.944" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:17.944" starttime="20170825 16:19:17.943" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.944" starttime="20170825 16:19:17.943" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.944" starttime="20170825 16:19:17.942" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.945" starttime="20170825 16:19:17.939" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:17.945" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:17.945" starttime="20170825 16:19:17.945" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:17.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:17.945" starttime="20170825 16:19:13.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:17.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:17.946" starttime="20170825 16:19:17.946" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:17.947" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:17.947" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:17.947" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170825 16:19:17.947" starttime="20170825 16:19:17.946" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:17.947" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 16:19:17.947" starttime="20170825 16:19:13.933" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:17.947" level="INFO">${host_state} = Off</msg>
<status endtime="20170825 16:19:17.947" starttime="20170825 16:19:13.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 16:19:17.948" starttime="20170825 16:19:17.948" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.948" starttime="20170825 16:19:11.241" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.948" starttime="20170825 16:19:11.240" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.948" starttime="20170825 16:19:11.240" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:17.949" level="INFO">${status} = True</msg>
<status endtime="20170825 16:19:17.949" starttime="20170825 16:19:11.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170825 16:19:17.949" starttime="20170825 16:19:17.949" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:17.950" starttime="20170825 16:19:10.080" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170825 16:19:17.951" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170825 16:19:17.951" starttime="20170825 16:19:17.950" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:17.953" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170825 16:19:17.953" starttime="20170825 16:19:17.952" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:17.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:17.957" starttime="20170825 16:19:17.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:17.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:17.958" starttime="20170825 16:19:17.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:17.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:17.958" starttime="20170825 16:19:17.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:17.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:17.959" starttime="20170825 16:19:17.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:18.582" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:18.582" starttime="20170825 16:19:17.960" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:18.582" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:18.582" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:18.582" starttime="20170825 16:19:17.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:18.583" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:18.583" starttime="20170825 16:19:18.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:18.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:18.584" starttime="20170825 16:19:18.583" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:18.584" starttime="20170825 16:19:17.955" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:18.584" starttime="20170825 16:19:17.955" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:18.584" starttime="20170825 16:19:17.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:18.585" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170825 16:19:18.585" starttime="20170825 16:19:18.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:18.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:18.585" starttime="20170825 16:19:18.585" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170825 16:19:18.586" starttime="20170825 16:19:18.586" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:18.588" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170825 16:19:18.588" starttime="20170825 16:19:18.587" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:18.589" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170825 16:19:18.589" starttime="20170825 16:19:18.588" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:18.589" starttime="20170825 16:19:18.588" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:18.589" starttime="20170825 16:19:18.586" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:19.022" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170825 16:19:19.023" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:19.023" starttime="20170825 16:19:18.589" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:19.024" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:19.024" starttime="20170825 16:19:19.023" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:19.025" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:19.025" starttime="20170825 16:19:19.025" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.025" starttime="20170825 16:19:19.024" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.025" starttime="20170825 16:19:19.023" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:19.026" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:19.026" starttime="20170825 16:19:19.025" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:19.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:19.026" starttime="20170825 16:19:17.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:19.026" starttime="20170825 16:19:19.026" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170825 16:19:19.027" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:19.027" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:19.027" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170825 16:19:19.027" starttime="20170825 16:19:19.027" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.027" starttime="20170825 16:19:17.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 16:19:19.028" starttime="20170825 16:19:19.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:19.033" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:19.033" starttime="20170825 16:19:19.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:19.034" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:19.034" starttime="20170825 16:19:19.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:19.035" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:19.035" starttime="20170825 16:19:19.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:19.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:19.035" starttime="20170825 16:19:19.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:19.214" starttime="20170825 16:19:19.036" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:19.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:19.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:19.215" starttime="20170825 16:19:19.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:19.215" starttime="20170825 16:19:19.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:19.216" starttime="20170825 16:19:19.216" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.216" starttime="20170825 16:19:19.032" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.216" starttime="20170825 16:19:19.031" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.216" starttime="20170825 16:19:19.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:19.217" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:19:19.217" starttime="20170825 16:19:19.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:19.219" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:19.219" starttime="20170825 16:19:19.218" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:19.220" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:19.220" starttime="20170825 16:19:19.220" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.220" starttime="20170825 16:19:19.219" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.220" starttime="20170825 16:19:19.218" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.220" starttime="20170825 16:19:19.217" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:19.282" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:19.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:19.282" starttime="20170825 16:19:19.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:19.284" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:19.284" starttime="20170825 16:19:19.283" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:19.285" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:19.285" starttime="20170825 16:19:19.285" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.285" starttime="20170825 16:19:19.284" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.285" starttime="20170825 16:19:19.283" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:19.285" starttime="20170825 16:19:19.283" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:19.286" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:19.286" starttime="20170825 16:19:19.286" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:19.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:19.286" starttime="20170825 16:19:19.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:19.287" starttime="20170825 16:19:19.286" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:19.287" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:19.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:19.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:19:19.287" starttime="20170825 16:19:19.287" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:19.288" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:19:19.288" starttime="20170825 16:19:19.030" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:19.288" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:19:19.288" starttime="20170825 16:19:19.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:19:19.289" level="FAIL">On != Off</msg>
<status endtime="20170825 16:19:19.289" starttime="20170825 16:19:19.288" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:19.289" starttime="20170825 16:19:19.029" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:19.289" starttime="20170825 16:19:19.029" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:29.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:29.294" starttime="20170825 16:19:29.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:29.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:29.295" starttime="20170825 16:19:29.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:29.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:29.296" starttime="20170825 16:19:29.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:29.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:29.296" starttime="20170825 16:19:29.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:29.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:29.492" starttime="20170825 16:19:29.297" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:29.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:29.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:29.492" starttime="20170825 16:19:29.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:29.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:29.493" starttime="20170825 16:19:29.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:29.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:29.494" starttime="20170825 16:19:29.493" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.494" starttime="20170825 16:19:29.293" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.494" starttime="20170825 16:19:29.293" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.494" starttime="20170825 16:19:29.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:29.495" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:19:29.495" starttime="20170825 16:19:29.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:29.497" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:29.497" starttime="20170825 16:19:29.496" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:29.498" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:29.498" starttime="20170825 16:19:29.498" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.499" starttime="20170825 16:19:29.497" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.499" starttime="20170825 16:19:29.496" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.499" starttime="20170825 16:19:29.495" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:29.573" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:29.573" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:29.573" starttime="20170825 16:19:29.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:29.575" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:29.575" starttime="20170825 16:19:29.575" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:29.576" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:29.576" starttime="20170825 16:19:29.576" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.576" starttime="20170825 16:19:29.575" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.577" starttime="20170825 16:19:29.574" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:29.577" starttime="20170825 16:19:29.574" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:29.577" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:29.577" starttime="20170825 16:19:29.577" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:29.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:29.578" starttime="20170825 16:19:29.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:29.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:29.579" starttime="20170825 16:19:29.578" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:29.579" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:29.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:29.580" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:19:29.580" starttime="20170825 16:19:29.579" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:29.580" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:19:29.580" starttime="20170825 16:19:29.291" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:29.581" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:19:29.581" starttime="20170825 16:19:29.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:19:29.582" level="FAIL">On != Off</msg>
<status endtime="20170825 16:19:29.582" starttime="20170825 16:19:29.581" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:29.582" starttime="20170825 16:19:29.290" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:29.582" starttime="20170825 16:19:29.289" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:39.587" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:39.588" starttime="20170825 16:19:39.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:39.588" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:39.588" starttime="20170825 16:19:39.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:39.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:39.589" starttime="20170825 16:19:39.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:39.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:39.590" starttime="20170825 16:19:39.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:39.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:39.770" starttime="20170825 16:19:39.591" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:39.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:39.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:39.771" starttime="20170825 16:19:39.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:39.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:39.771" starttime="20170825 16:19:39.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:39.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:39.772" starttime="20170825 16:19:39.772" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.772" starttime="20170825 16:19:39.586" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.772" starttime="20170825 16:19:39.586" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.772" starttime="20170825 16:19:39.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:39.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:19:39.773" starttime="20170825 16:19:39.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:39.775" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:39.775" starttime="20170825 16:19:39.774" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:39.776" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:39.776" starttime="20170825 16:19:39.776" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.776" starttime="20170825 16:19:39.775" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.776" starttime="20170825 16:19:39.774" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.776" starttime="20170825 16:19:39.773" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:39.850" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:39.850" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:39.850" starttime="20170825 16:19:39.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:39.851" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:39.851" starttime="20170825 16:19:39.851" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:39.852" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:39.852" starttime="20170825 16:19:39.852" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.852" starttime="20170825 16:19:39.852" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.853" starttime="20170825 16:19:39.850" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:39.853" starttime="20170825 16:19:39.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:39.853" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:39.853" starttime="20170825 16:19:39.853" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:39.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:39.853" starttime="20170825 16:19:39.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:39.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:39.854" starttime="20170825 16:19:39.854" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:39.854" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:39.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:39.855" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:19:39.855" starttime="20170825 16:19:39.854" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:39.855" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:19:39.855" starttime="20170825 16:19:39.584" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:39.855" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:19:39.855" starttime="20170825 16:19:39.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:19:39.856" level="FAIL">On != Off</msg>
<status endtime="20170825 16:19:39.856" starttime="20170825 16:19:39.856" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:39.856" starttime="20170825 16:19:39.583" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:39.856" starttime="20170825 16:19:39.583" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:19:49.862" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:19:49.862" starttime="20170825 16:19:49.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:19:49.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:19:49.863" starttime="20170825 16:19:49.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:19:49.863" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:19:49.863" starttime="20170825 16:19:49.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:19:49.864" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:19:49.864" starttime="20170825 16:19:49.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:19:50.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:19:50.051" starttime="20170825 16:19:49.864" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:50.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:19:50.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:50.052" starttime="20170825 16:19:49.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:19:50.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:50.052" starttime="20170825 16:19:50.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:50.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:50.053" starttime="20170825 16:19:50.053" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.053" starttime="20170825 16:19:49.861" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.053" starttime="20170825 16:19:49.860" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.053" starttime="20170825 16:19:49.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:19:50.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:19:50.054" starttime="20170825 16:19:50.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:50.056" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:50.056" starttime="20170825 16:19:50.055" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:50.057" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:19:50.057" starttime="20170825 16:19:50.057" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.057" starttime="20170825 16:19:50.057" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.058" starttime="20170825 16:19:50.055" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.058" starttime="20170825 16:19:50.054" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:19:50.121" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:19:50.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:50.121" starttime="20170825 16:19:50.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:19:50.123" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:50.123" starttime="20170825 16:19:50.122" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:19:50.124" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:19:50.124" starttime="20170825 16:19:50.124" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.124" starttime="20170825 16:19:50.123" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.124" starttime="20170825 16:19:50.122" status="PASS"></status>
</kw>
<status endtime="20170825 16:19:50.124" starttime="20170825 16:19:50.121" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:19:50.125" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:19:50.125" starttime="20170825 16:19:50.124" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:50.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:19:50.125" starttime="20170825 16:19:49.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:19:50.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:19:50.126" starttime="20170825 16:19:50.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:19:50.126" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:19:50.126" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:19:50.126" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:19:50.126" starttime="20170825 16:19:50.126" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:50.127" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:19:50.127" starttime="20170825 16:19:49.858" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:19:50.127" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:19:50.127" starttime="20170825 16:19:49.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:19:50.128" level="FAIL">On != Off</msg>
<status endtime="20170825 16:19:50.128" starttime="20170825 16:19:50.127" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:50.128" starttime="20170825 16:19:49.857" status="FAIL"></status>
</kw>
<status endtime="20170825 16:19:50.128" starttime="20170825 16:19:49.857" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:00.134" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:00.135" starttime="20170825 16:20:00.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:00.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:00.135" starttime="20170825 16:20:00.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:00.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:00.136" starttime="20170825 16:20:00.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:00.136" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:00.137" starttime="20170825 16:20:00.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:00.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:00.314" starttime="20170825 16:20:00.137" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:00.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:00.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:00.314" starttime="20170825 16:20:00.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:00.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:00.315" starttime="20170825 16:20:00.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:00.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:00.316" starttime="20170825 16:20:00.315" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.316" starttime="20170825 16:20:00.133" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.316" starttime="20170825 16:20:00.133" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.316" starttime="20170825 16:20:00.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:00.317" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:00.317" starttime="20170825 16:20:00.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:00.319" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:00.319" starttime="20170825 16:20:00.318" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:00.321" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:00.321" starttime="20170825 16:20:00.320" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.321" starttime="20170825 16:20:00.320" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.321" starttime="20170825 16:20:00.318" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.321" starttime="20170825 16:20:00.317" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:00.396" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:00.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:00.396" starttime="20170825 16:20:00.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:00.398" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:00.398" starttime="20170825 16:20:00.397" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:00.398" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:00.399" starttime="20170825 16:20:00.398" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.399" starttime="20170825 16:20:00.398" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.399" starttime="20170825 16:20:00.397" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:00.399" starttime="20170825 16:20:00.396" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:00.399" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:00.399" starttime="20170825 16:20:00.399" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:00.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:00.400" starttime="20170825 16:20:00.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:00.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:00.400" starttime="20170825 16:20:00.400" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:00.401" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:00.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:00.401" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:00.401" starttime="20170825 16:20:00.401" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:00.401" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:00.401" starttime="20170825 16:20:00.130" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:00.402" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:00.402" starttime="20170825 16:20:00.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:00.402" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:00.402" starttime="20170825 16:20:00.402" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:00.402" starttime="20170825 16:20:00.130" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:00.403" starttime="20170825 16:20:00.129" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:10.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:10.408" starttime="20170825 16:20:10.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:10.409" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:10.409" starttime="20170825 16:20:10.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:10.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:10.410" starttime="20170825 16:20:10.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:10.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:10.410" starttime="20170825 16:20:10.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:10.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:10.600" starttime="20170825 16:20:10.411" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:10.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:10.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:10.600" starttime="20170825 16:20:10.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:10.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:10.601" starttime="20170825 16:20:10.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:10.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:10.602" starttime="20170825 16:20:10.601" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.602" starttime="20170825 16:20:10.407" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.602" starttime="20170825 16:20:10.406" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.602" starttime="20170825 16:20:10.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:10.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:10.603" starttime="20170825 16:20:10.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:10.605" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:10.605" starttime="20170825 16:20:10.604" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:10.606" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:10.606" starttime="20170825 16:20:10.606" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.606" starttime="20170825 16:20:10.605" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.606" starttime="20170825 16:20:10.604" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.606" starttime="20170825 16:20:10.603" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:10.689" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:10.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:10.689" starttime="20170825 16:20:10.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:10.690" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:10.690" starttime="20170825 16:20:10.690" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:10.692" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:10.692" starttime="20170825 16:20:10.691" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.692" starttime="20170825 16:20:10.691" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.692" starttime="20170825 16:20:10.689" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:10.692" starttime="20170825 16:20:10.689" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:10.692" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:10.692" starttime="20170825 16:20:10.692" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:10.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:10.693" starttime="20170825 16:20:10.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:10.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:10.693" starttime="20170825 16:20:10.693" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:10.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:10.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:10.694" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:10.694" starttime="20170825 16:20:10.694" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:10.694" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:10.694" starttime="20170825 16:20:10.404" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:10.695" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:10.695" starttime="20170825 16:20:10.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:10.695" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:10.695" starttime="20170825 16:20:10.695" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:10.695" starttime="20170825 16:20:10.404" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:10.696" starttime="20170825 16:20:10.403" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:20.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:20.701" starttime="20170825 16:20:20.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:20.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:20.701" starttime="20170825 16:20:20.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:20.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:20.702" starttime="20170825 16:20:20.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:20.703" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:20.703" starttime="20170825 16:20:20.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:20.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:20.882" starttime="20170825 16:20:20.703" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:20.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:20.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:20.882" starttime="20170825 16:20:20.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:20.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:20.883" starttime="20170825 16:20:20.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:20.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:20.883" starttime="20170825 16:20:20.883" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.883" starttime="20170825 16:20:20.699" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.884" starttime="20170825 16:20:20.699" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.884" starttime="20170825 16:20:20.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:20.884" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:20.884" starttime="20170825 16:20:20.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:20.886" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:20.886" starttime="20170825 16:20:20.886" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:20.887" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:20.887" starttime="20170825 16:20:20.887" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.887" starttime="20170825 16:20:20.886" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.888" starttime="20170825 16:20:20.885" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.888" starttime="20170825 16:20:20.885" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:20.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:20.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:20.967" starttime="20170825 16:20:20.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:20.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:20.969" starttime="20170825 16:20:20.969" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:20.970" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:20.970" starttime="20170825 16:20:20.970" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.970" starttime="20170825 16:20:20.969" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.970" starttime="20170825 16:20:20.968" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:20.971" starttime="20170825 16:20:20.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:20.971" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:20.971" starttime="20170825 16:20:20.971" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:20.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:20.971" starttime="20170825 16:20:20.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:20.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:20.972" starttime="20170825 16:20:20.971" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:20.972" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:20.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:20.973" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:20.973" starttime="20170825 16:20:20.972" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:20.973" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:20.973" starttime="20170825 16:20:20.697" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:20.973" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:20.973" starttime="20170825 16:20:20.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:20.974" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:20.974" starttime="20170825 16:20:20.973" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:20.974" starttime="20170825 16:20:20.696" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:20.974" starttime="20170825 16:20:20.696" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:30.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:30.984" starttime="20170825 16:20:30.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:30.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:30.985" starttime="20170825 16:20:30.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:30.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:30.985" starttime="20170825 16:20:30.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:30.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:30.986" starttime="20170825 16:20:30.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:31.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:31.203" starttime="20170825 16:20:30.987" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:31.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:31.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:31.203" starttime="20170825 16:20:30.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:31.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:31.204" starttime="20170825 16:20:31.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:31.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:31.205" starttime="20170825 16:20:31.204" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.205" starttime="20170825 16:20:30.978" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.205" starttime="20170825 16:20:30.978" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.205" starttime="20170825 16:20:30.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:31.206" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:31.206" starttime="20170825 16:20:31.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:31.208" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:31.208" starttime="20170825 16:20:31.207" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:31.208" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:31.209" starttime="20170825 16:20:31.208" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.209" starttime="20170825 16:20:31.208" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.209" starttime="20170825 16:20:31.206" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.209" starttime="20170825 16:20:31.206" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:31.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:31.287" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:31.287" starttime="20170825 16:20:31.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:31.289" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:31.289" starttime="20170825 16:20:31.288" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:31.290" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:31.290" starttime="20170825 16:20:31.290" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.290" starttime="20170825 16:20:31.289" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.290" starttime="20170825 16:20:31.288" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:31.290" starttime="20170825 16:20:31.287" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:31.291" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:31.291" starttime="20170825 16:20:31.290" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:31.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:31.291" starttime="20170825 16:20:30.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:31.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:31.292" starttime="20170825 16:20:31.292" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:31.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:31.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:31.293" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:31.293" starttime="20170825 16:20:31.292" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:31.294" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:31.294" starttime="20170825 16:20:30.976" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:31.294" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:31.294" starttime="20170825 16:20:30.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:31.295" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:31.295" starttime="20170825 16:20:31.294" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:31.295" starttime="20170825 16:20:30.975" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:31.295" starttime="20170825 16:20:30.975" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:41.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:41.301" starttime="20170825 16:20:41.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:41.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:41.301" starttime="20170825 16:20:41.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:41.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:41.302" starttime="20170825 16:20:41.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:41.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:41.303" starttime="20170825 16:20:41.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:41.518" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:41.518" starttime="20170825 16:20:41.303" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:41.518" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:41.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:41.518" starttime="20170825 16:20:41.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:41.519" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:41.519" starttime="20170825 16:20:41.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:41.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:41.519" starttime="20170825 16:20:41.519" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.519" starttime="20170825 16:20:41.299" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.520" starttime="20170825 16:20:41.299" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.520" starttime="20170825 16:20:41.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:41.520" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:41.520" starttime="20170825 16:20:41.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:41.522" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:41.522" starttime="20170825 16:20:41.522" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:41.523" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:41.523" starttime="20170825 16:20:41.523" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.523" starttime="20170825 16:20:41.522" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.524" starttime="20170825 16:20:41.521" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.524" starttime="20170825 16:20:41.521" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:41.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:41.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:41.600" starttime="20170825 16:20:41.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:41.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:41.602" starttime="20170825 16:20:41.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:41.603" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:41.603" starttime="20170825 16:20:41.603" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.603" starttime="20170825 16:20:41.602" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.603" starttime="20170825 16:20:41.601" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:41.604" starttime="20170825 16:20:41.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:41.604" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:41.604" starttime="20170825 16:20:41.604" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:41.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:41.604" starttime="20170825 16:20:41.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:41.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:41.605" starttime="20170825 16:20:41.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:41.605" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:41.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:41.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:41.606" starttime="20170825 16:20:41.605" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:41.606" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:41.606" starttime="20170825 16:20:41.297" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:41.606" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:41.606" starttime="20170825 16:20:41.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:41.607" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:41.607" starttime="20170825 16:20:41.607" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:41.607" starttime="20170825 16:20:41.296" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:41.608" starttime="20170825 16:20:41.296" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:20:51.613" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:20:51.613" starttime="20170825 16:20:51.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:20:51.614" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:20:51.614" starttime="20170825 16:20:51.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:20:51.614" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:20:51.614" starttime="20170825 16:20:51.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:20:51.615" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:20:51.615" starttime="20170825 16:20:51.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:20:51.817" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:20:51.817" starttime="20170825 16:20:51.616" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:51.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:20:51.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:51.818" starttime="20170825 16:20:51.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:20:51.818" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:51.818" starttime="20170825 16:20:51.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:51.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:51.819" starttime="20170825 16:20:51.818" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.819" starttime="20170825 16:20:51.612" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.819" starttime="20170825 16:20:51.611" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.819" starttime="20170825 16:20:51.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:20:51.820" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:20:51.820" starttime="20170825 16:20:51.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:51.822" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:51.823" starttime="20170825 16:20:51.822" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:51.824" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:20:51.824" starttime="20170825 16:20:51.824" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.824" starttime="20170825 16:20:51.823" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.824" starttime="20170825 16:20:51.821" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.824" starttime="20170825 16:20:51.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:20:51.887" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:20:51.887" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:51.887" starttime="20170825 16:20:51.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:20:51.889" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:51.889" starttime="20170825 16:20:51.889" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:20:51.890" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:20:51.890" starttime="20170825 16:20:51.890" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.890" starttime="20170825 16:20:51.889" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.891" starttime="20170825 16:20:51.888" status="PASS"></status>
</kw>
<status endtime="20170825 16:20:51.891" starttime="20170825 16:20:51.888" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:20:51.891" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:20:51.891" starttime="20170825 16:20:51.891" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:51.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:20:51.891" starttime="20170825 16:20:51.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:20:51.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:20:51.892" starttime="20170825 16:20:51.892" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:20:51.893" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:20:51.893" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:20:51.893" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:20:51.893" starttime="20170825 16:20:51.892" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:51.893" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:20:51.894" starttime="20170825 16:20:51.609" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:20:51.894" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:20:51.894" starttime="20170825 16:20:51.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:20:51.895" level="FAIL">On != Off</msg>
<status endtime="20170825 16:20:51.895" starttime="20170825 16:20:51.894" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:51.895" starttime="20170825 16:20:51.609" status="FAIL"></status>
</kw>
<status endtime="20170825 16:20:51.895" starttime="20170825 16:20:51.608" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:01.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:01.901" starttime="20170825 16:21:01.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:01.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:01.901" starttime="20170825 16:21:01.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:01.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:01.902" starttime="20170825 16:21:01.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:01.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:01.902" starttime="20170825 16:21:01.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:02.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:02.091" starttime="20170825 16:21:01.903" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:02.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:02.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:02.091" starttime="20170825 16:21:01.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:02.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:02.092" starttime="20170825 16:21:02.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:02.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:02.092" starttime="20170825 16:21:02.092" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.092" starttime="20170825 16:21:01.899" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.093" starttime="20170825 16:21:01.899" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.093" starttime="20170825 16:21:01.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:02.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:02.093" starttime="20170825 16:21:02.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:02.095" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:02.095" starttime="20170825 16:21:02.095" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:02.096" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:02.096" starttime="20170825 16:21:02.096" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.096" starttime="20170825 16:21:02.095" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.097" starttime="20170825 16:21:02.094" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.097" starttime="20170825 16:21:02.093" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:02.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:02.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:02.161" starttime="20170825 16:21:02.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:02.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:02.163" starttime="20170825 16:21:02.163" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:02.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:02.164" starttime="20170825 16:21:02.164" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.165" starttime="20170825 16:21:02.163" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.165" starttime="20170825 16:21:02.162" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:02.165" starttime="20170825 16:21:02.162" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:02.165" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:02.165" starttime="20170825 16:21:02.165" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:02.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:02.165" starttime="20170825 16:21:01.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:02.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:02.166" starttime="20170825 16:21:02.166" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:02.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:02.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:02.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:02.167" starttime="20170825 16:21:02.166" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:02.167" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:02.167" starttime="20170825 16:21:01.897" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:02.167" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:02.167" starttime="20170825 16:21:01.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:02.168" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:02.168" starttime="20170825 16:21:02.168" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:02.168" starttime="20170825 16:21:01.896" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:02.168" starttime="20170825 16:21:01.896" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:12.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:12.174" starttime="20170825 16:21:12.173" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:12.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:12.175" starttime="20170825 16:21:12.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:12.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:12.175" starttime="20170825 16:21:12.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:12.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:12.176" starttime="20170825 16:21:12.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:12.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:12.443" starttime="20170825 16:21:12.177" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:12.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:12.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:12.443" starttime="20170825 16:21:12.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:12.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:12.444" starttime="20170825 16:21:12.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:12.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:12.445" starttime="20170825 16:21:12.444" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.445" starttime="20170825 16:21:12.172" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.445" starttime="20170825 16:21:12.172" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.445" starttime="20170825 16:21:12.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:12.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:12.446" starttime="20170825 16:21:12.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:12.448" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:12.448" starttime="20170825 16:21:12.447" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:12.449" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:12.449" starttime="20170825 16:21:12.448" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.449" starttime="20170825 16:21:12.448" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.449" starttime="20170825 16:21:12.446" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.449" starttime="20170825 16:21:12.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:12.517" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:12.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:12.517" starttime="20170825 16:21:12.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:12.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:12.519" starttime="20170825 16:21:12.519" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:12.520" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:12.520" starttime="20170825 16:21:12.520" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.521" starttime="20170825 16:21:12.519" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.521" starttime="20170825 16:21:12.518" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:12.521" starttime="20170825 16:21:12.518" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:12.521" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:12.521" starttime="20170825 16:21:12.521" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:12.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:12.521" starttime="20170825 16:21:12.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:12.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:12.522" starttime="20170825 16:21:12.522" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:12.523" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:12.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:12.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:12.523" starttime="20170825 16:21:12.522" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:12.523" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:12.523" starttime="20170825 16:21:12.170" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:12.524" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:12.524" starttime="20170825 16:21:12.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:12.525" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:12.525" starttime="20170825 16:21:12.524" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:12.525" starttime="20170825 16:21:12.169" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:12.525" starttime="20170825 16:21:12.169" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:22.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:22.530" starttime="20170825 16:21:22.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:22.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:22.531" starttime="20170825 16:21:22.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:22.532" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:22.532" starttime="20170825 16:21:22.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:22.532" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:22.532" starttime="20170825 16:21:22.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:22.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:22.709" starttime="20170825 16:21:22.533" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:22.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:22.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:22.709" starttime="20170825 16:21:22.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:22.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:22.711" starttime="20170825 16:21:22.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:22.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:22.712" starttime="20170825 16:21:22.712" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.712" starttime="20170825 16:21:22.529" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.712" starttime="20170825 16:21:22.529" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.712" starttime="20170825 16:21:22.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:22.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:22.713" starttime="20170825 16:21:22.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:22.715" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:22.715" starttime="20170825 16:21:22.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:22.716" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:22.716" starttime="20170825 16:21:22.716" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.716" starttime="20170825 16:21:22.715" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.716" starttime="20170825 16:21:22.714" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.716" starttime="20170825 16:21:22.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:22.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:22.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:22.779" starttime="20170825 16:21:22.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:22.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:22.780" starttime="20170825 16:21:22.780" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:22.781" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:22.781" starttime="20170825 16:21:22.781" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.781" starttime="20170825 16:21:22.780" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.781" starttime="20170825 16:21:22.779" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:22.781" starttime="20170825 16:21:22.779" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:22.782" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:22.782" starttime="20170825 16:21:22.782" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:22.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:22.782" starttime="20170825 16:21:22.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:22.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:22.783" starttime="20170825 16:21:22.782" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:22.783" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:22.783" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:22.784" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:22.784" starttime="20170825 16:21:22.783" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:22.784" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:22.784" starttime="20170825 16:21:22.527" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:22.784" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:22.784" starttime="20170825 16:21:22.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:22.785" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:22.785" starttime="20170825 16:21:22.784" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:22.785" starttime="20170825 16:21:22.526" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:22.785" starttime="20170825 16:21:22.526" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:32.790" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:32.791" starttime="20170825 16:21:32.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:32.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:32.791" starttime="20170825 16:21:32.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:32.792" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:32.792" starttime="20170825 16:21:32.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:32.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:32.793" starttime="20170825 16:21:32.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:32.980" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:32.980" starttime="20170825 16:21:32.793" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:32.981" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:32.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:32.981" starttime="20170825 16:21:32.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:32.981" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:32.981" starttime="20170825 16:21:32.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:32.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:32.982" starttime="20170825 16:21:32.982" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.982" starttime="20170825 16:21:32.789" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.982" starttime="20170825 16:21:32.789" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.982" starttime="20170825 16:21:32.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:32.983" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:32.983" starttime="20170825 16:21:32.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:32.985" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:32.985" starttime="20170825 16:21:32.984" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:32.986" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:32.986" starttime="20170825 16:21:32.986" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.986" starttime="20170825 16:21:32.985" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.986" starttime="20170825 16:21:32.984" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:32.986" starttime="20170825 16:21:32.983" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:33.079" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:33.079" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:33.079" starttime="20170825 16:21:32.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:33.081" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:33.081" starttime="20170825 16:21:33.081" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:33.082" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:33.082" starttime="20170825 16:21:33.082" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:33.083" starttime="20170825 16:21:33.081" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:33.083" starttime="20170825 16:21:33.080" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:33.083" starttime="20170825 16:21:33.080" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:33.083" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:33.083" starttime="20170825 16:21:33.083" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:33.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:33.083" starttime="20170825 16:21:32.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:33.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:33.084" starttime="20170825 16:21:33.084" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:33.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:33.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:33.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:33.085" starttime="20170825 16:21:33.084" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:33.085" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:33.085" starttime="20170825 16:21:32.787" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:33.085" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:33.085" starttime="20170825 16:21:32.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:33.086" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:33.086" starttime="20170825 16:21:33.086" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:33.086" starttime="20170825 16:21:32.786" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:33.086" starttime="20170825 16:21:32.786" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:43.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:43.093" starttime="20170825 16:21:43.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:43.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:43.094" starttime="20170825 16:21:43.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:43.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:43.095" starttime="20170825 16:21:43.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:43.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:43.096" starttime="20170825 16:21:43.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:43.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:43.277" starttime="20170825 16:21:43.097" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:43.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:43.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:43.277" starttime="20170825 16:21:43.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:43.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:43.278" starttime="20170825 16:21:43.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:43.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:43.278" starttime="20170825 16:21:43.278" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.279" starttime="20170825 16:21:43.092" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.279" starttime="20170825 16:21:43.091" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.279" starttime="20170825 16:21:43.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:43.279" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:43.279" starttime="20170825 16:21:43.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:43.282" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:43.282" starttime="20170825 16:21:43.281" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:43.283" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:43.283" starttime="20170825 16:21:43.283" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.283" starttime="20170825 16:21:43.282" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.283" starttime="20170825 16:21:43.281" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.283" starttime="20170825 16:21:43.280" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:43.373" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:43.373" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:43.373" starttime="20170825 16:21:43.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:43.375" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:43.375" starttime="20170825 16:21:43.375" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:43.376" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:43.376" starttime="20170825 16:21:43.376" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.376" starttime="20170825 16:21:43.375" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.376" starttime="20170825 16:21:43.374" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:43.376" starttime="20170825 16:21:43.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:43.377" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:43.377" starttime="20170825 16:21:43.377" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:43.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:43.377" starttime="20170825 16:21:43.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:43.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:43.378" starttime="20170825 16:21:43.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:43.378" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:43.378" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:43.378" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:43.378" starttime="20170825 16:21:43.378" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:43.379" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:43.379" starttime="20170825 16:21:43.088" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:43.379" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:43.379" starttime="20170825 16:21:43.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:43.380" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:43.380" starttime="20170825 16:21:43.379" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:43.380" starttime="20170825 16:21:43.087" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:43.380" starttime="20170825 16:21:43.087" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:21:53.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:21:53.390" starttime="20170825 16:21:53.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:21:53.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:21:53.391" starttime="20170825 16:21:53.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:21:53.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:21:53.391" starttime="20170825 16:21:53.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:21:53.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:21:53.392" starttime="20170825 16:21:53.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:21:53.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:21:53.611" starttime="20170825 16:21:53.393" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:53.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:21:53.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:53.611" starttime="20170825 16:21:53.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:21:53.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:53.612" starttime="20170825 16:21:53.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:53.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:53.614" starttime="20170825 16:21:53.612" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.614" starttime="20170825 16:21:53.384" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.614" starttime="20170825 16:21:53.384" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.614" starttime="20170825 16:21:53.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:21:53.615" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:21:53.615" starttime="20170825 16:21:53.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:53.617" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:53.617" starttime="20170825 16:21:53.616" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:53.618" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:21:53.618" starttime="20170825 16:21:53.618" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.618" starttime="20170825 16:21:53.617" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.619" starttime="20170825 16:21:53.615" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.619" starttime="20170825 16:21:53.615" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:21:53.684" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:21:53.684" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:53.684" starttime="20170825 16:21:53.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:21:53.685" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:53.685" starttime="20170825 16:21:53.685" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:21:53.730" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:21:53.730" starttime="20170825 16:21:53.730" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.731" starttime="20170825 16:21:53.686" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.731" starttime="20170825 16:21:53.684" status="PASS"></status>
</kw>
<status endtime="20170825 16:21:53.731" starttime="20170825 16:21:53.684" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:21:53.731" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:21:53.732" starttime="20170825 16:21:53.731" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:53.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:21:53.732" starttime="20170825 16:21:53.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:21:53.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:21:53.733" starttime="20170825 16:21:53.733" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:21:53.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:21:53.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:21:53.734" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:21:53.734" starttime="20170825 16:21:53.733" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:53.734" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:21:53.734" starttime="20170825 16:21:53.382" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:21:53.734" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:21:53.734" starttime="20170825 16:21:53.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:21:53.735" level="FAIL">On != Off</msg>
<status endtime="20170825 16:21:53.735" starttime="20170825 16:21:53.735" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:53.735" starttime="20170825 16:21:53.381" status="FAIL"></status>
</kw>
<status endtime="20170825 16:21:53.735" starttime="20170825 16:21:53.381" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:03.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:03.740" starttime="20170825 16:22:03.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:03.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:03.741" starttime="20170825 16:22:03.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:03.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:03.742" starttime="20170825 16:22:03.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:03.742" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:03.742" starttime="20170825 16:22:03.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:03.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:03.964" starttime="20170825 16:22:03.743" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:03.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:03.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:03.964" starttime="20170825 16:22:03.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:03.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:03.965" starttime="20170825 16:22:03.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:03.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:03.965" starttime="20170825 16:22:03.965" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.966" starttime="20170825 16:22:03.739" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.966" starttime="20170825 16:22:03.739" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.966" starttime="20170825 16:22:03.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:03.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:03.966" starttime="20170825 16:22:03.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:03.968" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:03.968" starttime="20170825 16:22:03.968" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:03.969" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:03.969" starttime="20170825 16:22:03.969" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.969" starttime="20170825 16:22:03.968" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.970" starttime="20170825 16:22:03.967" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:03.970" starttime="20170825 16:22:03.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:04.041" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:04.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:04.041" starttime="20170825 16:22:03.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:04.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:04.043" starttime="20170825 16:22:04.042" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:04.043" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:04.043" starttime="20170825 16:22:04.043" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:04.044" starttime="20170825 16:22:04.043" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:04.044" starttime="20170825 16:22:04.042" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:04.044" starttime="20170825 16:22:04.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:04.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:04.044" starttime="20170825 16:22:04.044" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:04.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:04.045" starttime="20170825 16:22:03.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:04.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:04.045" starttime="20170825 16:22:04.045" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:04.046" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:04.046" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:04.046" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:04.046" starttime="20170825 16:22:04.045" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:04.046" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:04.046" starttime="20170825 16:22:03.737" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:04.046" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:04.047" starttime="20170825 16:22:03.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:04.047" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:04.047" starttime="20170825 16:22:04.047" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:04.047" starttime="20170825 16:22:03.736" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:04.047" starttime="20170825 16:22:03.736" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:14.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:14.053" starttime="20170825 16:22:14.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:14.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:14.053" starttime="20170825 16:22:14.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:14.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:14.054" starttime="20170825 16:22:14.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:14.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:14.055" starttime="20170825 16:22:14.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:14.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:14.246" starttime="20170825 16:22:14.055" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:14.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:14.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:14.246" starttime="20170825 16:22:14.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:14.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:14.247" starttime="20170825 16:22:14.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:14.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:14.248" starttime="20170825 16:22:14.247" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.248" starttime="20170825 16:22:14.052" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.248" starttime="20170825 16:22:14.051" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.248" starttime="20170825 16:22:14.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:14.249" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:14.249" starttime="20170825 16:22:14.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:14.251" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:14.251" starttime="20170825 16:22:14.250" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:14.252" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:14.252" starttime="20170825 16:22:14.252" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.252" starttime="20170825 16:22:14.251" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.252" starttime="20170825 16:22:14.250" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.252" starttime="20170825 16:22:14.249" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:14.322" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:14.322" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:14.322" starttime="20170825 16:22:14.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:14.324" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:14.324" starttime="20170825 16:22:14.324" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:14.325" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:14.325" starttime="20170825 16:22:14.325" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.326" starttime="20170825 16:22:14.325" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.326" starttime="20170825 16:22:14.323" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:14.326" starttime="20170825 16:22:14.323" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:14.326" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:14.326" starttime="20170825 16:22:14.326" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:14.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:14.326" starttime="20170825 16:22:14.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:14.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:14.327" starttime="20170825 16:22:14.327" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:14.328" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:14.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:14.328" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:14.328" starttime="20170825 16:22:14.327" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:14.328" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:14.328" starttime="20170825 16:22:14.049" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:14.328" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:14.328" starttime="20170825 16:22:14.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:14.329" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:14.329" starttime="20170825 16:22:14.329" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:14.329" starttime="20170825 16:22:14.048" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:14.329" starttime="20170825 16:22:14.048" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:24.334" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:24.335" starttime="20170825 16:22:24.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:24.335" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:24.335" starttime="20170825 16:22:24.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:24.336" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:24.336" starttime="20170825 16:22:24.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:24.337" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:24.337" starttime="20170825 16:22:24.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:24.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:24.528" starttime="20170825 16:22:24.337" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:24.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:24.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:24.528" starttime="20170825 16:22:24.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:24.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:24.529" starttime="20170825 16:22:24.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:24.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:24.530" starttime="20170825 16:22:24.529" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.530" starttime="20170825 16:22:24.333" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.530" starttime="20170825 16:22:24.333" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.530" starttime="20170825 16:22:24.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:24.531" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:24.531" starttime="20170825 16:22:24.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:24.533" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:24.533" starttime="20170825 16:22:24.532" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:24.534" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:24.534" starttime="20170825 16:22:24.533" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.534" starttime="20170825 16:22:24.533" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.534" starttime="20170825 16:22:24.531" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.534" starttime="20170825 16:22:24.531" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:24.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:24.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:24.597" starttime="20170825 16:22:24.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:24.599" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:24.599" starttime="20170825 16:22:24.598" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:24.600" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:24.600" starttime="20170825 16:22:24.599" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.600" starttime="20170825 16:22:24.599" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.600" starttime="20170825 16:22:24.598" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:24.600" starttime="20170825 16:22:24.597" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:24.600" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:24.601" starttime="20170825 16:22:24.600" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:24.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:24.601" starttime="20170825 16:22:24.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:24.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:24.601" starttime="20170825 16:22:24.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:24.602" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:24.602" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:24.602" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:24.602" starttime="20170825 16:22:24.602" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:24.602" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:24.602" starttime="20170825 16:22:24.331" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:24.603" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:24.603" starttime="20170825 16:22:24.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:24.603" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:24.603" starttime="20170825 16:22:24.603" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:24.604" starttime="20170825 16:22:24.330" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:24.604" starttime="20170825 16:22:24.330" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:34.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:34.609" starttime="20170825 16:22:34.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:34.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:34.610" starttime="20170825 16:22:34.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:34.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:34.611" starttime="20170825 16:22:34.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:34.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:34.611" starttime="20170825 16:22:34.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:34.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:34.787" starttime="20170825 16:22:34.612" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:34.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:34.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:34.787" starttime="20170825 16:22:34.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:34.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:34.788" starttime="20170825 16:22:34.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:34.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:34.788" starttime="20170825 16:22:34.788" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.789" starttime="20170825 16:22:34.608" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.789" starttime="20170825 16:22:34.607" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.789" starttime="20170825 16:22:34.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:34.789" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:34.789" starttime="20170825 16:22:34.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:34.791" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:34.791" starttime="20170825 16:22:34.791" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:34.792" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:34.792" starttime="20170825 16:22:34.792" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.793" starttime="20170825 16:22:34.792" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.793" starttime="20170825 16:22:34.790" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.793" starttime="20170825 16:22:34.790" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:34.875" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:34.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:34.875" starttime="20170825 16:22:34.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:34.876" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:34.877" starttime="20170825 16:22:34.876" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:34.878" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:34.878" starttime="20170825 16:22:34.877" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.878" starttime="20170825 16:22:34.877" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.878" starttime="20170825 16:22:34.876" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:34.878" starttime="20170825 16:22:34.875" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:34.878" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:34.879" starttime="20170825 16:22:34.878" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:34.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:34.879" starttime="20170825 16:22:34.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:34.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:34.879" starttime="20170825 16:22:34.879" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:34.880" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:34.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:34.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:34.880" starttime="20170825 16:22:34.880" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:34.881" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:34.881" starttime="20170825 16:22:34.605" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:34.881" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:34.881" starttime="20170825 16:22:34.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:34.882" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:34.882" starttime="20170825 16:22:34.881" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:34.882" starttime="20170825 16:22:34.605" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:34.882" starttime="20170825 16:22:34.604" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:44.887" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:44.887" starttime="20170825 16:22:44.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:44.888" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:44.888" starttime="20170825 16:22:44.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:44.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:44.888" starttime="20170825 16:22:44.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:44.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:44.889" starttime="20170825 16:22:44.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:45.067" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:45.067" starttime="20170825 16:22:44.890" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:45.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:45.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:45.067" starttime="20170825 16:22:44.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:45.068" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:45.068" starttime="20170825 16:22:45.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:45.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:45.068" starttime="20170825 16:22:45.068" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.068" starttime="20170825 16:22:44.886" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.069" starttime="20170825 16:22:44.885" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.069" starttime="20170825 16:22:44.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:45.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:45.069" starttime="20170825 16:22:45.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:45.071" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:45.071" starttime="20170825 16:22:45.071" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:45.072" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:45.072" starttime="20170825 16:22:45.072" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.073" starttime="20170825 16:22:45.071" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.073" starttime="20170825 16:22:45.070" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.073" starttime="20170825 16:22:45.070" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:45.148" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:45.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:45.148" starttime="20170825 16:22:45.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:45.150" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:45.150" starttime="20170825 16:22:45.149" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:45.151" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:45.151" starttime="20170825 16:22:45.151" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.151" starttime="20170825 16:22:45.150" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.151" starttime="20170825 16:22:45.149" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:45.151" starttime="20170825 16:22:45.148" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:45.152" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:45.152" starttime="20170825 16:22:45.151" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:45.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:45.152" starttime="20170825 16:22:44.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:45.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:45.153" starttime="20170825 16:22:45.152" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:45.153" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:45.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:45.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:45.153" starttime="20170825 16:22:45.153" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:45.154" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:45.154" starttime="20170825 16:22:44.884" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:45.154" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:45.154" starttime="20170825 16:22:44.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:45.155" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:45.155" starttime="20170825 16:22:45.154" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:45.155" starttime="20170825 16:22:44.883" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:45.155" starttime="20170825 16:22:44.882" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:22:55.160" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:22:55.160" starttime="20170825 16:22:55.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:22:55.161" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:22:55.161" starttime="20170825 16:22:55.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:22:55.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:22:55.162" starttime="20170825 16:22:55.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:22:55.162" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:22:55.162" starttime="20170825 16:22:55.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:22:55.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:22:55.347" starttime="20170825 16:22:55.163" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:55.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:22:55.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:55.347" starttime="20170825 16:22:55.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:22:55.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:55.348" starttime="20170825 16:22:55.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:55.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:55.349" starttime="20170825 16:22:55.348" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.349" starttime="20170825 16:22:55.159" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.349" starttime="20170825 16:22:55.158" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.349" starttime="20170825 16:22:55.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:22:55.350" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:22:55.350" starttime="20170825 16:22:55.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:55.352" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:55.352" starttime="20170825 16:22:55.351" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:55.353" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:22:55.353" starttime="20170825 16:22:55.352" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.353" starttime="20170825 16:22:55.352" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.353" starttime="20170825 16:22:55.350" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.353" starttime="20170825 16:22:55.350" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:22:55.416" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:22:55.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:55.416" starttime="20170825 16:22:55.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:22:55.418" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:55.418" starttime="20170825 16:22:55.417" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:22:55.419" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:22:55.419" starttime="20170825 16:22:55.419" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.419" starttime="20170825 16:22:55.418" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.419" starttime="20170825 16:22:55.417" status="PASS"></status>
</kw>
<status endtime="20170825 16:22:55.419" starttime="20170825 16:22:55.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:22:55.420" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:22:55.420" starttime="20170825 16:22:55.419" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:55.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:22:55.420" starttime="20170825 16:22:55.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:22:55.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:22:55.421" starttime="20170825 16:22:55.420" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:22:55.421" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:22:55.421" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:22:55.421" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:22:55.421" starttime="20170825 16:22:55.421" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:55.422" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:22:55.422" starttime="20170825 16:22:55.156" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:22:55.422" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:22:55.422" starttime="20170825 16:22:55.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:22:55.423" level="FAIL">On != Off</msg>
<status endtime="20170825 16:22:55.423" starttime="20170825 16:22:55.422" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:55.423" starttime="20170825 16:22:55.156" status="FAIL"></status>
</kw>
<status endtime="20170825 16:22:55.423" starttime="20170825 16:22:55.155" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:05.428" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:05.428" starttime="20170825 16:23:05.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:05.429" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:05.429" starttime="20170825 16:23:05.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:05.429" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:05.429" starttime="20170825 16:23:05.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:05.430" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:05.430" starttime="20170825 16:23:05.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:05.610" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:05.610" starttime="20170825 16:23:05.431" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:05.610" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:05.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:05.610" starttime="20170825 16:23:05.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:05.611" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:05.611" starttime="20170825 16:23:05.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:05.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:05.612" starttime="20170825 16:23:05.611" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.612" starttime="20170825 16:23:05.427" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.612" starttime="20170825 16:23:05.426" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.612" starttime="20170825 16:23:05.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:05.613" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:05.613" starttime="20170825 16:23:05.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:05.615" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:05.615" starttime="20170825 16:23:05.614" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:05.616" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:05.616" starttime="20170825 16:23:05.615" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.616" starttime="20170825 16:23:05.615" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.616" starttime="20170825 16:23:05.613" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.616" starttime="20170825 16:23:05.613" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:05.678" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:05.679" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:05.679" starttime="20170825 16:23:05.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:05.680" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:05.680" starttime="20170825 16:23:05.680" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:05.681" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:05.681" starttime="20170825 16:23:05.681" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.682" starttime="20170825 16:23:05.681" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.682" starttime="20170825 16:23:05.679" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:05.682" starttime="20170825 16:23:05.679" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:05.682" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:05.682" starttime="20170825 16:23:05.682" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:05.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:05.682" starttime="20170825 16:23:05.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:05.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:05.683" starttime="20170825 16:23:05.683" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:05.684" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:05.684" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:05.684" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:05.684" starttime="20170825 16:23:05.683" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:05.684" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:05.684" starttime="20170825 16:23:05.425" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:05.684" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:05.684" starttime="20170825 16:23:05.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:05.685" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:05.685" starttime="20170825 16:23:05.685" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:05.685" starttime="20170825 16:23:05.424" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:05.685" starttime="20170825 16:23:05.423" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:15.691" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:15.691" starttime="20170825 16:23:15.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:15.692" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:15.692" starttime="20170825 16:23:15.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:15.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:15.692" starttime="20170825 16:23:15.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:15.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:15.693" starttime="20170825 16:23:15.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:15.874" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:15.874" starttime="20170825 16:23:15.694" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:15.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:15.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:15.875" starttime="20170825 16:23:15.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:15.875" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:15.875" starttime="20170825 16:23:15.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:15.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:15.876" starttime="20170825 16:23:15.876" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.876" starttime="20170825 16:23:15.689" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.876" starttime="20170825 16:23:15.689" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.876" starttime="20170825 16:23:15.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:15.877" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:15.877" starttime="20170825 16:23:15.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:15.879" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:15.879" starttime="20170825 16:23:15.878" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:15.880" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:15.880" starttime="20170825 16:23:15.880" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.880" starttime="20170825 16:23:15.879" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.880" starttime="20170825 16:23:15.878" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.880" starttime="20170825 16:23:15.877" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:15.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:15.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:15.943" starttime="20170825 16:23:15.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:15.945" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:15.945" starttime="20170825 16:23:15.945" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:15.950" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:15.950" starttime="20170825 16:23:15.950" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.950" starttime="20170825 16:23:15.945" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.950" starttime="20170825 16:23:15.944" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:15.950" starttime="20170825 16:23:15.944" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:15.951" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:15.951" starttime="20170825 16:23:15.951" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:15.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:15.951" starttime="20170825 16:23:15.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:15.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:15.952" starttime="20170825 16:23:15.951" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:15.952" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:15.952" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:15.952" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:15.953" starttime="20170825 16:23:15.952" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:15.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:15.953" starttime="20170825 16:23:15.687" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:15.953" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:15.953" starttime="20170825 16:23:15.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:15.954" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:15.954" starttime="20170825 16:23:15.953" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:15.954" starttime="20170825 16:23:15.686" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:15.954" starttime="20170825 16:23:15.686" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:25.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:25.959" starttime="20170825 16:23:25.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:25.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:25.960" starttime="20170825 16:23:25.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:25.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:25.961" starttime="20170825 16:23:25.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:25.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:25.961" starttime="20170825 16:23:25.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:26.172" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:26.172" starttime="20170825 16:23:25.962" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:26.172" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:26.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:26.172" starttime="20170825 16:23:25.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:26.173" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:26.173" starttime="20170825 16:23:26.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:26.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:26.173" starttime="20170825 16:23:26.173" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.174" starttime="20170825 16:23:25.958" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.174" starttime="20170825 16:23:25.958" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.174" starttime="20170825 16:23:25.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:26.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:26.174" starttime="20170825 16:23:26.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:26.176" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:26.176" starttime="20170825 16:23:26.176" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:26.177" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:26.177" starttime="20170825 16:23:26.177" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.178" starttime="20170825 16:23:26.177" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.178" starttime="20170825 16:23:26.175" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.178" starttime="20170825 16:23:26.175" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:26.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:26.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:26.243" starttime="20170825 16:23:26.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:26.245" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:26.245" starttime="20170825 16:23:26.244" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:26.246" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:26.246" starttime="20170825 16:23:26.246" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.246" starttime="20170825 16:23:26.245" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.246" starttime="20170825 16:23:26.244" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:26.246" starttime="20170825 16:23:26.243" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:26.247" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:26.247" starttime="20170825 16:23:26.247" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:26.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:26.247" starttime="20170825 16:23:25.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:26.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:26.248" starttime="20170825 16:23:26.248" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:26.249" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:26.249" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:26.249" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:26.249" starttime="20170825 16:23:26.249" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:26.250" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:26.250" starttime="20170825 16:23:25.956" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:26.250" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:26.250" starttime="20170825 16:23:25.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:26.251" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:26.251" starttime="20170825 16:23:26.250" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:26.251" starttime="20170825 16:23:25.955" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:26.251" starttime="20170825 16:23:25.954" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:36.256" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:36.257" starttime="20170825 16:23:36.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:36.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:36.257" starttime="20170825 16:23:36.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:36.258" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:36.258" starttime="20170825 16:23:36.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:36.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:36.259" starttime="20170825 16:23:36.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:36.455" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:36.456" starttime="20170825 16:23:36.259" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:36.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:36.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:36.456" starttime="20170825 16:23:36.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:36.456" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:36.456" starttime="20170825 16:23:36.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:36.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:36.457" starttime="20170825 16:23:36.457" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.457" starttime="20170825 16:23:36.255" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.457" starttime="20170825 16:23:36.255" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.457" starttime="20170825 16:23:36.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:36.458" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:36.458" starttime="20170825 16:23:36.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:36.460" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:36.460" starttime="20170825 16:23:36.459" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:36.461" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:36.461" starttime="20170825 16:23:36.461" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.461" starttime="20170825 16:23:36.460" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.461" starttime="20170825 16:23:36.459" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.461" starttime="20170825 16:23:36.458" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:36.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:36.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:36.541" starttime="20170825 16:23:36.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:36.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:36.543" starttime="20170825 16:23:36.542" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:36.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:36.544" starttime="20170825 16:23:36.543" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.544" starttime="20170825 16:23:36.543" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.544" starttime="20170825 16:23:36.542" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:36.544" starttime="20170825 16:23:36.541" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:36.545" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:36.545" starttime="20170825 16:23:36.545" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:36.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:36.545" starttime="20170825 16:23:36.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:36.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:36.546" starttime="20170825 16:23:36.545" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:36.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:36.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:36.547" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:36.547" starttime="20170825 16:23:36.546" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:36.547" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:36.547" starttime="20170825 16:23:36.253" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:36.547" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:36.547" starttime="20170825 16:23:36.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:36.548" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:36.548" starttime="20170825 16:23:36.547" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:36.548" starttime="20170825 16:23:36.252" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:36.548" starttime="20170825 16:23:36.252" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:46.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:46.553" starttime="20170825 16:23:46.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:46.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:46.554" starttime="20170825 16:23:46.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:46.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:46.554" starttime="20170825 16:23:46.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:46.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:46.555" starttime="20170825 16:23:46.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:46.775" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:46.775" starttime="20170825 16:23:46.556" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:46.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:46.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:46.775" starttime="20170825 16:23:46.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:46.776" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:46.776" starttime="20170825 16:23:46.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:46.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:46.777" starttime="20170825 16:23:46.776" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.777" starttime="20170825 16:23:46.552" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.777" starttime="20170825 16:23:46.552" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.777" starttime="20170825 16:23:46.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:46.778" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:46.778" starttime="20170825 16:23:46.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:46.781" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:46.781" starttime="20170825 16:23:46.780" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:46.782" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:46.782" starttime="20170825 16:23:46.782" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.783" starttime="20170825 16:23:46.781" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.783" starttime="20170825 16:23:46.779" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.783" starttime="20170825 16:23:46.778" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:46.846" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:46.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:46.846" starttime="20170825 16:23:46.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:46.848" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:46.848" starttime="20170825 16:23:46.847" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:46.849" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:46.849" starttime="20170825 16:23:46.848" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.849" starttime="20170825 16:23:46.848" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.849" starttime="20170825 16:23:46.847" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:46.849" starttime="20170825 16:23:46.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:46.849" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:46.849" starttime="20170825 16:23:46.849" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:46.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:46.850" starttime="20170825 16:23:46.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:46.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:46.850" starttime="20170825 16:23:46.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:46.851" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:46.851" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:46.851" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:46.851" starttime="20170825 16:23:46.851" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:46.851" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:46.852" starttime="20170825 16:23:46.550" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:46.852" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:46.852" starttime="20170825 16:23:46.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:46.852" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:46.853" starttime="20170825 16:23:46.852" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:46.853" starttime="20170825 16:23:46.549" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:46.853" starttime="20170825 16:23:46.549" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:23:56.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:23:56.858" starttime="20170825 16:23:56.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:23:56.859" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:23:56.859" starttime="20170825 16:23:56.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:23:56.859" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:23:56.859" starttime="20170825 16:23:56.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:23:56.860" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:23:56.860" starttime="20170825 16:23:56.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:23:57.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:23:57.094" starttime="20170825 16:23:56.861" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:57.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:23:57.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:57.094" starttime="20170825 16:23:56.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:23:57.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:57.094" starttime="20170825 16:23:57.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:57.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:57.095" starttime="20170825 16:23:57.095" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.095" starttime="20170825 16:23:56.857" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.095" starttime="20170825 16:23:56.856" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.096" starttime="20170825 16:23:56.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:23:57.096" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:23:57.096" starttime="20170825 16:23:57.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:57.099" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:57.099" starttime="20170825 16:23:57.098" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:57.100" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:23:57.100" starttime="20170825 16:23:57.099" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.100" starttime="20170825 16:23:57.099" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.100" starttime="20170825 16:23:57.097" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.100" starttime="20170825 16:23:57.097" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:23:57.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:23:57.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:57.174" starttime="20170825 16:23:57.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:23:57.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:57.176" starttime="20170825 16:23:57.176" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:23:57.177" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:23:57.178" starttime="20170825 16:23:57.177" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.178" starttime="20170825 16:23:57.176" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.178" starttime="20170825 16:23:57.175" status="PASS"></status>
</kw>
<status endtime="20170825 16:23:57.178" starttime="20170825 16:23:57.175" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:23:57.178" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:23:57.178" starttime="20170825 16:23:57.178" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:57.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:23:57.179" starttime="20170825 16:23:56.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:23:57.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:23:57.179" starttime="20170825 16:23:57.179" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:23:57.180" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:23:57.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:23:57.180" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:23:57.180" starttime="20170825 16:23:57.179" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:57.180" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:23:57.180" starttime="20170825 16:23:56.854" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:23:57.181" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:23:57.181" starttime="20170825 16:23:56.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:23:57.181" level="FAIL">On != Off</msg>
<status endtime="20170825 16:23:57.181" starttime="20170825 16:23:57.181" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:57.181" starttime="20170825 16:23:56.854" status="FAIL"></status>
</kw>
<status endtime="20170825 16:23:57.182" starttime="20170825 16:23:56.853" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:07.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:07.187" starttime="20170825 16:24:07.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:07.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:07.187" starttime="20170825 16:24:07.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:07.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:07.188" starttime="20170825 16:24:07.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:07.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:07.189" starttime="20170825 16:24:07.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:07.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:07.412" starttime="20170825 16:24:07.189" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:07.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:07.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:07.413" starttime="20170825 16:24:07.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:07.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:07.413" starttime="20170825 16:24:07.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:07.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:07.414" starttime="20170825 16:24:07.414" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.414" starttime="20170825 16:24:07.185" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.414" starttime="20170825 16:24:07.185" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.414" starttime="20170825 16:24:07.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:07.415" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:07.415" starttime="20170825 16:24:07.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:07.418" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:07.418" starttime="20170825 16:24:07.416" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:07.419" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:07.419" starttime="20170825 16:24:07.418" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.419" starttime="20170825 16:24:07.418" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.419" starttime="20170825 16:24:07.416" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.420" starttime="20170825 16:24:07.415" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:07.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:07.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:07.510" starttime="20170825 16:24:07.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:07.512" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:07.512" starttime="20170825 16:24:07.511" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:07.513" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:07.513" starttime="20170825 16:24:07.513" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.513" starttime="20170825 16:24:07.512" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.513" starttime="20170825 16:24:07.511" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:07.514" starttime="20170825 16:24:07.510" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:07.514" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:07.514" starttime="20170825 16:24:07.514" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:07.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:07.514" starttime="20170825 16:24:07.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:07.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:07.515" starttime="20170825 16:24:07.514" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:07.515" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:07.515" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:07.516" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:07.516" starttime="20170825 16:24:07.515" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:07.516" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:07.516" starttime="20170825 16:24:07.183" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:07.516" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:07.516" starttime="20170825 16:24:07.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:07.517" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:07.517" starttime="20170825 16:24:07.516" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:07.517" starttime="20170825 16:24:07.183" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:07.517" starttime="20170825 16:24:07.182" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:17.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:17.523" starttime="20170825 16:24:17.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:17.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:17.523" starttime="20170825 16:24:17.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:17.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:17.524" starttime="20170825 16:24:17.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:17.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:17.524" starttime="20170825 16:24:17.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:17.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:17.747" starttime="20170825 16:24:17.525" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:17.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:17.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:17.747" starttime="20170825 16:24:17.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:17.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:17.748" starttime="20170825 16:24:17.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:17.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:17.749" starttime="20170825 16:24:17.748" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.749" starttime="20170825 16:24:17.521" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.749" starttime="20170825 16:24:17.521" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.749" starttime="20170825 16:24:17.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:17.750" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:17.750" starttime="20170825 16:24:17.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:17.752" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:17.752" starttime="20170825 16:24:17.751" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:17.753" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:17.753" starttime="20170825 16:24:17.753" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.753" starttime="20170825 16:24:17.752" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.753" starttime="20170825 16:24:17.750" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.753" starttime="20170825 16:24:17.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:17.827" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:17.827" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:17.827" starttime="20170825 16:24:17.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:17.829" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:17.829" starttime="20170825 16:24:17.828" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:17.830" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:17.830" starttime="20170825 16:24:17.829" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.830" starttime="20170825 16:24:17.829" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.830" starttime="20170825 16:24:17.828" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:17.830" starttime="20170825 16:24:17.827" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:17.831" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:17.831" starttime="20170825 16:24:17.831" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:17.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:17.831" starttime="20170825 16:24:17.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:17.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:17.832" starttime="20170825 16:24:17.831" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:17.832" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:17.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:17.832" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:17.832" starttime="20170825 16:24:17.832" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:17.833" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:17.833" starttime="20170825 16:24:17.519" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:17.833" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:17.833" starttime="20170825 16:24:17.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:17.834" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:17.834" starttime="20170825 16:24:17.833" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:17.834" starttime="20170825 16:24:17.518" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:17.834" starttime="20170825 16:24:17.518" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:27.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:27.839" starttime="20170825 16:24:27.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:27.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:27.840" starttime="20170825 16:24:27.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:27.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:27.841" starttime="20170825 16:24:27.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:27.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:27.841" starttime="20170825 16:24:27.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:28.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:28.066" starttime="20170825 16:24:27.842" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:28.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:28.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:28.066" starttime="20170825 16:24:27.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:28.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:28.067" starttime="20170825 16:24:28.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:28.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:28.067" starttime="20170825 16:24:28.067" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.067" starttime="20170825 16:24:27.838" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.068" starttime="20170825 16:24:27.837" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.068" starttime="20170825 16:24:27.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:28.068" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:28.068" starttime="20170825 16:24:28.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:28.070" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:28.070" starttime="20170825 16:24:28.070" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:28.071" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:28.071" starttime="20170825 16:24:28.071" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.071" starttime="20170825 16:24:28.070" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.071" starttime="20170825 16:24:28.069" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.072" starttime="20170825 16:24:28.069" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:28.146" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:28.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:28.146" starttime="20170825 16:24:28.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:28.148" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:28.148" starttime="20170825 16:24:28.148" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:28.149" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:28.149" starttime="20170825 16:24:28.149" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.149" starttime="20170825 16:24:28.148" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.149" starttime="20170825 16:24:28.147" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:28.149" starttime="20170825 16:24:28.147" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:28.150" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:28.150" starttime="20170825 16:24:28.150" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:28.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:28.150" starttime="20170825 16:24:27.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:28.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:28.151" starttime="20170825 16:24:28.151" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:28.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:28.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:28.152" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:28.152" starttime="20170825 16:24:28.151" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:28.152" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:28.152" starttime="20170825 16:24:27.836" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:28.152" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:28.152" starttime="20170825 16:24:27.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:28.153" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:28.153" starttime="20170825 16:24:28.153" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:28.153" starttime="20170825 16:24:27.835" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:28.153" starttime="20170825 16:24:27.834" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:38.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:38.159" starttime="20170825 16:24:38.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:38.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:38.159" starttime="20170825 16:24:38.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:38.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:38.160" starttime="20170825 16:24:38.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:38.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:38.161" starttime="20170825 16:24:38.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:38.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:38.372" starttime="20170825 16:24:38.161" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:38.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:38.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:38.372" starttime="20170825 16:24:38.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:38.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:38.373" starttime="20170825 16:24:38.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:38.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:38.374" starttime="20170825 16:24:38.373" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.374" starttime="20170825 16:24:38.157" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.374" starttime="20170825 16:24:38.157" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.374" starttime="20170825 16:24:38.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:38.375" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:38.375" starttime="20170825 16:24:38.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:38.377" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:38.377" starttime="20170825 16:24:38.376" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:38.378" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:38.378" starttime="20170825 16:24:38.377" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.378" starttime="20170825 16:24:38.377" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.378" starttime="20170825 16:24:38.375" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.378" starttime="20170825 16:24:38.375" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:38.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:38.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:38.466" starttime="20170825 16:24:38.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:38.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:38.467" starttime="20170825 16:24:38.467" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:38.472" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:38.472" starttime="20170825 16:24:38.472" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.472" starttime="20170825 16:24:38.467" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.473" starttime="20170825 16:24:38.466" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:38.473" starttime="20170825 16:24:38.466" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:38.473" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:38.473" starttime="20170825 16:24:38.473" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:38.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:38.473" starttime="20170825 16:24:38.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:38.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:38.474" starttime="20170825 16:24:38.474" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:38.475" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:38.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:38.475" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:38.475" starttime="20170825 16:24:38.474" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:38.475" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:38.475" starttime="20170825 16:24:38.155" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:38.475" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:38.475" starttime="20170825 16:24:38.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:38.477" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:38.477" starttime="20170825 16:24:38.476" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:38.477" starttime="20170825 16:24:38.154" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:38.477" starttime="20170825 16:24:38.154" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:48.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:48.482" starttime="20170825 16:24:48.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:48.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:48.482" starttime="20170825 16:24:48.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:48.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:48.483" starttime="20170825 16:24:48.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:48.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:48.484" starttime="20170825 16:24:48.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:48.664" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:48.665" starttime="20170825 16:24:48.484" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:48.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:48.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:48.665" starttime="20170825 16:24:48.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:48.665" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:48.665" starttime="20170825 16:24:48.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:48.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:48.666" starttime="20170825 16:24:48.666" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.666" starttime="20170825 16:24:48.481" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.666" starttime="20170825 16:24:48.480" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.667" starttime="20170825 16:24:48.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:48.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:48.668" starttime="20170825 16:24:48.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:48.671" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:48.671" starttime="20170825 16:24:48.670" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:48.672" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:48.672" starttime="20170825 16:24:48.672" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.672" starttime="20170825 16:24:48.671" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.672" starttime="20170825 16:24:48.669" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.672" starttime="20170825 16:24:48.668" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:48.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:48.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:48.736" starttime="20170825 16:24:48.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:48.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:48.738" starttime="20170825 16:24:48.737" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:48.739" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:48.739" starttime="20170825 16:24:48.739" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.739" starttime="20170825 16:24:48.738" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.739" starttime="20170825 16:24:48.737" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:48.739" starttime="20170825 16:24:48.737" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:48.740" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:48.740" starttime="20170825 16:24:48.740" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:48.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:48.740" starttime="20170825 16:24:48.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:48.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:48.741" starttime="20170825 16:24:48.740" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:48.741" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:48.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:48.741" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:48.741" starttime="20170825 16:24:48.741" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:48.742" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:48.742" starttime="20170825 16:24:48.478" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:48.742" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:48.742" starttime="20170825 16:24:48.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:48.743" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:48.743" starttime="20170825 16:24:48.742" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:48.743" starttime="20170825 16:24:48.478" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:48.743" starttime="20170825 16:24:48.477" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:24:58.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:24:58.748" starttime="20170825 16:24:58.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:24:58.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:24:58.749" starttime="20170825 16:24:58.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:24:58.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:24:58.750" starttime="20170825 16:24:58.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:24:58.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:24:58.750" starttime="20170825 16:24:58.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:24:58.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:24:58.927" starttime="20170825 16:24:58.751" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:58.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:24:58.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:58.927" starttime="20170825 16:24:58.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:24:58.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:58.928" starttime="20170825 16:24:58.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:58.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:58.929" starttime="20170825 16:24:58.928" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.929" starttime="20170825 16:24:58.747" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.929" starttime="20170825 16:24:58.746" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.929" starttime="20170825 16:24:58.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:24:58.929" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:24:58.929" starttime="20170825 16:24:58.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:58.931" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:58.931" starttime="20170825 16:24:58.931" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:58.932" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:24:58.932" starttime="20170825 16:24:58.932" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.933" starttime="20170825 16:24:58.932" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.933" starttime="20170825 16:24:58.930" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:58.933" starttime="20170825 16:24:58.930" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:24:59.014" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:24:59.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:59.014" starttime="20170825 16:24:58.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:24:59.016" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:59.016" starttime="20170825 16:24:59.016" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:24:59.017" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:24:59.017" starttime="20170825 16:24:59.017" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:59.018" starttime="20170825 16:24:59.016" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:59.018" starttime="20170825 16:24:59.015" status="PASS"></status>
</kw>
<status endtime="20170825 16:24:59.018" starttime="20170825 16:24:59.015" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:24:59.018" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:24:59.018" starttime="20170825 16:24:59.018" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:59.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:24:59.018" starttime="20170825 16:24:58.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:24:59.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:24:59.019" starttime="20170825 16:24:59.019" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:24:59.020" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:24:59.020" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:24:59.020" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:24:59.020" starttime="20170825 16:24:59.019" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:59.020" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:24:59.020" starttime="20170825 16:24:58.745" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:24:59.020" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:24:59.020" starttime="20170825 16:24:58.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:24:59.021" level="FAIL">On != Off</msg>
<status endtime="20170825 16:24:59.021" starttime="20170825 16:24:59.021" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:59.021" starttime="20170825 16:24:58.744" status="FAIL"></status>
</kw>
<status endtime="20170825 16:24:59.021" starttime="20170825 16:24:58.743" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:25:09.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:25:09.027" starttime="20170825 16:25:09.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:25:09.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:25:09.027" starttime="20170825 16:25:09.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:25:09.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:25:09.028" starttime="20170825 16:25:09.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:25:09.028" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:25:09.029" starttime="20170825 16:25:09.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:25:09.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:25:09.206" starttime="20170825 16:25:09.029" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:09.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:25:09.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:09.206" starttime="20170825 16:25:09.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:25:09.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:09.207" starttime="20170825 16:25:09.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:09.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:09.208" starttime="20170825 16:25:09.207" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.208" starttime="20170825 16:25:09.025" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.208" starttime="20170825 16:25:09.025" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.208" starttime="20170825 16:25:09.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:25:09.209" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:25:09.209" starttime="20170825 16:25:09.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:09.211" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:09.211" starttime="20170825 16:25:09.210" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:09.212" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:09.212" starttime="20170825 16:25:09.211" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.212" starttime="20170825 16:25:09.211" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.212" starttime="20170825 16:25:09.210" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.213" starttime="20170825 16:25:09.209" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:25:09.275" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:25:09.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:09.275" starttime="20170825 16:25:09.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:09.277" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:09.277" starttime="20170825 16:25:09.276" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:09.278" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:09.278" starttime="20170825 16:25:09.277" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.278" starttime="20170825 16:25:09.277" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.278" starttime="20170825 16:25:09.276" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:09.278" starttime="20170825 16:25:09.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:25:09.278" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:25:09.279" starttime="20170825 16:25:09.278" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:09.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:09.279" starttime="20170825 16:25:09.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:09.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:09.279" starttime="20170825 16:25:09.279" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:25:09.280" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:25:09.280" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:25:09.280" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:25:09.280" starttime="20170825 16:25:09.280" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:09.280" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:25:09.280" starttime="20170825 16:25:09.023" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:09.281" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:25:09.281" starttime="20170825 16:25:09.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:25:09.281" level="FAIL">On != Off</msg>
<status endtime="20170825 16:25:09.281" starttime="20170825 16:25:09.281" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:09.282" starttime="20170825 16:25:09.022" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:09.282" starttime="20170825 16:25:09.022" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:25:19.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:25:19.287" starttime="20170825 16:25:19.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:25:19.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:25:19.288" starttime="20170825 16:25:19.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:25:19.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:25:19.288" starttime="20170825 16:25:19.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:25:19.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:25:19.289" starttime="20170825 16:25:19.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:25:19.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:25:19.506" starttime="20170825 16:25:19.290" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:19.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:25:19.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:19.506" starttime="20170825 16:25:19.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:25:19.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:19.507" starttime="20170825 16:25:19.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:19.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:19.508" starttime="20170825 16:25:19.507" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.508" starttime="20170825 16:25:19.286" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.508" starttime="20170825 16:25:19.285" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.508" starttime="20170825 16:25:19.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:25:19.509" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:25:19.509" starttime="20170825 16:25:19.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:19.512" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:19.512" starttime="20170825 16:25:19.511" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:19.513" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:19.513" starttime="20170825 16:25:19.513" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.513" starttime="20170825 16:25:19.512" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.514" starttime="20170825 16:25:19.510" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.514" starttime="20170825 16:25:19.509" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:25:19.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:25:19.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:19.577" starttime="20170825 16:25:19.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:19.579" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:19.579" starttime="20170825 16:25:19.579" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:19.580" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:19.580" starttime="20170825 16:25:19.580" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.581" starttime="20170825 16:25:19.579" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.581" starttime="20170825 16:25:19.578" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:19.581" starttime="20170825 16:25:19.578" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:25:19.581" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:25:19.581" starttime="20170825 16:25:19.581" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:19.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:19.581" starttime="20170825 16:25:19.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:19.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:19.582" starttime="20170825 16:25:19.582" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:25:19.583" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:25:19.583" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:25:19.583" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:25:19.583" starttime="20170825 16:25:19.582" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:19.583" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:25:19.583" starttime="20170825 16:25:19.283" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:19.583" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:25:19.583" starttime="20170825 16:25:19.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:25:19.584" level="FAIL">On != Off</msg>
<status endtime="20170825 16:25:19.584" starttime="20170825 16:25:19.584" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:19.584" starttime="20170825 16:25:19.283" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:19.584" starttime="20170825 16:25:19.282" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:25:29.589" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:25:29.589" starttime="20170825 16:25:29.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:25:29.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:25:29.590" starttime="20170825 16:25:29.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:25:29.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:25:29.591" starttime="20170825 16:25:29.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:25:29.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:25:29.591" starttime="20170825 16:25:29.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:25:29.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:25:29.785" starttime="20170825 16:25:29.592" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:29.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:25:29.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:29.785" starttime="20170825 16:25:29.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:25:29.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:29.786" starttime="20170825 16:25:29.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:29.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:29.787" starttime="20170825 16:25:29.786" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.787" starttime="20170825 16:25:29.588" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.787" starttime="20170825 16:25:29.588" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.787" starttime="20170825 16:25:29.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:25:29.788" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:25:29.788" starttime="20170825 16:25:29.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:29.790" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:29.790" starttime="20170825 16:25:29.789" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:29.790" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:29.791" starttime="20170825 16:25:29.790" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.791" starttime="20170825 16:25:29.790" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.791" starttime="20170825 16:25:29.788" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.791" starttime="20170825 16:25:29.788" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:25:29.853" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:25:29.853" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:29.854" starttime="20170825 16:25:29.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:29.855" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:29.855" starttime="20170825 16:25:29.855" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:29.856" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:29.856" starttime="20170825 16:25:29.856" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.856" starttime="20170825 16:25:29.855" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.856" starttime="20170825 16:25:29.854" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:29.857" starttime="20170825 16:25:29.854" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:25:29.857" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:25:29.857" starttime="20170825 16:25:29.857" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:29.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:29.857" starttime="20170825 16:25:29.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:29.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:29.858" starttime="20170825 16:25:29.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:25:29.858" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:25:29.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:25:29.859" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:25:29.859" starttime="20170825 16:25:29.858" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:29.859" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:25:29.859" starttime="20170825 16:25:29.586" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:29.859" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:25:29.859" starttime="20170825 16:25:29.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:25:29.860" level="FAIL">On != Off</msg>
<status endtime="20170825 16:25:29.860" starttime="20170825 16:25:29.860" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:29.860" starttime="20170825 16:25:29.585" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:29.860" starttime="20170825 16:25:29.585" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:25:39.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:25:39.866" starttime="20170825 16:25:39.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:25:39.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:25:39.866" starttime="20170825 16:25:39.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:25:39.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:25:39.867" starttime="20170825 16:25:39.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:25:39.868" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:25:39.868" starttime="20170825 16:25:39.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:25:40.069" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:25:40.069" starttime="20170825 16:25:39.868" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:40.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:25:40.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:40.069" starttime="20170825 16:25:39.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:25:40.070" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:40.070" starttime="20170825 16:25:40.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:40.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:40.071" starttime="20170825 16:25:40.070" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.071" starttime="20170825 16:25:39.864" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.071" starttime="20170825 16:25:39.864" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.071" starttime="20170825 16:25:39.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:25:40.071" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:25:40.072" starttime="20170825 16:25:40.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:40.074" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:40.074" starttime="20170825 16:25:40.073" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:40.075" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:40.075" starttime="20170825 16:25:40.074" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.075" starttime="20170825 16:25:40.074" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.075" starttime="20170825 16:25:40.072" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.075" starttime="20170825 16:25:40.072" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:25:40.150" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:25:40.150" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:40.150" starttime="20170825 16:25:40.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:40.151" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:40.151" starttime="20170825 16:25:40.151" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:40.153" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:40.153" starttime="20170825 16:25:40.152" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.153" starttime="20170825 16:25:40.152" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.153" starttime="20170825 16:25:40.150" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:40.153" starttime="20170825 16:25:40.150" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:25:40.153" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:25:40.153" starttime="20170825 16:25:40.153" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:40.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:40.154" starttime="20170825 16:25:39.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:40.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:40.154" starttime="20170825 16:25:40.154" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:25:40.155" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:25:40.155" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:25:40.155" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:25:40.155" starttime="20170825 16:25:40.155" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:40.155" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:25:40.155" starttime="20170825 16:25:39.862" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:40.156" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:25:40.156" starttime="20170825 16:25:39.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:25:40.156" level="FAIL">On != Off</msg>
<status endtime="20170825 16:25:40.156" starttime="20170825 16:25:40.156" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:40.157" starttime="20170825 16:25:39.861" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:40.157" starttime="20170825 16:25:39.861" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:25:50.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:25:50.162" starttime="20170825 16:25:50.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:25:50.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:25:50.162" starttime="20170825 16:25:50.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:25:50.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:25:50.163" starttime="20170825 16:25:50.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:25:50.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:25:50.164" starttime="20170825 16:25:50.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:25:50.340" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:25:50.340" starttime="20170825 16:25:50.165" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:50.340" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:25:50.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:50.340" starttime="20170825 16:25:50.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:25:50.341" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:50.341" starttime="20170825 16:25:50.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:50.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:50.341" starttime="20170825 16:25:50.341" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.342" starttime="20170825 16:25:50.161" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.342" starttime="20170825 16:25:50.160" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.342" starttime="20170825 16:25:50.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:25:50.342" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:25:50.342" starttime="20170825 16:25:50.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:50.344" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:50.344" starttime="20170825 16:25:50.344" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:50.345" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:25:50.345" starttime="20170825 16:25:50.345" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.345" starttime="20170825 16:25:50.344" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.346" starttime="20170825 16:25:50.343" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.346" starttime="20170825 16:25:50.343" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:25:50.440" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:25:50.441" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:50.441" starttime="20170825 16:25:50.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:25:50.442" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:50.442" starttime="20170825 16:25:50.442" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:25:50.443" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:25:50.443" starttime="20170825 16:25:50.443" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.443" starttime="20170825 16:25:50.442" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.443" starttime="20170825 16:25:50.441" status="PASS"></status>
</kw>
<status endtime="20170825 16:25:50.443" starttime="20170825 16:25:50.441" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:25:50.444" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:25:50.444" starttime="20170825 16:25:50.444" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:50.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:25:50.444" starttime="20170825 16:25:50.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:25:50.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:25:50.445" starttime="20170825 16:25:50.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:25:50.445" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:25:50.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:25:50.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:25:50.446" starttime="20170825 16:25:50.445" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:50.446" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:25:50.446" starttime="20170825 16:25:50.158" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:25:50.446" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:25:50.446" starttime="20170825 16:25:50.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:25:50.447" level="FAIL">On != Off</msg>
<status endtime="20170825 16:25:50.447" starttime="20170825 16:25:50.447" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:50.447" starttime="20170825 16:25:50.158" status="FAIL"></status>
</kw>
<status endtime="20170825 16:25:50.447" starttime="20170825 16:25:50.157" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:00.452" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:00.453" starttime="20170825 16:26:00.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:00.453" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:00.453" starttime="20170825 16:26:00.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:00.454" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:00.454" starttime="20170825 16:26:00.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:00.455" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:00.455" starttime="20170825 16:26:00.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:00.662" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:00.662" starttime="20170825 16:26:00.455" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:00.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:00.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:00.662" starttime="20170825 16:26:00.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:00.663" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:00.663" starttime="20170825 16:26:00.662" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:00.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:00.663" starttime="20170825 16:26:00.663" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.664" starttime="20170825 16:26:00.451" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.664" starttime="20170825 16:26:00.451" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.664" starttime="20170825 16:26:00.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:00.664" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:00.665" starttime="20170825 16:26:00.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:00.667" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:00.667" starttime="20170825 16:26:00.666" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:00.667" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:00.668" starttime="20170825 16:26:00.667" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.668" starttime="20170825 16:26:00.667" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.668" starttime="20170825 16:26:00.665" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.668" starttime="20170825 16:26:00.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:00.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:00.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:00.737" starttime="20170825 16:26:00.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:00.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:00.738" starttime="20170825 16:26:00.738" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:00.742" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:00.742" starttime="20170825 16:26:00.741" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.742" starttime="20170825 16:26:00.738" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.742" starttime="20170825 16:26:00.737" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:00.742" starttime="20170825 16:26:00.737" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:00.742" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:00.743" starttime="20170825 16:26:00.742" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:00.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:00.743" starttime="20170825 16:26:00.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:00.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:00.743" starttime="20170825 16:26:00.743" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:00.744" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:00.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:00.744" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:00.744" starttime="20170825 16:26:00.744" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:00.745" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:00.745" starttime="20170825 16:26:00.449" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:00.745" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:00.745" starttime="20170825 16:26:00.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:00.745" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:00.746" starttime="20170825 16:26:00.745" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:00.746" starttime="20170825 16:26:00.448" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:00.746" starttime="20170825 16:26:00.448" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:10.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:10.751" starttime="20170825 16:26:10.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:10.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:10.751" starttime="20170825 16:26:10.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:10.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:10.752" starttime="20170825 16:26:10.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:10.753" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:10.753" starttime="20170825 16:26:10.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:10.971" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:10.971" starttime="20170825 16:26:10.753" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:10.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:10.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:10.971" starttime="20170825 16:26:10.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:10.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:10.972" starttime="20170825 16:26:10.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:10.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:10.972" starttime="20170825 16:26:10.972" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.973" starttime="20170825 16:26:10.750" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.973" starttime="20170825 16:26:10.749" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.973" starttime="20170825 16:26:10.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:10.973" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:10.973" starttime="20170825 16:26:10.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:10.975" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:10.975" starttime="20170825 16:26:10.975" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:10.976" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:10.976" starttime="20170825 16:26:10.976" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.976" starttime="20170825 16:26:10.976" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.977" starttime="20170825 16:26:10.974" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:10.977" starttime="20170825 16:26:10.974" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:11.046" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:11.047" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:11.047" starttime="20170825 16:26:10.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:11.048" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:11.049" starttime="20170825 16:26:11.048" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:11.049" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:11.049" starttime="20170825 16:26:11.049" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:11.050" starttime="20170825 16:26:11.049" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:11.050" starttime="20170825 16:26:11.047" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:11.050" starttime="20170825 16:26:11.047" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:11.050" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:11.050" starttime="20170825 16:26:11.050" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:11.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:11.050" starttime="20170825 16:26:10.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:11.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:11.051" starttime="20170825 16:26:11.051" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:11.052" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:11.052" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:11.052" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:11.052" starttime="20170825 16:26:11.051" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:11.052" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:11.052" starttime="20170825 16:26:10.747" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:11.052" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:11.052" starttime="20170825 16:26:10.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:11.053" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:11.053" starttime="20170825 16:26:11.053" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:11.053" starttime="20170825 16:26:10.747" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:11.053" starttime="20170825 16:26:10.746" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:21.058" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:21.059" starttime="20170825 16:26:21.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:21.059" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:21.059" starttime="20170825 16:26:21.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:21.060" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:21.060" starttime="20170825 16:26:21.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:21.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:21.061" starttime="20170825 16:26:21.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:21.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:21.264" starttime="20170825 16:26:21.061" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:21.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:21.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:21.265" starttime="20170825 16:26:21.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:21.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:21.265" starttime="20170825 16:26:21.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:21.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:21.266" starttime="20170825 16:26:21.265" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.266" starttime="20170825 16:26:21.057" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.266" starttime="20170825 16:26:21.057" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.266" starttime="20170825 16:26:21.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:21.267" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:21.267" starttime="20170825 16:26:21.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:21.269" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:21.269" starttime="20170825 16:26:21.268" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:21.270" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:21.270" starttime="20170825 16:26:21.270" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.270" starttime="20170825 16:26:21.269" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.270" starttime="20170825 16:26:21.268" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.270" starttime="20170825 16:26:21.267" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:21.350" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:21.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:21.350" starttime="20170825 16:26:21.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:21.352" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:21.352" starttime="20170825 16:26:21.351" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:21.353" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:21.353" starttime="20170825 16:26:21.352" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.353" starttime="20170825 16:26:21.352" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.353" starttime="20170825 16:26:21.351" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:21.353" starttime="20170825 16:26:21.350" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:21.354" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:21.354" starttime="20170825 16:26:21.354" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:21.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:21.354" starttime="20170825 16:26:21.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:21.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:21.355" starttime="20170825 16:26:21.354" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:21.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:21.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:21.355" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:21.355" starttime="20170825 16:26:21.355" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:21.356" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:21.356" starttime="20170825 16:26:21.055" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:21.356" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:21.356" starttime="20170825 16:26:21.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:21.357" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:21.357" starttime="20170825 16:26:21.356" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:21.357" starttime="20170825 16:26:21.054" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:21.357" starttime="20170825 16:26:21.054" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:31.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:31.362" starttime="20170825 16:26:31.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:31.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:31.363" starttime="20170825 16:26:31.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:31.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:31.363" starttime="20170825 16:26:31.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:31.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:31.364" starttime="20170825 16:26:31.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:31.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:31.579" starttime="20170825 16:26:31.365" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:31.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:31.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:31.579" starttime="20170825 16:26:31.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:31.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:31.580" starttime="20170825 16:26:31.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:31.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:31.581" starttime="20170825 16:26:31.580" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.581" starttime="20170825 16:26:31.361" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.581" starttime="20170825 16:26:31.361" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.581" starttime="20170825 16:26:31.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:31.582" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:31.582" starttime="20170825 16:26:31.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:31.584" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:31.584" starttime="20170825 16:26:31.583" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:31.585" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:31.585" starttime="20170825 16:26:31.584" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.585" starttime="20170825 16:26:31.584" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.585" starttime="20170825 16:26:31.582" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.585" starttime="20170825 16:26:31.582" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:31.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:31.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:31.661" starttime="20170825 16:26:31.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:31.662" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:31.662" starttime="20170825 16:26:31.662" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:31.663" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:31.663" starttime="20170825 16:26:31.663" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.664" starttime="20170825 16:26:31.663" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.664" starttime="20170825 16:26:31.661" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:31.664" starttime="20170825 16:26:31.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:31.664" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:31.664" starttime="20170825 16:26:31.664" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:31.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:31.664" starttime="20170825 16:26:31.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:31.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:31.665" starttime="20170825 16:26:31.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:31.666" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:31.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:31.666" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:31.666" starttime="20170825 16:26:31.665" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:31.666" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:31.666" starttime="20170825 16:26:31.359" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:31.666" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:31.667" starttime="20170825 16:26:31.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:31.667" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:31.667" starttime="20170825 16:26:31.667" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:31.667" starttime="20170825 16:26:31.358" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:31.667" starttime="20170825 16:26:31.358" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:41.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:41.673" starttime="20170825 16:26:41.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:41.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:41.674" starttime="20170825 16:26:41.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:41.674" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:41.674" starttime="20170825 16:26:41.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:41.675" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:41.675" starttime="20170825 16:26:41.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:41.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:41.890" starttime="20170825 16:26:41.676" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:41.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:41.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:41.890" starttime="20170825 16:26:41.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:41.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:41.891" starttime="20170825 16:26:41.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:41.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:41.892" starttime="20170825 16:26:41.891" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.892" starttime="20170825 16:26:41.671" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.892" starttime="20170825 16:26:41.671" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.892" starttime="20170825 16:26:41.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:41.893" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:41.893" starttime="20170825 16:26:41.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:41.895" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:41.895" starttime="20170825 16:26:41.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:41.896" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:41.896" starttime="20170825 16:26:41.895" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.896" starttime="20170825 16:26:41.895" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.896" starttime="20170825 16:26:41.893" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.896" starttime="20170825 16:26:41.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:41.962" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:41.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:41.962" starttime="20170825 16:26:41.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:41.964" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:41.964" starttime="20170825 16:26:41.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:41.965" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:41.965" starttime="20170825 16:26:41.965" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.965" starttime="20170825 16:26:41.964" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.966" starttime="20170825 16:26:41.963" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:41.966" starttime="20170825 16:26:41.962" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:41.966" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:41.966" starttime="20170825 16:26:41.966" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:41.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:41.966" starttime="20170825 16:26:41.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:41.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:41.967" starttime="20170825 16:26:41.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:41.968" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:41.968" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:41.968" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:41.968" starttime="20170825 16:26:41.967" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:41.968" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:41.968" starttime="20170825 16:26:41.669" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:41.968" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:41.968" starttime="20170825 16:26:41.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:41.969" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:41.969" starttime="20170825 16:26:41.969" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:41.969" starttime="20170825 16:26:41.668" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:41.969" starttime="20170825 16:26:41.668" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:26:51.974" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:26:51.974" starttime="20170825 16:26:51.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:26:51.975" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:26:51.975" starttime="20170825 16:26:51.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:26:51.976" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:26:51.976" starttime="20170825 16:26:51.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:26:51.976" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:26:51.976" starttime="20170825 16:26:51.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:26:52.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:26:52.204" starttime="20170825 16:26:51.977" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:52.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:26:52.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:52.205" starttime="20170825 16:26:51.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:26:52.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:52.205" starttime="20170825 16:26:52.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:52.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:52.206" starttime="20170825 16:26:52.206" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.206" starttime="20170825 16:26:51.973" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.206" starttime="20170825 16:26:51.973" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.206" starttime="20170825 16:26:51.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:26:52.207" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:26:52.207" starttime="20170825 16:26:52.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:52.209" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:52.209" starttime="20170825 16:26:52.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:52.210" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:26:52.210" starttime="20170825 16:26:52.210" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.210" starttime="20170825 16:26:52.209" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.210" starttime="20170825 16:26:52.208" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.210" starttime="20170825 16:26:52.207" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:26:52.274" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:26:52.274" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:52.274" starttime="20170825 16:26:52.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:26:52.276" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:52.276" starttime="20170825 16:26:52.275" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:26:52.277" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:26:52.277" starttime="20170825 16:26:52.277" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.277" starttime="20170825 16:26:52.276" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.277" starttime="20170825 16:26:52.275" status="PASS"></status>
</kw>
<status endtime="20170825 16:26:52.277" starttime="20170825 16:26:52.274" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:26:52.278" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:26:52.278" starttime="20170825 16:26:52.277" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:52.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:26:52.278" starttime="20170825 16:26:51.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:26:52.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:26:52.279" starttime="20170825 16:26:52.278" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:26:52.279" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:26:52.279" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:26:52.279" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:26:52.279" starttime="20170825 16:26:52.279" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:52.279" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:26:52.280" starttime="20170825 16:26:51.971" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:26:52.280" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:26:52.280" starttime="20170825 16:26:51.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:26:52.280" level="FAIL">On != Off</msg>
<status endtime="20170825 16:26:52.281" starttime="20170825 16:26:52.280" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:52.281" starttime="20170825 16:26:51.970" status="FAIL"></status>
</kw>
<status endtime="20170825 16:26:52.281" starttime="20170825 16:26:51.970" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:02.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:02.287" starttime="20170825 16:27:02.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:02.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:02.288" starttime="20170825 16:27:02.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:02.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:02.289" starttime="20170825 16:27:02.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:02.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:02.289" starttime="20170825 16:27:02.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:02.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:02.493" starttime="20170825 16:27:02.290" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:02.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:02.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:02.493" starttime="20170825 16:27:02.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:02.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:02.494" starttime="20170825 16:27:02.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:02.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:02.494" starttime="20170825 16:27:02.494" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.495" starttime="20170825 16:27:02.286" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.495" starttime="20170825 16:27:02.284" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.495" starttime="20170825 16:27:02.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:02.495" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:02.495" starttime="20170825 16:27:02.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:02.497" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:02.497" starttime="20170825 16:27:02.497" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:02.498" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:02.498" starttime="20170825 16:27:02.498" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.499" starttime="20170825 16:27:02.498" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.499" starttime="20170825 16:27:02.496" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.499" starttime="20170825 16:27:02.496" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:02.562" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:02.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:02.563" starttime="20170825 16:27:02.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:02.564" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:02.564" starttime="20170825 16:27:02.564" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:02.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:02.566" starttime="20170825 16:27:02.565" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.566" starttime="20170825 16:27:02.565" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.566" starttime="20170825 16:27:02.563" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:02.566" starttime="20170825 16:27:02.563" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:02.566" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:02.567" starttime="20170825 16:27:02.566" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:02.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:02.567" starttime="20170825 16:27:02.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:02.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:02.567" starttime="20170825 16:27:02.567" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:02.568" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:02.568" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:02.568" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:02.568" starttime="20170825 16:27:02.568" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:02.568" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:02.568" starttime="20170825 16:27:02.282" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:02.569" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:02.569" starttime="20170825 16:27:02.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:02.569" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:02.569" starttime="20170825 16:27:02.569" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:02.570" starttime="20170825 16:27:02.282" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:02.570" starttime="20170825 16:27:02.281" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:12.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:12.575" starttime="20170825 16:27:12.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:12.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:12.575" starttime="20170825 16:27:12.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:12.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:12.576" starttime="20170825 16:27:12.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:12.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:12.577" starttime="20170825 16:27:12.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:12.763" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:12.763" starttime="20170825 16:27:12.577" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:12.763" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:12.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:12.763" starttime="20170825 16:27:12.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:12.764" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:12.764" starttime="20170825 16:27:12.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:12.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:12.765" starttime="20170825 16:27:12.764" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.765" starttime="20170825 16:27:12.574" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.765" starttime="20170825 16:27:12.573" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.765" starttime="20170825 16:27:12.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:12.766" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:12.766" starttime="20170825 16:27:12.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:12.768" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:12.768" starttime="20170825 16:27:12.767" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:12.769" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:12.769" starttime="20170825 16:27:12.769" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.769" starttime="20170825 16:27:12.768" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.769" starttime="20170825 16:27:12.767" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.769" starttime="20170825 16:27:12.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:12.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:12.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:12.833" starttime="20170825 16:27:12.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:12.835" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:12.835" starttime="20170825 16:27:12.834" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:12.835" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:12.836" starttime="20170825 16:27:12.835" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.836" starttime="20170825 16:27:12.835" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.836" starttime="20170825 16:27:12.834" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:12.836" starttime="20170825 16:27:12.833" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:12.836" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:12.836" starttime="20170825 16:27:12.836" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:12.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:12.837" starttime="20170825 16:27:12.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:12.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:12.837" starttime="20170825 16:27:12.837" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:12.838" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:12.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:12.838" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:12.838" starttime="20170825 16:27:12.837" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:12.838" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:12.838" starttime="20170825 16:27:12.571" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:12.838" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:12.839" starttime="20170825 16:27:12.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:12.839" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:12.839" starttime="20170825 16:27:12.839" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:12.839" starttime="20170825 16:27:12.571" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:12.840" starttime="20170825 16:27:12.570" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:22.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:22.845" starttime="20170825 16:27:22.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:22.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:22.845" starttime="20170825 16:27:22.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:22.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:22.846" starttime="20170825 16:27:22.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:22.847" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:22.847" starttime="20170825 16:27:22.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:23.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:23.043" starttime="20170825 16:27:22.847" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:23.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:23.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:23.043" starttime="20170825 16:27:22.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:23.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:23.044" starttime="20170825 16:27:23.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:23.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:23.045" starttime="20170825 16:27:23.044" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.045" starttime="20170825 16:27:22.843" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.045" starttime="20170825 16:27:22.843" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.045" starttime="20170825 16:27:22.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:23.045" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:23.046" starttime="20170825 16:27:23.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:23.048" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:23.048" starttime="20170825 16:27:23.047" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:23.048" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:23.049" starttime="20170825 16:27:23.048" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.049" starttime="20170825 16:27:23.048" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.049" starttime="20170825 16:27:23.046" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.049" starttime="20170825 16:27:23.046" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:23.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:23.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:23.112" starttime="20170825 16:27:23.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:23.113" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:23.113" starttime="20170825 16:27:23.113" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:23.117" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:23.117" starttime="20170825 16:27:23.114" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.117" starttime="20170825 16:27:23.113" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.117" starttime="20170825 16:27:23.112" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:23.117" starttime="20170825 16:27:23.112" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:23.118" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:23.118" starttime="20170825 16:27:23.118" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:23.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:23.118" starttime="20170825 16:27:22.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:23.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:23.119" starttime="20170825 16:27:23.118" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:23.119" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:23.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:23.120" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:23.120" starttime="20170825 16:27:23.119" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:23.120" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:23.120" starttime="20170825 16:27:22.841" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:23.120" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:23.120" starttime="20170825 16:27:22.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:23.121" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:23.121" starttime="20170825 16:27:23.120" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:23.121" starttime="20170825 16:27:22.840" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:23.121" starttime="20170825 16:27:22.840" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:33.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:33.139" starttime="20170825 16:27:33.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:33.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:33.140" starttime="20170825 16:27:33.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:33.141" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:33.141" starttime="20170825 16:27:33.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:33.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:33.141" starttime="20170825 16:27:33.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:33.352" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:33.352" starttime="20170825 16:27:33.142" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:33.352" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:33.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:33.352" starttime="20170825 16:27:33.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:33.353" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:33.353" starttime="20170825 16:27:33.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:33.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:33.353" starttime="20170825 16:27:33.353" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.354" starttime="20170825 16:27:33.135" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.354" starttime="20170825 16:27:33.133" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.354" starttime="20170825 16:27:33.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:33.354" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:33.354" starttime="20170825 16:27:33.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:33.357" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:33.357" starttime="20170825 16:27:33.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:33.358" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:33.358" starttime="20170825 16:27:33.358" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.358" starttime="20170825 16:27:33.357" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.358" starttime="20170825 16:27:33.355" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.358" starttime="20170825 16:27:33.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:33.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:33.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:33.451" starttime="20170825 16:27:33.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:33.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:33.453" starttime="20170825 16:27:33.452" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:33.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:33.454" starttime="20170825 16:27:33.454" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.454" starttime="20170825 16:27:33.453" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.454" starttime="20170825 16:27:33.452" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:33.454" starttime="20170825 16:27:33.451" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:33.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:33.455" starttime="20170825 16:27:33.455" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:33.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:33.455" starttime="20170825 16:27:33.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:33.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:33.456" starttime="20170825 16:27:33.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:33.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:33.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:33.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:33.457" starttime="20170825 16:27:33.456" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:33.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:33.457" starttime="20170825 16:27:33.126" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:33.457" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:33.457" starttime="20170825 16:27:33.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:33.458" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:33.458" starttime="20170825 16:27:33.458" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:33.458" starttime="20170825 16:27:33.123" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:33.458" starttime="20170825 16:27:33.122" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:43.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:43.467" starttime="20170825 16:27:43.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:43.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:43.467" starttime="20170825 16:27:43.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:43.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:43.468" starttime="20170825 16:27:43.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:43.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:43.469" starttime="20170825 16:27:43.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:43.668" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:43.668" starttime="20170825 16:27:43.469" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:43.668" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:43.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:43.668" starttime="20170825 16:27:43.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:43.669" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:43.669" starttime="20170825 16:27:43.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:43.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:43.670" starttime="20170825 16:27:43.669" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.670" starttime="20170825 16:27:43.464" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.670" starttime="20170825 16:27:43.464" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.671" starttime="20170825 16:27:43.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:43.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:43.672" starttime="20170825 16:27:43.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:43.674" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:43.674" starttime="20170825 16:27:43.673" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:43.676" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:43.676" starttime="20170825 16:27:43.675" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.676" starttime="20170825 16:27:43.674" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.676" starttime="20170825 16:27:43.673" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.676" starttime="20170825 16:27:43.672" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:43.767" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:43.767" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:43.767" starttime="20170825 16:27:43.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:43.769" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:43.769" starttime="20170825 16:27:43.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:43.770" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:43.770" starttime="20170825 16:27:43.770" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.771" starttime="20170825 16:27:43.769" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.771" starttime="20170825 16:27:43.768" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:43.771" starttime="20170825 16:27:43.767" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:43.771" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:43.771" starttime="20170825 16:27:43.771" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:43.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:43.771" starttime="20170825 16:27:43.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:43.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:43.772" starttime="20170825 16:27:43.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:43.773" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:43.773" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:43.773" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:43.773" starttime="20170825 16:27:43.772" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:43.773" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:43.773" starttime="20170825 16:27:43.461" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:43.773" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:43.774" starttime="20170825 16:27:43.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:43.774" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:43.774" starttime="20170825 16:27:43.774" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:43.774" starttime="20170825 16:27:43.460" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:43.775" starttime="20170825 16:27:43.459" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:27:53.784" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:27:53.785" starttime="20170825 16:27:53.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:27:53.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:27:53.787" starttime="20170825 16:27:53.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:27:53.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:27:53.788" starttime="20170825 16:27:53.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:27:53.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:27:53.789" starttime="20170825 16:27:53.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:27:53.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:27:53.982" starttime="20170825 16:27:53.790" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:53.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:27:53.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:53.983" starttime="20170825 16:27:53.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:27:53.984" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:53.984" starttime="20170825 16:27:53.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:53.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:53.985" starttime="20170825 16:27:53.984" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.985" starttime="20170825 16:27:53.783" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.985" starttime="20170825 16:27:53.782" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.985" starttime="20170825 16:27:53.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:27:53.985" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:27:53.985" starttime="20170825 16:27:53.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:53.991" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:53.991" starttime="20170825 16:27:53.990" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:53.992" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:27:53.992" starttime="20170825 16:27:53.992" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.992" starttime="20170825 16:27:53.991" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.993" starttime="20170825 16:27:53.986" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:53.993" starttime="20170825 16:27:53.986" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:27:54.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:27:54.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:54.061" starttime="20170825 16:27:53.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:27:54.063" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:54.063" starttime="20170825 16:27:54.062" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:27:54.064" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:27:54.064" starttime="20170825 16:27:54.064" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:54.064" starttime="20170825 16:27:54.063" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:54.064" starttime="20170825 16:27:54.062" status="PASS"></status>
</kw>
<status endtime="20170825 16:27:54.064" starttime="20170825 16:27:54.061" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:27:54.065" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:27:54.065" starttime="20170825 16:27:54.065" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:54.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:27:54.065" starttime="20170825 16:27:53.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:27:54.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:27:54.066" starttime="20170825 16:27:54.065" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:27:54.066" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:27:54.066" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:27:54.066" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:27:54.066" starttime="20170825 16:27:54.066" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:54.067" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:27:54.067" starttime="20170825 16:27:53.779" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:27:54.067" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:27:54.067" starttime="20170825 16:27:53.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:27:54.068" level="FAIL">On != Off</msg>
<status endtime="20170825 16:27:54.068" starttime="20170825 16:27:54.067" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:54.068" starttime="20170825 16:27:53.778" status="FAIL"></status>
</kw>
<status endtime="20170825 16:27:54.068" starttime="20170825 16:27:53.776" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:04.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:04.075" starttime="20170825 16:28:04.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:04.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:04.076" starttime="20170825 16:28:04.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:04.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:04.076" starttime="20170825 16:28:04.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:04.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:04.077" starttime="20170825 16:28:04.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:04.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:04.264" starttime="20170825 16:28:04.078" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:04.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:04.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:04.264" starttime="20170825 16:28:04.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:04.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:04.265" starttime="20170825 16:28:04.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:04.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:04.265" starttime="20170825 16:28:04.265" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.265" starttime="20170825 16:28:04.073" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.266" starttime="20170825 16:28:04.073" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.266" starttime="20170825 16:28:04.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:04.266" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:04.266" starttime="20170825 16:28:04.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:04.269" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:04.269" starttime="20170825 16:28:04.268" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:04.269" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:04.270" starttime="20170825 16:28:04.269" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.270" starttime="20170825 16:28:04.269" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.270" starttime="20170825 16:28:04.267" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.270" starttime="20170825 16:28:04.267" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:04.371" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:04.371" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:04.371" starttime="20170825 16:28:04.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:04.373" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:04.373" starttime="20170825 16:28:04.372" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:04.374" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:04.374" starttime="20170825 16:28:04.373" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.374" starttime="20170825 16:28:04.373" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.374" starttime="20170825 16:28:04.372" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:04.374" starttime="20170825 16:28:04.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:04.375" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:04.375" starttime="20170825 16:28:04.375" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:04.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:04.375" starttime="20170825 16:28:04.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:04.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:04.376" starttime="20170825 16:28:04.375" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:04.376" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:04.376" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:04.377" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:04.377" starttime="20170825 16:28:04.376" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:04.377" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:04.377" starttime="20170825 16:28:04.071" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:04.377" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:04.377" starttime="20170825 16:28:04.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:04.378" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:04.378" starttime="20170825 16:28:04.378" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:04.378" starttime="20170825 16:28:04.070" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:04.378" starttime="20170825 16:28:04.069" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:14.383" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:14.384" starttime="20170825 16:28:14.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:14.384" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:14.384" starttime="20170825 16:28:14.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:14.385" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:14.385" starttime="20170825 16:28:14.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:14.386" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:14.386" starttime="20170825 16:28:14.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:14.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:14.614" starttime="20170825 16:28:14.387" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:14.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:14.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:14.614" starttime="20170825 16:28:14.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:14.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:14.615" starttime="20170825 16:28:14.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:14.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:14.615" starttime="20170825 16:28:14.615" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.616" starttime="20170825 16:28:14.383" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.616" starttime="20170825 16:28:14.382" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.616" starttime="20170825 16:28:14.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:14.616" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:14.616" starttime="20170825 16:28:14.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:14.618" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:14.619" starttime="20170825 16:28:14.618" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:14.619" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:14.620" starttime="20170825 16:28:14.619" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.620" starttime="20170825 16:28:14.619" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.620" starttime="20170825 16:28:14.617" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.620" starttime="20170825 16:28:14.617" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:14.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:14.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:14.719" starttime="20170825 16:28:14.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:14.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:14.721" starttime="20170825 16:28:14.720" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:14.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:14.722" starttime="20170825 16:28:14.722" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.722" starttime="20170825 16:28:14.721" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.722" starttime="20170825 16:28:14.720" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:14.722" starttime="20170825 16:28:14.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:14.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:14.723" starttime="20170825 16:28:14.723" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:14.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:14.723" starttime="20170825 16:28:14.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:14.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:14.724" starttime="20170825 16:28:14.723" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:14.724" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:14.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:14.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:14.724" starttime="20170825 16:28:14.724" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:14.725" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:14.725" starttime="20170825 16:28:14.380" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:14.725" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:14.725" starttime="20170825 16:28:14.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:14.726" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:14.726" starttime="20170825 16:28:14.725" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:14.726" starttime="20170825 16:28:14.379" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:14.726" starttime="20170825 16:28:14.379" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:24.731" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:24.732" starttime="20170825 16:28:24.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:24.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:24.732" starttime="20170825 16:28:24.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:24.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:24.733" starttime="20170825 16:28:24.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:24.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:24.734" starttime="20170825 16:28:24.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:24.936" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:24.937" starttime="20170825 16:28:24.734" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:24.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:24.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:24.937" starttime="20170825 16:28:24.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:24.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:24.938" starttime="20170825 16:28:24.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:24.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:24.938" starttime="20170825 16:28:24.938" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.938" starttime="20170825 16:28:24.730" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.938" starttime="20170825 16:28:24.730" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.939" starttime="20170825 16:28:24.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:24.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:24.939" starttime="20170825 16:28:24.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:24.941" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:24.941" starttime="20170825 16:28:24.941" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:24.942" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:24.942" starttime="20170825 16:28:24.942" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.942" starttime="20170825 16:28:24.941" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.942" starttime="20170825 16:28:24.940" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:24.943" starttime="20170825 16:28:24.939" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:25.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:25.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:25.025" starttime="20170825 16:28:24.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:25.027" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:25.027" starttime="20170825 16:28:25.026" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:25.028" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:25.028" starttime="20170825 16:28:25.027" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:25.028" starttime="20170825 16:28:25.027" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:25.028" starttime="20170825 16:28:25.026" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:25.028" starttime="20170825 16:28:25.025" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:25.029" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:25.029" starttime="20170825 16:28:25.029" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:25.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:25.029" starttime="20170825 16:28:24.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:25.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:25.030" starttime="20170825 16:28:25.029" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:25.030" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:25.030" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:25.031" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:25.031" starttime="20170825 16:28:25.030" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:25.031" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:25.031" starttime="20170825 16:28:24.728" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:25.031" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:25.031" starttime="20170825 16:28:24.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:25.032" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:25.032" starttime="20170825 16:28:25.032" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:25.032" starttime="20170825 16:28:24.727" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:25.032" starttime="20170825 16:28:24.726" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:35.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:35.038" starttime="20170825 16:28:35.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:35.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:35.038" starttime="20170825 16:28:35.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:35.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:35.039" starttime="20170825 16:28:35.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:35.039" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:35.039" starttime="20170825 16:28:35.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:35.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:35.250" starttime="20170825 16:28:35.040" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:35.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:35.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:35.250" starttime="20170825 16:28:35.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:35.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:35.251" starttime="20170825 16:28:35.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:35.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:35.252" starttime="20170825 16:28:35.251" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.252" starttime="20170825 16:28:35.036" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.252" starttime="20170825 16:28:35.036" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.252" starttime="20170825 16:28:35.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:35.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:35.253" starttime="20170825 16:28:35.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:35.255" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:35.255" starttime="20170825 16:28:35.254" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:35.256" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:35.256" starttime="20170825 16:28:35.256" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.256" starttime="20170825 16:28:35.255" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.256" starttime="20170825 16:28:35.253" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.256" starttime="20170825 16:28:35.253" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:35.328" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:35.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:35.328" starttime="20170825 16:28:35.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:35.330" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:35.330" starttime="20170825 16:28:35.329" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:35.331" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:35.331" starttime="20170825 16:28:35.331" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.331" starttime="20170825 16:28:35.330" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.331" starttime="20170825 16:28:35.329" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:35.331" starttime="20170825 16:28:35.328" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:35.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:35.332" starttime="20170825 16:28:35.331" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:35.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:35.332" starttime="20170825 16:28:35.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:35.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:35.333" starttime="20170825 16:28:35.332" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:35.333" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:35.333" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:35.333" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:35.333" starttime="20170825 16:28:35.333" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:35.334" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:35.334" starttime="20170825 16:28:35.034" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:35.334" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:35.334" starttime="20170825 16:28:35.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:35.335" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:35.335" starttime="20170825 16:28:35.334" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:35.335" starttime="20170825 16:28:35.033" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:35.335" starttime="20170825 16:28:35.033" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:45.341" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:45.342" starttime="20170825 16:28:45.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:45.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:45.343" starttime="20170825 16:28:45.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:45.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:45.343" starttime="20170825 16:28:45.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:45.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:45.344" starttime="20170825 16:28:45.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:45.592" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:45.592" starttime="20170825 16:28:45.345" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:45.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:45.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:45.592" starttime="20170825 16:28:45.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:45.593" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:45.593" starttime="20170825 16:28:45.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:45.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:45.594" starttime="20170825 16:28:45.593" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.594" starttime="20170825 16:28:45.340" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.594" starttime="20170825 16:28:45.339" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.594" starttime="20170825 16:28:45.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:45.595" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:45.595" starttime="20170825 16:28:45.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:45.597" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:45.597" starttime="20170825 16:28:45.596" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:45.598" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:45.598" starttime="20170825 16:28:45.598" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.598" starttime="20170825 16:28:45.597" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.598" starttime="20170825 16:28:45.595" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.598" starttime="20170825 16:28:45.595" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:45.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:45.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:45.685" starttime="20170825 16:28:45.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:45.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:45.687" starttime="20170825 16:28:45.686" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:45.691" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:45.691" starttime="20170825 16:28:45.687" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.691" starttime="20170825 16:28:45.687" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.691" starttime="20170825 16:28:45.686" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:45.691" starttime="20170825 16:28:45.685" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:45.692" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:45.692" starttime="20170825 16:28:45.692" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:45.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:45.692" starttime="20170825 16:28:45.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:45.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:45.693" starttime="20170825 16:28:45.693" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:45.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:45.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:45.694" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:45.694" starttime="20170825 16:28:45.693" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:45.694" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:45.694" starttime="20170825 16:28:45.337" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:45.694" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:45.694" starttime="20170825 16:28:45.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:45.695" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:45.695" starttime="20170825 16:28:45.695" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:45.695" starttime="20170825 16:28:45.336" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:45.695" starttime="20170825 16:28:45.335" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:28:55.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:28:55.701" starttime="20170825 16:28:55.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:28:55.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:28:55.701" starttime="20170825 16:28:55.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:28:55.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:28:55.702" starttime="20170825 16:28:55.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:28:55.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:28:55.702" starttime="20170825 16:28:55.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:28:55.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:28:55.905" starttime="20170825 16:28:55.703" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:55.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:28:55.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:55.905" starttime="20170825 16:28:55.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:28:55.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:55.906" starttime="20170825 16:28:55.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:55.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:55.907" starttime="20170825 16:28:55.906" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.907" starttime="20170825 16:28:55.699" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.907" starttime="20170825 16:28:55.699" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.907" starttime="20170825 16:28:55.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:28:55.908" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:28:55.908" starttime="20170825 16:28:55.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:55.910" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:55.910" starttime="20170825 16:28:55.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:55.911" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:28:55.911" starttime="20170825 16:28:55.911" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.911" starttime="20170825 16:28:55.910" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.911" starttime="20170825 16:28:55.909" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:55.911" starttime="20170825 16:28:55.908" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:28:55.999" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:28:55.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:55.999" starttime="20170825 16:28:55.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:28:56.001" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:56.001" starttime="20170825 16:28:56.001" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:28:56.002" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:28:56.002" starttime="20170825 16:28:56.002" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:56.002" starttime="20170825 16:28:56.001" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:56.002" starttime="20170825 16:28:56.000" status="PASS"></status>
</kw>
<status endtime="20170825 16:28:56.003" starttime="20170825 16:28:56.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:28:56.003" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:28:56.003" starttime="20170825 16:28:56.003" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:56.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:28:56.003" starttime="20170825 16:28:55.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:28:56.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:28:56.004" starttime="20170825 16:28:56.003" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:28:56.004" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:28:56.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:28:56.005" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:28:56.005" starttime="20170825 16:28:56.004" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:56.005" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:28:56.005" starttime="20170825 16:28:55.697" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:28:56.005" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:28:56.005" starttime="20170825 16:28:55.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:28:56.006" level="FAIL">On != Off</msg>
<status endtime="20170825 16:28:56.006" starttime="20170825 16:28:56.005" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:56.006" starttime="20170825 16:28:55.696" status="FAIL"></status>
</kw>
<status endtime="20170825 16:28:56.006" starttime="20170825 16:28:55.696" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:06.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:06.013" starttime="20170825 16:29:06.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:06.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:06.013" starttime="20170825 16:29:06.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:06.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:06.014" starttime="20170825 16:29:06.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:06.015" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:06.015" starttime="20170825 16:29:06.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:06.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:06.227" starttime="20170825 16:29:06.015" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:06.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:06.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:06.227" starttime="20170825 16:29:06.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:06.227" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:06.228" starttime="20170825 16:29:06.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:06.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:06.228" starttime="20170825 16:29:06.228" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.228" starttime="20170825 16:29:06.011" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.229" starttime="20170825 16:29:06.011" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.229" starttime="20170825 16:29:06.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:06.229" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:29:06.229" starttime="20170825 16:29:06.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:06.231" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:06.231" starttime="20170825 16:29:06.231" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:06.232" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:06.232" starttime="20170825 16:29:06.232" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.232" starttime="20170825 16:29:06.231" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.232" starttime="20170825 16:29:06.230" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.233" starttime="20170825 16:29:06.229" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:06.295" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:29:06.295" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:06.295" starttime="20170825 16:29:06.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:06.297" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:06.297" starttime="20170825 16:29:06.296" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:06.298" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:06.298" starttime="20170825 16:29:06.297" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.298" starttime="20170825 16:29:06.297" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.298" starttime="20170825 16:29:06.296" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:06.298" starttime="20170825 16:29:06.295" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:06.299" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:06.299" starttime="20170825 16:29:06.299" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:06.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:06.299" starttime="20170825 16:29:06.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:06.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:06.300" starttime="20170825 16:29:06.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:29:06.300" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:06.300" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:29:06.301" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:29:06.301" starttime="20170825 16:29:06.300" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:06.301" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:29:06.301" starttime="20170825 16:29:06.008" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:06.301" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:29:06.301" starttime="20170825 16:29:06.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:29:06.302" level="FAIL">On != Off</msg>
<status endtime="20170825 16:29:06.302" starttime="20170825 16:29:06.301" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:06.302" starttime="20170825 16:29:06.007" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:06.302" starttime="20170825 16:29:06.007" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:16.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:16.307" starttime="20170825 16:29:16.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:16.308" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:16.308" starttime="20170825 16:29:16.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:16.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:16.309" starttime="20170825 16:29:16.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:16.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:16.309" starttime="20170825 16:29:16.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:16.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:16.620" starttime="20170825 16:29:16.310" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:16.620" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:16.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:16.620" starttime="20170825 16:29:16.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:16.621" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:16.621" starttime="20170825 16:29:16.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:16.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:16.621" starttime="20170825 16:29:16.621" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.621" starttime="20170825 16:29:16.306" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.622" starttime="20170825 16:29:16.306" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.622" starttime="20170825 16:29:16.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:16.622" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:29:16.622" starttime="20170825 16:29:16.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:16.625" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:16.625" starttime="20170825 16:29:16.624" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:16.626" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:16.626" starttime="20170825 16:29:16.626" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.626" starttime="20170825 16:29:16.625" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.626" starttime="20170825 16:29:16.623" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.626" starttime="20170825 16:29:16.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:16.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:29:16.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:16.711" starttime="20170825 16:29:16.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:16.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:16.713" starttime="20170825 16:29:16.712" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:16.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:16.714" starttime="20170825 16:29:16.713" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.714" starttime="20170825 16:29:16.713" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.714" starttime="20170825 16:29:16.712" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:16.714" starttime="20170825 16:29:16.711" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:16.714" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:16.714" starttime="20170825 16:29:16.714" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:16.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:16.715" starttime="20170825 16:29:16.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:16.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:16.715" starttime="20170825 16:29:16.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:29:16.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:16.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:29:16.716" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:29:16.716" starttime="20170825 16:29:16.716" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:16.716" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:29:16.716" starttime="20170825 16:29:16.304" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:16.717" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:29:16.717" starttime="20170825 16:29:16.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:29:16.717" level="FAIL">On != Off</msg>
<status endtime="20170825 16:29:16.717" starttime="20170825 16:29:16.717" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:16.718" starttime="20170825 16:29:16.303" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:16.718" starttime="20170825 16:29:16.303" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:26.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:26.723" starttime="20170825 16:29:26.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:26.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:26.724" starttime="20170825 16:29:26.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:26.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:26.725" starttime="20170825 16:29:26.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:26.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:26.725" starttime="20170825 16:29:26.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:26.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:26.930" starttime="20170825 16:29:26.726" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:26.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:26.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:26.930" starttime="20170825 16:29:26.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:26.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:26.931" starttime="20170825 16:29:26.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:26.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:26.931" starttime="20170825 16:29:26.931" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.932" starttime="20170825 16:29:26.722" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.932" starttime="20170825 16:29:26.721" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.932" starttime="20170825 16:29:26.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:26.932" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 16:29:26.932" starttime="20170825 16:29:26.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:26.934" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:26.934" starttime="20170825 16:29:26.934" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:26.935" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:26.935" starttime="20170825 16:29:26.935" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.936" starttime="20170825 16:29:26.935" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.936" starttime="20170825 16:29:26.933" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:26.936" starttime="20170825 16:29:26.933" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:27.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170825 16:29:27.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:27.026" starttime="20170825 16:29:26.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:27.029" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:27.029" starttime="20170825 16:29:27.027" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:27.030" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:27.030" starttime="20170825 16:29:27.030" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.030" starttime="20170825 16:29:27.029" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.030" starttime="20170825 16:29:27.026" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.031" starttime="20170825 16:29:27.026" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:27.031" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:27.031" starttime="20170825 16:29:27.031" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:27.031" starttime="20170825 16:29:26.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:27.032" starttime="20170825 16:29:27.031" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:29:27.032" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:27.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:29:27.033" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170825 16:29:27.033" starttime="20170825 16:29:27.032" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.033" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 16:29:27.033" starttime="20170825 16:29:26.719" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.033" level="INFO">${power_state} = Off</msg>
<status endtime="20170825 16:29:27.033" starttime="20170825 16:29:26.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.034" level="FAIL">On != Off</msg>
<status endtime="20170825 16:29:27.034" starttime="20170825 16:29:27.033" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:27.034" starttime="20170825 16:29:26.719" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:27.034" starttime="20170825 16:29:26.718" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:27.035" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status endtime="20170825 16:29:27.035" starttime="20170825 16:19:19.028" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:27.035" starttime="20170825 16:19:17.950" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:27.035" starttime="20170825 16:19:10.079" status="FAIL"></status>
</kw>
<status endtime="20170825 16:29:27.035" starttime="20170825 16:19:10.079" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:27.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:27.040" starttime="20170825 16:29:27.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:27.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:27.041" starttime="20170825 16:29:27.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:27.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:27.042" starttime="20170825 16:29:27.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:27.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:27.043" starttime="20170825 16:29:27.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:27.248" starttime="20170825 16:29:27.043" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:27.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:27.248" starttime="20170825 16:29:27.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:27.249" starttime="20170825 16:29:27.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:27.250" starttime="20170825 16:29:27.249" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.250" starttime="20170825 16:29:27.039" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.250" starttime="20170825 16:29:27.039" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.250" starttime="20170825 16:29:27.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:27.250" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 16:29:27.250" starttime="20170825 16:29:27.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:27.252" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:27.253" starttime="20170825 16:29:27.252" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:27.253" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 16:29:27.254" starttime="20170825 16:29:27.253" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.254" starttime="20170825 16:29:27.253" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.254" starttime="20170825 16:29:27.251" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.254" starttime="20170825 16:29:27.251" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:27.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170825 16:29:27.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:27.381" starttime="20170825 16:29:27.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170825 16:29:27.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:27.383" starttime="20170825 16:29:27.382" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170825 16:29:27.383" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 16:29:27.384" starttime="20170825 16:29:27.383" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.384" starttime="20170825 16:29:27.383" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.384" starttime="20170825 16:29:27.382" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:27.384" starttime="20170825 16:29:27.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:27.384" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:27.384" starttime="20170825 16:29:27.384" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:27.385" starttime="20170825 16:29:27.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:27.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:27.385" starttime="20170825 16:29:27.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170825 16:29:27.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:27.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170825 16:29:27.386" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170825 16:29:27.386" starttime="20170825 16:29:27.386" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.386" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 16:29:27.386" starttime="20170825 16:29:27.037" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.387" level="INFO">${host_state} = Off</msg>
<status endtime="20170825 16:29:27.387" starttime="20170825 16:29:27.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170825 16:29:27.388" level="FAIL">Off != Quiesced</msg>
<status endtime="20170825 16:29:27.388" starttime="20170825 16:29:27.387" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:27.388" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:27.388" starttime="20170825 16:29:27.387" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:27.388" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:27.388" starttime="20170825 16:29:27.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170825 16:29:27.412" level="INFO">Length is 10</msg>
<status endtime="20170825 16:29:27.412" starttime="20170825 16:29:27.412" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:29:27.417" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:29:30.419" level="INFO">${RC} = 0</msg>
<msg timestamp="20170825 16:29:30.419" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.663 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.591 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170825 16:29:30.420" starttime="20170825 16:29:27.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170825 16:29:30.422" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.663 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.591 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.531 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.35 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.531/0.785/1.357/0.334 ms</msg>
<status endtime="20170825 16:29:30.422" starttime="20170825 16:29:30.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170825 16:29:30.423" starttime="20170825 16:29:30.423" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.423" starttime="20170825 16:29:27.411" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:29:30.436" level="INFO">${cur_time} = 2017-08-25 16:29:30:436040</msg>
<status endtime="20170825 16:29:30.436" starttime="20170825 16:29:30.436" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:29:30.437" level="INFO">${cur_time} = 20170825162930436040</msg>
<status endtime="20170825 16:29:30.437" starttime="20170825 16:29:30.437" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.437" starttime="20170825 16:29:30.435" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.437" level="INFO">${FFDC_TIME} = 20170825162930436040</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170825 16:29:30.450" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170825 16:29:30.450" starttime="20170825 16:29:30.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170825 16:29:30.451" level="INFO">${suite_name} = 20170825162930436040_TestsTestBasicPoweron</msg>
<status endtime="20170825 16:29:30.451" starttime="20170825 16:29:30.450" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170825 16:29:30.451" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170825 16:29:30.452" starttime="20170825 16:29:30.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170825 16:29:30.452" level="INFO">${test_name} = 20170825162930436040_PowerOnTest</msg>
<status endtime="20170825 16:29:30.452" starttime="20170825 16:29:30.452" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.452" starttime="20170825 16:29:30.449" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.453" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/</msg>
<msg timestamp="20170825 16:29:30.453" level="INFO">${FFDC_PREFIX} = 20170825162930436040_</msg>
<msg timestamp="20170825 16:29:30.473" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.473" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.474" starttime="20170825 16:29:30.473" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.478" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.499" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.499" starttime="20170825 16:29:30.498" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.499" starttime="20170825 16:29:30.498" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.500" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.500" starttime="20170825 16:29:30.500" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.500" starttime="20170825 16:29:30.499" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.502" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.502" starttime="20170825 16:29:30.501" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.502" starttime="20170825 16:29:30.500" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.504" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.504" starttime="20170825 16:29:30.503" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.504" starttime="20170825 16:29:30.502" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.505" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.505" starttime="20170825 16:29:30.505" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.505" starttime="20170825 16:29:30.504" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.506" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.506" starttime="20170825 16:29:30.506" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.506" starttime="20170825 16:29:30.505" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.508" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.508" starttime="20170825 16:29:30.507" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.508" starttime="20170825 16:29:30.507" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.509" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.509" starttime="20170825 16:29:30.509" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.509" starttime="20170825 16:29:30.508" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.510" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.510" starttime="20170825 16:29:30.510" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.510" starttime="20170825 16:29:30.509" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.512" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.512" starttime="20170825 16:29:30.511" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.512" starttime="20170825 16:29:30.511" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.513" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.513" starttime="20170825 16:29:30.513" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.513" starttime="20170825 16:29:30.512" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.514" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.514" starttime="20170825 16:29:30.514" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.515" starttime="20170825 16:29:30.513" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.516" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.516" starttime="20170825 16:29:30.515" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.516" starttime="20170825 16:29:30.515" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170825 16:29:30.545" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:30.545" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170825 16:29:30.622" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170825 16:29:30.632" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170825 16:29:30.632" level="INFO">${stderr} = </msg>
<msg timestamp="20170825 16:29:30.632" level="INFO">${rc} = 0</msg>
<status endtime="20170825 16:29:30.632" starttime="20170825 16:29:30.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170825 16:29:30.632" level="INFO">Length is 0</msg>
<status endtime="20170825 16:29:30.633" starttime="20170825 16:29:30.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170825 16:29:30.633" level="INFO">Length is 11</msg>
<status endtime="20170825 16:29:30.633" starttime="20170825 16:29:30.633" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.633" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170825 16:29:30.633" starttime="20170825 16:29:30.516" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.634" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.635" starttime="20170825 16:29:30.634" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.635" starttime="20170825 16:29:30.633" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.635" starttime="20170825 16:29:30.511" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.636" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.636" starttime="20170825 16:29:30.636" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.636" starttime="20170825 16:29:30.635" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170825 16:29:30.637" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status endtime="20170825 16:29:30.637" starttime="20170825 16:29:30.636" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.638" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.638" starttime="20170825 16:29:30.638" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.638" starttime="20170825 16:29:30.637" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.639" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.639" starttime="20170825 16:29:30.639" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.640" starttime="20170825 16:29:30.638" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.640" starttime="20170825 16:29:30.637" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.641" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.641" starttime="20170825 16:29:30.640" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.641" starttime="20170825 16:29:30.640" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.642" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.642" starttime="20170825 16:29:30.642" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.642" starttime="20170825 16:29:30.641" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.642" starttime="20170825 16:29:30.640" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.643" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.644" starttime="20170825 16:29:30.643" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.644" starttime="20170825 16:29:30.642" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.645" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.645" starttime="20170825 16:29:30.644" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.645" starttime="20170825 16:29:30.644" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.645" starttime="20170825 16:29:30.642" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.645" starttime="20170825 16:29:30.637" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.646" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.646" starttime="20170825 16:29:30.646" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.646" starttime="20170825 16:29:30.645" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.646" starttime="20170825 16:29:30.497" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170825 16:29:30.653" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170825 16:29:30.653" starttime="20170825 16:29:30.652" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170825 16:29:30.657" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC F...</msg>
<status endtime="20170825 16:29:30.657" starttime="20170825 16:29:30.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170825 16:29:30.659" starttime="20170825 16:29:30.658" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.659" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Sys Inventory Files | Core Files | OS FFDC | BMC Specific Files | Get Request FFDC | SEL Log ]</msg>
<status endtime="20170825 16:29:30.659" starttime="20170825 16:29:30.657" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:30.661" starttime="20170825 16:29:30.660" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:30.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:30.661" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:30.661" starttime="20170825 16:29:30.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:30.662" starttime="20170825 16:29:30.661" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170825 16:29:30.688" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status endtime="20170825 16:29:30.688" starttime="20170825 16:29:30.688" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170825 16:29:30.689" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170825 16:29:30.689" starttime="20170825 16:29:30.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170825 16:29:30.695" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170825 16:29:30.695" starttime="20170825 16:29:30.690" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.698" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.698" starttime="20170825 16:29:30.698" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.698" starttime="20170825 16:29:30.697" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.700" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.700" starttime="20170825 16:29:30.699" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.700" starttime="20170825 16:29:30.698" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.701" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.701" starttime="20170825 16:29:30.700" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.701" starttime="20170825 16:29:30.700" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:30.702" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:30.702" starttime="20170825 16:29:30.702" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.702" starttime="20170825 16:29:30.701" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.702" starttime="20170825 16:29:30.696" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:30.702" starttime="20170825 16:29:30.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:30.703" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170825 16:29:30.703" starttime="20170825 16:29:30.703" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:30.770" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:30.771" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170825 16:29:32.097" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.097" starttime="20170825 16:29:30.734" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.097" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.097" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status endtime="20170825 16:29:32.097" starttime="20170825 16:29:30.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.098" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 16:29:32.098" starttime="20170825 16:29:32.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.098" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.098" starttime="20170825 16:29:32.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.105" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.105" starttime="20170825 16:29:32.105" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.105" starttime="20170825 16:29:32.104" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.105" starttime="20170825 16:29:32.099" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.106" starttime="20170825 16:29:30.695" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.106" starttime="20170825 16:29:30.695" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.106" starttime="20170825 16:29:30.695" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.106" starttime="20170825 16:29:30.688" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.106" starttime="20170825 16:29:30.688" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170825 16:29:32.107" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status endtime="20170825 16:29:32.107" starttime="20170825 16:29:32.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170825 16:29:32.108" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170825 16:29:32.108" starttime="20170825 16:29:32.107" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.111" starttime="20170825 16:29:32.111" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.111" starttime="20170825 16:29:32.110" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.112" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.113" starttime="20170825 16:29:32.112" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.113" starttime="20170825 16:29:32.111" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.114" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.114" starttime="20170825 16:29:32.113" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.114" starttime="20170825 16:29:32.113" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.115" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.115" starttime="20170825 16:29:32.115" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.115" starttime="20170825 16:29:32.114" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.115" starttime="20170825 16:29:32.109" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.115" starttime="20170825 16:29:32.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:32.116" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170825 16:29:32.116" starttime="20170825 16:29:32.116" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:32.184" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.184" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170825 16:29:32.243" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.243" starttime="20170825 16:29:32.147" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.243" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-1"\nVERSION_ID="v1.99.9-1-g6ab08ae"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Pro...</msg>
<status endtime="20170825 16:29:32.243" starttime="20170825 16:29:32.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.244" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-1"
VERSION_ID="v1.99.9-1-g6ab08ae"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Re...</msg>
<status endtime="20170825 16:29:32.244" starttime="20170825 16:29:32.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.244" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.244" starttime="20170825 16:29:32.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.251" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.251" starttime="20170825 16:29:32.251" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.251" starttime="20170825 16:29:32.250" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.251" starttime="20170825 16:29:32.245" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.252" starttime="20170825 16:29:32.108" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.252" starttime="20170825 16:29:32.108" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.256" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.256" starttime="20170825 16:29:32.255" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.256" starttime="20170825 16:29:32.254" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.257" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.258" starttime="20170825 16:29:32.257" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.258" starttime="20170825 16:29:32.256" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.259" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.259" starttime="20170825 16:29:32.258" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.259" starttime="20170825 16:29:32.258" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.260" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.260" starttime="20170825 16:29:32.260" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.260" starttime="20170825 16:29:32.259" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.260" starttime="20170825 16:29:32.254" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.260" starttime="20170825 16:29:32.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:32.261" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170825 16:29:32.261" starttime="20170825 16:29:32.261" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:32.329" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.329" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170825 16:29:32.406" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.406" starttime="20170825 16:29:32.292" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.406" level="INFO">${ret_values} = (u'20170825153656', u'', 0)</msg>
<status endtime="20170825 16:29:32.406" starttime="20170825 16:29:32.261" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.407" level="INFO">${stdout} = 20170825153656</msg>
<status endtime="20170825 16:29:32.407" starttime="20170825 16:29:32.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.407" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.407" starttime="20170825 16:29:32.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.417" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.417" starttime="20170825 16:29:32.417" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.417" starttime="20170825 16:29:32.416" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.408" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.252" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.252" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.108" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.106" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.418" starttime="20170825 16:29:32.106" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170825 16:29:32.419" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170825 16:29:32.419" starttime="20170825 16:29:32.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170825 16:29:32.420" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170825 16:29:32.420" starttime="20170825 16:29:32.419" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.423" starttime="20170825 16:29:32.422" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.423" starttime="20170825 16:29:32.422" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.424" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.424" starttime="20170825 16:29:32.424" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.424" starttime="20170825 16:29:32.423" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.426" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.426" starttime="20170825 16:29:32.425" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.426" starttime="20170825 16:29:32.425" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.427" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.427" starttime="20170825 16:29:32.427" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.427" starttime="20170825 16:29:32.426" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.427" starttime="20170825 16:29:32.421" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.427" starttime="20170825 16:29:32.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:32.428" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170825 16:29:32.428" starttime="20170825 16:29:32.428" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:32.498" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.498" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170825 16:29:32.555" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.555" starttime="20170825 16:29:32.462" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.555" level="INFO">${ret_values} = (u' 16:29:40 up 13 min,  load average: 0.29, 0.38, 0.41', u'', 0)</msg>
<status endtime="20170825 16:29:32.555" starttime="20170825 16:29:32.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.556" level="INFO">${stdout} =  16:29:40 up 13 min,  load average: 0.29, 0.38, 0.41</msg>
<status endtime="20170825 16:29:32.556" starttime="20170825 16:29:32.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.556" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.556" starttime="20170825 16:29:32.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.563" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.563" starttime="20170825 16:29:32.563" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.564" starttime="20170825 16:29:32.562" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.564" starttime="20170825 16:29:32.556" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.564" starttime="20170825 16:29:32.420" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.564" starttime="20170825 16:29:32.420" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.567" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.567" starttime="20170825 16:29:32.566" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.567" starttime="20170825 16:29:32.566" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.568" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.568" starttime="20170825 16:29:32.568" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.568" starttime="20170825 16:29:32.567" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.569" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.569" starttime="20170825 16:29:32.569" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.570" starttime="20170825 16:29:32.568" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.571" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.571" starttime="20170825 16:29:32.570" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.571" starttime="20170825 16:29:32.570" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.571" starttime="20170825 16:29:32.565" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.571" starttime="20170825 16:29:32.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:32.572" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170825 16:29:32.572" starttime="20170825 16:29:32.571" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:32.639" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.640" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170825 16:29:32.696" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.696" starttime="20170825 16:29:32.603" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.696" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Fri Aug 25 15:35:34 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170825 16:29:32.696" starttime="20170825 16:29:32.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.697" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Fri Aug 25 15:35:34 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170825 16:29:32.697" starttime="20170825 16:29:32.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.698" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.698" starttime="20170825 16:29:32.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.704" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.704" starttime="20170825 16:29:32.704" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.705" starttime="20170825 16:29:32.703" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.705" starttime="20170825 16:29:32.698" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.705" starttime="20170825 16:29:32.564" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.705" starttime="20170825 16:29:32.564" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.708" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.708" starttime="20170825 16:29:32.707" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.708" starttime="20170825 16:29:32.707" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.709" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.709" starttime="20170825 16:29:32.709" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.709" starttime="20170825 16:29:32.708" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.710" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.710" starttime="20170825 16:29:32.710" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.711" starttime="20170825 16:29:32.709" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.712" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.712" starttime="20170825 16:29:32.711" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.712" starttime="20170825 16:29:32.711" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.712" starttime="20170825 16:29:32.706" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.712" starttime="20170825 16:29:32.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:32.713" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170825 16:29:32.713" starttime="20170825 16:29:32.712" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:32.780" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.781" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170825 16:29:32.837" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:32.837" starttime="20170825 16:29:32.744" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.837" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170825 16:29:32.837" starttime="20170825 16:29:32.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:32.838" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170825 16:29:32.838" starttime="20170825 16:29:32.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:32.839" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:32.839" starttime="20170825 16:29:32.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.845" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:32.845" starttime="20170825 16:29:32.845" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.845" starttime="20170825 16:29:32.844" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.845" starttime="20170825 16:29:32.839" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:32.705" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:32.705" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:32.420" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:32.418" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:32.418" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:30.688" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:30.687" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:30.662" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:30.659" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.846" starttime="20170825 16:29:30.659" status="PASS"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:32.848" starttime="20170825 16:29:32.848" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.848" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:32.848" starttime="20170825 16:29:32.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:32.849" starttime="20170825 16:29:32.848" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170825 16:29:32.882" starttime="20170825 16:29:32.881" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:32.882" level="INFO">File '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/14837/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170825 16:29:32.883" starttime="20170825 16:29:32.882" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.883" starttime="20170825 16:29:32.881" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.883" starttime="20170825 16:29:32.849" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.883" starttime="20170825 16:29:32.846" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:32.883" starttime="20170825 16:29:32.846" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:32.885" starttime="20170825 16:29:32.884" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:32.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:32.885" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:32.885" starttime="20170825 16:29:32.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:32.885" starttime="20170825 16:29:32.885" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170825 16:29:32.948" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:32.949" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170825 16:29:32.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170825 16:29:33.007" level="INFO">${core_files} = /tmp/core_xargs.1288</msg>
<msg timestamp="20170825 16:29:33.007" level="INFO">${stderr} = </msg>
<msg timestamp="20170825 16:29:33.007" level="INFO">${rc} = 0</msg>
<status endtime="20170825 16:29:33.007" starttime="20170825 16:29:32.911" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170825 16:29:33.008" level="INFO">@{core_list} = [ /tmp/core_xargs.1288 ]</msg>
<status endtime="20170825 16:29:33.008" starttime="20170825 16:29:33.007" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170825 16:29:33.024" starttime="20170825 16:29:33.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170825 16:29:33.692" starttime="20170825 16:29:33.026" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:33.692" starttime="20170825 16:29:33.025" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:33.692" starttime="20170825 16:29:33.025" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:33.692" starttime="20170825 16:29:33.017" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:33.692" starttime="20170825 16:29:33.008" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_xargs.1288" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 16:29:33.898" starttime="20170825 16:29:33.693" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170825 16:29:33.937" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:33.938" level="INFO">Executing command 'rm /tmp/core_xargs.1288'.</msg>
<msg timestamp="20170825 16:29:33.995" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:33.899" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:33.693" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:33.693" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:32.911" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:32.886" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:32.883" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.007" starttime="20170825 16:29:32.883" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:34.009" starttime="20170825 16:29:34.009" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:34.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:34.009" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:34.009" starttime="20170825 16:29:34.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:34.010" starttime="20170825 16:29:34.010" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170825 16:29:34.036" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 16:29:34.036" starttime="20170825 16:29:34.036" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.037" starttime="20170825 16:29:34.035" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.037" starttime="20170825 16:29:34.010" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.037" starttime="20170825 16:29:34.008" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.037" starttime="20170825 16:29:34.007" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:34.040" starttime="20170825 16:29:34.039" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:34.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:34.040" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:34.040" starttime="20170825 16:29:34.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:34.040" starttime="20170825 16:29:34.040" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170825 16:29:34.066" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170825 16:29:34.066" starttime="20170825 16:29:34.066" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170825 16:29:34.067" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ...</msg>
<status endtime="20170825 16:29:34.068" starttime="20170825 16:29:34.067" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:34.068" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_dmesg.txt</msg>
<status endtime="20170825 16:29:34.068" starttime="20170825 16:29:34.068" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:34.070" starttime="20170825 16:29:34.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:34.070" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170825 16:29:34.070" starttime="20170825 16:29:34.070" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:34.138" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:34.138" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170825 16:29:34.205" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:34.205" starttime="20170825 16:29:34.102" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:34.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:34.205" level="INFO">${ret_values} = (u'[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache\n[    0.000000] OF: fdt:Machine model: Witherspoon BMC\n[    0.000000] Memory policy: Data cache writeback...</msg>
<status endtime="20170825 16:29:34.205" starttime="20170825 16:29:34.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:34.206" level="INFO">${stdout} = [    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache
[    0.000000] OF: fdt:Machine model: Witherspoon BMC
[    0.000000] Memory policy: Data cache writeback
[   ...</msg>
<status endtime="20170825 16:29:34.206" starttime="20170825 16:29:34.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:34.207" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:34.207" starttime="20170825 16:29:34.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:34.213" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_dmesg.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:34.214" starttime="20170825 16:29:34.213" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.214" starttime="20170825 16:29:34.212" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.214" starttime="20170825 16:29:34.207" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.214" starttime="20170825 16:29:34.069" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.214" starttime="20170825 16:29:34.068" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:34.215" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170825 16:29:34.215" starttime="20170825 16:29:34.214" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:34.216" starttime="20170825 16:29:34.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:34.217" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170825 16:29:34.217" starttime="20170825 16:29:34.216" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:34.293" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:34.294" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170825 16:29:34.836" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:34.836" starttime="20170825 16:29:34.253" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:34.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:34.837" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 25 16:29 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 25 16:29 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170825 16:29:34.837" starttime="20170825 16:29:34.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:34.838" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 25 16:29 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 25 16:29 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170825 16:29:34.838" starttime="20170825 16:29:34.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:34.839" level="INFO">${stderr} = ls: /proc/1364/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170825 16:29:34.839" starttime="20170825 16:29:34.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:34.846" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:34.846" starttime="20170825 16:29:34.845" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.846" starttime="20170825 16:29:34.844" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.846" starttime="20170825 16:29:34.839" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.846" starttime="20170825 16:29:34.215" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:34.846" starttime="20170825 16:29:34.214" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:34.847" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_journalctl.txt</msg>
<status endtime="20170825 16:29:34.847" starttime="20170825 16:29:34.847" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:34.848" starttime="20170825 16:29:34.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:34.849" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170825 16:29:34.849" starttime="20170825 16:29:34.849" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:34.918" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:34.918" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170825 16:29:36.279" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:36.279" starttime="20170825 16:29:34.881" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:36.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:36.281" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-08-25 16:16:09 UTC, end at Fri 2017-08-25 16:29:41 UTC. --\nAug 25 16:16:09 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 25 16:16:09 witherspoon kernel: Linu...</msg>
<status endtime="20170825 16:29:36.281" starttime="20170825 16:29:34.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:36.282" level="INFO">${stdout} = -- Logs begin at Fri 2017-08-25 16:16:09 UTC, end at Fri 2017-08-25 16:29:41 UTC. --
Aug 25 16:16:09 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 25 16:16:09 witherspoon kernel: Linux ver...</msg>
<status endtime="20170825 16:29:36.282" starttime="20170825 16:29:36.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:36.283" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:36.283" starttime="20170825 16:29:36.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:36.291" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_journalctl.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:36.291" starttime="20170825 16:29:36.290" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.291" starttime="20170825 16:29:36.289" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.291" starttime="20170825 16:29:36.283" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.291" starttime="20170825 16:29:34.847" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.291" starttime="20170825 16:29:34.846" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:36.292" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_procinfo.txt</msg>
<status endtime="20170825 16:29:36.292" starttime="20170825 16:29:36.291" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:36.293" starttime="20170825 16:29:36.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:36.294" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170825 16:29:36.294" starttime="20170825 16:29:36.293" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:36.364" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:36.364" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170825 16:29:36.422" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:36.422" starttime="20170825 16:29:36.325" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:36.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:36.422" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170825 16:29:36.422" starttime="20170825 16:29:36.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:36.423" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170825 16:29:36.423" starttime="20170825 16:29:36.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:36.423" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:36.423" starttime="20170825 16:29:36.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:36.430" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_procinfo.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:36.430" starttime="20170825 16:29:36.430" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.430" starttime="20170825 16:29:36.429" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.430" starttime="20170825 16:29:36.424" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.431" starttime="20170825 16:29:36.292" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.431" starttime="20170825 16:29:36.291" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:36.431" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_list.txt</msg>
<status endtime="20170825 16:29:36.431" starttime="20170825 16:29:36.431" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:36.433" starttime="20170825 16:29:36.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:36.433" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170825 16:29:36.433" starttime="20170825 16:29:36.433" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:36.503" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:36.503" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170825 16:29:36.793" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:36.793" starttime="20170825 16:29:36.464" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:36.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:36.793" level="INFO">${ret_values} = (u'Mem: 157284K used, 274964K free, 14460K shrd, 11552K buff, 52856K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.35 0.40 0.42 1/149 1367\n  PID  PPID ...</msg>
<status endtime="20170825 16:29:36.793" starttime="20170825 16:29:36.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:36.794" level="INFO">${stdout} = Mem: 157284K used, 274964K free, 14460K shrd, 11552K buff, 52856K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.35 0.40 0.42 1/149 1367
  PID  PPID USER  ...</msg>
<status endtime="20170825 16:29:36.794" starttime="20170825 16:29:36.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:36.794" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:36.794" starttime="20170825 16:29:36.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:36.801" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_list.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:36.801" starttime="20170825 16:29:36.801" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.801" starttime="20170825 16:29:36.800" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.801" starttime="20170825 16:29:36.795" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.801" starttime="20170825 16:29:36.432" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.801" starttime="20170825 16:29:36.431" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:36.802" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_meminfo.txt</msg>
<status endtime="20170825 16:29:36.802" starttime="20170825 16:29:36.802" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 16:29:36.804" starttime="20170825 16:29:36.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:36.805" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170825 16:29:36.805" starttime="20170825 16:29:36.804" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170825 16:29:36.876" level="INFO">encoding=UTF-8
timeout=25 seconds
port=22
alias=bmc_connection
height=24
index=1
host=9.3.86.161
width=80
path_separator=/
prompt=# 
newline=

term_type=vt100</msg>
<msg timestamp="20170825 16:29:36.877" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170825 16:29:36.933" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170825 16:29:36.933" starttime="20170825 16:29:36.836" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:36.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:36.933" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          274964 kB\nMemAvailable:     322716 kB\nBuffers:           11552 kB\nCached:            52856 kB\nSwapCached:            0 kB\nActive:            9441...</msg>
<status endtime="20170825 16:29:36.933" starttime="20170825 16:29:36.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170825 16:29:36.934" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          274964 kB
MemAvailable:     322716 kB
Buffers:           11552 kB
Cached:            52856 kB
SwapCached:            0 kB
Active:            94416 kB
Inac...</msg>
<status endtime="20170825 16:29:36.934" starttime="20170825 16:29:36.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170825 16:29:36.935" level="INFO">${stderr} = </msg>
<status endtime="20170825 16:29:36.935" starttime="20170825 16:29:36.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:36.941" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_meminfo.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:36.941" starttime="20170825 16:29:36.941" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.941" starttime="20170825 16:29:36.940" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.941" starttime="20170825 16:29:36.935" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:36.802" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:36.802" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.068" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.067" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.066" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.066" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.066" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.041" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.037" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:36.942" starttime="20170825 16:29:34.037" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:36.944" starttime="20170825 16:29:36.944" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:36.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:36.944" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:36.944" starttime="20170825 16:29:36.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:36.945" starttime="20170825 16:29:36.944" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170825 16:29:36.972" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170825 16:29:36.972" starttime="20170825 16:29:36.971" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170825 16:29:36.973" level="INFO">@{cmd_list} = [ ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led'...</msg>
<status endtime="20170825 16:29:36.973" starttime="20170825 16:29:36.973" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:36.974" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170825 16:29:36.974" starttime="20170825 16:29:36.974" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:36.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:36.977" starttime="20170825 16:29:36.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:36.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:36.978" starttime="20170825 16:29:36.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:36.979" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:36.979" starttime="20170825 16:29:36.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:36.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:36.980" starttime="20170825 16:29:36.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:37.190" starttime="20170825 16:29:36.981" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:37.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.190" starttime="20170825 16:29:36.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.191" starttime="20170825 16:29:37.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.191" starttime="20170825 16:29:37.191" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.191" starttime="20170825 16:29:36.976" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.191" starttime="20170825 16:29:36.975" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.192" starttime="20170825 16:29:36.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:37.192" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170825 16:29:37.192" starttime="20170825 16:29:37.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:37.193" starttime="20170825 16:29:37.193" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:37.615" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:37.615" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.615" starttime="20170825 16:29:37.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:37.615" starttime="20170825 16:29:37.615" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:37.616" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:37.616" starttime="20170825 16:29:37.616" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.616" starttime="20170825 16:29:36.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.617" starttime="20170825 16:29:37.617" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.617" level="INFO">${status} = True</msg>
<status endtime="20170825 16:29:37.617" starttime="20170825 16:29:37.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 16:29:37.618" starttime="20170825 16:29:37.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170825 16:29:37.619" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28200
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:37.619" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170825 16:29:37.619" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
            "Scale": 0,
            "Target": 0,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS",
           ...</msg>
<status endtime="20170825 16:29:37.619" starttime="20170825 16:29:37.618" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:37.620" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:37.621" starttime="20170825 16:29:37.620" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.621" starttime="20170825 16:29:37.619" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.621" starttime="20170825 16:29:36.973" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:37.622" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_inventory.txt</msg>
<status endtime="20170825 16:29:37.622" starttime="20170825 16:29:37.621" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:37.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:37.625" starttime="20170825 16:29:37.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:37.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:37.625" starttime="20170825 16:29:37.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:37.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:37.626" starttime="20170825 16:29:37.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:37.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:37.626" starttime="20170825 16:29:37.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.811" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:37.811" starttime="20170825 16:29:37.627" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:37.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.812" starttime="20170825 16:29:37.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.812" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.812" starttime="20170825 16:29:37.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.813" starttime="20170825 16:29:37.812" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.813" starttime="20170825 16:29:37.623" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.813" starttime="20170825 16:29:37.623" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.813" starttime="20170825 16:29:37.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:37.814" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170825 16:29:37.814" starttime="20170825 16:29:37.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:37.814" starttime="20170825 16:29:37.814" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:37.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:37.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.983" starttime="20170825 16:29:37.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:37.983" starttime="20170825 16:29:37.983" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:37.984" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:37.984" starttime="20170825 16:29:37.984" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:37.984" starttime="20170825 16:29:37.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:37.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:37.986" starttime="20170825 16:29:37.985" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:37.986" level="INFO">${status} = True</msg>
<status endtime="20170825 16:29:37.986" starttime="20170825 16:29:37.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 16:29:37.987" starttime="20170825 16:29:37.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170825 16:29:37.988" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:37.988" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170825 16:29:37.988" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170825 16:29:37.989" starttime="20170825 16:29:37.987" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:37.990" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_inventory.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:37.990" starttime="20170825 16:29:37.989" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.990" starttime="20170825 16:29:37.989" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:37.990" starttime="20170825 16:29:37.621" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:37.991" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_list.txt</msg>
<status endtime="20170825 16:29:37.991" starttime="20170825 16:29:37.990" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:37.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:37.994" starttime="20170825 16:29:37.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:37.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:37.994" starttime="20170825 16:29:37.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:37.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:37.995" starttime="20170825 16:29:37.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:37.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:37.996" starttime="20170825 16:29:37.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:38.179" starttime="20170825 16:29:37.996" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:38.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:38.179" starttime="20170825 16:29:37.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.180" starttime="20170825 16:29:38.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.181" starttime="20170825 16:29:38.180" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.181" starttime="20170825 16:29:37.993" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.181" starttime="20170825 16:29:37.992" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.181" starttime="20170825 16:29:37.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:38.181" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170825 16:29:38.182" starttime="20170825 16:29:38.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:38.182" starttime="20170825 16:29:38.182" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:38.354" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:38.354" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:38.354" starttime="20170825 16:29:38.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:38.354" starttime="20170825 16:29:38.354" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:38.355" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:38.355" starttime="20170825 16:29:38.355" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:38.355" starttime="20170825 16:29:37.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.356" starttime="20170825 16:29:38.356" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.356" level="INFO">${status} = True</msg>
<status endtime="20170825 16:29:38.356" starttime="20170825 16:29:38.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 16:29:38.357" starttime="20170825 16:29:38.357" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170825 16:29:38.358" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:38.358" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170825 16:29:38.358" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170825 16:29:38.358" starttime="20170825 16:29:38.357" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:38.359" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_list.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:38.359" starttime="20170825 16:29:38.359" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.359" starttime="20170825 16:29:38.358" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.359" starttime="20170825 16:29:37.990" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:38.360" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_led.txt</msg>
<status endtime="20170825 16:29:38.360" starttime="20170825 16:29:38.360" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:38.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:38.363" starttime="20170825 16:29:38.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:38.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:38.364" starttime="20170825 16:29:38.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:38.364" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:38.364" starttime="20170825 16:29:38.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:38.365" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:38.365" starttime="20170825 16:29:38.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.613" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:38.613" starttime="20170825 16:29:38.366" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:38.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:38.613" starttime="20170825 16:29:38.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.614" starttime="20170825 16:29:38.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.615" starttime="20170825 16:29:38.614" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.615" starttime="20170825 16:29:38.362" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.615" starttime="20170825 16:29:38.362" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.615" starttime="20170825 16:29:38.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:38.616" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170825 16:29:38.616" starttime="20170825 16:29:38.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:38.616" starttime="20170825 16:29:38.616" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:38.660" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:38.660" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:38.660" starttime="20170825 16:29:38.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:38.660" starttime="20170825 16:29:38.660" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:38.661" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:38.661" starttime="20170825 16:29:38.661" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.661" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:38.661" starttime="20170825 16:29:38.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170825 16:29:38.662" level="FAIL">404 != 200</msg>
<status endtime="20170825 16:29:38.662" starttime="20170825 16:29:38.662" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:38.662" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:38.662" starttime="20170825 16:29:38.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170825 16:29:38.663" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 16:29:38.663" starttime="20170825 16:29:38.663" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.664" starttime="20170825 16:29:38.663" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.664" starttime="20170825 16:29:38.359" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:38.664" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_elog.txt</msg>
<status endtime="20170825 16:29:38.664" starttime="20170825 16:29:38.664" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:38.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:38.667" starttime="20170825 16:29:38.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:38.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:38.668" starttime="20170825 16:29:38.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:38.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:38.669" starttime="20170825 16:29:38.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:38.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:38.669" starttime="20170825 16:29:38.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.856" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:38.856" starttime="20170825 16:29:38.670" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:38.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:38.856" starttime="20170825 16:29:38.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.857" starttime="20170825 16:29:38.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:38.857" starttime="20170825 16:29:38.857" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.857" starttime="20170825 16:29:38.666" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.857" starttime="20170825 16:29:38.666" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.858" starttime="20170825 16:29:38.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:38.858" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170825 16:29:38.858" starttime="20170825 16:29:38.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:38.859" starttime="20170825 16:29:38.858" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:38.903" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:38.903" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:38.903" starttime="20170825 16:29:38.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:38.903" starttime="20170825 16:29:38.903" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:38.904" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:38.904" starttime="20170825 16:29:38.904" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:38.904" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:38.904" starttime="20170825 16:29:38.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:38.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170825 16:29:38.905" level="FAIL">404 != 200</msg>
<status endtime="20170825 16:29:38.905" starttime="20170825 16:29:38.905" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:38.905" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:38.905" starttime="20170825 16:29:38.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170825 16:29:38.906" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 16:29:38.907" starttime="20170825 16:29:38.906" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.907" starttime="20170825 16:29:38.906" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:38.907" starttime="20170825 16:29:38.664" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:38.908" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_record_log.txt</msg>
<status endtime="20170825 16:29:38.908" starttime="20170825 16:29:38.907" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:38.911" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:38.912" starttime="20170825 16:29:38.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:38.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:38.913" starttime="20170825 16:29:38.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:38.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:38.914" starttime="20170825 16:29:38.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:38.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:38.915" starttime="20170825 16:29:38.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:39.094" starttime="20170825 16:29:38.916" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:39.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:39.095" starttime="20170825 16:29:38.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.095" starttime="20170825 16:29:39.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.096" starttime="20170825 16:29:39.095" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.096" starttime="20170825 16:29:38.910" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.096" starttime="20170825 16:29:38.910" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.096" starttime="20170825 16:29:38.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:39.097" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170825 16:29:39.097" starttime="20170825 16:29:39.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:39.097" starttime="20170825 16:29:39.097" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:39.141" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:39.141" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:39.141" starttime="20170825 16:29:39.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:39.141" starttime="20170825 16:29:39.141" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:39.142" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:39.142" starttime="20170825 16:29:39.142" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.142" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:39.142" starttime="20170825 16:29:38.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170825 16:29:39.143" level="FAIL">404 != 200</msg>
<status endtime="20170825 16:29:39.143" starttime="20170825 16:29:39.143" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:39.143" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:39.143" starttime="20170825 16:29:39.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170825 16:29:39.144" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 16:29:39.145" starttime="20170825 16:29:39.144" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.145" starttime="20170825 16:29:39.144" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.145" starttime="20170825 16:29:38.907" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170825 16:29:39.145" level="INFO">${logpath} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_control_list.txt</msg>
<status endtime="20170825 16:29:39.145" starttime="20170825 16:29:39.145" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:39.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:39.148" starttime="20170825 16:29:39.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:39.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:39.149" starttime="20170825 16:29:39.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:39.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:39.150" starttime="20170825 16:29:39.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:39.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:39.150" starttime="20170825 16:29:39.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.327" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:39.327" starttime="20170825 16:29:39.151" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.327" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:39.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:39.327" starttime="20170825 16:29:39.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.328" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.328" starttime="20170825 16:29:39.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.329" starttime="20170825 16:29:39.328" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.329" starttime="20170825 16:29:39.147" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.329" starttime="20170825 16:29:39.147" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.329" starttime="20170825 16:29:39.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:39.330" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170825 16:29:39.330" starttime="20170825 16:29:39.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:39.330" starttime="20170825 16:29:39.330" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:39.602" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:39.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:39.602" starttime="20170825 16:29:39.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:39.602" starttime="20170825 16:29:39.602" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:39.603" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:39.603" starttime="20170825 16:29:39.603" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:39.603" starttime="20170825 16:29:39.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.604" starttime="20170825 16:29:39.604" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.604" level="INFO">${status} = True</msg>
<status endtime="20170825 16:29:39.604" starttime="20170825 16:29:39.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 16:29:39.605" starttime="20170825 16:29:39.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170825 16:29:39.606" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170825 16:29:39.606" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170825 16:29:39.606" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170825 16:29:39.606" starttime="20170825 16:29:39.605" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:39.607" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_control_list.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/20170825162930436040_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:39.607" starttime="20170825 16:29:39.607" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.607" starttime="20170825 16:29:39.606" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.607" starttime="20170825 16:29:39.145" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.607" starttime="20170825 16:29:36.973" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.972" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.972" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.972" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.971" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.945" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.942" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.608" starttime="20170825 16:29:36.942" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 16:29:39.611" starttime="20170825 16:29:39.610" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:39.611" level="INFO">${ret_values} = None</msg>
<status endtime="20170825 16:29:39.611" starttime="20170825 16:29:39.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 16:29:39.612" starttime="20170825 16:29:39.611" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170825 16:29:39.643" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 16:29:39.643" starttime="20170825 16:29:39.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170825 16:29:39.644" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 16:29:39.644" starttime="20170825 16:29:39.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170825 16:29:39.644" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 16:29:39.644" starttime="20170825 16:29:39.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170825 16:29:39.645" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 16:29:39.645" starttime="20170825 16:29:39.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.849" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 16:29:39.849" starttime="20170825 16:29:39.646" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170825 16:29:39.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 16:29:39.849" starttime="20170825 16:29:39.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.850" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.850" starttime="20170825 16:29:39.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 16:29:39.851" starttime="20170825 16:29:39.850" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.851" starttime="20170825 16:29:39.642" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.851" starttime="20170825 16:29:39.641" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.851" starttime="20170825 16:29:39.641" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170825 16:29:39.851" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170825 16:29:39.852" starttime="20170825 16:29:39.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 16:29:39.852" starttime="20170825 16:29:39.852" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170825 16:29:39.912" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170825 16:29:39.912" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:39.912" starttime="20170825 16:29:39.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 16:29:39.912" starttime="20170825 16:29:39.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170825 16:29:39.913" level="INFO">Delete All Sessions</msg>
<status endtime="20170825 16:29:39.913" starttime="20170825 16:29:39.913" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.913" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 16:29:39.913" starttime="20170825 16:29:39.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170825 16:29:39.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170825 16:29:39.915" level="FAIL">404 != 200</msg>
<status endtime="20170825 16:29:39.915" starttime="20170825 16:29:39.914" status="FAIL"></status>
</kw>
<msg timestamp="20170825 16:29:39.915" level="INFO">${status} = False</msg>
<status endtime="20170825 16:29:39.915" starttime="20170825 16:29:39.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170825 16:29:39.916" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 16:29:39.916" starttime="20170825 16:29:39.916" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.916" starttime="20170825 16:29:39.640" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.916" starttime="20170825 16:29:39.612" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.916" starttime="20170825 16:29:39.609" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.916" starttime="20170825 16:29:39.608" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.917" starttime="20170825 16:29:30.659" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.917" starttime="20170825 16:29:30.653" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.917" starttime="20170825 16:29:30.653" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.917" starttime="20170825 16:29:30.653" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170825 16:29:39.924" starttime="20170825 16:29:39.924" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.924" starttime="20170825 16:29:39.917" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.924" starttime="20170825 16:29:30.652" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.924" starttime="20170825 16:29:27.389" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.925" starttime="20170825 16:29:27.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170825 16:29:39.925" starttime="20170825 16:29:39.925" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170825 16:29:39.935" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170825 16:29:39.935" starttime="20170825 16:29:39.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170825 16:29:39.936" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14837/obmc-robot/logs/20170825162930436040_TestsTestBasicPoweron/20170825162930436040_PowerOnTest/</msg>
<status endtime="20170825 16:29:39.936" starttime="20170825 16:29:39.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170825 16:29:39.937" starttime="20170825 16:29:39.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170825 16:29:39.938" starttime="20170825 16:29:39.937" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:39.939" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs"&gt;/tmp/fspcibld/14837/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170825 16:29:39.939" starttime="20170825 16:29:39.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:39.940" level="INFO">File '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170825 16:29:39.940" starttime="20170825 16:29:39.940" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.941" level="INFO">${exist} = True</msg>
<status endtime="20170825 16:29:39.941" starttime="20170825 16:29:39.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170825 16:29:39.941" starttime="20170825 16:29:39.941" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170825 16:29:39.942" starttime="20170825 16:29:39.941" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:29:39.943" level="INFO">${cur_time} = 2017-08-25 16:29:39:942433</msg>
<status endtime="20170825 16:29:39.943" starttime="20170825 16:29:39.942" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170825 16:29:39.943" level="INFO">${cur_time} = 20170825162939942433</msg>
<status endtime="20170825 16:29:39.943" starttime="20170825 16:29:39.943" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.943" level="INFO">${cur_time} = 20170825162939942433</msg>
<status endtime="20170825 16:29:39.943" starttime="20170825 16:29:39.942" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:39.945" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14837/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:39.945" starttime="20170825 16:29:39.944" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.945" starttime="20170825 16:29:39.925" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.945" starttime="20170825 16:29:27.036" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170825 16:29:39.948" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:29:39.949" starttime="20170825 16:29:39.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170825 16:29:39.949" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:29:39.949" starttime="20170825 16:29:39.949" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.949" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170825 16:29:39.950" starttime="20170825 16:29:39.947" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:39.950" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 16:29:39.950" starttime="20170825 16:29:39.950" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:29:39.951" starttime="20170825 16:29:39.951" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:29:39.957" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:29:39.962" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:29:39.963" level="INFO">${output} = /tmp/fspcibld/14837/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 16:29:39.963" starttime="20170825 16:29:39.951" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 16:29:39.967" starttime="20170825 16:29:39.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 16:29:39.968" starttime="20170825 16:29:39.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:39.969" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:29:39.969" starttime="20170825 16:29:39.969" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:39.969" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170825 16:29:39.969" starttime="20170825 16:29:39.950" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20170825 16:29:39.970" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20170825 16:29:39.970" starttime="20170825 16:29:39.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:39.971" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170825 16:29:39.971" starttime="20170825 16:29:39.970" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:29:39.971" starttime="20170825 16:29:39.971" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170825 16:29:39.974" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170825 16:29:39.987" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:29:39.988" level="INFO">${os_con_pid} = 182</msg>
<status endtime="20170825 16:29:39.988" starttime="20170825 16:29:39.971" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170825 16:29:39.991" starttime="20170825 16:29:39.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170825 16:29:39.991" level="INFO">${cmd_buf} = kill -9 182</msg>
<status endtime="20170825 16:29:39.991" starttime="20170825 16:29:39.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 16:29:39.994" starttime="20170825 16:29:39.993" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:39.994" starttime="20170825 16:29:39.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170825 16:29:40.004" level="INFO">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status endtime="20170825 16:29:40.009" starttime="20170825 16:29:39.995" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:40.010" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:29:40.010" level="INFO">${output} = </msg>
<status endtime="20170825 16:29:40.010" starttime="20170825 16:29:39.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 16:29:40.014" starttime="20170825 16:29:40.014" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:40.014" starttime="20170825 16:29:40.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170825 16:29:40.020" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/14837/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/14837/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170825 16:29:40.020" starttime="20170825 16:29:40.016" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:40.020" starttime="20170825 16:29:40.015" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:40.020" starttime="20170825 16:29:40.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170825 16:29:40.021" level="INFO">${output} = </msg>
<status endtime="20170825 16:29:40.021" starttime="20170825 16:29:40.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170825 16:29:40.022" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170825 16:29:40.022" starttime="20170825 16:29:40.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170825 16:29:40.061" starttime="20170825 16:29:40.022" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:40.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20170825 16:29:40.062" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170825 16:29:40.062" starttime="20170825 16:29:40.022" status="PASS"></status>
</kw>
<msg timestamp="20170825 16:29:40.063" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170825 16:29:40.063" starttime="20170825 16:29:39.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170825 16:29:40.065" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170825 16:29:40.065" starttime="20170825 16:29:40.065" status="PASS"></status>
</kw>
<status endtime="20170825 16:29:40.065" starttime="20170825 16:29:27.035" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170825 16:29:40.065" starttime="20170825 16:19:09.927" status="FAIL" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170825 16:29:40.066" starttime="20170825 16:19:09.893" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170825 16:29:40.069" starttime="20170825 16:19:03.789" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
