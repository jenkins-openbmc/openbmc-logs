<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170508 17:14:47.189">
<suite id="s1" source="/tmp/root/13223/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:47.725">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:14:47.725" status="FAIL" endtime="20170508 17:14:47.725"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:47.725">${has_host} = False</msg>
<status starttime="20170508 17:14:47.725" status="PASS" endtime="20170508 17:14:47.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:14:47.726" status="PASS" endtime="20170508 17:14:47.726"></status>
</kw>
<status starttime="20170508 17:14:47.726" status="PASS" endtime="20170508 17:14:47.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:47.728">${port_num} = 22</msg>
<status starttime="20170508 17:14:47.728" status="PASS" endtime="20170508 17:14:47.728"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:47.728">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:14:47.728" status="PASS" endtime="20170508 17:14:47.728"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:47.729">${https_num} = 443</msg>
<status starttime="20170508 17:14:47.729" status="PASS" endtime="20170508 17:14:47.729"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:47.730">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:14:47.729" status="PASS" endtime="20170508 17:14:47.730"></status>
</kw>
<status starttime="20170508 17:14:47.727" status="PASS" endtime="20170508 17:14:47.730"></status>
</kw>
<status starttime="20170508 17:14:47.727" status="PASS" endtime="20170508 17:14:47.730"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:47.731">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:14:47.730" status="FAIL" endtime="20170508 17:14:47.731"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:47.731">${has_port} = False</msg>
<status starttime="20170508 17:14:47.730" status="PASS" endtime="20170508 17:14:47.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:14:47.732" status="PASS" endtime="20170508 17:14:47.732"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:14:47.733" status="PASS" endtime="20170508 17:14:47.733"></status>
</kw>
<status starttime="20170508 17:14:47.732" status="PASS" endtime="20170508 17:14:47.733"></status>
</kw>
<status starttime="20170508 17:14:47.731" status="PASS" endtime="20170508 17:14:47.733"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:47.734">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:14:50.067">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:14:47.733" status="PASS" endtime="20170508 17:14:50.068"></status>
</kw>
<status starttime="20170508 17:14:47.724" status="PASS" endtime="20170508 17:14:50.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:50.069">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170508 17:14:50.201">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:14:50.201">${output} = VERSION_ID="v1.99.5-17-g28770f8"</msg>
<msg level="INFO" timestamp="20170508 17:14:50.201">${stderr} = </msg>
<status starttime="20170508 17:14:50.069" status="PASS" endtime="20170508 17:14:50.201"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.202">Length is 0</msg>
<status starttime="20170508 17:14:50.202" status="PASS" endtime="20170508 17:14:50.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.202">VERSION_ID="v1.99.5-17-g28770f8"</msg>
<status starttime="20170508 17:14:50.202" status="PASS" endtime="20170508 17:14:50.202"></status>
</kw>
<status starttime="20170508 17:14:50.068" status="PASS" endtime="20170508 17:14:50.203"></status>
</kw>
<status starttime="20170508 17:14:50.068" status="PASS" endtime="20170508 17:14:50.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:50.204">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170508 17:14:50.444">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:14:50.444">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170508 17:14:50.444">${stderr} = </msg>
<status starttime="20170508 17:14:50.204" status="PASS" endtime="20170508 17:14:50.444"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.445">Length is 0</msg>
<status starttime="20170508 17:14:50.445" status="PASS" endtime="20170508 17:14:50.445"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:50.445">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170508 17:14:50.203" status="PASS" endtime="20170508 17:14:50.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.446">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170508 17:14:50.445" status="PASS" endtime="20170508 17:14:50.447"></status>
</kw>
<status starttime="20170508 17:14:50.203" status="PASS" endtime="20170508 17:14:50.447"></status>
</kw>
<status starttime="20170508 17:14:50.203" status="PASS" endtime="20170508 17:14:50.447"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:50.451">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:14:50.451" status="FAIL" endtime="20170508 17:14:50.451"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:50.451">${has_host} = False</msg>
<status starttime="20170508 17:14:50.450" status="PASS" endtime="20170508 17:14:50.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:14:50.452" status="PASS" endtime="20170508 17:14:50.452"></status>
</kw>
<status starttime="20170508 17:14:50.451" status="PASS" endtime="20170508 17:14:50.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:50.454">${port_num} = 22</msg>
<status starttime="20170508 17:14:50.453" status="PASS" endtime="20170508 17:14:50.454"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:50.454">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:14:50.454" status="PASS" endtime="20170508 17:14:50.454"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:50.455">${https_num} = 443</msg>
<status starttime="20170508 17:14:50.454" status="PASS" endtime="20170508 17:14:50.455"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.455">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:14:50.455" status="PASS" endtime="20170508 17:14:50.456"></status>
</kw>
<status starttime="20170508 17:14:50.453" status="PASS" endtime="20170508 17:14:50.456"></status>
</kw>
<status starttime="20170508 17:14:50.453" status="PASS" endtime="20170508 17:14:50.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:50.457">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:14:50.456" status="FAIL" endtime="20170508 17:14:50.457"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:50.457">${has_port} = False</msg>
<status starttime="20170508 17:14:50.456" status="PASS" endtime="20170508 17:14:50.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:14:50.458" status="PASS" endtime="20170508 17:14:50.458"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:14:50.459" status="PASS" endtime="20170508 17:14:50.459"></status>
</kw>
<status starttime="20170508 17:14:50.458" status="PASS" endtime="20170508 17:14:50.459"></status>
</kw>
<status starttime="20170508 17:14:50.457" status="PASS" endtime="20170508 17:14:50.459"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:50.460">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:14:52.348">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:14:50.459" status="PASS" endtime="20170508 17:14:52.348"></status>
</kw>
<status starttime="20170508 17:14:50.450" status="PASS" endtime="20170508 17:14:52.348"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:52.349">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170508 17:14:52.415">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:14:52.415">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170508 17:14:52.416">${stderr} = </msg>
<status starttime="20170508 17:14:52.348" status="PASS" endtime="20170508 17:14:52.416"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:52.416">Length is 0</msg>
<status starttime="20170508 17:14:52.416" status="PASS" endtime="20170508 17:14:52.416"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:52.416">Length is 11</msg>
<status starttime="20170508 17:14:52.416" status="PASS" endtime="20170508 17:14:52.417"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:52.417">${bmc_model} = Witherspoon</msg>
<status starttime="20170508 17:14:50.449" status="PASS" endtime="20170508 17:14:52.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:52.417">BMC Model=Witherspoon</msg>
<status starttime="20170508 17:14:52.417" status="PASS" endtime="20170508 17:14:52.417"></status>
</kw>
<status starttime="20170508 17:14:50.447" status="PASS" endtime="20170508 17:14:52.417"></status>
</kw>
<status starttime="20170508 17:14:50.447" status="PASS" endtime="20170508 17:14:52.417"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:52.419">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:14:52.419" status="FAIL" endtime="20170508 17:14:52.419"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:52.420">${has_host} = False</msg>
<status starttime="20170508 17:14:52.419" status="PASS" endtime="20170508 17:14:52.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:14:52.420" status="PASS" endtime="20170508 17:14:52.421"></status>
</kw>
<status starttime="20170508 17:14:52.420" status="PASS" endtime="20170508 17:14:52.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:52.422">${port_num} = 22</msg>
<status starttime="20170508 17:14:52.422" status="PASS" endtime="20170508 17:14:52.422"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:52.423">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:14:52.422" status="PASS" endtime="20170508 17:14:52.423"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:52.423">${https_num} = 443</msg>
<status starttime="20170508 17:14:52.423" status="PASS" endtime="20170508 17:14:52.423"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:52.424">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:14:52.423" status="PASS" endtime="20170508 17:14:52.424"></status>
</kw>
<status starttime="20170508 17:14:52.421" status="PASS" endtime="20170508 17:14:52.424"></status>
</kw>
<status starttime="20170508 17:14:52.421" status="PASS" endtime="20170508 17:14:52.424"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:52.425">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:14:52.425" status="FAIL" endtime="20170508 17:14:52.425"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:52.425">${has_port} = False</msg>
<status starttime="20170508 17:14:52.424" status="PASS" endtime="20170508 17:14:52.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:14:52.426" status="PASS" endtime="20170508 17:14:52.427"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:14:52.427" status="PASS" endtime="20170508 17:14:52.427"></status>
</kw>
<status starttime="20170508 17:14:52.426" status="PASS" endtime="20170508 17:14:52.427"></status>
</kw>
<status starttime="20170508 17:14:52.425" status="PASS" endtime="20170508 17:14:52.427"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:52.428">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.073">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:14:52.428" status="PASS" endtime="20170508 17:14:54.074"></status>
</kw>
<status starttime="20170508 17:14:52.418" status="PASS" endtime="20170508 17:14:54.074"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.075">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.142">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.142">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170508 17:14:54.142">${stderr} = </msg>
<status starttime="20170508 17:14:54.075" status="PASS" endtime="20170508 17:14:54.142"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.143">Length is 0</msg>
<status starttime="20170508 17:14:54.143" status="PASS" endtime="20170508 17:14:54.143"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.143">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170508 17:14:54.074" status="PASS" endtime="20170508 17:14:54.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170508 17:14:54.143" status="PASS" endtime="20170508 17:14:54.144"></status>
</kw>
<status starttime="20170508 17:14:52.418" status="PASS" endtime="20170508 17:14:54.144"></status>
</kw>
<status starttime="20170508 17:14:52.418" status="PASS" endtime="20170508 17:14:54.144"></status>
</kw>
<status starttime="20170508 17:14:47.723" status="PASS" endtime="20170508 17:14:54.144"></status>
</kw>
<suite id="s1-s1" source="/tmp/root/13223/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/root/13223/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.226">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:14:54.225" status="PASS" endtime="20170508 17:14:54.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.227">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:14:54.226" status="PASS" endtime="20170508 17:14:54.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.227">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:14:54.227" status="PASS" endtime="20170508 17:14:54.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:14:54.228" status="PASS" endtime="20170508 17:14:54.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:14:54.229" status="PASS" endtime="20170508 17:14:54.451"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:14:54.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:54.228" status="PASS" endtime="20170508 17:14:54.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:54.452" status="PASS" endtime="20170508 17:14:54.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:54.453" status="PASS" endtime="20170508 17:14:54.453"></status>
</kw>
<status starttime="20170508 17:14:54.225" status="PASS" endtime="20170508 17:14:54.453"></status>
</kw>
<status starttime="20170508 17:14:54.224" status="PASS" endtime="20170508 17:14:54.454"></status>
</kw>
<status starttime="20170508 17:14:54.224" status="PASS" endtime="20170508 17:14:54.454"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.463">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:14:54.462" status="PASS" endtime="20170508 17:14:54.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:14:54.464" status="PASS" endtime="20170508 17:14:54.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:14:54.465" status="PASS" endtime="20170508 17:14:54.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:14:54.466" status="PASS" endtime="20170508 17:14:54.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:14:54.470" status="PASS" endtime="20170508 17:14:54.675"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.675">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:14:54.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:54.470" status="PASS" endtime="20170508 17:14:54.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:54.676" status="PASS" endtime="20170508 17:14:54.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:54.676" status="PASS" endtime="20170508 17:14:54.677"></status>
</kw>
<status starttime="20170508 17:14:54.461" status="PASS" endtime="20170508 17:14:54.677"></status>
</kw>
<status starttime="20170508 17:14:54.461" status="PASS" endtime="20170508 17:14:54.677"></status>
</kw>
<status starttime="20170508 17:14:54.458" status="PASS" endtime="20170508 17:14:54.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.678">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:14:54.677" status="PASS" endtime="20170508 17:14:54.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.680">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:14:54.679" status="PASS" endtime="20170508 17:14:54.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.681">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:14:54.681" status="PASS" endtime="20170508 17:14:54.681"></status>
</kw>
<status starttime="20170508 17:14:54.680" status="PASS" endtime="20170508 17:14:54.681"></status>
</kw>
<status starttime="20170508 17:14:54.679" status="PASS" endtime="20170508 17:14:54.681"></status>
</kw>
<status starttime="20170508 17:14:54.678" status="PASS" endtime="20170508 17:14:54.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.747">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:14:54.747">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:54.682" status="PASS" endtime="20170508 17:14:54.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.749">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:54.749" status="PASS" endtime="20170508 17:14:54.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:54.750" status="PASS" endtime="20170508 17:14:54.751"></status>
</kw>
<status starttime="20170508 17:14:54.749" status="PASS" endtime="20170508 17:14:54.751"></status>
</kw>
<status starttime="20170508 17:14:54.748" status="PASS" endtime="20170508 17:14:54.751"></status>
</kw>
<status starttime="20170508 17:14:54.748" status="PASS" endtime="20170508 17:14:54.751"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:54.456" status="PASS" endtime="20170508 17:14:54.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:54.752" status="PASS" endtime="20170508 17:14:54.752"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.753">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:14:54.753">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:14:54.753">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:14:54.752" status="PASS" endtime="20170508 17:14:54.753"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.753">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170508 17:14:54.456" status="PASS" endtime="20170508 17:14:54.754"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.754">${host_state} = Running</msg>
<status starttime="20170508 17:14:54.455" status="PASS" endtime="20170508 17:14:54.754"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:54.755">Running != Quiesced</msg>
<status starttime="20170508 17:14:54.755" status="FAIL" endtime="20170508 17:14:54.756"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.756">${status} = False</msg>
<status starttime="20170508 17:14:54.754" status="PASS" endtime="20170508 17:14:54.756"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.756">${status} = False</msg>
<status starttime="20170508 17:14:54.455" status="PASS" endtime="20170508 17:14:54.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170508 17:14:54.756" status="PASS" endtime="20170508 17:14:54.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170508 17:14:54.757" status="PASS" endtime="20170508 17:14:54.757"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.765">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170508 17:14:54.758" status="PASS" endtime="20170508 17:14:54.765"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.774">${FFDC_DIR_PATH} = </msg>
<status starttime="20170508 17:14:54.765" status="PASS" endtime="20170508 17:14:54.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.786">${cur_time} = 2017-05-08 17:14:54:785948</msg>
<status starttime="20170508 17:14:54.786" status="PASS" endtime="20170508 17:14:54.786"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.787">${cur_time} = 20170508171454785948</msg>
<status starttime="20170508 17:14:54.787" status="PASS" endtime="20170508 17:14:54.787"></status>
</kw>
<status starttime="20170508 17:14:54.785" status="PASS" endtime="20170508 17:14:54.787"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.793">${FFDC_TIME} = 20170508171454785948</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.794">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170508 17:14:54.794" status="PASS" endtime="20170508 17:14:54.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.795">${suite_name} = 20170508171454785948_TestsSecurityTestSsl</msg>
<status starttime="20170508 17:14:54.794" status="PASS" endtime="20170508 17:14:54.795"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.795">${test_name} = TestSSLConnection</msg>
<status starttime="20170508 17:14:54.795" status="PASS" endtime="20170508 17:14:54.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.796">${test_name} = 20170508171454785948_TestSSLConnection</msg>
<status starttime="20170508 17:14:54.796" status="PASS" endtime="20170508 17:14:54.796"></status>
</kw>
<status starttime="20170508 17:14:54.794" status="PASS" endtime="20170508 17:14:54.796"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.797">${FFDC_DIR_PATH} = /tmp/root/13223/obmc-robot/logs/20170508171454785948_TestsSecurityTestSsl/20170508171454785948_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170508 17:14:54.801">${FFDC_PREFIX} = 20170508171454785948_</msg>
<status starttime="20170508 17:14:54.775" status="PASS" endtime="20170508 17:14:54.801"></status>
</kw>
<status starttime="20170508 17:14:54.774" status="PASS" endtime="20170508 17:14:54.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170508 17:14:54.801" status="PASS" endtime="20170508 17:14:54.801"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.802" html="yes">Created directory '&lt;a href="file:///tmp/root/13223/obmc-robot/logs"&gt;/tmp/root/13223/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170508 17:14:54.802" status="PASS" endtime="20170508 17:14:54.802"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:54.803">File '/tmp/root/13223/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170508 17:14:54.803" status="FAIL" endtime="20170508 17:14:54.803"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.804">${exist} = False</msg>
<status starttime="20170508 17:14:54.803" status="PASS" endtime="20170508 17:14:54.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.805" html="yes">Created file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13223/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:14:54.804" status="PASS" endtime="20170508 17:14:54.805"></status>
</kw>
<status starttime="20170508 17:14:54.804" status="PASS" endtime="20170508 17:14:54.805"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170508 17:14:54.805" status="PASS" endtime="20170508 17:14:54.805"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.806">${cur_time} = 2017-05-08 17:14:54:806230</msg>
<status starttime="20170508 17:14:54.806" status="PASS" endtime="20170508 17:14:54.806"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.807">${cur_time} = 20170508171454806230</msg>
<status starttime="20170508 17:14:54.807" status="PASS" endtime="20170508 17:14:54.807"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.807">${cur_time} = 20170508171454806230</msg>
<status starttime="20170508 17:14:54.806" status="PASS" endtime="20170508 17:14:54.807"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.808" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13223/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:14:54.807" status="PASS" endtime="20170508 17:14:54.808"></status>
</kw>
<status starttime="20170508 17:14:54.757" status="PASS" endtime="20170508 17:14:54.808"></status>
</kw>
<status starttime="20170508 17:14:54.454" status="PASS" endtime="20170508 17:14:54.809"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170508 17:14:54.223" critical="yes" status="PASS" endtime="20170508 17:14:54.809"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170508 17:14:54.809">Delete All Sessions</msg>
<status starttime="20170508 17:14:54.809" status="PASS" endtime="20170508 17:14:54.810"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170508 17:14:54.146" status="PASS" endtime="20170508 17:14:54.810"></status>
</suite>
<status starttime="20170508 17:14:54.144" status="PASS" endtime="20170508 17:14:54.811"></status>
</suite>
<suite id="s1-s2" source="/tmp/root/13223/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.845">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.845" status="PASS" endtime="20170508 17:14:54.845"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.846">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.845" status="PASS" endtime="20170508 17:14:54.846"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.846">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.844" status="PASS" endtime="20170508 17:14:54.846"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.848">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.848" status="PASS" endtime="20170508 17:14:54.848"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.849">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.848" status="PASS" endtime="20170508 17:14:54.849"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.849">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:14:54.847" status="PASS" endtime="20170508 17:14:54.849"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.850">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170508 17:14:54.849" status="PASS" endtime="20170508 17:14:54.850"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:54.850" status="PASS" endtime="20170508 17:14:54.861"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.867">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.870">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:14:54.870">${output} = /tmp/root/13223/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170508 17:14:54.861" status="PASS" endtime="20170508 17:14:54.871"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170508 17:14:54.873" status="PASS" endtime="20170508 17:14:54.881"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170508 17:14:54.882" status="PASS" endtime="20170508 17:14:54.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.883">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:14:54.882" status="PASS" endtime="20170508 17:14:54.883"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.883">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:14:54.849" status="PASS" endtime="20170508 17:14:54.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.884">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170508 17:14:54.883" status="PASS" endtime="20170508 17:14:54.884"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:54.884" status="PASS" endtime="20170508 17:14:54.891"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.896">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.903">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:14:54.904">${os_con_pid} = </msg>
<status starttime="20170508 17:14:54.891" status="PASS" endtime="20170508 17:14:54.904"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170508 17:14:54.905" status="PASS" endtime="20170508 17:14:54.914"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.914">${cmd_buf} = kill -9 </msg>
<status starttime="20170508 17:14:54.914" status="PASS" endtime="20170508 17:14:54.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:54.915" status="PASS" endtime="20170508 17:14:54.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.916">${rc} = None</msg>
<msg level="INFO" timestamp="20170508 17:14:54.916">${output} = None</msg>
<status starttime="20170508 17:14:54.915" status="PASS" endtime="20170508 17:14:54.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170508 17:14:54.916" status="PASS" endtime="20170508 17:14:54.917"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.917">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170508 17:14:54.917" status="PASS" endtime="20170508 17:14:54.917"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:54.917" status="PASS" endtime="20170508 17:14:54.925"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.937">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:14:54.954">${rc} = 1</msg>
<msg level="INFO" timestamp="20170508 17:14:54.954">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170508 17:14:54.925" status="PASS" endtime="20170508 17:14:54.954"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170508 17:14:54.963" status="PASS" endtime="20170508 17:14:54.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170508 17:14:54.984" status="PASS" endtime="20170508 17:14:54.985"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:54.985">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170508 17:14:54.847" status="PASS" endtime="20170508 17:14:54.985"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:54.988" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170508 17:14:54.986" status="PASS" endtime="20170508 17:14:54.988"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:54.989">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170508 17:14:54.989" status="PASS" endtime="20170508 17:14:54.989"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:54.989" status="PASS" endtime="20170508 17:14:54.996"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.001">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:14:55.005">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:14:55.005">${output} = /tmp/root/13223/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170508 17:14:54.997" status="PASS" endtime="20170508 17:14:55.005"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170508 17:14:55.007" status="PASS" endtime="20170508 17:14:55.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170508 17:14:55.015" status="PASS" endtime="20170508 17:14:55.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.016">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:14:55.016" status="PASS" endtime="20170508 17:14:55.016"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:55.017">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:14:54.988" status="PASS" endtime="20170508 17:14:55.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.017">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170508 17:14:55.017" status="PASS" endtime="20170508 17:14:55.017"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:14:55.018" status="PASS" endtime="20170508 17:14:55.029"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.032">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170508 17:14:55.036">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:14:55.036">${output} = </msg>
<status starttime="20170508 17:14:55.029" status="PASS" endtime="20170508 17:14:55.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170508 17:14:55.038" status="PASS" endtime="20170508 17:14:55.039"></status>
</kw>
<status starttime="20170508 17:14:54.844" status="PASS" endtime="20170508 17:14:55.040"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.040">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.042">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170508 17:14:55.042" status="PASS" endtime="20170508 17:14:55.042"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.043">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170508 17:14:55.043" status="PASS" endtime="20170508 17:14:55.043"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.046">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:14:55.046" status="PASS" endtime="20170508 17:14:55.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:14:55.048" status="PASS" endtime="20170508 17:14:55.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.049">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:14:55.048" status="PASS" endtime="20170508 17:14:55.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:14:55.049" status="PASS" endtime="20170508 17:14:55.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:14:55.051" status="PASS" endtime="20170508 17:14:55.479"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:55.480">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:14:55.480">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:55.050" status="PASS" endtime="20170508 17:14:55.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:55.480" status="PASS" endtime="20170508 17:14:55.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:55.481" status="PASS" endtime="20170508 17:14:55.481"></status>
</kw>
<status starttime="20170508 17:14:55.045" status="PASS" endtime="20170508 17:14:55.481"></status>
</kw>
<status starttime="20170508 17:14:55.045" status="PASS" endtime="20170508 17:14:55.481"></status>
</kw>
<status starttime="20170508 17:14:55.044" status="PASS" endtime="20170508 17:14:55.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.482">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170508 17:14:55.482" status="PASS" endtime="20170508 17:14:55.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:14:55.482" status="PASS" endtime="20170508 17:14:55.483"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170508 17:14:55.483" status="PASS" endtime="20170508 17:14:55.483"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.485">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170508 17:14:55.484" status="PASS" endtime="20170508 17:14:55.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.486">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170508 17:14:55.486" status="PASS" endtime="20170508 17:14:55.486"></status>
</kw>
<status starttime="20170508 17:14:55.485" status="PASS" endtime="20170508 17:14:55.486"></status>
</kw>
<status starttime="20170508 17:14:55.483" status="PASS" endtime="20170508 17:14:55.486"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.922">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170508 17:14:55.922">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:55.486" status="PASS" endtime="20170508 17:14:55.922"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.923">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:55.923" status="PASS" endtime="20170508 17:14:55.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.924">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:55.924" status="PASS" endtime="20170508 17:14:55.924"></status>
</kw>
<status starttime="20170508 17:14:55.923" status="PASS" endtime="20170508 17:14:55.924"></status>
</kw>
<status starttime="20170508 17:14:55.922" status="PASS" endtime="20170508 17:14:55.924"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:55.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:55.044" status="PASS" endtime="20170508 17:14:55.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:55.925" status="PASS" endtime="20170508 17:14:55.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.926">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:14:55.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:14:55.926">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:14:55.926" status="PASS" endtime="20170508 17:14:55.926"></status>
</kw>
<status starttime="20170508 17:14:55.042" status="PASS" endtime="20170508 17:14:55.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170508 17:14:55.927" status="PASS" endtime="20170508 17:14:55.927"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:55.932">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:14:55.932" status="PASS" endtime="20170508 17:14:55.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.934">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:14:55.933" status="PASS" endtime="20170508 17:14:55.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.934">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:14:55.934" status="PASS" endtime="20170508 17:14:55.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:55.935">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:14:55.935" status="PASS" endtime="20170508 17:14:55.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:57.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:14:55.936" status="PASS" endtime="20170508 17:14:57.422"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:57.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:14:57.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:55.936" status="PASS" endtime="20170508 17:14:57.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:57.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:57.422" status="PASS" endtime="20170508 17:14:57.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:57.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:57.423" status="PASS" endtime="20170508 17:14:57.423"></status>
</kw>
<status starttime="20170508 17:14:55.931" status="PASS" endtime="20170508 17:14:57.424"></status>
</kw>
<status starttime="20170508 17:14:55.930" status="PASS" endtime="20170508 17:14:57.424"></status>
</kw>
<status starttime="20170508 17:14:55.929" status="PASS" endtime="20170508 17:14:57.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:57.424">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:14:57.424" status="PASS" endtime="20170508 17:14:57.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:57.426">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:14:57.426" status="PASS" endtime="20170508 17:14:57.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:57.427">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:14:57.427" status="PASS" endtime="20170508 17:14:57.427"></status>
</kw>
<status starttime="20170508 17:14:57.427" status="PASS" endtime="20170508 17:14:57.428"></status>
</kw>
<status starttime="20170508 17:14:57.425" status="PASS" endtime="20170508 17:14:57.428"></status>
</kw>
<status starttime="20170508 17:14:57.425" status="PASS" endtime="20170508 17:14:57.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:58.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:14:58.075">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:57.428" status="PASS" endtime="20170508 17:14:58.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:58.077">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:58.077" status="PASS" endtime="20170508 17:14:58.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:58.078">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:14:58.078" status="PASS" endtime="20170508 17:14:58.078"></status>
</kw>
<status starttime="20170508 17:14:58.077" status="PASS" endtime="20170508 17:14:58.078"></status>
</kw>
<status starttime="20170508 17:14:58.076" status="PASS" endtime="20170508 17:14:58.079"></status>
</kw>
<status starttime="20170508 17:14:58.075" status="PASS" endtime="20170508 17:14:58.079"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:58.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:14:55.929" status="PASS" endtime="20170508 17:14:58.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:14:58.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:14:58.079" status="PASS" endtime="20170508 17:14:58.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:14:58.080">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:14:58.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:14:58.080">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:14:58.080" status="PASS" endtime="20170508 17:14:58.080"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:58.081">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170508 17:14:55.928" status="PASS" endtime="20170508 17:14:58.081"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:14:58.081">${host_state} = Running</msg>
<status starttime="20170508 17:14:55.928" status="PASS" endtime="20170508 17:14:58.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:14:58.081">Off != Running</msg>
<status starttime="20170508 17:14:58.081" status="FAIL" endtime="20170508 17:14:58.082"></status>
</kw>
<status starttime="20170508 17:14:55.928" status="FAIL" endtime="20170508 17:14:58.082"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.086">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:08.086" status="PASS" endtime="20170508 17:15:08.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:08.087" status="PASS" endtime="20170508 17:15:08.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.088">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:08.088" status="PASS" endtime="20170508 17:15:08.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:08.088" status="PASS" endtime="20170508 17:15:08.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.280">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:08.089" status="PASS" endtime="20170508 17:15:08.280"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.281">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:08.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.089" status="PASS" endtime="20170508 17:15:08.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.281">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.281" status="PASS" endtime="20170508 17:15:08.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.282" status="PASS" endtime="20170508 17:15:08.282"></status>
</kw>
<status starttime="20170508 17:15:08.086" status="PASS" endtime="20170508 17:15:08.282"></status>
</kw>
<status starttime="20170508 17:15:08.085" status="PASS" endtime="20170508 17:15:08.282"></status>
</kw>
<status starttime="20170508 17:15:08.085" status="PASS" endtime="20170508 17:15:08.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.283">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:15:08.283" status="PASS" endtime="20170508 17:15:08.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.285">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:08.284" status="PASS" endtime="20170508 17:15:08.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.286">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:08.286" status="PASS" endtime="20170508 17:15:08.286"></status>
</kw>
<status starttime="20170508 17:15:08.285" status="PASS" endtime="20170508 17:15:08.286"></status>
</kw>
<status starttime="20170508 17:15:08.284" status="PASS" endtime="20170508 17:15:08.286"></status>
</kw>
<status starttime="20170508 17:15:08.283" status="PASS" endtime="20170508 17:15:08.286"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.350">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:08.350">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.287" status="PASS" endtime="20170508 17:15:08.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.352">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:08.351" status="PASS" endtime="20170508 17:15:08.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.353">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:08.353" status="PASS" endtime="20170508 17:15:08.353"></status>
</kw>
<status starttime="20170508 17:15:08.352" status="PASS" endtime="20170508 17:15:08.353"></status>
</kw>
<status starttime="20170508 17:15:08.351" status="PASS" endtime="20170508 17:15:08.353"></status>
</kw>
<status starttime="20170508 17:15:08.350" status="PASS" endtime="20170508 17:15:08.353"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.354">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.084" status="PASS" endtime="20170508 17:15:08.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.354" status="PASS" endtime="20170508 17:15:08.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.355">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:08.355">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:08.355">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:08.355" status="PASS" endtime="20170508 17:15:08.355"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.355">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170508 17:15:08.083" status="PASS" endtime="20170508 17:15:08.355"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.356">${host_state} = Off</msg>
<status starttime="20170508 17:15:08.083" status="PASS" endtime="20170508 17:15:08.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170508 17:15:08.356" status="PASS" endtime="20170508 17:15:08.356"></status>
</kw>
<status starttime="20170508 17:15:08.082" status="PASS" endtime="20170508 17:15:08.356"></status>
</kw>
<status starttime="20170508 17:14:55.927" status="PASS" endtime="20170508 17:15:08.357"></status>
</kw>
<status starttime="20170508 17:14:55.041" status="PASS" endtime="20170508 17:15:08.357"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.361">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:08.361" status="PASS" endtime="20170508 17:15:08.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:08.362" status="PASS" endtime="20170508 17:15:08.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.363">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:08.363" status="PASS" endtime="20170508 17:15:08.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.364">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:08.363" status="PASS" endtime="20170508 17:15:08.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:08.364" status="PASS" endtime="20170508 17:15:08.555"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:08.556">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.364" status="PASS" endtime="20170508 17:15:08.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.556" status="PASS" endtime="20170508 17:15:08.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.557" status="PASS" endtime="20170508 17:15:08.557"></status>
</kw>
<status starttime="20170508 17:15:08.360" status="PASS" endtime="20170508 17:15:08.557"></status>
</kw>
<status starttime="20170508 17:15:08.360" status="PASS" endtime="20170508 17:15:08.557"></status>
</kw>
<status starttime="20170508 17:15:08.359" status="PASS" endtime="20170508 17:15:08.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.558">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:15:08.558" status="PASS" endtime="20170508 17:15:08.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.560">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:08.559" status="PASS" endtime="20170508 17:15:08.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.561">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:08.561" status="PASS" endtime="20170508 17:15:08.561"></status>
</kw>
<status starttime="20170508 17:15:08.560" status="PASS" endtime="20170508 17:15:08.561"></status>
</kw>
<status starttime="20170508 17:15:08.559" status="PASS" endtime="20170508 17:15:08.561"></status>
</kw>
<status starttime="20170508 17:15:08.558" status="PASS" endtime="20170508 17:15:08.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.633">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:08.633">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.562" status="PASS" endtime="20170508 17:15:08.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.635">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:08.634" status="PASS" endtime="20170508 17:15:08.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.636">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:08.635" status="PASS" endtime="20170508 17:15:08.636"></status>
</kw>
<status starttime="20170508 17:15:08.635" status="PASS" endtime="20170508 17:15:08.636"></status>
</kw>
<status starttime="20170508 17:15:08.634" status="PASS" endtime="20170508 17:15:08.636"></status>
</kw>
<status starttime="20170508 17:15:08.633" status="PASS" endtime="20170508 17:15:08.636"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.636">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.359" status="PASS" endtime="20170508 17:15:08.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.636" status="PASS" endtime="20170508 17:15:08.637"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.637">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:08.637">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:08.638">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:08.637" status="PASS" endtime="20170508 17:15:08.638"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.638">${state} = Off</msg>
<status starttime="20170508 17:15:08.358" status="PASS" endtime="20170508 17:15:08.638"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.638">${boot_progress} = Off</msg>
<status starttime="20170508 17:15:08.358" status="PASS" endtime="20170508 17:15:08.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170508 17:15:08.638" status="PASS" endtime="20170508 17:15:08.639"></status>
</kw>
<status starttime="20170508 17:15:08.357" status="PASS" endtime="20170508 17:15:08.639"></status>
</kw>
<status starttime="20170508 17:15:08.357" status="PASS" endtime="20170508 17:15:08.639"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.640">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170508 17:15:08.640" status="PASS" endtime="20170508 17:15:08.640"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.641">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170508 17:15:08.641" status="PASS" endtime="20170508 17:15:08.642"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.644">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:08.644" status="PASS" endtime="20170508 17:15:08.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:08.645" status="PASS" endtime="20170508 17:15:08.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.646">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:08.645" status="PASS" endtime="20170508 17:15:08.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:08.646" status="PASS" endtime="20170508 17:15:08.646"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:08.647" status="PASS" endtime="20170508 17:15:08.844"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:08.844">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:08.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.647" status="PASS" endtime="20170508 17:15:08.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.844" status="PASS" endtime="20170508 17:15:08.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:08.845" status="PASS" endtime="20170508 17:15:08.845"></status>
</kw>
<status starttime="20170508 17:15:08.643" status="PASS" endtime="20170508 17:15:08.846"></status>
</kw>
<status starttime="20170508 17:15:08.643" status="PASS" endtime="20170508 17:15:08.846"></status>
</kw>
<status starttime="20170508 17:15:08.642" status="PASS" endtime="20170508 17:15:08.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.846">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170508 17:15:08.846" status="PASS" endtime="20170508 17:15:08.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:08.847" status="PASS" endtime="20170508 17:15:08.847"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170508 17:15:08.847" status="PASS" endtime="20170508 17:15:08.848"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:08.849">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170508 17:15:08.848" status="PASS" endtime="20170508 17:15:08.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:08.850">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170508 17:15:08.850" status="PASS" endtime="20170508 17:15:08.850"></status>
</kw>
<status starttime="20170508 17:15:08.849" status="PASS" endtime="20170508 17:15:08.850"></status>
</kw>
<status starttime="20170508 17:15:08.848" status="PASS" endtime="20170508 17:15:08.851"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.058">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170508 17:15:09.058">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.851" status="PASS" endtime="20170508 17:15:09.058"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.059">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:09.058" status="PASS" endtime="20170508 17:15:09.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:09.060">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:09.060" status="PASS" endtime="20170508 17:15:09.060"></status>
</kw>
<status starttime="20170508 17:15:09.059" status="PASS" endtime="20170508 17:15:09.060"></status>
</kw>
<status starttime="20170508 17:15:09.058" status="PASS" endtime="20170508 17:15:09.060"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:09.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:08.642" status="PASS" endtime="20170508 17:15:09.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:09.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:09.061" status="PASS" endtime="20170508 17:15:09.061"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.062">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:09.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:09.062">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:09.061" status="PASS" endtime="20170508 17:15:09.062"></status>
</kw>
<status starttime="20170508 17:15:08.640" status="PASS" endtime="20170508 17:15:09.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170508 17:15:09.062" status="PASS" endtime="20170508 17:15:09.063"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:09.067">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:09.067" status="PASS" endtime="20170508 17:15:09.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:09.067" status="PASS" endtime="20170508 17:15:09.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.069">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:09.068" status="PASS" endtime="20170508 17:15:09.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:09.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:09.069" status="PASS" endtime="20170508 17:15:09.069"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.008">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:09.070" status="PASS" endtime="20170508 17:15:10.008"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:10.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:10.009">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:09.070" status="PASS" endtime="20170508 17:15:10.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.009">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:10.009" status="PASS" endtime="20170508 17:15:10.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:10.010" status="PASS" endtime="20170508 17:15:10.010"></status>
</kw>
<status starttime="20170508 17:15:09.066" status="PASS" endtime="20170508 17:15:10.010"></status>
</kw>
<status starttime="20170508 17:15:09.066" status="PASS" endtime="20170508 17:15:10.010"></status>
</kw>
<status starttime="20170508 17:15:09.065" status="PASS" endtime="20170508 17:15:10.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:10.011">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:15:10.011" status="PASS" endtime="20170508 17:15:10.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:10.013">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:10.012" status="PASS" endtime="20170508 17:15:10.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.014">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:10.014" status="PASS" endtime="20170508 17:15:10.014"></status>
</kw>
<status starttime="20170508 17:15:10.013" status="PASS" endtime="20170508 17:15:10.014"></status>
</kw>
<status starttime="20170508 17:15:10.012" status="PASS" endtime="20170508 17:15:10.014"></status>
</kw>
<status starttime="20170508 17:15:10.011" status="PASS" endtime="20170508 17:15:10.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:10.390">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:10.390">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:10.015" status="PASS" endtime="20170508 17:15:10.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:10.392">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:10.391" status="PASS" endtime="20170508 17:15:10.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.393">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:10.392" status="PASS" endtime="20170508 17:15:10.393"></status>
</kw>
<status starttime="20170508 17:15:10.392" status="PASS" endtime="20170508 17:15:10.393"></status>
</kw>
<status starttime="20170508 17:15:10.391" status="PASS" endtime="20170508 17:15:10.393"></status>
</kw>
<status starttime="20170508 17:15:10.390" status="PASS" endtime="20170508 17:15:10.393"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:10.393">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:09.064" status="PASS" endtime="20170508 17:15:10.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:10.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:10.393" status="PASS" endtime="20170508 17:15:10.394"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:10.394">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:10.394">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:10.395">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:10.394" status="PASS" endtime="20170508 17:15:10.395"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:10.395">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170508 17:15:09.064" status="PASS" endtime="20170508 17:15:10.395"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:10.395">${host_state} = Off</msg>
<status starttime="20170508 17:15:09.064" status="PASS" endtime="20170508 17:15:10.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:15:10.396">Running != Off</msg>
<status starttime="20170508 17:15:10.395" status="FAIL" endtime="20170508 17:15:10.396"></status>
</kw>
<status starttime="20170508 17:15:09.063" status="FAIL" endtime="20170508 17:15:10.396"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:20.403">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:20.402" status="PASS" endtime="20170508 17:15:20.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:20.404">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:20.403" status="PASS" endtime="20170508 17:15:20.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:20.405">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:20.404" status="PASS" endtime="20170508 17:15:20.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:20.405">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:20.405" status="PASS" endtime="20170508 17:15:20.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:23.046">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:20.406" status="PASS" endtime="20170508 17:15:23.046"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:23.046">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:23.046">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:20.405" status="PASS" endtime="20170508 17:15:23.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:23.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:23.046" status="PASS" endtime="20170508 17:15:23.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:23.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:23.047" status="PASS" endtime="20170508 17:15:23.047"></status>
</kw>
<status starttime="20170508 17:15:20.402" status="PASS" endtime="20170508 17:15:23.048"></status>
</kw>
<status starttime="20170508 17:15:20.401" status="PASS" endtime="20170508 17:15:23.048"></status>
</kw>
<status starttime="20170508 17:15:20.401" status="PASS" endtime="20170508 17:15:23.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:23.048">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:15:23.048" status="PASS" endtime="20170508 17:15:23.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:23.050">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:23.050" status="PASS" endtime="20170508 17:15:23.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:23.051">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:23.051" status="PASS" endtime="20170508 17:15:23.051"></status>
</kw>
<status starttime="20170508 17:15:23.051" status="PASS" endtime="20170508 17:15:23.052"></status>
</kw>
<status starttime="20170508 17:15:23.049" status="PASS" endtime="20170508 17:15:23.052"></status>
</kw>
<status starttime="20170508 17:15:23.049" status="PASS" endtime="20170508 17:15:23.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:24.458">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:24.458">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:23.052" status="PASS" endtime="20170508 17:15:24.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:24.460">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:24.460" status="PASS" endtime="20170508 17:15:24.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:24.461">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:24.461" status="PASS" endtime="20170508 17:15:24.461"></status>
</kw>
<status starttime="20170508 17:15:24.460" status="PASS" endtime="20170508 17:15:24.461"></status>
</kw>
<status starttime="20170508 17:15:24.459" status="PASS" endtime="20170508 17:15:24.461"></status>
</kw>
<status starttime="20170508 17:15:24.459" status="PASS" endtime="20170508 17:15:24.461"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:24.462">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:20.400" status="PASS" endtime="20170508 17:15:24.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:24.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:24.462" status="PASS" endtime="20170508 17:15:24.462"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:24.463">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:24.463">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:24.463">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:24.463" status="PASS" endtime="20170508 17:15:24.463"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:24.463">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170508 17:15:20.399" status="PASS" endtime="20170508 17:15:24.463"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:24.464">${host_state} = Off</msg>
<status starttime="20170508 17:15:20.397" status="PASS" endtime="20170508 17:15:24.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:15:24.464">Running != Off</msg>
<status starttime="20170508 17:15:24.464" status="FAIL" endtime="20170508 17:15:24.464"></status>
</kw>
<status starttime="20170508 17:15:20.396" status="FAIL" endtime="20170508 17:15:24.464"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.469">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:34.469" status="PASS" endtime="20170508 17:15:34.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:34.470" status="PASS" endtime="20170508 17:15:34.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.471">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:34.471" status="PASS" endtime="20170508 17:15:34.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:34.471" status="PASS" endtime="20170508 17:15:34.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:34.473" status="PASS" endtime="20170508 17:15:34.665"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:34.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:34.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.472" status="PASS" endtime="20170508 17:15:34.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.666">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:34.666" status="PASS" endtime="20170508 17:15:34.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:34.667" status="PASS" endtime="20170508 17:15:34.667"></status>
</kw>
<status starttime="20170508 17:15:34.469" status="PASS" endtime="20170508 17:15:34.667"></status>
</kw>
<status starttime="20170508 17:15:34.468" status="PASS" endtime="20170508 17:15:34.667"></status>
</kw>
<status starttime="20170508 17:15:34.467" status="PASS" endtime="20170508 17:15:34.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.668">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:15:34.668" status="PASS" endtime="20170508 17:15:34.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.670">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:34.670" status="PASS" endtime="20170508 17:15:34.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.671">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:15:34.671" status="PASS" endtime="20170508 17:15:34.671"></status>
</kw>
<status starttime="20170508 17:15:34.671" status="PASS" endtime="20170508 17:15:34.672"></status>
</kw>
<status starttime="20170508 17:15:34.669" status="PASS" endtime="20170508 17:15:34.672"></status>
</kw>
<status starttime="20170508 17:15:34.669" status="PASS" endtime="20170508 17:15:34.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.755">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:34.755">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.672" status="PASS" endtime="20170508 17:15:34.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.757">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:34.756" status="PASS" endtime="20170508 17:15:34.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.758">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:34.757" status="PASS" endtime="20170508 17:15:34.758"></status>
</kw>
<status starttime="20170508 17:15:34.757" status="PASS" endtime="20170508 17:15:34.758"></status>
</kw>
<status starttime="20170508 17:15:34.756" status="PASS" endtime="20170508 17:15:34.758"></status>
</kw>
<status starttime="20170508 17:15:34.755" status="PASS" endtime="20170508 17:15:34.758"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:34.758">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.467" status="PASS" endtime="20170508 17:15:34.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.759">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:34.759" status="PASS" endtime="20170508 17:15:34.759"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.760">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:34.760">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:34.760">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:34.760" status="PASS" endtime="20170508 17:15:34.760"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:34.761">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170508 17:15:34.466" status="PASS" endtime="20170508 17:15:34.761"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:34.761">${host_state} = Running</msg>
<status starttime="20170508 17:15:34.466" status="PASS" endtime="20170508 17:15:34.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170508 17:15:34.762" status="PASS" endtime="20170508 17:15:34.762"></status>
</kw>
<status starttime="20170508 17:15:34.465" status="PASS" endtime="20170508 17:15:34.762"></status>
</kw>
<status starttime="20170508 17:15:09.063" status="PASS" endtime="20170508 17:15:34.763"></status>
</kw>
<status starttime="20170508 17:15:08.639" status="PASS" endtime="20170508 17:15:34.763"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.769">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:34.768" status="PASS" endtime="20170508 17:15:34.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:34.770" status="PASS" endtime="20170508 17:15:34.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.771">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:34.770" status="PASS" endtime="20170508 17:15:34.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:34.771" status="PASS" endtime="20170508 17:15:34.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:34.772" status="PASS" endtime="20170508 17:15:34.983"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:34.984">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:34.984">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.772" status="PASS" endtime="20170508 17:15:34.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.984">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:34.984" status="PASS" endtime="20170508 17:15:34.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:34.985" status="PASS" endtime="20170508 17:15:34.985"></status>
</kw>
<status starttime="20170508 17:15:34.767" status="PASS" endtime="20170508 17:15:34.986"></status>
</kw>
<status starttime="20170508 17:15:34.767" status="PASS" endtime="20170508 17:15:34.986"></status>
</kw>
<status starttime="20170508 17:15:34.766" status="PASS" endtime="20170508 17:15:34.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.986">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:15:34.986" status="PASS" endtime="20170508 17:15:34.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:34.988">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:34.988" status="PASS" endtime="20170508 17:15:34.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:34.989">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:34.989" status="PASS" endtime="20170508 17:15:34.990"></status>
</kw>
<status starttime="20170508 17:15:34.989" status="PASS" endtime="20170508 17:15:34.990"></status>
</kw>
<status starttime="20170508 17:15:34.987" status="PASS" endtime="20170508 17:15:34.990"></status>
</kw>
<status starttime="20170508 17:15:34.987" status="PASS" endtime="20170508 17:15:34.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:35.058">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:35.058">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.990" status="PASS" endtime="20170508 17:15:35.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:35.060">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:35.060" status="PASS" endtime="20170508 17:15:35.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:35.061">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:35.061" status="PASS" endtime="20170508 17:15:35.061"></status>
</kw>
<status starttime="20170508 17:15:35.060" status="PASS" endtime="20170508 17:15:35.061"></status>
</kw>
<status starttime="20170508 17:15:35.059" status="PASS" endtime="20170508 17:15:35.062"></status>
</kw>
<status starttime="20170508 17:15:35.059" status="PASS" endtime="20170508 17:15:35.062"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:35.062">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:34.765" status="PASS" endtime="20170508 17:15:35.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:35.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:35.062" status="PASS" endtime="20170508 17:15:35.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:35.063">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:35.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:35.063">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:35.063" status="PASS" endtime="20170508 17:15:35.063"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:35.063">${state} = Off</msg>
<status starttime="20170508 17:15:34.765" status="PASS" endtime="20170508 17:15:35.064"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:35.064">${boot_progress} = Off</msg>
<status starttime="20170508 17:15:34.764" status="PASS" endtime="20170508 17:15:35.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:15:35.064">Off != FW Progress, Starting OS</msg>
<status starttime="20170508 17:15:35.064" status="FAIL" endtime="20170508 17:15:35.064"></status>
</kw>
<status starttime="20170508 17:15:34.764" status="FAIL" endtime="20170508 17:15:35.065"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.070">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:45.069" status="PASS" endtime="20170508 17:15:45.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:45.071" status="PASS" endtime="20170508 17:15:45.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.072">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:45.072" status="PASS" endtime="20170508 17:15:45.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.073">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:45.072" status="PASS" endtime="20170508 17:15:45.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:45.074" status="PASS" endtime="20170508 17:15:45.398"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:45.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:45.398">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:45.073" status="PASS" endtime="20170508 17:15:45.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:45.398" status="PASS" endtime="20170508 17:15:45.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:45.399" status="PASS" endtime="20170508 17:15:45.400"></status>
</kw>
<status starttime="20170508 17:15:45.069" status="PASS" endtime="20170508 17:15:45.400"></status>
</kw>
<status starttime="20170508 17:15:45.068" status="PASS" endtime="20170508 17:15:45.400"></status>
</kw>
<status starttime="20170508 17:15:45.068" status="PASS" endtime="20170508 17:15:45.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.401">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:15:45.400" status="PASS" endtime="20170508 17:15:45.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.403">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:45.402" status="PASS" endtime="20170508 17:15:45.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.404">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:45.404" status="PASS" endtime="20170508 17:15:45.404"></status>
</kw>
<status starttime="20170508 17:15:45.403" status="PASS" endtime="20170508 17:15:45.404"></status>
</kw>
<status starttime="20170508 17:15:45.401" status="PASS" endtime="20170508 17:15:45.404"></status>
</kw>
<status starttime="20170508 17:15:45.401" status="PASS" endtime="20170508 17:15:45.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.507">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:45.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:45.405" status="PASS" endtime="20170508 17:15:45.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.509">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:45.509" status="PASS" endtime="20170508 17:15:45.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.510">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:45.510" status="PASS" endtime="20170508 17:15:45.510"></status>
</kw>
<status starttime="20170508 17:15:45.509" status="PASS" endtime="20170508 17:15:45.510"></status>
</kw>
<status starttime="20170508 17:15:45.508" status="PASS" endtime="20170508 17:15:45.510"></status>
</kw>
<status starttime="20170508 17:15:45.508" status="PASS" endtime="20170508 17:15:45.511"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:45.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:45.067" status="PASS" endtime="20170508 17:15:45.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:45.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:45.511" status="PASS" endtime="20170508 17:15:45.512"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:45.512">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:45.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:45.512">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:45.512" status="PASS" endtime="20170508 17:15:45.512"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:45.513">${state} = Off</msg>
<status starttime="20170508 17:15:45.066" status="PASS" endtime="20170508 17:15:45.513"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:45.513">${boot_progress} = Off</msg>
<status starttime="20170508 17:15:45.066" status="PASS" endtime="20170508 17:15:45.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:15:45.513">Off != FW Progress, Starting OS</msg>
<status starttime="20170508 17:15:45.513" status="FAIL" endtime="20170508 17:15:45.514"></status>
</kw>
<status starttime="20170508 17:15:45.065" status="FAIL" endtime="20170508 17:15:45.514"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.518">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:15:55.518" status="PASS" endtime="20170508 17:15:55.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:15:55.519" status="PASS" endtime="20170508 17:15:55.520"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:15:55.520" status="PASS" endtime="20170508 17:15:55.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:15:55.520" status="PASS" endtime="20170508 17:15:55.521"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:15:55.521" status="PASS" endtime="20170508 17:15:55.790"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:55.790">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:15:55.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:55.521" status="PASS" endtime="20170508 17:15:55.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.791">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:55.791" status="PASS" endtime="20170508 17:15:55.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:55.792" status="PASS" endtime="20170508 17:15:55.792"></status>
</kw>
<status starttime="20170508 17:15:55.517" status="PASS" endtime="20170508 17:15:55.793"></status>
</kw>
<status starttime="20170508 17:15:55.517" status="PASS" endtime="20170508 17:15:55.793"></status>
</kw>
<status starttime="20170508 17:15:55.516" status="PASS" endtime="20170508 17:15:55.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.794">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:15:55.793" status="PASS" endtime="20170508 17:15:55.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.796">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:55.795" status="PASS" endtime="20170508 17:15:55.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.798">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:15:55.797" status="PASS" endtime="20170508 17:15:55.798"></status>
</kw>
<status starttime="20170508 17:15:55.797" status="PASS" endtime="20170508 17:15:55.798"></status>
</kw>
<status starttime="20170508 17:15:55.795" status="PASS" endtime="20170508 17:15:55.798"></status>
</kw>
<status starttime="20170508 17:15:55.794" status="PASS" endtime="20170508 17:15:55.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.897">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:15:55.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:55.798" status="PASS" endtime="20170508 17:15:55.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.899">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:55.899" status="PASS" endtime="20170508 17:15:55.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.900">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:15:55.900" status="PASS" endtime="20170508 17:15:55.900"></status>
</kw>
<status starttime="20170508 17:15:55.900" status="PASS" endtime="20170508 17:15:55.901"></status>
</kw>
<status starttime="20170508 17:15:55.898" status="PASS" endtime="20170508 17:15:55.901"></status>
</kw>
<status starttime="20170508 17:15:55.898" status="PASS" endtime="20170508 17:15:55.901"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:55.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:15:55.516" status="PASS" endtime="20170508 17:15:55.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:15:55.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:15:55.901" status="PASS" endtime="20170508 17:15:55.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:15:55.902">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:15:55.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:15:55.902">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:15:55.902" status="PASS" endtime="20170508 17:15:55.902"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:55.903">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:15:55.515" status="PASS" endtime="20170508 17:15:55.903"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:15:55.903">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:15:55.515" status="PASS" endtime="20170508 17:15:55.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:15:55.904">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:15:55.903" status="FAIL" endtime="20170508 17:15:55.904"></status>
</kw>
<status starttime="20170508 17:15:55.514" status="FAIL" endtime="20170508 17:15:55.904"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:05.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:05.909" status="PASS" endtime="20170508 17:16:05.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:05.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:05.910" status="PASS" endtime="20170508 17:16:05.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:05.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:05.910" status="PASS" endtime="20170508 17:16:05.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:05.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:05.911" status="PASS" endtime="20170508 17:16:05.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.240">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:05.912" status="PASS" endtime="20170508 17:16:06.240"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:06.240">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:06.240">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:05.912" status="PASS" endtime="20170508 17:16:06.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.241">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:06.240" status="PASS" endtime="20170508 17:16:06.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:06.241" status="PASS" endtime="20170508 17:16:06.241"></status>
</kw>
<status starttime="20170508 17:16:05.908" status="PASS" endtime="20170508 17:16:06.242"></status>
</kw>
<status starttime="20170508 17:16:05.907" status="PASS" endtime="20170508 17:16:06.242"></status>
</kw>
<status starttime="20170508 17:16:05.907" status="PASS" endtime="20170508 17:16:06.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:06.243">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:06.242" status="PASS" endtime="20170508 17:16:06.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:06.245">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:06.244" status="PASS" endtime="20170508 17:16:06.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.246">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:06.246" status="PASS" endtime="20170508 17:16:06.246"></status>
</kw>
<status starttime="20170508 17:16:06.245" status="PASS" endtime="20170508 17:16:06.247"></status>
</kw>
<status starttime="20170508 17:16:06.243" status="PASS" endtime="20170508 17:16:06.247"></status>
</kw>
<status starttime="20170508 17:16:06.243" status="PASS" endtime="20170508 17:16:06.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:06.314">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:06.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:06.247" status="PASS" endtime="20170508 17:16:06.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:06.316">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:06.315" status="PASS" endtime="20170508 17:16:06.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.318">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:06.317" status="PASS" endtime="20170508 17:16:06.318"></status>
</kw>
<status starttime="20170508 17:16:06.317" status="PASS" endtime="20170508 17:16:06.318"></status>
</kw>
<status starttime="20170508 17:16:06.315" status="PASS" endtime="20170508 17:16:06.318"></status>
</kw>
<status starttime="20170508 17:16:06.314" status="PASS" endtime="20170508 17:16:06.318"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:06.319">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:05.906" status="PASS" endtime="20170508 17:16:06.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:06.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:06.319" status="PASS" endtime="20170508 17:16:06.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:06.320">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:06.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:06.320">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:06.320" status="PASS" endtime="20170508 17:16:06.321"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:06.321">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:05.905" status="PASS" endtime="20170508 17:16:06.321"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:06.321">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:05.905" status="PASS" endtime="20170508 17:16:06.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:06.322">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:06.322" status="FAIL" endtime="20170508 17:16:06.322"></status>
</kw>
<status starttime="20170508 17:16:05.904" status="FAIL" endtime="20170508 17:16:06.323"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.327">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:16.327" status="PASS" endtime="20170508 17:16:16.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:16.328" status="PASS" endtime="20170508 17:16:16.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.329">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:16.329" status="PASS" endtime="20170508 17:16:16.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:16.329" status="PASS" endtime="20170508 17:16:16.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:16.330" status="PASS" endtime="20170508 17:16:16.524"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:16.524">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:16.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:16.330" status="PASS" endtime="20170508 17:16:16.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:16.524" status="PASS" endtime="20170508 17:16:16.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:16.525" status="PASS" endtime="20170508 17:16:16.526"></status>
</kw>
<status starttime="20170508 17:16:16.326" status="PASS" endtime="20170508 17:16:16.526"></status>
</kw>
<status starttime="20170508 17:16:16.326" status="PASS" endtime="20170508 17:16:16.526"></status>
</kw>
<status starttime="20170508 17:16:16.325" status="PASS" endtime="20170508 17:16:16.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.527">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:16.526" status="PASS" endtime="20170508 17:16:16.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.529">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:16.528" status="PASS" endtime="20170508 17:16:16.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.530">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:16.529" status="PASS" endtime="20170508 17:16:16.530"></status>
</kw>
<status starttime="20170508 17:16:16.529" status="PASS" endtime="20170508 17:16:16.530"></status>
</kw>
<status starttime="20170508 17:16:16.527" status="PASS" endtime="20170508 17:16:16.530"></status>
</kw>
<status starttime="20170508 17:16:16.527" status="PASS" endtime="20170508 17:16:16.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.626">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:16.626">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:16.530" status="PASS" endtime="20170508 17:16:16.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.628">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:16.627" status="PASS" endtime="20170508 17:16:16.628"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.629">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:16.629" status="PASS" endtime="20170508 17:16:16.629"></status>
</kw>
<status starttime="20170508 17:16:16.628" status="PASS" endtime="20170508 17:16:16.629"></status>
</kw>
<status starttime="20170508 17:16:16.627" status="PASS" endtime="20170508 17:16:16.629"></status>
</kw>
<status starttime="20170508 17:16:16.626" status="PASS" endtime="20170508 17:16:16.629"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:16.630">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:16.325" status="PASS" endtime="20170508 17:16:16.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:16.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:16.630" status="PASS" endtime="20170508 17:16:16.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:16.631">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:16.631">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:16.631">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:16.631" status="PASS" endtime="20170508 17:16:16.631"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:16.632">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:16.324" status="PASS" endtime="20170508 17:16:16.632"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:16.632">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:16.324" status="PASS" endtime="20170508 17:16:16.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:16.632">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:16.632" status="FAIL" endtime="20170508 17:16:16.633"></status>
</kw>
<status starttime="20170508 17:16:16.323" status="FAIL" endtime="20170508 17:16:16.633"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.638">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:26.637" status="PASS" endtime="20170508 17:16:26.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:26.638" status="PASS" endtime="20170508 17:16:26.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.639">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:26.639" status="PASS" endtime="20170508 17:16:26.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:26.640" status="PASS" endtime="20170508 17:16:26.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:26.641" status="PASS" endtime="20170508 17:16:26.827"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:26.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:26.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:26.640" status="PASS" endtime="20170508 17:16:26.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:26.827" status="PASS" endtime="20170508 17:16:26.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:26.828" status="PASS" endtime="20170508 17:16:26.828"></status>
</kw>
<status starttime="20170508 17:16:26.636" status="PASS" endtime="20170508 17:16:26.828"></status>
</kw>
<status starttime="20170508 17:16:26.636" status="PASS" endtime="20170508 17:16:26.828"></status>
</kw>
<status starttime="20170508 17:16:26.635" status="PASS" endtime="20170508 17:16:26.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.829">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:26.829" status="PASS" endtime="20170508 17:16:26.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.831">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:26.830" status="PASS" endtime="20170508 17:16:26.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.832">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:26.832" status="PASS" endtime="20170508 17:16:26.832"></status>
</kw>
<status starttime="20170508 17:16:26.831" status="PASS" endtime="20170508 17:16:26.832"></status>
</kw>
<status starttime="20170508 17:16:26.830" status="PASS" endtime="20170508 17:16:26.832"></status>
</kw>
<status starttime="20170508 17:16:26.829" status="PASS" endtime="20170508 17:16:26.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.944">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:26.944">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:26.833" status="PASS" endtime="20170508 17:16:26.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.946">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:26.945" status="PASS" endtime="20170508 17:16:26.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.947">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:26.946" status="PASS" endtime="20170508 17:16:26.947"></status>
</kw>
<status starttime="20170508 17:16:26.946" status="PASS" endtime="20170508 17:16:26.947"></status>
</kw>
<status starttime="20170508 17:16:26.945" status="PASS" endtime="20170508 17:16:26.947"></status>
</kw>
<status starttime="20170508 17:16:26.944" status="PASS" endtime="20170508 17:16:26.947"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:26.947">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:26.635" status="PASS" endtime="20170508 17:16:26.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:26.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:26.948" status="PASS" endtime="20170508 17:16:26.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:26.948">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:26.949">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:26.949">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:26.948" status="PASS" endtime="20170508 17:16:26.949"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:26.949">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:26.634" status="PASS" endtime="20170508 17:16:26.949"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:26.949">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:26.634" status="PASS" endtime="20170508 17:16:26.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:26.950">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:26.949" status="FAIL" endtime="20170508 17:16:26.950"></status>
</kw>
<status starttime="20170508 17:16:26.633" status="FAIL" endtime="20170508 17:16:26.950"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:36.955">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:36.955" status="PASS" endtime="20170508 17:16:36.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:36.956">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:36.956" status="PASS" endtime="20170508 17:16:36.956"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:36.957">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:36.957" status="PASS" endtime="20170508 17:16:36.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:36.958">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:36.957" status="PASS" endtime="20170508 17:16:36.958"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.150">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:36.958" status="PASS" endtime="20170508 17:16:37.150"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:37.150">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:37.150">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:36.958" status="PASS" endtime="20170508 17:16:37.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.151">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:37.151" status="PASS" endtime="20170508 17:16:37.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:37.151" status="PASS" endtime="20170508 17:16:37.152"></status>
</kw>
<status starttime="20170508 17:16:36.954" status="PASS" endtime="20170508 17:16:37.152"></status>
</kw>
<status starttime="20170508 17:16:36.954" status="PASS" endtime="20170508 17:16:37.152"></status>
</kw>
<status starttime="20170508 17:16:36.953" status="PASS" endtime="20170508 17:16:37.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:37.153">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:37.152" status="PASS" endtime="20170508 17:16:37.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:37.155">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:37.155" status="PASS" endtime="20170508 17:16:37.155"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.156">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:37.156" status="PASS" endtime="20170508 17:16:37.156"></status>
</kw>
<status starttime="20170508 17:16:37.155" status="PASS" endtime="20170508 17:16:37.156"></status>
</kw>
<status starttime="20170508 17:16:37.154" status="PASS" endtime="20170508 17:16:37.157"></status>
</kw>
<status starttime="20170508 17:16:37.153" status="PASS" endtime="20170508 17:16:37.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:37.241">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:37.241">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:37.157" status="PASS" endtime="20170508 17:16:37.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:37.243">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:37.243" status="PASS" endtime="20170508 17:16:37.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.244">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:37.244" status="PASS" endtime="20170508 17:16:37.244"></status>
</kw>
<status starttime="20170508 17:16:37.243" status="PASS" endtime="20170508 17:16:37.244"></status>
</kw>
<status starttime="20170508 17:16:37.242" status="PASS" endtime="20170508 17:16:37.245"></status>
</kw>
<status starttime="20170508 17:16:37.242" status="PASS" endtime="20170508 17:16:37.245"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:37.245">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:36.952" status="PASS" endtime="20170508 17:16:37.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:37.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:37.245" status="PASS" endtime="20170508 17:16:37.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:37.246">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:37.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:37.246">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:37.246" status="PASS" endtime="20170508 17:16:37.246"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:37.246">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:36.952" status="PASS" endtime="20170508 17:16:37.247"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:37.247">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:36.951" status="PASS" endtime="20170508 17:16:37.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:37.247">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:37.247" status="FAIL" endtime="20170508 17:16:37.247"></status>
</kw>
<status starttime="20170508 17:16:36.951" status="FAIL" endtime="20170508 17:16:37.248"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.252">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:47.252" status="PASS" endtime="20170508 17:16:47.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:47.253" status="PASS" endtime="20170508 17:16:47.254"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.254">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:47.254" status="PASS" endtime="20170508 17:16:47.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:47.255" status="PASS" endtime="20170508 17:16:47.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.441">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:47.256" status="PASS" endtime="20170508 17:16:47.441"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:47.441">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:47.441">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:47.255" status="PASS" endtime="20170508 17:16:47.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.442">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:47.442" status="PASS" endtime="20170508 17:16:47.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:47.442" status="PASS" endtime="20170508 17:16:47.443"></status>
</kw>
<status starttime="20170508 17:16:47.251" status="PASS" endtime="20170508 17:16:47.443"></status>
</kw>
<status starttime="20170508 17:16:47.251" status="PASS" endtime="20170508 17:16:47.443"></status>
</kw>
<status starttime="20170508 17:16:47.250" status="PASS" endtime="20170508 17:16:47.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.444">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:47.443" status="PASS" endtime="20170508 17:16:47.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.446">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:47.445" status="PASS" endtime="20170508 17:16:47.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.447">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:47.446" status="PASS" endtime="20170508 17:16:47.447"></status>
</kw>
<status starttime="20170508 17:16:47.446" status="PASS" endtime="20170508 17:16:47.447"></status>
</kw>
<status starttime="20170508 17:16:47.444" status="PASS" endtime="20170508 17:16:47.447"></status>
</kw>
<status starttime="20170508 17:16:47.444" status="PASS" endtime="20170508 17:16:47.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.522">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:47.522">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:47.447" status="PASS" endtime="20170508 17:16:47.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.524">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:47.524" status="PASS" endtime="20170508 17:16:47.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.525">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:47.525" status="PASS" endtime="20170508 17:16:47.525"></status>
</kw>
<status starttime="20170508 17:16:47.525" status="PASS" endtime="20170508 17:16:47.525"></status>
</kw>
<status starttime="20170508 17:16:47.523" status="PASS" endtime="20170508 17:16:47.526"></status>
</kw>
<status starttime="20170508 17:16:47.523" status="PASS" endtime="20170508 17:16:47.526"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:47.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:47.250" status="PASS" endtime="20170508 17:16:47.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:47.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:47.526" status="PASS" endtime="20170508 17:16:47.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:47.527">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:47.527">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:47.527">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:47.527" status="PASS" endtime="20170508 17:16:47.527"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:47.528">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:47.249" status="PASS" endtime="20170508 17:16:47.528"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:47.528">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:47.249" status="PASS" endtime="20170508 17:16:47.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:47.528">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:47.528" status="FAIL" endtime="20170508 17:16:47.529"></status>
</kw>
<status starttime="20170508 17:16:47.248" status="FAIL" endtime="20170508 17:16:47.529"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.536">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:16:57.535" status="PASS" endtime="20170508 17:16:57.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:16:57.536" status="PASS" endtime="20170508 17:16:57.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.537">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:16:57.537" status="PASS" endtime="20170508 17:16:57.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:16:57.538" status="PASS" endtime="20170508 17:16:57.538"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:16:57.539" status="PASS" endtime="20170508 17:16:57.727"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:57.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:16:57.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:57.538" status="PASS" endtime="20170508 17:16:57.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:57.728" status="PASS" endtime="20170508 17:16:57.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:57.728" status="PASS" endtime="20170508 17:16:57.729"></status>
</kw>
<status starttime="20170508 17:16:57.535" status="PASS" endtime="20170508 17:16:57.729"></status>
</kw>
<status starttime="20170508 17:16:57.534" status="PASS" endtime="20170508 17:16:57.729"></status>
</kw>
<status starttime="20170508 17:16:57.534" status="PASS" endtime="20170508 17:16:57.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.730">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:16:57.729" status="PASS" endtime="20170508 17:16:57.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.732">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:57.731" status="PASS" endtime="20170508 17:16:57.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.733">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:16:57.733" status="PASS" endtime="20170508 17:16:57.733"></status>
</kw>
<status starttime="20170508 17:16:57.732" status="PASS" endtime="20170508 17:16:57.733"></status>
</kw>
<status starttime="20170508 17:16:57.731" status="PASS" endtime="20170508 17:16:57.733"></status>
</kw>
<status starttime="20170508 17:16:57.730" status="PASS" endtime="20170508 17:16:57.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.800">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:16:57.801">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:57.733" status="PASS" endtime="20170508 17:16:57.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.803">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:57.802" status="PASS" endtime="20170508 17:16:57.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.804">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:16:57.804" status="PASS" endtime="20170508 17:16:57.804"></status>
</kw>
<status starttime="20170508 17:16:57.803" status="PASS" endtime="20170508 17:16:57.804"></status>
</kw>
<status starttime="20170508 17:16:57.802" status="PASS" endtime="20170508 17:16:57.804"></status>
</kw>
<status starttime="20170508 17:16:57.801" status="PASS" endtime="20170508 17:16:57.804"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:57.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:16:57.533" status="PASS" endtime="20170508 17:16:57.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:16:57.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:16:57.805" status="PASS" endtime="20170508 17:16:57.805"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:16:57.806">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:16:57.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:16:57.806">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:16:57.805" status="PASS" endtime="20170508 17:16:57.806"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:57.806">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:57.530" status="PASS" endtime="20170508 17:16:57.806"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:16:57.806">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:16:57.530" status="PASS" endtime="20170508 17:16:57.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:16:57.807">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:16:57.807" status="FAIL" endtime="20170508 17:16:57.807"></status>
</kw>
<status starttime="20170508 17:16:57.529" status="FAIL" endtime="20170508 17:16:57.807"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:07.814">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:07.814" status="PASS" endtime="20170508 17:17:07.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:07.816">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:07.815" status="PASS" endtime="20170508 17:17:07.816"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:07.817">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:07.816" status="PASS" endtime="20170508 17:17:07.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:07.818">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:07.817" status="PASS" endtime="20170508 17:17:07.818"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.011">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:07.820" status="PASS" endtime="20170508 17:17:08.011"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:08.011">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:08.011">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:07.819" status="PASS" endtime="20170508 17:17:08.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.012">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:08.012" status="PASS" endtime="20170508 17:17:08.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:08.013" status="PASS" endtime="20170508 17:17:08.013"></status>
</kw>
<status starttime="20170508 17:17:07.813" status="PASS" endtime="20170508 17:17:08.013"></status>
</kw>
<status starttime="20170508 17:17:07.813" status="PASS" endtime="20170508 17:17:08.014"></status>
</kw>
<status starttime="20170508 17:17:07.812" status="PASS" endtime="20170508 17:17:08.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:08.014">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:08.014" status="PASS" endtime="20170508 17:17:08.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:08.016">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:08.016" status="PASS" endtime="20170508 17:17:08.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.018">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:08.017" status="PASS" endtime="20170508 17:17:08.018"></status>
</kw>
<status starttime="20170508 17:17:08.017" status="PASS" endtime="20170508 17:17:08.018"></status>
</kw>
<status starttime="20170508 17:17:08.015" status="PASS" endtime="20170508 17:17:08.018"></status>
</kw>
<status starttime="20170508 17:17:08.015" status="PASS" endtime="20170508 17:17:08.018"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:08.087">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:08.087">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:08.019" status="PASS" endtime="20170508 17:17:08.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:08.089">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:08.089" status="PASS" endtime="20170508 17:17:08.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.090">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:08.090" status="PASS" endtime="20170508 17:17:08.090"></status>
</kw>
<status starttime="20170508 17:17:08.090" status="PASS" endtime="20170508 17:17:08.090"></status>
</kw>
<status starttime="20170508 17:17:08.088" status="PASS" endtime="20170508 17:17:08.091"></status>
</kw>
<status starttime="20170508 17:17:08.088" status="PASS" endtime="20170508 17:17:08.091"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:08.091">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:07.811" status="PASS" endtime="20170508 17:17:08.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:08.092">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:08.091" status="PASS" endtime="20170508 17:17:08.092"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:08.093">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:08.093">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:08.093">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:08.092" status="PASS" endtime="20170508 17:17:08.093"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:08.094">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:07.810" status="PASS" endtime="20170508 17:17:08.094"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:08.094">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:07.809" status="PASS" endtime="20170508 17:17:08.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:08.095">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:08.094" status="FAIL" endtime="20170508 17:17:08.095"></status>
</kw>
<status starttime="20170508 17:17:07.808" status="FAIL" endtime="20170508 17:17:08.095"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.101">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:18.101" status="PASS" endtime="20170508 17:17:18.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:18.102" status="PASS" endtime="20170508 17:17:18.102"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.103">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:18.102" status="PASS" endtime="20170508 17:17:18.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:18.103" status="PASS" endtime="20170508 17:17:18.104"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:18.104" status="PASS" endtime="20170508 17:17:18.296"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:18.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:18.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:18.104" status="PASS" endtime="20170508 17:17:18.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:18.296" status="PASS" endtime="20170508 17:17:18.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:18.297" status="PASS" endtime="20170508 17:17:18.298"></status>
</kw>
<status starttime="20170508 17:17:18.100" status="PASS" endtime="20170508 17:17:18.298"></status>
</kw>
<status starttime="20170508 17:17:18.099" status="PASS" endtime="20170508 17:17:18.298"></status>
</kw>
<status starttime="20170508 17:17:18.098" status="PASS" endtime="20170508 17:17:18.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.299">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:18.298" status="PASS" endtime="20170508 17:17:18.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.301">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:18.300" status="PASS" endtime="20170508 17:17:18.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.302">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:18.302" status="PASS" endtime="20170508 17:17:18.302"></status>
</kw>
<status starttime="20170508 17:17:18.301" status="PASS" endtime="20170508 17:17:18.302"></status>
</kw>
<status starttime="20170508 17:17:18.300" status="PASS" endtime="20170508 17:17:18.303"></status>
</kw>
<status starttime="20170508 17:17:18.299" status="PASS" endtime="20170508 17:17:18.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.371">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:18.371">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:18.303" status="PASS" endtime="20170508 17:17:18.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.373">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:18.373" status="PASS" endtime="20170508 17:17:18.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.375">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:18.374" status="PASS" endtime="20170508 17:17:18.375"></status>
</kw>
<status starttime="20170508 17:17:18.373" status="PASS" endtime="20170508 17:17:18.375"></status>
</kw>
<status starttime="20170508 17:17:18.372" status="PASS" endtime="20170508 17:17:18.375"></status>
</kw>
<status starttime="20170508 17:17:18.371" status="PASS" endtime="20170508 17:17:18.375"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:18.375">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:18.098" status="PASS" endtime="20170508 17:17:18.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:18.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:18.376" status="PASS" endtime="20170508 17:17:18.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:18.377">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:18.377">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:18.377">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:18.376" status="PASS" endtime="20170508 17:17:18.377"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:18.377">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:18.097" status="PASS" endtime="20170508 17:17:18.377"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:18.378">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:18.096" status="PASS" endtime="20170508 17:17:18.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:18.379">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:18.378" status="FAIL" endtime="20170508 17:17:18.379"></status>
</kw>
<status starttime="20170508 17:17:18.096" status="FAIL" endtime="20170508 17:17:18.379"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.384">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:28.383" status="PASS" endtime="20170508 17:17:28.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.385">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:28.385" status="PASS" endtime="20170508 17:17:28.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.386">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:28.385" status="PASS" endtime="20170508 17:17:28.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:28.386" status="PASS" endtime="20170508 17:17:28.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.582">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:28.387" status="PASS" endtime="20170508 17:17:28.582"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:28.582">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:28.582">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:28.387" status="PASS" endtime="20170508 17:17:28.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.583">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:28.583" status="PASS" endtime="20170508 17:17:28.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:28.584" status="PASS" endtime="20170508 17:17:28.584"></status>
</kw>
<status starttime="20170508 17:17:28.383" status="PASS" endtime="20170508 17:17:28.585"></status>
</kw>
<status starttime="20170508 17:17:28.383" status="PASS" endtime="20170508 17:17:28.585"></status>
</kw>
<status starttime="20170508 17:17:28.382" status="PASS" endtime="20170508 17:17:28.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.585">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:28.585" status="PASS" endtime="20170508 17:17:28.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.588">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:28.587" status="PASS" endtime="20170508 17:17:28.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.588">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:28.588" status="PASS" endtime="20170508 17:17:28.589"></status>
</kw>
<status starttime="20170508 17:17:28.588" status="PASS" endtime="20170508 17:17:28.589"></status>
</kw>
<status starttime="20170508 17:17:28.586" status="PASS" endtime="20170508 17:17:28.589"></status>
</kw>
<status starttime="20170508 17:17:28.586" status="PASS" endtime="20170508 17:17:28.589"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.658">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:28.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:28.589" status="PASS" endtime="20170508 17:17:28.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.661">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:28.660" status="PASS" endtime="20170508 17:17:28.661"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.663">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:28.662" status="PASS" endtime="20170508 17:17:28.663"></status>
</kw>
<status starttime="20170508 17:17:28.661" status="PASS" endtime="20170508 17:17:28.663"></status>
</kw>
<status starttime="20170508 17:17:28.660" status="PASS" endtime="20170508 17:17:28.663"></status>
</kw>
<status starttime="20170508 17:17:28.659" status="PASS" endtime="20170508 17:17:28.664"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:28.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:28.381" status="PASS" endtime="20170508 17:17:28.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:28.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:28.664" status="PASS" endtime="20170508 17:17:28.665"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:28.665">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:28.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:28.666">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:28.665" status="PASS" endtime="20170508 17:17:28.666"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:28.666">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:28.380" status="PASS" endtime="20170508 17:17:28.666"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:28.666">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:28.380" status="PASS" endtime="20170508 17:17:28.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:28.667">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:28.666" status="FAIL" endtime="20170508 17:17:28.667"></status>
</kw>
<status starttime="20170508 17:17:28.379" status="FAIL" endtime="20170508 17:17:28.667"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:38.673">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:38.672" status="PASS" endtime="20170508 17:17:38.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:38.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:38.674" status="PASS" endtime="20170508 17:17:38.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:38.674">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:38.674" status="PASS" endtime="20170508 17:17:38.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:38.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:38.675" status="PASS" endtime="20170508 17:17:38.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:38.970">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:38.676" status="PASS" endtime="20170508 17:17:38.970"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:38.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:38.970">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:38.675" status="PASS" endtime="20170508 17:17:38.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:38.971">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:38.971" status="PASS" endtime="20170508 17:17:38.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:38.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:38.971" status="PASS" endtime="20170508 17:17:38.972"></status>
</kw>
<status starttime="20170508 17:17:38.671" status="PASS" endtime="20170508 17:17:38.972"></status>
</kw>
<status starttime="20170508 17:17:38.671" status="PASS" endtime="20170508 17:17:38.972"></status>
</kw>
<status starttime="20170508 17:17:38.670" status="PASS" endtime="20170508 17:17:38.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:38.973">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:38.972" status="PASS" endtime="20170508 17:17:38.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:38.975">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:38.974" status="PASS" endtime="20170508 17:17:38.975"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:38.976">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:38.975" status="PASS" endtime="20170508 17:17:38.976"></status>
</kw>
<status starttime="20170508 17:17:38.975" status="PASS" endtime="20170508 17:17:38.976"></status>
</kw>
<status starttime="20170508 17:17:38.973" status="PASS" endtime="20170508 17:17:38.976"></status>
</kw>
<status starttime="20170508 17:17:38.973" status="PASS" endtime="20170508 17:17:38.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:39.054">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:39.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:38.976" status="PASS" endtime="20170508 17:17:39.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:39.056">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:39.055" status="PASS" endtime="20170508 17:17:39.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:39.057">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:39.057" status="PASS" endtime="20170508 17:17:39.057"></status>
</kw>
<status starttime="20170508 17:17:39.056" status="PASS" endtime="20170508 17:17:39.057"></status>
</kw>
<status starttime="20170508 17:17:39.055" status="PASS" endtime="20170508 17:17:39.057"></status>
</kw>
<status starttime="20170508 17:17:39.055" status="PASS" endtime="20170508 17:17:39.057"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:39.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:38.670" status="PASS" endtime="20170508 17:17:39.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:39.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:39.058" status="PASS" endtime="20170508 17:17:39.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:39.059">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:39.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:39.059">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:39.058" status="PASS" endtime="20170508 17:17:39.059"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:39.059">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:38.669" status="PASS" endtime="20170508 17:17:39.059"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:39.059">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:38.668" status="PASS" endtime="20170508 17:17:39.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:39.060">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:39.060" status="FAIL" endtime="20170508 17:17:39.060"></status>
</kw>
<status starttime="20170508 17:17:38.668" status="FAIL" endtime="20170508 17:17:39.061"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.065">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:49.065" status="PASS" endtime="20170508 17:17:49.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:49.066" status="PASS" endtime="20170508 17:17:49.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.067">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:49.067" status="PASS" endtime="20170508 17:17:49.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:49.067" status="PASS" endtime="20170508 17:17:49.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:49.068" status="PASS" endtime="20170508 17:17:49.362"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:49.362">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:49.362">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:49.068" status="PASS" endtime="20170508 17:17:49.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.363">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:49.363" status="PASS" endtime="20170508 17:17:49.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:49.363" status="PASS" endtime="20170508 17:17:49.364"></status>
</kw>
<status starttime="20170508 17:17:49.064" status="PASS" endtime="20170508 17:17:49.364"></status>
</kw>
<status starttime="20170508 17:17:49.064" status="PASS" endtime="20170508 17:17:49.364"></status>
</kw>
<status starttime="20170508 17:17:49.063" status="PASS" endtime="20170508 17:17:49.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.365">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:49.364" status="PASS" endtime="20170508 17:17:49.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.367">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:49.366" status="PASS" endtime="20170508 17:17:49.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.368">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:49.368" status="PASS" endtime="20170508 17:17:49.368"></status>
</kw>
<status starttime="20170508 17:17:49.367" status="PASS" endtime="20170508 17:17:49.368"></status>
</kw>
<status starttime="20170508 17:17:49.365" status="PASS" endtime="20170508 17:17:49.368"></status>
</kw>
<status starttime="20170508 17:17:49.365" status="PASS" endtime="20170508 17:17:49.368"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.461">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:49.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:49.369" status="PASS" endtime="20170508 17:17:49.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.463">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:49.462" status="PASS" endtime="20170508 17:17:49.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.464">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:49.463" status="PASS" endtime="20170508 17:17:49.464"></status>
</kw>
<status starttime="20170508 17:17:49.463" status="PASS" endtime="20170508 17:17:49.464"></status>
</kw>
<status starttime="20170508 17:17:49.462" status="PASS" endtime="20170508 17:17:49.464"></status>
</kw>
<status starttime="20170508 17:17:49.461" status="PASS" endtime="20170508 17:17:49.464"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:49.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:49.063" status="PASS" endtime="20170508 17:17:49.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:49.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:49.465" status="PASS" endtime="20170508 17:17:49.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:49.465">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:49.465">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:49.466">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:49.465" status="PASS" endtime="20170508 17:17:49.466"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:49.466">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:49.062" status="PASS" endtime="20170508 17:17:49.466"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:49.466">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:49.062" status="PASS" endtime="20170508 17:17:49.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:49.467">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:49.466" status="FAIL" endtime="20170508 17:17:49.467"></status>
</kw>
<status starttime="20170508 17:17:49.061" status="FAIL" endtime="20170508 17:17:49.467"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.472">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:17:59.471" status="PASS" endtime="20170508 17:17:59.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:17:59.473" status="PASS" endtime="20170508 17:17:59.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.474">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:17:59.473" status="PASS" endtime="20170508 17:17:59.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:17:59.474" status="PASS" endtime="20170508 17:17:59.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:17:59.475" status="PASS" endtime="20170508 17:17:59.678"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:59.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:17:59.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:59.475" status="PASS" endtime="20170508 17:17:59.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.679">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:59.678" status="PASS" endtime="20170508 17:17:59.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:59.679" status="PASS" endtime="20170508 17:17:59.680"></status>
</kw>
<status starttime="20170508 17:17:59.471" status="PASS" endtime="20170508 17:17:59.680"></status>
</kw>
<status starttime="20170508 17:17:59.470" status="PASS" endtime="20170508 17:17:59.680"></status>
</kw>
<status starttime="20170508 17:17:59.470" status="PASS" endtime="20170508 17:17:59.680"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.680">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:17:59.680" status="PASS" endtime="20170508 17:17:59.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.683">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:59.682" status="PASS" endtime="20170508 17:17:59.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.683">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:17:59.683" status="PASS" endtime="20170508 17:17:59.684"></status>
</kw>
<status starttime="20170508 17:17:59.683" status="PASS" endtime="20170508 17:17:59.684"></status>
</kw>
<status starttime="20170508 17:17:59.681" status="PASS" endtime="20170508 17:17:59.684"></status>
</kw>
<status starttime="20170508 17:17:59.681" status="PASS" endtime="20170508 17:17:59.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.841">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:17:59.842">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:59.684" status="PASS" endtime="20170508 17:17:59.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.843">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:59.843" status="PASS" endtime="20170508 17:17:59.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.844">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:17:59.844" status="PASS" endtime="20170508 17:17:59.844"></status>
</kw>
<status starttime="20170508 17:17:59.844" status="PASS" endtime="20170508 17:17:59.844"></status>
</kw>
<status starttime="20170508 17:17:59.842" status="PASS" endtime="20170508 17:17:59.845"></status>
</kw>
<status starttime="20170508 17:17:59.842" status="PASS" endtime="20170508 17:17:59.845"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:59.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:17:59.469" status="PASS" endtime="20170508 17:17:59.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:17:59.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:17:59.845" status="PASS" endtime="20170508 17:17:59.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:17:59.846">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:17:59.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:17:59.846">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:17:59.846" status="PASS" endtime="20170508 17:17:59.846"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:59.847">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:59.469" status="PASS" endtime="20170508 17:17:59.847"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:17:59.847">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:17:59.468" status="PASS" endtime="20170508 17:17:59.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:17:59.847">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:17:59.847" status="FAIL" endtime="20170508 17:17:59.848"></status>
</kw>
<status starttime="20170508 17:17:59.468" status="FAIL" endtime="20170508 17:17:59.848"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:09.853">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:18:09.853" status="PASS" endtime="20170508 17:18:09.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:09.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:18:09.854" status="PASS" endtime="20170508 17:18:09.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:09.854">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:18:09.854" status="PASS" endtime="20170508 17:18:09.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:09.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:18:09.855" status="PASS" endtime="20170508 17:18:09.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:18:09.856" status="PASS" endtime="20170508 17:18:10.066"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:10.066">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:18:10.066">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:09.855" status="PASS" endtime="20170508 17:18:10.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.067">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:10.067" status="PASS" endtime="20170508 17:18:10.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:10.067" status="PASS" endtime="20170508 17:18:10.068"></status>
</kw>
<status starttime="20170508 17:18:09.852" status="PASS" endtime="20170508 17:18:10.068"></status>
</kw>
<status starttime="20170508 17:18:09.852" status="PASS" endtime="20170508 17:18:10.068"></status>
</kw>
<status starttime="20170508 17:18:09.851" status="PASS" endtime="20170508 17:18:10.068"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:10.069">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:18:10.068" status="PASS" endtime="20170508 17:18:10.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:10.071">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:10.070" status="PASS" endtime="20170508 17:18:10.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.072">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:10.071" status="PASS" endtime="20170508 17:18:10.072"></status>
</kw>
<status starttime="20170508 17:18:10.071" status="PASS" endtime="20170508 17:18:10.072"></status>
</kw>
<status starttime="20170508 17:18:10.069" status="PASS" endtime="20170508 17:18:10.072"></status>
</kw>
<status starttime="20170508 17:18:10.069" status="PASS" endtime="20170508 17:18:10.072"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:10.140">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:18:10.141">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:10.072" status="PASS" endtime="20170508 17:18:10.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:10.142">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:10.142" status="PASS" endtime="20170508 17:18:10.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.143">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:10.143" status="PASS" endtime="20170508 17:18:10.143"></status>
</kw>
<status starttime="20170508 17:18:10.143" status="PASS" endtime="20170508 17:18:10.144"></status>
</kw>
<status starttime="20170508 17:18:10.141" status="PASS" endtime="20170508 17:18:10.144"></status>
</kw>
<status starttime="20170508 17:18:10.141" status="PASS" endtime="20170508 17:18:10.144"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:10.144">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:09.850" status="PASS" endtime="20170508 17:18:10.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:10.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:10.144" status="PASS" endtime="20170508 17:18:10.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:10.145">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:18:10.145">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:18:10.145">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:18:10.145" status="PASS" endtime="20170508 17:18:10.145"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:10.146">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:09.849" status="PASS" endtime="20170508 17:18:10.146"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:10.146">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:09.849" status="PASS" endtime="20170508 17:18:10.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:18:10.147">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:18:10.146" status="FAIL" endtime="20170508 17:18:10.147"></status>
</kw>
<status starttime="20170508 17:18:09.848" status="FAIL" endtime="20170508 17:18:10.147"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.152">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:18:20.151" status="PASS" endtime="20170508 17:18:20.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:18:20.152" status="PASS" endtime="20170508 17:18:20.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.153">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:18:20.153" status="PASS" endtime="20170508 17:18:20.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.154">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:18:20.153" status="PASS" endtime="20170508 17:18:20.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:18:20.155" status="PASS" endtime="20170508 17:18:20.360"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:20.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:18:20.360">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:20.154" status="PASS" endtime="20170508 17:18:20.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:20.361" status="PASS" endtime="20170508 17:18:20.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:20.361" status="PASS" endtime="20170508 17:18:20.362"></status>
</kw>
<status starttime="20170508 17:18:20.151" status="PASS" endtime="20170508 17:18:20.362"></status>
</kw>
<status starttime="20170508 17:18:20.150" status="PASS" endtime="20170508 17:18:20.362"></status>
</kw>
<status starttime="20170508 17:18:20.150" status="PASS" endtime="20170508 17:18:20.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.363">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:18:20.362" status="PASS" endtime="20170508 17:18:20.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.365">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:20.364" status="PASS" endtime="20170508 17:18:20.365"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.366">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:20.365" status="PASS" endtime="20170508 17:18:20.366"></status>
</kw>
<status starttime="20170508 17:18:20.365" status="PASS" endtime="20170508 17:18:20.366"></status>
</kw>
<status starttime="20170508 17:18:20.363" status="PASS" endtime="20170508 17:18:20.366"></status>
</kw>
<status starttime="20170508 17:18:20.363" status="PASS" endtime="20170508 17:18:20.366"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.434">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:18:20.434">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:20.366" status="PASS" endtime="20170508 17:18:20.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.436">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:20.435" status="PASS" endtime="20170508 17:18:20.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.437">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:20.436" status="PASS" endtime="20170508 17:18:20.437"></status>
</kw>
<status starttime="20170508 17:18:20.436" status="PASS" endtime="20170508 17:18:20.437"></status>
</kw>
<status starttime="20170508 17:18:20.435" status="PASS" endtime="20170508 17:18:20.437"></status>
</kw>
<status starttime="20170508 17:18:20.434" status="PASS" endtime="20170508 17:18:20.437"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:20.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:20.149" status="PASS" endtime="20170508 17:18:20.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:20.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:20.438" status="PASS" endtime="20170508 17:18:20.438"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:20.439">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:18:20.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:18:20.439">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:18:20.439" status="PASS" endtime="20170508 17:18:20.439"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:20.439">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:20.148" status="PASS" endtime="20170508 17:18:20.439"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:20.440">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:20.148" status="PASS" endtime="20170508 17:18:20.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:18:20.440">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:18:20.440" status="FAIL" endtime="20170508 17:18:20.440"></status>
</kw>
<status starttime="20170508 17:18:20.147" status="FAIL" endtime="20170508 17:18:20.440"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.491">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:18:30.490" status="PASS" endtime="20170508 17:18:30.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:18:30.492" status="PASS" endtime="20170508 17:18:30.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:18:30.492" status="PASS" endtime="20170508 17:18:30.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:18:30.493" status="PASS" endtime="20170508 17:18:30.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:18:30.495" status="PASS" endtime="20170508 17:18:30.684"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:30.684">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:18:30.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:30.494" status="PASS" endtime="20170508 17:18:30.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:30.684" status="PASS" endtime="20170508 17:18:30.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:30.685" status="PASS" endtime="20170508 17:18:30.685"></status>
</kw>
<status starttime="20170508 17:18:30.445" status="PASS" endtime="20170508 17:18:30.685"></status>
</kw>
<status starttime="20170508 17:18:30.444" status="PASS" endtime="20170508 17:18:30.685"></status>
</kw>
<status starttime="20170508 17:18:30.443" status="PASS" endtime="20170508 17:18:30.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.686">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:18:30.686" status="PASS" endtime="20170508 17:18:30.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.688">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:30.687" status="PASS" endtime="20170508 17:18:30.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.689">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:30.689" status="PASS" endtime="20170508 17:18:30.689"></status>
</kw>
<status starttime="20170508 17:18:30.688" status="PASS" endtime="20170508 17:18:30.689"></status>
</kw>
<status starttime="20170508 17:18:30.687" status="PASS" endtime="20170508 17:18:30.689"></status>
</kw>
<status starttime="20170508 17:18:30.686" status="PASS" endtime="20170508 17:18:30.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.768">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:18:30.768">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:30.690" status="PASS" endtime="20170508 17:18:30.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.770">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:30.770" status="PASS" endtime="20170508 17:18:30.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.771">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:30.771" status="PASS" endtime="20170508 17:18:30.771"></status>
</kw>
<status starttime="20170508 17:18:30.770" status="PASS" endtime="20170508 17:18:30.771"></status>
</kw>
<status starttime="20170508 17:18:30.769" status="PASS" endtime="20170508 17:18:30.771"></status>
</kw>
<status starttime="20170508 17:18:30.768" status="PASS" endtime="20170508 17:18:30.771"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:30.772">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:30.442" status="PASS" endtime="20170508 17:18:30.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:30.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:30.772" status="PASS" endtime="20170508 17:18:30.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:30.773">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:18:30.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:18:30.773">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:18:30.773" status="PASS" endtime="20170508 17:18:30.773"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:30.773">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:30.442" status="PASS" endtime="20170508 17:18:30.773"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:30.773">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:30.441" status="PASS" endtime="20170508 17:18:30.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:18:30.774">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:18:30.774" status="FAIL" endtime="20170508 17:18:30.774"></status>
</kw>
<status starttime="20170508 17:18:30.441" status="FAIL" endtime="20170508 17:18:30.774"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:40.779">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:18:40.779" status="PASS" endtime="20170508 17:18:40.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:40.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:18:40.780" status="PASS" endtime="20170508 17:18:40.780"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:40.781">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:18:40.780" status="PASS" endtime="20170508 17:18:40.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:40.781">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:18:40.781" status="PASS" endtime="20170508 17:18:40.781"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:18:40.782" status="PASS" endtime="20170508 17:18:41.073"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:41.074">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:18:41.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:40.782" status="PASS" endtime="20170508 17:18:41.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.074">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:41.074" status="PASS" endtime="20170508 17:18:41.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:41.075" status="PASS" endtime="20170508 17:18:41.075"></status>
</kw>
<status starttime="20170508 17:18:40.778" status="PASS" endtime="20170508 17:18:41.075"></status>
</kw>
<status starttime="20170508 17:18:40.778" status="PASS" endtime="20170508 17:18:41.075"></status>
</kw>
<status starttime="20170508 17:18:40.777" status="PASS" endtime="20170508 17:18:41.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:41.076">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:18:41.076" status="PASS" endtime="20170508 17:18:41.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:41.078">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:41.077" status="PASS" endtime="20170508 17:18:41.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.079">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:41.079" status="PASS" endtime="20170508 17:18:41.079"></status>
</kw>
<status starttime="20170508 17:18:41.078" status="PASS" endtime="20170508 17:18:41.079"></status>
</kw>
<status starttime="20170508 17:18:41.077" status="PASS" endtime="20170508 17:18:41.079"></status>
</kw>
<status starttime="20170508 17:18:41.076" status="PASS" endtime="20170508 17:18:41.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:41.202">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:18:41.202">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:41.080" status="PASS" endtime="20170508 17:18:41.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:41.204">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:41.204" status="PASS" endtime="20170508 17:18:41.204"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.205">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:41.205" status="PASS" endtime="20170508 17:18:41.205"></status>
</kw>
<status starttime="20170508 17:18:41.204" status="PASS" endtime="20170508 17:18:41.205"></status>
</kw>
<status starttime="20170508 17:18:41.203" status="PASS" endtime="20170508 17:18:41.205"></status>
</kw>
<status starttime="20170508 17:18:41.203" status="PASS" endtime="20170508 17:18:41.205"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:41.206">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:40.777" status="PASS" endtime="20170508 17:18:41.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:41.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:41.206" status="PASS" endtime="20170508 17:18:41.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:41.207">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:18:41.207">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:18:41.207">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:18:41.206" status="PASS" endtime="20170508 17:18:41.207"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:41.207">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:40.776" status="PASS" endtime="20170508 17:18:41.207"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:41.207">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:40.776" status="PASS" endtime="20170508 17:18:41.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:18:41.208">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:18:41.208" status="FAIL" endtime="20170508 17:18:41.208"></status>
</kw>
<status starttime="20170508 17:18:40.775" status="FAIL" endtime="20170508 17:18:41.208"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.213">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:18:51.213" status="PASS" endtime="20170508 17:18:51.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.214">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:18:51.214" status="PASS" endtime="20170508 17:18:51.214"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:18:51.215" status="PASS" endtime="20170508 17:18:51.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.215">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:18:51.215" status="PASS" endtime="20170508 17:18:51.216"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:18:51.216" status="PASS" endtime="20170508 17:18:51.398"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:51.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:18:51.398">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:51.216" status="PASS" endtime="20170508 17:18:51.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:51.398" status="PASS" endtime="20170508 17:18:51.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:51.399" status="PASS" endtime="20170508 17:18:51.400"></status>
</kw>
<status starttime="20170508 17:18:51.212" status="PASS" endtime="20170508 17:18:51.400"></status>
</kw>
<status starttime="20170508 17:18:51.212" status="PASS" endtime="20170508 17:18:51.400"></status>
</kw>
<status starttime="20170508 17:18:51.211" status="PASS" endtime="20170508 17:18:51.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.400">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:18:51.400" status="PASS" endtime="20170508 17:18:51.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.403">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:51.402" status="PASS" endtime="20170508 17:18:51.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.403">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:18:51.403" status="PASS" endtime="20170508 17:18:51.404"></status>
</kw>
<status starttime="20170508 17:18:51.403" status="PASS" endtime="20170508 17:18:51.404"></status>
</kw>
<status starttime="20170508 17:18:51.401" status="PASS" endtime="20170508 17:18:51.404"></status>
</kw>
<status starttime="20170508 17:18:51.401" status="PASS" endtime="20170508 17:18:51.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.470">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:18:51.470">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:51.404" status="PASS" endtime="20170508 17:18:51.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.472">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:51.472" status="PASS" endtime="20170508 17:18:51.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.473">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:18:51.473" status="PASS" endtime="20170508 17:18:51.473"></status>
</kw>
<status starttime="20170508 17:18:51.473" status="PASS" endtime="20170508 17:18:51.473"></status>
</kw>
<status starttime="20170508 17:18:51.471" status="PASS" endtime="20170508 17:18:51.474"></status>
</kw>
<status starttime="20170508 17:18:51.471" status="PASS" endtime="20170508 17:18:51.474"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:51.474">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:18:51.210" status="PASS" endtime="20170508 17:18:51.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:18:51.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:18:51.474" status="PASS" endtime="20170508 17:18:51.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:18:51.475">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:18:51.475">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:18:51.475">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:18:51.475" status="PASS" endtime="20170508 17:18:51.475"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:51.476">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:51.210" status="PASS" endtime="20170508 17:18:51.476"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:18:51.476">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:18:51.209" status="PASS" endtime="20170508 17:18:51.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:18:51.476">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:18:51.476" status="FAIL" endtime="20170508 17:18:51.477"></status>
</kw>
<status starttime="20170508 17:18:51.209" status="FAIL" endtime="20170508 17:18:51.477"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.482">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:01.481" status="PASS" endtime="20170508 17:19:01.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:01.483" status="PASS" endtime="20170508 17:19:01.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.484">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:01.483" status="PASS" endtime="20170508 17:19:01.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.485">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:01.484" status="PASS" endtime="20170508 17:19:01.485"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:01.486" status="PASS" endtime="20170508 17:19:01.677"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:01.677">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:01.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:01.485" status="PASS" endtime="20170508 17:19:01.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:01.678" status="PASS" endtime="20170508 17:19:01.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:01.678" status="PASS" endtime="20170508 17:19:01.679"></status>
</kw>
<status starttime="20170508 17:19:01.480" status="PASS" endtime="20170508 17:19:01.679"></status>
</kw>
<status starttime="20170508 17:19:01.480" status="PASS" endtime="20170508 17:19:01.679"></status>
</kw>
<status starttime="20170508 17:19:01.479" status="PASS" endtime="20170508 17:19:01.680"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.680">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:01.680" status="PASS" endtime="20170508 17:19:01.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.682">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:01.682" status="PASS" endtime="20170508 17:19:01.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.683">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:01.683" status="PASS" endtime="20170508 17:19:01.683"></status>
</kw>
<status starttime="20170508 17:19:01.682" status="PASS" endtime="20170508 17:19:01.683"></status>
</kw>
<status starttime="20170508 17:19:01.681" status="PASS" endtime="20170508 17:19:01.684"></status>
</kw>
<status starttime="20170508 17:19:01.680" status="PASS" endtime="20170508 17:19:01.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.751">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:01.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:01.684" status="PASS" endtime="20170508 17:19:01.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.752">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:01.752" status="PASS" endtime="20170508 17:19:01.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.753">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:01.753" status="PASS" endtime="20170508 17:19:01.753"></status>
</kw>
<status starttime="20170508 17:19:01.753" status="PASS" endtime="20170508 17:19:01.754"></status>
</kw>
<status starttime="20170508 17:19:01.751" status="PASS" endtime="20170508 17:19:01.754"></status>
</kw>
<status starttime="20170508 17:19:01.751" status="PASS" endtime="20170508 17:19:01.754"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:01.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:01.479" status="PASS" endtime="20170508 17:19:01.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:01.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:01.754" status="PASS" endtime="20170508 17:19:01.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:01.755">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:01.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:01.755">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:01.755" status="PASS" endtime="20170508 17:19:01.755"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:01.756">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:01.478" status="PASS" endtime="20170508 17:19:01.756"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:01.756">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:01.478" status="PASS" endtime="20170508 17:19:01.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:01.756">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:01.756" status="FAIL" endtime="20170508 17:19:01.756"></status>
</kw>
<status starttime="20170508 17:19:01.477" status="FAIL" endtime="20170508 17:19:01.757"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:11.762">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:11.761" status="PASS" endtime="20170508 17:19:11.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:11.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:11.762" status="PASS" endtime="20170508 17:19:11.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:11.763">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:11.763" status="PASS" endtime="20170508 17:19:11.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:11.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:11.764" status="PASS" endtime="20170508 17:19:11.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:11.947">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:11.765" status="PASS" endtime="20170508 17:19:11.947"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:11.947">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:11.947">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:11.764" status="PASS" endtime="20170508 17:19:11.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:11.948">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:11.947" status="PASS" endtime="20170508 17:19:11.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:11.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:11.948" status="PASS" endtime="20170508 17:19:11.948"></status>
</kw>
<status starttime="20170508 17:19:11.761" status="PASS" endtime="20170508 17:19:11.949"></status>
</kw>
<status starttime="20170508 17:19:11.760" status="PASS" endtime="20170508 17:19:11.949"></status>
</kw>
<status starttime="20170508 17:19:11.759" status="PASS" endtime="20170508 17:19:11.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:11.949">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:11.949" status="PASS" endtime="20170508 17:19:11.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:11.952">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:11.951" status="PASS" endtime="20170508 17:19:11.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:11.953">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:11.953" status="PASS" endtime="20170508 17:19:11.953"></status>
</kw>
<status starttime="20170508 17:19:11.952" status="PASS" endtime="20170508 17:19:11.953"></status>
</kw>
<status starttime="20170508 17:19:11.950" status="PASS" endtime="20170508 17:19:11.953"></status>
</kw>
<status starttime="20170508 17:19:11.950" status="PASS" endtime="20170508 17:19:11.953"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:12.022">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:12.022">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:11.953" status="PASS" endtime="20170508 17:19:12.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:12.024">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:12.024" status="PASS" endtime="20170508 17:19:12.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:12.025">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:12.025" status="PASS" endtime="20170508 17:19:12.026"></status>
</kw>
<status starttime="20170508 17:19:12.024" status="PASS" endtime="20170508 17:19:12.026"></status>
</kw>
<status starttime="20170508 17:19:12.023" status="PASS" endtime="20170508 17:19:12.026"></status>
</kw>
<status starttime="20170508 17:19:12.023" status="PASS" endtime="20170508 17:19:12.026"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:12.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:11.759" status="PASS" endtime="20170508 17:19:12.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:12.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:12.026" status="PASS" endtime="20170508 17:19:12.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:12.027">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:12.027">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:12.027">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:12.027" status="PASS" endtime="20170508 17:19:12.028"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:12.028">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:11.758" status="PASS" endtime="20170508 17:19:12.028"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:12.028">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:11.758" status="PASS" endtime="20170508 17:19:12.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:12.029">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:12.028" status="FAIL" endtime="20170508 17:19:12.029"></status>
</kw>
<status starttime="20170508 17:19:11.757" status="FAIL" endtime="20170508 17:19:12.029"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.034">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:22.033" status="PASS" endtime="20170508 17:19:22.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.035">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:22.034" status="PASS" endtime="20170508 17:19:22.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.035">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:22.035" status="PASS" endtime="20170508 17:19:22.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:22.035" status="PASS" endtime="20170508 17:19:22.036"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:22.037" status="PASS" endtime="20170508 17:19:22.221"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:22.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:22.221">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:22.036" status="PASS" endtime="20170508 17:19:22.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:22.221" status="PASS" endtime="20170508 17:19:22.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:22.222" status="PASS" endtime="20170508 17:19:22.222"></status>
</kw>
<status starttime="20170508 17:19:22.033" status="PASS" endtime="20170508 17:19:22.222"></status>
</kw>
<status starttime="20170508 17:19:22.032" status="PASS" endtime="20170508 17:19:22.223"></status>
</kw>
<status starttime="20170508 17:19:22.032" status="PASS" endtime="20170508 17:19:22.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.223">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:22.223" status="PASS" endtime="20170508 17:19:22.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.225">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:22.225" status="PASS" endtime="20170508 17:19:22.225"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.226">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:22.226" status="PASS" endtime="20170508 17:19:22.226"></status>
</kw>
<status starttime="20170508 17:19:22.225" status="PASS" endtime="20170508 17:19:22.226"></status>
</kw>
<status starttime="20170508 17:19:22.224" status="PASS" endtime="20170508 17:19:22.227"></status>
</kw>
<status starttime="20170508 17:19:22.224" status="PASS" endtime="20170508 17:19:22.227"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.294">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:22.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:22.227" status="PASS" endtime="20170508 17:19:22.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.296">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:22.296" status="PASS" endtime="20170508 17:19:22.296"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.297">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:22.297" status="PASS" endtime="20170508 17:19:22.297"></status>
</kw>
<status starttime="20170508 17:19:22.296" status="PASS" endtime="20170508 17:19:22.297"></status>
</kw>
<status starttime="20170508 17:19:22.295" status="PASS" endtime="20170508 17:19:22.297"></status>
</kw>
<status starttime="20170508 17:19:22.295" status="PASS" endtime="20170508 17:19:22.297"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:22.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:22.031" status="PASS" endtime="20170508 17:19:22.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:22.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:22.298" status="PASS" endtime="20170508 17:19:22.298"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:22.299">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:22.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:22.299">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:22.298" status="PASS" endtime="20170508 17:19:22.299"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:22.299">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:22.030" status="PASS" endtime="20170508 17:19:22.299"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:22.299">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:22.030" status="PASS" endtime="20170508 17:19:22.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:22.300">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:22.300" status="FAIL" endtime="20170508 17:19:22.300"></status>
</kw>
<status starttime="20170508 17:19:22.029" status="FAIL" endtime="20170508 17:19:22.300"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.305">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:32.305" status="PASS" endtime="20170508 17:19:32.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:32.306" status="PASS" endtime="20170508 17:19:32.307"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.307">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:32.307" status="PASS" endtime="20170508 17:19:32.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:32.307" status="PASS" endtime="20170508 17:19:32.308"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:32.309" status="PASS" endtime="20170508 17:19:32.488"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:32.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:32.488">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:32.308" status="PASS" endtime="20170508 17:19:32.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:32.488" status="PASS" endtime="20170508 17:19:32.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:32.489" status="PASS" endtime="20170508 17:19:32.489"></status>
</kw>
<status starttime="20170508 17:19:32.304" status="PASS" endtime="20170508 17:19:32.489"></status>
</kw>
<status starttime="20170508 17:19:32.304" status="PASS" endtime="20170508 17:19:32.490"></status>
</kw>
<status starttime="20170508 17:19:32.303" status="PASS" endtime="20170508 17:19:32.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.490">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:32.490" status="PASS" endtime="20170508 17:19:32.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.492">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:32.492" status="PASS" endtime="20170508 17:19:32.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.493">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:32.493" status="PASS" endtime="20170508 17:19:32.493"></status>
</kw>
<status starttime="20170508 17:19:32.493" status="PASS" endtime="20170508 17:19:32.493"></status>
</kw>
<status starttime="20170508 17:19:32.491" status="PASS" endtime="20170508 17:19:32.494"></status>
</kw>
<status starttime="20170508 17:19:32.491" status="PASS" endtime="20170508 17:19:32.494"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.562">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:32.562">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:32.494" status="PASS" endtime="20170508 17:19:32.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.564">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:32.563" status="PASS" endtime="20170508 17:19:32.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.565">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:32.565" status="PASS" endtime="20170508 17:19:32.565"></status>
</kw>
<status starttime="20170508 17:19:32.564" status="PASS" endtime="20170508 17:19:32.565"></status>
</kw>
<status starttime="20170508 17:19:32.563" status="PASS" endtime="20170508 17:19:32.565"></status>
</kw>
<status starttime="20170508 17:19:32.562" status="PASS" endtime="20170508 17:19:32.565"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:32.566">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:32.303" status="PASS" endtime="20170508 17:19:32.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:32.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:32.566" status="PASS" endtime="20170508 17:19:32.566"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:32.567">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:32.567">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:32.567">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:32.566" status="PASS" endtime="20170508 17:19:32.567"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:32.567">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:32.302" status="PASS" endtime="20170508 17:19:32.567"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:32.568">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:32.302" status="PASS" endtime="20170508 17:19:32.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:32.568">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:32.568" status="FAIL" endtime="20170508 17:19:32.568"></status>
</kw>
<status starttime="20170508 17:19:32.301" status="FAIL" endtime="20170508 17:19:32.568"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.576">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:42.576" status="PASS" endtime="20170508 17:19:42.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:42.577" status="PASS" endtime="20170508 17:19:42.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.578">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:42.577" status="PASS" endtime="20170508 17:19:42.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:42.578" status="PASS" endtime="20170508 17:19:42.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:42.579" status="PASS" endtime="20170508 17:19:42.770"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:42.770">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:42.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:42.578" status="PASS" endtime="20170508 17:19:42.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.771">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:42.771" status="PASS" endtime="20170508 17:19:42.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:42.771" status="PASS" endtime="20170508 17:19:42.772"></status>
</kw>
<status starttime="20170508 17:19:42.575" status="PASS" endtime="20170508 17:19:42.772"></status>
</kw>
<status starttime="20170508 17:19:42.575" status="PASS" endtime="20170508 17:19:42.772"></status>
</kw>
<status starttime="20170508 17:19:42.574" status="PASS" endtime="20170508 17:19:42.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.773">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:42.773" status="PASS" endtime="20170508 17:19:42.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.775">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:42.774" status="PASS" endtime="20170508 17:19:42.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.776">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:42.776" status="PASS" endtime="20170508 17:19:42.776"></status>
</kw>
<status starttime="20170508 17:19:42.775" status="PASS" endtime="20170508 17:19:42.776"></status>
</kw>
<status starttime="20170508 17:19:42.774" status="PASS" endtime="20170508 17:19:42.776"></status>
</kw>
<status starttime="20170508 17:19:42.773" status="PASS" endtime="20170508 17:19:42.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.844">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:42.844">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:42.777" status="PASS" endtime="20170508 17:19:42.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.846">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:42.845" status="PASS" endtime="20170508 17:19:42.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.847">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:42.847" status="PASS" endtime="20170508 17:19:42.847"></status>
</kw>
<status starttime="20170508 17:19:42.846" status="PASS" endtime="20170508 17:19:42.847"></status>
</kw>
<status starttime="20170508 17:19:42.845" status="PASS" endtime="20170508 17:19:42.847"></status>
</kw>
<status starttime="20170508 17:19:42.844" status="PASS" endtime="20170508 17:19:42.847"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:42.847">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:42.573" status="PASS" endtime="20170508 17:19:42.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:42.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:42.848" status="PASS" endtime="20170508 17:19:42.848"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:42.849">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:42.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:42.849">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:42.848" status="PASS" endtime="20170508 17:19:42.849"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:42.849">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:42.573" status="PASS" endtime="20170508 17:19:42.849"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:42.849">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:42.572" status="PASS" endtime="20170508 17:19:42.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:42.850">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:42.850" status="FAIL" endtime="20170508 17:19:42.850"></status>
</kw>
<status starttime="20170508 17:19:42.570" status="FAIL" endtime="20170508 17:19:42.850"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:52.857">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:19:52.857" status="PASS" endtime="20170508 17:19:52.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:52.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:19:52.858" status="PASS" endtime="20170508 17:19:52.858"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:52.859">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:19:52.859" status="PASS" endtime="20170508 17:19:52.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:52.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:19:52.859" status="PASS" endtime="20170508 17:19:52.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:19:52.860" status="PASS" endtime="20170508 17:19:53.157"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:53.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:19:53.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:52.860" status="PASS" endtime="20170508 17:19:53.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:53.158" status="PASS" endtime="20170508 17:19:53.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:53.159" status="PASS" endtime="20170508 17:19:53.159"></status>
</kw>
<status starttime="20170508 17:19:52.854" status="PASS" endtime="20170508 17:19:53.159"></status>
</kw>
<status starttime="20170508 17:19:52.854" status="PASS" endtime="20170508 17:19:53.159"></status>
</kw>
<status starttime="20170508 17:19:52.853" status="PASS" endtime="20170508 17:19:53.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:53.160">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:19:53.160" status="PASS" endtime="20170508 17:19:53.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:53.162">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:53.161" status="PASS" endtime="20170508 17:19:53.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.163">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:19:53.163" status="PASS" endtime="20170508 17:19:53.163"></status>
</kw>
<status starttime="20170508 17:19:53.162" status="PASS" endtime="20170508 17:19:53.163"></status>
</kw>
<status starttime="20170508 17:19:53.161" status="PASS" endtime="20170508 17:19:53.163"></status>
</kw>
<status starttime="20170508 17:19:53.160" status="PASS" endtime="20170508 17:19:53.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:53.233">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:19:53.233">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:53.164" status="PASS" endtime="20170508 17:19:53.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:53.235">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:53.235" status="PASS" endtime="20170508 17:19:53.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.237">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:19:53.236" status="PASS" endtime="20170508 17:19:53.237"></status>
</kw>
<status starttime="20170508 17:19:53.236" status="PASS" endtime="20170508 17:19:53.237"></status>
</kw>
<status starttime="20170508 17:19:53.234" status="PASS" endtime="20170508 17:19:53.237"></status>
</kw>
<status starttime="20170508 17:19:53.234" status="PASS" endtime="20170508 17:19:53.237"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:53.237">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:19:52.853" status="PASS" endtime="20170508 17:19:53.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:19:53.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:19:53.237" status="PASS" endtime="20170508 17:19:53.238"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:19:53.238">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:19:53.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:19:53.239">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:19:53.238" status="PASS" endtime="20170508 17:19:53.239"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:53.239">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:52.852" status="PASS" endtime="20170508 17:19:53.239"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:19:53.239">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:19:52.852" status="PASS" endtime="20170508 17:19:53.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:19:53.240">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:19:53.239" status="FAIL" endtime="20170508 17:19:53.240"></status>
</kw>
<status starttime="20170508 17:19:52.851" status="FAIL" endtime="20170508 17:19:53.240"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.245">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:03.244" status="PASS" endtime="20170508 17:20:03.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:03.245" status="PASS" endtime="20170508 17:20:03.246"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:03.246" status="PASS" endtime="20170508 17:20:03.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:03.247" status="PASS" endtime="20170508 17:20:03.247"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:03.248" status="PASS" endtime="20170508 17:20:03.436"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:03.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:03.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:03.247" status="PASS" endtime="20170508 17:20:03.436"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:03.437" status="PASS" endtime="20170508 17:20:03.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:03.437" status="PASS" endtime="20170508 17:20:03.438"></status>
</kw>
<status starttime="20170508 17:20:03.244" status="PASS" endtime="20170508 17:20:03.438"></status>
</kw>
<status starttime="20170508 17:20:03.243" status="PASS" endtime="20170508 17:20:03.438"></status>
</kw>
<status starttime="20170508 17:20:03.243" status="PASS" endtime="20170508 17:20:03.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.439">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:03.439" status="PASS" endtime="20170508 17:20:03.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.441">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:03.440" status="PASS" endtime="20170508 17:20:03.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.442">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:03.442" status="PASS" endtime="20170508 17:20:03.442"></status>
</kw>
<status starttime="20170508 17:20:03.441" status="PASS" endtime="20170508 17:20:03.442"></status>
</kw>
<status starttime="20170508 17:20:03.440" status="PASS" endtime="20170508 17:20:03.442"></status>
</kw>
<status starttime="20170508 17:20:03.439" status="PASS" endtime="20170508 17:20:03.442"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.510">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:03.511">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:03.443" status="PASS" endtime="20170508 17:20:03.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.512">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:03.512" status="PASS" endtime="20170508 17:20:03.512"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.513">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:03.513" status="PASS" endtime="20170508 17:20:03.513"></status>
</kw>
<status starttime="20170508 17:20:03.513" status="PASS" endtime="20170508 17:20:03.514"></status>
</kw>
<status starttime="20170508 17:20:03.511" status="PASS" endtime="20170508 17:20:03.514"></status>
</kw>
<status starttime="20170508 17:20:03.511" status="PASS" endtime="20170508 17:20:03.514"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:03.514">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:03.242" status="PASS" endtime="20170508 17:20:03.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:03.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:03.514" status="PASS" endtime="20170508 17:20:03.515"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:03.515">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:03.515">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:03.515">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:03.515" status="PASS" endtime="20170508 17:20:03.515"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:03.516">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:03.242" status="PASS" endtime="20170508 17:20:03.516"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:03.516">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:03.241" status="PASS" endtime="20170508 17:20:03.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:03.516">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:03.516" status="FAIL" endtime="20170508 17:20:03.517"></status>
</kw>
<status starttime="20170508 17:20:03.240" status="FAIL" endtime="20170508 17:20:03.517"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.523">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:13.523" status="PASS" endtime="20170508 17:20:13.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:13.524" status="PASS" endtime="20170508 17:20:13.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.525">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:13.525" status="PASS" endtime="20170508 17:20:13.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.526">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:13.526" status="PASS" endtime="20170508 17:20:13.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:13.527" status="PASS" endtime="20170508 17:20:13.708"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:13.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:13.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:13.526" status="PASS" endtime="20170508 17:20:13.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:13.708" status="PASS" endtime="20170508 17:20:13.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:13.709" status="PASS" endtime="20170508 17:20:13.710"></status>
</kw>
<status starttime="20170508 17:20:13.521" status="PASS" endtime="20170508 17:20:13.710"></status>
</kw>
<status starttime="20170508 17:20:13.521" status="PASS" endtime="20170508 17:20:13.710"></status>
</kw>
<status starttime="20170508 17:20:13.520" status="PASS" endtime="20170508 17:20:13.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.710">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:13.710" status="PASS" endtime="20170508 17:20:13.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.712">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:13.712" status="PASS" endtime="20170508 17:20:13.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.713">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:13.713" status="PASS" endtime="20170508 17:20:13.714"></status>
</kw>
<status starttime="20170508 17:20:13.713" status="PASS" endtime="20170508 17:20:13.714"></status>
</kw>
<status starttime="20170508 17:20:13.711" status="PASS" endtime="20170508 17:20:13.714"></status>
</kw>
<status starttime="20170508 17:20:13.711" status="PASS" endtime="20170508 17:20:13.714"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.781">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:13.781">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:13.714" status="PASS" endtime="20170508 17:20:13.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.783">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:13.783" status="PASS" endtime="20170508 17:20:13.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.784">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:13.784" status="PASS" endtime="20170508 17:20:13.784"></status>
</kw>
<status starttime="20170508 17:20:13.783" status="PASS" endtime="20170508 17:20:13.784"></status>
</kw>
<status starttime="20170508 17:20:13.782" status="PASS" endtime="20170508 17:20:13.785"></status>
</kw>
<status starttime="20170508 17:20:13.782" status="PASS" endtime="20170508 17:20:13.785"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:13.785">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:13.519" status="PASS" endtime="20170508 17:20:13.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:13.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:13.785" status="PASS" endtime="20170508 17:20:13.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:13.786">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:13.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:13.786">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:13.786" status="PASS" endtime="20170508 17:20:13.786"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:13.787">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:13.518" status="PASS" endtime="20170508 17:20:13.787"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:13.787">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:13.518" status="PASS" endtime="20170508 17:20:13.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:13.787">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:13.787" status="FAIL" endtime="20170508 17:20:13.788"></status>
</kw>
<status starttime="20170508 17:20:13.517" status="FAIL" endtime="20170508 17:20:13.788"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:23.793">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:23.793" status="PASS" endtime="20170508 17:20:23.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:23.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:23.794" status="PASS" endtime="20170508 17:20:23.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:23.795">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:23.794" status="PASS" endtime="20170508 17:20:23.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:23.795">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:23.795" status="PASS" endtime="20170508 17:20:23.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:23.976">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:23.796" status="PASS" endtime="20170508 17:20:23.976"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:23.976">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:23.976">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:23.795" status="PASS" endtime="20170508 17:20:23.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:23.977">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:23.976" status="PASS" endtime="20170508 17:20:23.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:23.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:23.977" status="PASS" endtime="20170508 17:20:23.978"></status>
</kw>
<status starttime="20170508 17:20:23.792" status="PASS" endtime="20170508 17:20:23.978"></status>
</kw>
<status starttime="20170508 17:20:23.792" status="PASS" endtime="20170508 17:20:23.978"></status>
</kw>
<status starttime="20170508 17:20:23.791" status="PASS" endtime="20170508 17:20:23.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:23.978">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:23.978" status="PASS" endtime="20170508 17:20:23.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:23.981">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:23.980" status="PASS" endtime="20170508 17:20:23.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:23.981">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:23.981" status="PASS" endtime="20170508 17:20:23.982"></status>
</kw>
<status starttime="20170508 17:20:23.981" status="PASS" endtime="20170508 17:20:23.982"></status>
</kw>
<status starttime="20170508 17:20:23.979" status="PASS" endtime="20170508 17:20:23.982"></status>
</kw>
<status starttime="20170508 17:20:23.979" status="PASS" endtime="20170508 17:20:23.982"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:24.050">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:24.051">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:23.982" status="PASS" endtime="20170508 17:20:24.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:24.052">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:24.052" status="PASS" endtime="20170508 17:20:24.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:24.053">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:24.053" status="PASS" endtime="20170508 17:20:24.054"></status>
</kw>
<status starttime="20170508 17:20:24.053" status="PASS" endtime="20170508 17:20:24.054"></status>
</kw>
<status starttime="20170508 17:20:24.051" status="PASS" endtime="20170508 17:20:24.054"></status>
</kw>
<status starttime="20170508 17:20:24.051" status="PASS" endtime="20170508 17:20:24.054"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:24.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:23.790" status="PASS" endtime="20170508 17:20:24.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:24.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:24.054" status="PASS" endtime="20170508 17:20:24.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:24.056">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:24.056">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:24.056">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:24.055" status="PASS" endtime="20170508 17:20:24.056"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:24.056">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:23.790" status="PASS" endtime="20170508 17:20:24.056"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:24.057">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:23.789" status="PASS" endtime="20170508 17:20:24.057"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:24.057">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:24.057" status="FAIL" endtime="20170508 17:20:24.058"></status>
</kw>
<status starttime="20170508 17:20:23.789" status="FAIL" endtime="20170508 17:20:24.058"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.064">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:34.064" status="PASS" endtime="20170508 17:20:34.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:34.065" status="PASS" endtime="20170508 17:20:34.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.066">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:34.065" status="PASS" endtime="20170508 17:20:34.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:34.066" status="PASS" endtime="20170508 17:20:34.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.276">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:34.067" status="PASS" endtime="20170508 17:20:34.276"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:34.276">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:34.276">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:34.067" status="PASS" endtime="20170508 17:20:34.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.277">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:34.277" status="PASS" endtime="20170508 17:20:34.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:34.277" status="PASS" endtime="20170508 17:20:34.278"></status>
</kw>
<status starttime="20170508 17:20:34.063" status="PASS" endtime="20170508 17:20:34.278"></status>
</kw>
<status starttime="20170508 17:20:34.062" status="PASS" endtime="20170508 17:20:34.278"></status>
</kw>
<status starttime="20170508 17:20:34.062" status="PASS" endtime="20170508 17:20:34.278"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.279">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:34.278" status="PASS" endtime="20170508 17:20:34.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.281">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:34.280" status="PASS" endtime="20170508 17:20:34.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.282">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:34.281" status="PASS" endtime="20170508 17:20:34.282"></status>
</kw>
<status starttime="20170508 17:20:34.281" status="PASS" endtime="20170508 17:20:34.282"></status>
</kw>
<status starttime="20170508 17:20:34.279" status="PASS" endtime="20170508 17:20:34.282"></status>
</kw>
<status starttime="20170508 17:20:34.279" status="PASS" endtime="20170508 17:20:34.282"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.349">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:34.349">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:34.282" status="PASS" endtime="20170508 17:20:34.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.351">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:34.350" status="PASS" endtime="20170508 17:20:34.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.352">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:34.352" status="PASS" endtime="20170508 17:20:34.352"></status>
</kw>
<status starttime="20170508 17:20:34.351" status="PASS" endtime="20170508 17:20:34.352"></status>
</kw>
<status starttime="20170508 17:20:34.350" status="PASS" endtime="20170508 17:20:34.352"></status>
</kw>
<status starttime="20170508 17:20:34.349" status="PASS" endtime="20170508 17:20:34.352"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:34.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:34.061" status="PASS" endtime="20170508 17:20:34.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:34.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:34.353" status="PASS" endtime="20170508 17:20:34.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:34.354">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:34.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:34.355">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:34.354" status="PASS" endtime="20170508 17:20:34.355"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:34.355">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:34.060" status="PASS" endtime="20170508 17:20:34.355"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:34.355">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:34.060" status="PASS" endtime="20170508 17:20:34.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:34.356">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:34.356" status="FAIL" endtime="20170508 17:20:34.356"></status>
</kw>
<status starttime="20170508 17:20:34.059" status="FAIL" endtime="20170508 17:20:34.357"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.362">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:44.361" status="PASS" endtime="20170508 17:20:44.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:44.362" status="PASS" endtime="20170508 17:20:44.363"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.363">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:44.363" status="PASS" endtime="20170508 17:20:44.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.364">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:44.364" status="PASS" endtime="20170508 17:20:44.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.692">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:44.365" status="PASS" endtime="20170508 17:20:44.692"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:44.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:44.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:44.364" status="PASS" endtime="20170508 17:20:44.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.693">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:44.693" status="PASS" endtime="20170508 17:20:44.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:44.694" status="PASS" endtime="20170508 17:20:44.694"></status>
</kw>
<status starttime="20170508 17:20:44.361" status="PASS" endtime="20170508 17:20:44.694"></status>
</kw>
<status starttime="20170508 17:20:44.360" status="PASS" endtime="20170508 17:20:44.694"></status>
</kw>
<status starttime="20170508 17:20:44.360" status="PASS" endtime="20170508 17:20:44.695"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.695">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:44.695" status="PASS" endtime="20170508 17:20:44.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.697">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:44.697" status="PASS" endtime="20170508 17:20:44.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.698">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:44.698" status="PASS" endtime="20170508 17:20:44.698"></status>
</kw>
<status starttime="20170508 17:20:44.698" status="PASS" endtime="20170508 17:20:44.699"></status>
</kw>
<status starttime="20170508 17:20:44.696" status="PASS" endtime="20170508 17:20:44.699"></status>
</kw>
<status starttime="20170508 17:20:44.695" status="PASS" endtime="20170508 17:20:44.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.797">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:44.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:44.699" status="PASS" endtime="20170508 17:20:44.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.799">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:44.799" status="PASS" endtime="20170508 17:20:44.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.800">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:44.800" status="PASS" endtime="20170508 17:20:44.800"></status>
</kw>
<status starttime="20170508 17:20:44.800" status="PASS" endtime="20170508 17:20:44.800"></status>
</kw>
<status starttime="20170508 17:20:44.798" status="PASS" endtime="20170508 17:20:44.801"></status>
</kw>
<status starttime="20170508 17:20:44.798" status="PASS" endtime="20170508 17:20:44.801"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:44.801">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:44.359" status="PASS" endtime="20170508 17:20:44.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:44.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:44.801" status="PASS" endtime="20170508 17:20:44.802"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:44.802">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:44.802">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:44.802">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:44.802" status="PASS" endtime="20170508 17:20:44.802"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:44.803">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:44.358" status="PASS" endtime="20170508 17:20:44.803"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:44.803">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:44.358" status="PASS" endtime="20170508 17:20:44.803"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:44.803">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:44.803" status="FAIL" endtime="20170508 17:20:44.804"></status>
</kw>
<status starttime="20170508 17:20:44.357" status="FAIL" endtime="20170508 17:20:44.804"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:54.809">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:20:54.808" status="PASS" endtime="20170508 17:20:54.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:54.810">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:20:54.809" status="PASS" endtime="20170508 17:20:54.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:54.811">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:20:54.810" status="PASS" endtime="20170508 17:20:54.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:54.811">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:20:54.811" status="PASS" endtime="20170508 17:20:54.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:20:54.812" status="PASS" endtime="20170508 17:20:55.026"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:55.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:20:55.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:54.811" status="PASS" endtime="20170508 17:20:55.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.027">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:55.027" status="PASS" endtime="20170508 17:20:55.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:55.028" status="PASS" endtime="20170508 17:20:55.028"></status>
</kw>
<status starttime="20170508 17:20:54.807" status="PASS" endtime="20170508 17:20:55.028"></status>
</kw>
<status starttime="20170508 17:20:54.807" status="PASS" endtime="20170508 17:20:55.028"></status>
</kw>
<status starttime="20170508 17:20:54.806" status="PASS" endtime="20170508 17:20:55.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:55.029">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:20:55.029" status="PASS" endtime="20170508 17:20:55.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:55.031">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:55.030" status="PASS" endtime="20170508 17:20:55.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.032">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:20:55.032" status="PASS" endtime="20170508 17:20:55.032"></status>
</kw>
<status starttime="20170508 17:20:55.031" status="PASS" endtime="20170508 17:20:55.032"></status>
</kw>
<status starttime="20170508 17:20:55.030" status="PASS" endtime="20170508 17:20:55.032"></status>
</kw>
<status starttime="20170508 17:20:55.029" status="PASS" endtime="20170508 17:20:55.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:55.108">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:20:55.108">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:55.033" status="PASS" endtime="20170508 17:20:55.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:55.110">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:55.109" status="PASS" endtime="20170508 17:20:55.110"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.111">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:20:55.111" status="PASS" endtime="20170508 17:20:55.111"></status>
</kw>
<status starttime="20170508 17:20:55.110" status="PASS" endtime="20170508 17:20:55.111"></status>
</kw>
<status starttime="20170508 17:20:55.109" status="PASS" endtime="20170508 17:20:55.111"></status>
</kw>
<status starttime="20170508 17:20:55.108" status="PASS" endtime="20170508 17:20:55.111"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:55.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:20:54.806" status="PASS" endtime="20170508 17:20:55.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:20:55.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:20:55.112" status="PASS" endtime="20170508 17:20:55.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:20:55.113">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:20:55.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:20:55.113">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:20:55.113" status="PASS" endtime="20170508 17:20:55.113"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:55.113">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:54.805" status="PASS" endtime="20170508 17:20:55.113"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:20:55.114">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:20:54.805" status="PASS" endtime="20170508 17:20:55.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:20:55.114">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:20:55.114" status="FAIL" endtime="20170508 17:20:55.115"></status>
</kw>
<status starttime="20170508 17:20:54.804" status="FAIL" endtime="20170508 17:20:55.115"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.120">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:05.119" status="PASS" endtime="20170508 17:21:05.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.121">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:05.120" status="PASS" endtime="20170508 17:21:05.121"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.121">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:05.121" status="PASS" endtime="20170508 17:21:05.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.122">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:05.121" status="PASS" endtime="20170508 17:21:05.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.322">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:05.122" status="PASS" endtime="20170508 17:21:05.322"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:05.322">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:05.322">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:05.122" status="PASS" endtime="20170508 17:21:05.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.323">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:05.322" status="PASS" endtime="20170508 17:21:05.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:05.323" status="PASS" endtime="20170508 17:21:05.323"></status>
</kw>
<status starttime="20170508 17:21:05.119" status="PASS" endtime="20170508 17:21:05.324"></status>
</kw>
<status starttime="20170508 17:21:05.118" status="PASS" endtime="20170508 17:21:05.324"></status>
</kw>
<status starttime="20170508 17:21:05.118" status="PASS" endtime="20170508 17:21:05.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.324">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:05.324" status="PASS" endtime="20170508 17:21:05.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.327">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:05.326" status="PASS" endtime="20170508 17:21:05.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.327">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:05.327" status="PASS" endtime="20170508 17:21:05.328"></status>
</kw>
<status starttime="20170508 17:21:05.327" status="PASS" endtime="20170508 17:21:05.328"></status>
</kw>
<status starttime="20170508 17:21:05.325" status="PASS" endtime="20170508 17:21:05.328"></status>
</kw>
<status starttime="20170508 17:21:05.325" status="PASS" endtime="20170508 17:21:05.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.397">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:05.397">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:05.328" status="PASS" endtime="20170508 17:21:05.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.399">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:05.398" status="PASS" endtime="20170508 17:21:05.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.400">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:05.400" status="PASS" endtime="20170508 17:21:05.400"></status>
</kw>
<status starttime="20170508 17:21:05.399" status="PASS" endtime="20170508 17:21:05.401"></status>
</kw>
<status starttime="20170508 17:21:05.398" status="PASS" endtime="20170508 17:21:05.401"></status>
</kw>
<status starttime="20170508 17:21:05.397" status="PASS" endtime="20170508 17:21:05.401"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:05.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:05.117" status="PASS" endtime="20170508 17:21:05.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:05.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:05.401" status="PASS" endtime="20170508 17:21:05.402"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:05.402">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:05.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:05.402">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:05.402" status="PASS" endtime="20170508 17:21:05.402"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:05.403">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:05.116" status="PASS" endtime="20170508 17:21:05.403"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:05.403">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:05.116" status="PASS" endtime="20170508 17:21:05.403"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:05.403">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:05.403" status="FAIL" endtime="20170508 17:21:05.404"></status>
</kw>
<status starttime="20170508 17:21:05.115" status="FAIL" endtime="20170508 17:21:05.404"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.411">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:15.410" status="PASS" endtime="20170508 17:21:15.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.412">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:15.412" status="PASS" endtime="20170508 17:21:15.412"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.413">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:15.412" status="PASS" endtime="20170508 17:21:15.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.413">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:15.413" status="PASS" endtime="20170508 17:21:15.414"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:15.415" status="PASS" endtime="20170508 17:21:15.625"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:15.625">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:15.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:15.414" status="PASS" endtime="20170508 17:21:15.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.626">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:15.625" status="PASS" endtime="20170508 17:21:15.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:15.626" status="PASS" endtime="20170508 17:21:15.627"></status>
</kw>
<status starttime="20170508 17:21:15.408" status="PASS" endtime="20170508 17:21:15.627"></status>
</kw>
<status starttime="20170508 17:21:15.407" status="PASS" endtime="20170508 17:21:15.627"></status>
</kw>
<status starttime="20170508 17:21:15.407" status="PASS" endtime="20170508 17:21:15.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.628">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:15.628" status="PASS" endtime="20170508 17:21:15.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.631">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:15.630" status="PASS" endtime="20170508 17:21:15.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.632">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:15.632" status="PASS" endtime="20170508 17:21:15.632"></status>
</kw>
<status starttime="20170508 17:21:15.631" status="PASS" endtime="20170508 17:21:15.632"></status>
</kw>
<status starttime="20170508 17:21:15.629" status="PASS" endtime="20170508 17:21:15.633"></status>
</kw>
<status starttime="20170508 17:21:15.629" status="PASS" endtime="20170508 17:21:15.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.700">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:15.700">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:15.633" status="PASS" endtime="20170508 17:21:15.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.701">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:15.701" status="PASS" endtime="20170508 17:21:15.702"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.703">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:15.702" status="PASS" endtime="20170508 17:21:15.703"></status>
</kw>
<status starttime="20170508 17:21:15.702" status="PASS" endtime="20170508 17:21:15.703"></status>
</kw>
<status starttime="20170508 17:21:15.701" status="PASS" endtime="20170508 17:21:15.703"></status>
</kw>
<status starttime="20170508 17:21:15.700" status="PASS" endtime="20170508 17:21:15.703"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:15.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:15.406" status="PASS" endtime="20170508 17:21:15.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:15.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:15.704" status="PASS" endtime="20170508 17:21:15.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:15.705">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:15.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:15.705">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:15.704" status="PASS" endtime="20170508 17:21:15.705"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:15.705">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:15.405" status="PASS" endtime="20170508 17:21:15.705"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:15.705">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:15.405" status="PASS" endtime="20170508 17:21:15.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:15.706">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:15.706" status="FAIL" endtime="20170508 17:21:15.706"></status>
</kw>
<status starttime="20170508 17:21:15.404" status="FAIL" endtime="20170508 17:21:15.706"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.711">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:25.711" status="PASS" endtime="20170508 17:21:25.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:25.712" status="PASS" endtime="20170508 17:21:25.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.713">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:25.712" status="PASS" endtime="20170508 17:21:25.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:25.713" status="PASS" endtime="20170508 17:21:25.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:25.714" status="PASS" endtime="20170508 17:21:25.919"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:25.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:25.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:25.714" status="PASS" endtime="20170508 17:21:25.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:25.920" status="PASS" endtime="20170508 17:21:25.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:25.920" status="PASS" endtime="20170508 17:21:25.921"></status>
</kw>
<status starttime="20170508 17:21:25.710" status="PASS" endtime="20170508 17:21:25.921"></status>
</kw>
<status starttime="20170508 17:21:25.710" status="PASS" endtime="20170508 17:21:25.921"></status>
</kw>
<status starttime="20170508 17:21:25.709" status="PASS" endtime="20170508 17:21:25.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.922">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:25.922" status="PASS" endtime="20170508 17:21:25.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.924">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:25.923" status="PASS" endtime="20170508 17:21:25.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.925">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:25.925" status="PASS" endtime="20170508 17:21:25.925"></status>
</kw>
<status starttime="20170508 17:21:25.924" status="PASS" endtime="20170508 17:21:25.925"></status>
</kw>
<status starttime="20170508 17:21:25.923" status="PASS" endtime="20170508 17:21:25.925"></status>
</kw>
<status starttime="20170508 17:21:25.922" status="PASS" endtime="20170508 17:21:25.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.993">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:25.993">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:25.926" status="PASS" endtime="20170508 17:21:25.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.994">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:25.994" status="PASS" endtime="20170508 17:21:25.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.995">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:25.995" status="PASS" endtime="20170508 17:21:25.995"></status>
</kw>
<status starttime="20170508 17:21:25.995" status="PASS" endtime="20170508 17:21:25.996"></status>
</kw>
<status starttime="20170508 17:21:25.993" status="PASS" endtime="20170508 17:21:25.996"></status>
</kw>
<status starttime="20170508 17:21:25.993" status="PASS" endtime="20170508 17:21:25.996"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:25.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:25.709" status="PASS" endtime="20170508 17:21:25.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:25.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:25.996" status="PASS" endtime="20170508 17:21:25.997"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:25.997">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:25.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:25.997">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:25.997" status="PASS" endtime="20170508 17:21:25.997"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:25.998">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:25.708" status="PASS" endtime="20170508 17:21:25.998"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:25.998">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:25.708" status="PASS" endtime="20170508 17:21:25.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:25.998">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:25.998" status="FAIL" endtime="20170508 17:21:25.999"></status>
</kw>
<status starttime="20170508 17:21:25.707" status="FAIL" endtime="20170508 17:21:25.999"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.004">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:36.004" status="PASS" endtime="20170508 17:21:36.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:36.005" status="PASS" endtime="20170508 17:21:36.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.006">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:36.006" status="PASS" endtime="20170508 17:21:36.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:36.007" status="PASS" endtime="20170508 17:21:36.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:36.008" status="PASS" endtime="20170508 17:21:36.190"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:36.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:36.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:36.007" status="PASS" endtime="20170508 17:21:36.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:36.190" status="PASS" endtime="20170508 17:21:36.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:36.191" status="PASS" endtime="20170508 17:21:36.192"></status>
</kw>
<status starttime="20170508 17:21:36.003" status="PASS" endtime="20170508 17:21:36.192"></status>
</kw>
<status starttime="20170508 17:21:36.003" status="PASS" endtime="20170508 17:21:36.192"></status>
</kw>
<status starttime="20170508 17:21:36.002" status="PASS" endtime="20170508 17:21:36.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:36.192" status="PASS" endtime="20170508 17:21:36.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.195">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:36.194" status="PASS" endtime="20170508 17:21:36.195"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.196">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:36.195" status="PASS" endtime="20170508 17:21:36.196"></status>
</kw>
<status starttime="20170508 17:21:36.195" status="PASS" endtime="20170508 17:21:36.196"></status>
</kw>
<status starttime="20170508 17:21:36.193" status="PASS" endtime="20170508 17:21:36.196"></status>
</kw>
<status starttime="20170508 17:21:36.193" status="PASS" endtime="20170508 17:21:36.196"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.286">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:36.286">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:36.196" status="PASS" endtime="20170508 17:21:36.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.288">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:36.287" status="PASS" endtime="20170508 17:21:36.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.289">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:36.289" status="PASS" endtime="20170508 17:21:36.289"></status>
</kw>
<status starttime="20170508 17:21:36.288" status="PASS" endtime="20170508 17:21:36.289"></status>
</kw>
<status starttime="20170508 17:21:36.287" status="PASS" endtime="20170508 17:21:36.289"></status>
</kw>
<status starttime="20170508 17:21:36.286" status="PASS" endtime="20170508 17:21:36.289"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:36.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:36.001" status="PASS" endtime="20170508 17:21:36.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:36.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:36.290" status="PASS" endtime="20170508 17:21:36.290"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:36.291">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:36.291">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:36.291">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:36.290" status="PASS" endtime="20170508 17:21:36.291"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:36.291">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:36.001" status="PASS" endtime="20170508 17:21:36.291"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:36.291">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:36.000" status="PASS" endtime="20170508 17:21:36.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:36.292">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:36.292" status="FAIL" endtime="20170508 17:21:36.292"></status>
</kw>
<status starttime="20170508 17:21:35.999" status="FAIL" endtime="20170508 17:21:36.293"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.298">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:46.297" status="PASS" endtime="20170508 17:21:46.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.299">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:46.298" status="PASS" endtime="20170508 17:21:46.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.299">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:46.299" status="PASS" endtime="20170508 17:21:46.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.300">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:46.300" status="PASS" endtime="20170508 17:21:46.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:46.301" status="PASS" endtime="20170508 17:21:46.569"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:46.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:46.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:46.300" status="PASS" endtime="20170508 17:21:46.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:46.570" status="PASS" endtime="20170508 17:21:46.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:46.571" status="PASS" endtime="20170508 17:21:46.571"></status>
</kw>
<status starttime="20170508 17:21:46.297" status="PASS" endtime="20170508 17:21:46.571"></status>
</kw>
<status starttime="20170508 17:21:46.296" status="PASS" endtime="20170508 17:21:46.571"></status>
</kw>
<status starttime="20170508 17:21:46.296" status="PASS" endtime="20170508 17:21:46.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.572">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:46.572" status="PASS" endtime="20170508 17:21:46.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.575">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:46.574" status="PASS" endtime="20170508 17:21:46.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.576">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:46.575" status="PASS" endtime="20170508 17:21:46.576"></status>
</kw>
<status starttime="20170508 17:21:46.575" status="PASS" endtime="20170508 17:21:46.576"></status>
</kw>
<status starttime="20170508 17:21:46.573" status="PASS" endtime="20170508 17:21:46.576"></status>
</kw>
<status starttime="20170508 17:21:46.572" status="PASS" endtime="20170508 17:21:46.576"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.667">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:46.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:46.576" status="PASS" endtime="20170508 17:21:46.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.669">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:46.669" status="PASS" endtime="20170508 17:21:46.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.670">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:46.670" status="PASS" endtime="20170508 17:21:46.670"></status>
</kw>
<status starttime="20170508 17:21:46.669" status="PASS" endtime="20170508 17:21:46.670"></status>
</kw>
<status starttime="20170508 17:21:46.668" status="PASS" endtime="20170508 17:21:46.670"></status>
</kw>
<status starttime="20170508 17:21:46.668" status="PASS" endtime="20170508 17:21:46.670"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:46.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:46.295" status="PASS" endtime="20170508 17:21:46.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:46.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:46.671" status="PASS" endtime="20170508 17:21:46.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:46.672">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:46.672">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:46.672">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:46.672" status="PASS" endtime="20170508 17:21:46.672"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:46.672">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:46.294" status="PASS" endtime="20170508 17:21:46.672"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:46.673">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:46.294" status="PASS" endtime="20170508 17:21:46.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:46.673">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:46.673" status="FAIL" endtime="20170508 17:21:46.673"></status>
</kw>
<status starttime="20170508 17:21:46.293" status="FAIL" endtime="20170508 17:21:46.673"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.679">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:21:56.678" status="PASS" endtime="20170508 17:21:56.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.680">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:21:56.680" status="PASS" endtime="20170508 17:21:56.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.681">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:21:56.680" status="PASS" endtime="20170508 17:21:56.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.681">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:21:56.681" status="PASS" endtime="20170508 17:21:56.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:21:56.682" status="PASS" endtime="20170508 17:21:56.870"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:56.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:21:56.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:56.682" status="PASS" endtime="20170508 17:21:56.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:56.871" status="PASS" endtime="20170508 17:21:56.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:56.872" status="PASS" endtime="20170508 17:21:56.873"></status>
</kw>
<status starttime="20170508 17:21:56.677" status="PASS" endtime="20170508 17:21:56.873"></status>
</kw>
<status starttime="20170508 17:21:56.677" status="PASS" endtime="20170508 17:21:56.873"></status>
</kw>
<status starttime="20170508 17:21:56.676" status="PASS" endtime="20170508 17:21:56.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.874">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:21:56.873" status="PASS" endtime="20170508 17:21:56.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.877">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:56.876" status="PASS" endtime="20170508 17:21:56.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.878">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:21:56.878" status="PASS" endtime="20170508 17:21:56.878"></status>
</kw>
<status starttime="20170508 17:21:56.877" status="PASS" endtime="20170508 17:21:56.878"></status>
</kw>
<status starttime="20170508 17:21:56.875" status="PASS" endtime="20170508 17:21:56.879"></status>
</kw>
<status starttime="20170508 17:21:56.874" status="PASS" endtime="20170508 17:21:56.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.946">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:21:56.946">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:56.879" status="PASS" endtime="20170508 17:21:56.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.948">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:56.948" status="PASS" endtime="20170508 17:21:56.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.949">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:21:56.949" status="PASS" endtime="20170508 17:21:56.949"></status>
</kw>
<status starttime="20170508 17:21:56.948" status="PASS" endtime="20170508 17:21:56.949"></status>
</kw>
<status starttime="20170508 17:21:56.947" status="PASS" endtime="20170508 17:21:56.949"></status>
</kw>
<status starttime="20170508 17:21:56.947" status="PASS" endtime="20170508 17:21:56.950"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:56.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:21:56.676" status="PASS" endtime="20170508 17:21:56.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:21:56.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:21:56.950" status="PASS" endtime="20170508 17:21:56.950"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:21:56.951">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:21:56.951">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:21:56.951">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:21:56.951" status="PASS" endtime="20170508 17:21:56.951"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:56.951">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:56.675" status="PASS" endtime="20170508 17:21:56.951"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:21:56.952">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:21:56.675" status="PASS" endtime="20170508 17:21:56.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:21:56.952">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:21:56.952" status="FAIL" endtime="20170508 17:21:56.952"></status>
</kw>
<status starttime="20170508 17:21:56.674" status="FAIL" endtime="20170508 17:21:56.953"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:06.958">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:06.957" status="PASS" endtime="20170508 17:22:06.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:06.959">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:06.958" status="PASS" endtime="20170508 17:22:06.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:06.959">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:06.959" status="PASS" endtime="20170508 17:22:06.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:06.960">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:06.960" status="PASS" endtime="20170508 17:22:06.960"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.141">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:06.961" status="PASS" endtime="20170508 17:22:07.141"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:07.141">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:07.141">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:06.960" status="PASS" endtime="20170508 17:22:07.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.142">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:07.141" status="PASS" endtime="20170508 17:22:07.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:07.142" status="PASS" endtime="20170508 17:22:07.143"></status>
</kw>
<status starttime="20170508 17:22:06.957" status="PASS" endtime="20170508 17:22:07.143"></status>
</kw>
<status starttime="20170508 17:22:06.956" status="PASS" endtime="20170508 17:22:07.143"></status>
</kw>
<status starttime="20170508 17:22:06.956" status="PASS" endtime="20170508 17:22:07.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:07.144">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:07.143" status="PASS" endtime="20170508 17:22:07.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:07.146">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:07.145" status="PASS" endtime="20170508 17:22:07.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.147">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:07.147" status="PASS" endtime="20170508 17:22:07.147"></status>
</kw>
<status starttime="20170508 17:22:07.146" status="PASS" endtime="20170508 17:22:07.147"></status>
</kw>
<status starttime="20170508 17:22:07.145" status="PASS" endtime="20170508 17:22:07.148"></status>
</kw>
<status starttime="20170508 17:22:07.144" status="PASS" endtime="20170508 17:22:07.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:07.215">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:07.215">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:07.148" status="PASS" endtime="20170508 17:22:07.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:07.216">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:07.216" status="PASS" endtime="20170508 17:22:07.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.218">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:07.217" status="PASS" endtime="20170508 17:22:07.218"></status>
</kw>
<status starttime="20170508 17:22:07.217" status="PASS" endtime="20170508 17:22:07.218"></status>
</kw>
<status starttime="20170508 17:22:07.215" status="PASS" endtime="20170508 17:22:07.218"></status>
</kw>
<status starttime="20170508 17:22:07.215" status="PASS" endtime="20170508 17:22:07.218"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:07.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:06.955" status="PASS" endtime="20170508 17:22:07.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:07.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:07.218" status="PASS" endtime="20170508 17:22:07.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:07.219">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:07.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:07.219">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:07.219" status="PASS" endtime="20170508 17:22:07.220"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:07.220">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:06.954" status="PASS" endtime="20170508 17:22:07.220"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:07.220">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:06.954" status="PASS" endtime="20170508 17:22:07.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:07.221">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:07.220" status="FAIL" endtime="20170508 17:22:07.221"></status>
</kw>
<status starttime="20170508 17:22:06.953" status="FAIL" endtime="20170508 17:22:07.221"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.225">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:17.225" status="PASS" endtime="20170508 17:22:17.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.227">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:17.226" status="PASS" endtime="20170508 17:22:17.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.227">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:17.227" status="PASS" endtime="20170508 17:22:17.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:17.227" status="PASS" endtime="20170508 17:22:17.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:17.228" status="PASS" endtime="20170508 17:22:17.408"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:17.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:17.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:17.228" status="PASS" endtime="20170508 17:22:17.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:17.409" status="PASS" endtime="20170508 17:22:17.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:17.409" status="PASS" endtime="20170508 17:22:17.410"></status>
</kw>
<status starttime="20170508 17:22:17.224" status="PASS" endtime="20170508 17:22:17.410"></status>
</kw>
<status starttime="20170508 17:22:17.224" status="PASS" endtime="20170508 17:22:17.410"></status>
</kw>
<status starttime="20170508 17:22:17.223" status="PASS" endtime="20170508 17:22:17.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.411">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:17.410" status="PASS" endtime="20170508 17:22:17.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.413">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:17.412" status="PASS" endtime="20170508 17:22:17.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.414">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:17.413" status="PASS" endtime="20170508 17:22:17.414"></status>
</kw>
<status starttime="20170508 17:22:17.413" status="PASS" endtime="20170508 17:22:17.414"></status>
</kw>
<status starttime="20170508 17:22:17.411" status="PASS" endtime="20170508 17:22:17.414"></status>
</kw>
<status starttime="20170508 17:22:17.411" status="PASS" endtime="20170508 17:22:17.414"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.535">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:17.536">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:17.414" status="PASS" endtime="20170508 17:22:17.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.537">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:17.537" status="PASS" endtime="20170508 17:22:17.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.538">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:17.538" status="PASS" endtime="20170508 17:22:17.539"></status>
</kw>
<status starttime="20170508 17:22:17.538" status="PASS" endtime="20170508 17:22:17.539"></status>
</kw>
<status starttime="20170508 17:22:17.537" status="PASS" endtime="20170508 17:22:17.539"></status>
</kw>
<status starttime="20170508 17:22:17.536" status="PASS" endtime="20170508 17:22:17.539"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:17.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:17.223" status="PASS" endtime="20170508 17:22:17.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:17.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:17.539" status="PASS" endtime="20170508 17:22:17.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:17.540">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:17.540">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:17.540">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:17.540" status="PASS" endtime="20170508 17:22:17.540"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:17.541">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:17.222" status="PASS" endtime="20170508 17:22:17.541"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:17.541">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:17.222" status="PASS" endtime="20170508 17:22:17.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:17.542">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:17.541" status="FAIL" endtime="20170508 17:22:17.542"></status>
</kw>
<status starttime="20170508 17:22:17.221" status="FAIL" endtime="20170508 17:22:17.542"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.547">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:27.547" status="PASS" endtime="20170508 17:22:27.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:27.548" status="PASS" endtime="20170508 17:22:27.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.548">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:27.548" status="PASS" endtime="20170508 17:22:27.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.549">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:27.549" status="PASS" endtime="20170508 17:22:27.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:27.550" status="PASS" endtime="20170508 17:22:27.727"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:27.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:27.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:27.549" status="PASS" endtime="20170508 17:22:27.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:27.727" status="PASS" endtime="20170508 17:22:27.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:27.728" status="PASS" endtime="20170508 17:22:27.729"></status>
</kw>
<status starttime="20170508 17:22:27.546" status="PASS" endtime="20170508 17:22:27.729"></status>
</kw>
<status starttime="20170508 17:22:27.546" status="PASS" endtime="20170508 17:22:27.729"></status>
</kw>
<status starttime="20170508 17:22:27.545" status="PASS" endtime="20170508 17:22:27.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.730">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:27.729" status="PASS" endtime="20170508 17:22:27.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.732">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:27.731" status="PASS" endtime="20170508 17:22:27.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.733">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:27.732" status="PASS" endtime="20170508 17:22:27.733"></status>
</kw>
<status starttime="20170508 17:22:27.732" status="PASS" endtime="20170508 17:22:27.733"></status>
</kw>
<status starttime="20170508 17:22:27.730" status="PASS" endtime="20170508 17:22:27.733"></status>
</kw>
<status starttime="20170508 17:22:27.730" status="PASS" endtime="20170508 17:22:27.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.800">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:27.800">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:27.733" status="PASS" endtime="20170508 17:22:27.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.802">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:27.801" status="PASS" endtime="20170508 17:22:27.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.803">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:27.802" status="PASS" endtime="20170508 17:22:27.803"></status>
</kw>
<status starttime="20170508 17:22:27.802" status="PASS" endtime="20170508 17:22:27.803"></status>
</kw>
<status starttime="20170508 17:22:27.800" status="PASS" endtime="20170508 17:22:27.803"></status>
</kw>
<status starttime="20170508 17:22:27.800" status="PASS" endtime="20170508 17:22:27.803"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:27.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:27.544" status="PASS" endtime="20170508 17:22:27.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:27.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:27.804" status="PASS" endtime="20170508 17:22:27.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:27.804">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:27.804">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:27.805">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:27.804" status="PASS" endtime="20170508 17:22:27.805"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:27.805">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:27.543" status="PASS" endtime="20170508 17:22:27.805"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:27.805">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:27.543" status="PASS" endtime="20170508 17:22:27.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:27.806">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:27.805" status="FAIL" endtime="20170508 17:22:27.806"></status>
</kw>
<status starttime="20170508 17:22:27.542" status="FAIL" endtime="20170508 17:22:27.806"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:37.812">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:37.811" status="PASS" endtime="20170508 17:22:37.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:37.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:37.813" status="PASS" endtime="20170508 17:22:37.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:37.814">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:37.813" status="PASS" endtime="20170508 17:22:37.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:37.814">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:37.814" status="PASS" endtime="20170508 17:22:37.814"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:37.815" status="PASS" endtime="20170508 17:22:38.075"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:38.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:38.075">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:37.815" status="PASS" endtime="20170508 17:22:38.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:38.076" status="PASS" endtime="20170508 17:22:38.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:38.076" status="PASS" endtime="20170508 17:22:38.079"></status>
</kw>
<status starttime="20170508 17:22:37.811" status="PASS" endtime="20170508 17:22:38.079"></status>
</kw>
<status starttime="20170508 17:22:37.810" status="PASS" endtime="20170508 17:22:38.079"></status>
</kw>
<status starttime="20170508 17:22:37.809" status="PASS" endtime="20170508 17:22:38.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:38.080">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:38.080" status="PASS" endtime="20170508 17:22:38.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:38.082">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:38.081" status="PASS" endtime="20170508 17:22:38.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.083">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:38.083" status="PASS" endtime="20170508 17:22:38.083"></status>
</kw>
<status starttime="20170508 17:22:38.082" status="PASS" endtime="20170508 17:22:38.083"></status>
</kw>
<status starttime="20170508 17:22:38.081" status="PASS" endtime="20170508 17:22:38.083"></status>
</kw>
<status starttime="20170508 17:22:38.080" status="PASS" endtime="20170508 17:22:38.083"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:38.171">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:38.171">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:38.084" status="PASS" endtime="20170508 17:22:38.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:38.173">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:38.172" status="PASS" endtime="20170508 17:22:38.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.174">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:38.174" status="PASS" endtime="20170508 17:22:38.174"></status>
</kw>
<status starttime="20170508 17:22:38.173" status="PASS" endtime="20170508 17:22:38.174"></status>
</kw>
<status starttime="20170508 17:22:38.172" status="PASS" endtime="20170508 17:22:38.174"></status>
</kw>
<status starttime="20170508 17:22:38.171" status="PASS" endtime="20170508 17:22:38.174"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:38.175">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:37.808" status="PASS" endtime="20170508 17:22:38.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:38.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:38.175" status="PASS" endtime="20170508 17:22:38.175"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:38.176">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:38.176">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:38.176">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:38.176" status="PASS" endtime="20170508 17:22:38.176"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:38.176">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:37.808" status="PASS" endtime="20170508 17:22:38.176"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:38.177">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:37.807" status="PASS" endtime="20170508 17:22:38.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:38.177">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:38.177" status="FAIL" endtime="20170508 17:22:38.177"></status>
</kw>
<status starttime="20170508 17:22:37.807" status="FAIL" endtime="20170508 17:22:38.177"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.183">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:48.182" status="PASS" endtime="20170508 17:22:48.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:48.183" status="PASS" endtime="20170508 17:22:48.184"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.184">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:48.184" status="PASS" endtime="20170508 17:22:48.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.185">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:48.185" status="PASS" endtime="20170508 17:22:48.185"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:48.186" status="PASS" endtime="20170508 17:22:48.488"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:48.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:48.488">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:48.185" status="PASS" endtime="20170508 17:22:48.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:48.489" status="PASS" endtime="20170508 17:22:48.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:48.489" status="PASS" endtime="20170508 17:22:48.490"></status>
</kw>
<status starttime="20170508 17:22:48.181" status="PASS" endtime="20170508 17:22:48.490"></status>
</kw>
<status starttime="20170508 17:22:48.181" status="PASS" endtime="20170508 17:22:48.490"></status>
</kw>
<status starttime="20170508 17:22:48.180" status="PASS" endtime="20170508 17:22:48.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.491">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:48.491" status="PASS" endtime="20170508 17:22:48.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.493">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:48.492" status="PASS" endtime="20170508 17:22:48.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.494">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:48.494" status="PASS" endtime="20170508 17:22:48.494"></status>
</kw>
<status starttime="20170508 17:22:48.493" status="PASS" endtime="20170508 17:22:48.494"></status>
</kw>
<status starttime="20170508 17:22:48.492" status="PASS" endtime="20170508 17:22:48.494"></status>
</kw>
<status starttime="20170508 17:22:48.491" status="PASS" endtime="20170508 17:22:48.494"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.591">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:48.591">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:48.495" status="PASS" endtime="20170508 17:22:48.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.593">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:48.592" status="PASS" endtime="20170508 17:22:48.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.594">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:48.594" status="PASS" endtime="20170508 17:22:48.594"></status>
</kw>
<status starttime="20170508 17:22:48.593" status="PASS" endtime="20170508 17:22:48.594"></status>
</kw>
<status starttime="20170508 17:22:48.592" status="PASS" endtime="20170508 17:22:48.594"></status>
</kw>
<status starttime="20170508 17:22:48.591" status="PASS" endtime="20170508 17:22:48.594"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:48.594">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:48.180" status="PASS" endtime="20170508 17:22:48.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:48.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:48.595" status="PASS" endtime="20170508 17:22:48.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:48.596">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:48.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:48.596">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:48.595" status="PASS" endtime="20170508 17:22:48.596"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:48.596">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:48.179" status="PASS" endtime="20170508 17:22:48.596"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:48.596">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:48.179" status="PASS" endtime="20170508 17:22:48.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:48.597">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:48.597" status="FAIL" endtime="20170508 17:22:48.597"></status>
</kw>
<status starttime="20170508 17:22:48.178" status="FAIL" endtime="20170508 17:22:48.598"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.602">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:22:58.602" status="PASS" endtime="20170508 17:22:58.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:22:58.603" status="PASS" endtime="20170508 17:22:58.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.604">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:22:58.604" status="PASS" endtime="20170508 17:22:58.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:22:58.604" status="PASS" endtime="20170508 17:22:58.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:22:58.605" status="PASS" endtime="20170508 17:22:58.792"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:58.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:22:58.792">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:58.605" status="PASS" endtime="20170508 17:22:58.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:58.793" status="PASS" endtime="20170508 17:22:58.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:58.793" status="PASS" endtime="20170508 17:22:58.794"></status>
</kw>
<status starttime="20170508 17:22:58.601" status="PASS" endtime="20170508 17:22:58.794"></status>
</kw>
<status starttime="20170508 17:22:58.601" status="PASS" endtime="20170508 17:22:58.794"></status>
</kw>
<status starttime="20170508 17:22:58.600" status="PASS" endtime="20170508 17:22:58.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.795">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:22:58.794" status="PASS" endtime="20170508 17:22:58.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.797">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:58.797" status="PASS" endtime="20170508 17:22:58.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.798">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:22:58.798" status="PASS" endtime="20170508 17:22:58.798"></status>
</kw>
<status starttime="20170508 17:22:58.797" status="PASS" endtime="20170508 17:22:58.798"></status>
</kw>
<status starttime="20170508 17:22:58.796" status="PASS" endtime="20170508 17:22:58.799"></status>
</kw>
<status starttime="20170508 17:22:58.795" status="PASS" endtime="20170508 17:22:58.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.866">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:22:58.866">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:58.799" status="PASS" endtime="20170508 17:22:58.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.868">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:58.867" status="PASS" endtime="20170508 17:22:58.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.869">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:22:58.869" status="PASS" endtime="20170508 17:22:58.869"></status>
</kw>
<status starttime="20170508 17:22:58.868" status="PASS" endtime="20170508 17:22:58.869"></status>
</kw>
<status starttime="20170508 17:22:58.867" status="PASS" endtime="20170508 17:22:58.869"></status>
</kw>
<status starttime="20170508 17:22:58.867" status="PASS" endtime="20170508 17:22:58.870"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:58.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:22:58.600" status="PASS" endtime="20170508 17:22:58.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:22:58.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:22:58.870" status="PASS" endtime="20170508 17:22:58.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:22:58.871">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:22:58.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:22:58.871">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:22:58.871" status="PASS" endtime="20170508 17:22:58.871"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:58.871">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:58.599" status="PASS" endtime="20170508 17:22:58.871"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:22:58.872">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:22:58.599" status="PASS" endtime="20170508 17:22:58.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:22:58.872">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:22:58.872" status="FAIL" endtime="20170508 17:22:58.872"></status>
</kw>
<status starttime="20170508 17:22:58.598" status="FAIL" endtime="20170508 17:22:58.873"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:08.877">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:23:08.877" status="PASS" endtime="20170508 17:23:08.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:08.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:23:08.879" status="PASS" endtime="20170508 17:23:08.879"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:08.880">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:23:08.880" status="PASS" endtime="20170508 17:23:08.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:08.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:23:08.880" status="PASS" endtime="20170508 17:23:08.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:23:08.883" status="PASS" endtime="20170508 17:23:09.061"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:09.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:23:09.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:08.881" status="PASS" endtime="20170508 17:23:09.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:09.062" status="PASS" endtime="20170508 17:23:09.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:09.062" status="PASS" endtime="20170508 17:23:09.063"></status>
</kw>
<status starttime="20170508 17:23:08.876" status="PASS" endtime="20170508 17:23:09.063"></status>
</kw>
<status starttime="20170508 17:23:08.876" status="PASS" endtime="20170508 17:23:09.063"></status>
</kw>
<status starttime="20170508 17:23:08.875" status="PASS" endtime="20170508 17:23:09.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:09.064">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:23:09.063" status="PASS" endtime="20170508 17:23:09.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:09.066">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:09.065" status="PASS" endtime="20170508 17:23:09.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.067">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:09.066" status="PASS" endtime="20170508 17:23:09.067"></status>
</kw>
<status starttime="20170508 17:23:09.066" status="PASS" endtime="20170508 17:23:09.067"></status>
</kw>
<status starttime="20170508 17:23:09.064" status="PASS" endtime="20170508 17:23:09.067"></status>
</kw>
<status starttime="20170508 17:23:09.064" status="PASS" endtime="20170508 17:23:09.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:09.135">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:23:09.135">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:09.067" status="PASS" endtime="20170508 17:23:09.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:09.137">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:09.136" status="PASS" endtime="20170508 17:23:09.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.138">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:09.137" status="PASS" endtime="20170508 17:23:09.138"></status>
</kw>
<status starttime="20170508 17:23:09.137" status="PASS" endtime="20170508 17:23:09.138"></status>
</kw>
<status starttime="20170508 17:23:09.136" status="PASS" endtime="20170508 17:23:09.138"></status>
</kw>
<status starttime="20170508 17:23:09.135" status="PASS" endtime="20170508 17:23:09.138"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:09.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:08.875" status="PASS" endtime="20170508 17:23:09.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:09.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:09.139" status="PASS" endtime="20170508 17:23:09.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:09.140">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:23:09.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:23:09.140">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:23:09.139" status="PASS" endtime="20170508 17:23:09.140"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:09.140">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:08.874" status="PASS" endtime="20170508 17:23:09.140"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:09.140">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:08.874" status="PASS" endtime="20170508 17:23:09.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:23:09.141">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:23:09.141" status="FAIL" endtime="20170508 17:23:09.141"></status>
</kw>
<status starttime="20170508 17:23:08.873" status="FAIL" endtime="20170508 17:23:09.141"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.147">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:23:19.146" status="PASS" endtime="20170508 17:23:19.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:23:19.147" status="PASS" endtime="20170508 17:23:19.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.148">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:23:19.148" status="PASS" endtime="20170508 17:23:19.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:23:19.149" status="PASS" endtime="20170508 17:23:19.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.330">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:23:19.150" status="PASS" endtime="20170508 17:23:19.330"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:19.330">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:23:19.330">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:19.149" status="PASS" endtime="20170508 17:23:19.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.331">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:19.331" status="PASS" endtime="20170508 17:23:19.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:19.331" status="PASS" endtime="20170508 17:23:19.332"></status>
</kw>
<status starttime="20170508 17:23:19.146" status="PASS" endtime="20170508 17:23:19.332"></status>
</kw>
<status starttime="20170508 17:23:19.145" status="PASS" endtime="20170508 17:23:19.332"></status>
</kw>
<status starttime="20170508 17:23:19.145" status="PASS" endtime="20170508 17:23:19.332"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.333">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:23:19.332" status="PASS" endtime="20170508 17:23:19.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.335">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:19.334" status="PASS" endtime="20170508 17:23:19.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.336">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:19.335" status="PASS" endtime="20170508 17:23:19.336"></status>
</kw>
<status starttime="20170508 17:23:19.335" status="PASS" endtime="20170508 17:23:19.336"></status>
</kw>
<status starttime="20170508 17:23:19.333" status="PASS" endtime="20170508 17:23:19.336"></status>
</kw>
<status starttime="20170508 17:23:19.333" status="PASS" endtime="20170508 17:23:19.336"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.404">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:23:19.404">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:19.337" status="PASS" endtime="20170508 17:23:19.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.406">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:19.405" status="PASS" endtime="20170508 17:23:19.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.407">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:19.406" status="PASS" endtime="20170508 17:23:19.407"></status>
</kw>
<status starttime="20170508 17:23:19.406" status="PASS" endtime="20170508 17:23:19.407"></status>
</kw>
<status starttime="20170508 17:23:19.405" status="PASS" endtime="20170508 17:23:19.407"></status>
</kw>
<status starttime="20170508 17:23:19.404" status="PASS" endtime="20170508 17:23:19.407"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:19.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:19.144" status="PASS" endtime="20170508 17:23:19.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:19.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:19.408" status="PASS" endtime="20170508 17:23:19.408"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:19.409">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:23:19.409">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:23:19.409">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:23:19.408" status="PASS" endtime="20170508 17:23:19.409"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:19.409">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:19.143" status="PASS" endtime="20170508 17:23:19.409"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:19.409">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:19.142" status="PASS" endtime="20170508 17:23:19.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:23:19.410">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:23:19.409" status="FAIL" endtime="20170508 17:23:19.410"></status>
</kw>
<status starttime="20170508 17:23:19.142" status="FAIL" endtime="20170508 17:23:19.410"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.417">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:23:29.417" status="PASS" endtime="20170508 17:23:29.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:23:29.418" status="PASS" endtime="20170508 17:23:29.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.420">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:23:29.419" status="PASS" endtime="20170508 17:23:29.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.420">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:23:29.420" status="PASS" endtime="20170508 17:23:29.420"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.627">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:23:29.421" status="PASS" endtime="20170508 17:23:29.627"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:29.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:23:29.628">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:29.421" status="PASS" endtime="20170508 17:23:29.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:29.628" status="PASS" endtime="20170508 17:23:29.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:29.630" status="PASS" endtime="20170508 17:23:29.630"></status>
</kw>
<status starttime="20170508 17:23:29.416" status="PASS" endtime="20170508 17:23:29.630"></status>
</kw>
<status starttime="20170508 17:23:29.416" status="PASS" endtime="20170508 17:23:29.631"></status>
</kw>
<status starttime="20170508 17:23:29.414" status="PASS" endtime="20170508 17:23:29.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.631">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:23:29.631" status="PASS" endtime="20170508 17:23:29.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.635">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:29.633" status="PASS" endtime="20170508 17:23:29.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.636">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:29.636" status="PASS" endtime="20170508 17:23:29.636"></status>
</kw>
<status starttime="20170508 17:23:29.635" status="PASS" endtime="20170508 17:23:29.636"></status>
</kw>
<status starttime="20170508 17:23:29.632" status="PASS" endtime="20170508 17:23:29.637"></status>
</kw>
<status starttime="20170508 17:23:29.632" status="PASS" endtime="20170508 17:23:29.637"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.705">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:23:29.706">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:29.637" status="PASS" endtime="20170508 17:23:29.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.709">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:29.708" status="PASS" endtime="20170508 17:23:29.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.710">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:29.710" status="PASS" endtime="20170508 17:23:29.711"></status>
</kw>
<status starttime="20170508 17:23:29.709" status="PASS" endtime="20170508 17:23:29.711"></status>
</kw>
<status starttime="20170508 17:23:29.707" status="PASS" endtime="20170508 17:23:29.711"></status>
</kw>
<status starttime="20170508 17:23:29.706" status="PASS" endtime="20170508 17:23:29.711"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:29.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:29.413" status="PASS" endtime="20170508 17:23:29.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:29.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:29.712" status="PASS" endtime="20170508 17:23:29.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:29.713">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:23:29.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:23:29.714">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:23:29.713" status="PASS" endtime="20170508 17:23:29.714"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:29.714">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:29.413" status="PASS" endtime="20170508 17:23:29.714"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:29.714">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:29.412" status="PASS" endtime="20170508 17:23:29.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:23:29.715">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:23:29.715" status="FAIL" endtime="20170508 17:23:29.715"></status>
</kw>
<status starttime="20170508 17:23:29.411" status="FAIL" endtime="20170508 17:23:29.715"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:39.723">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:23:39.721" status="PASS" endtime="20170508 17:23:39.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:39.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:23:39.725" status="PASS" endtime="20170508 17:23:39.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:39.726">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:23:39.726" status="PASS" endtime="20170508 17:23:39.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:39.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:23:39.727" status="PASS" endtime="20170508 17:23:39.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:39.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:23:39.729" status="PASS" endtime="20170508 17:23:39.964"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:39.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:23:39.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:39.728" status="PASS" endtime="20170508 17:23:39.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:39.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:39.964" status="PASS" endtime="20170508 17:23:39.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:39.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:39.965" status="PASS" endtime="20170508 17:23:39.966"></status>
</kw>
<status starttime="20170508 17:23:39.721" status="PASS" endtime="20170508 17:23:39.966"></status>
</kw>
<status starttime="20170508 17:23:39.720" status="PASS" endtime="20170508 17:23:39.966"></status>
</kw>
<status starttime="20170508 17:23:39.719" status="PASS" endtime="20170508 17:23:39.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:39.967">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:23:39.967" status="PASS" endtime="20170508 17:23:39.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:39.970">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:39.969" status="PASS" endtime="20170508 17:23:39.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:39.971">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:39.971" status="PASS" endtime="20170508 17:23:39.971"></status>
</kw>
<status starttime="20170508 17:23:39.970" status="PASS" endtime="20170508 17:23:39.972"></status>
</kw>
<status starttime="20170508 17:23:39.968" status="PASS" endtime="20170508 17:23:39.972"></status>
</kw>
<status starttime="20170508 17:23:39.968" status="PASS" endtime="20170508 17:23:39.972"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:40.051">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:23:40.051">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:39.972" status="PASS" endtime="20170508 17:23:40.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:40.055">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:40.054" status="PASS" endtime="20170508 17:23:40.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:40.057">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:40.057" status="PASS" endtime="20170508 17:23:40.057"></status>
</kw>
<status starttime="20170508 17:23:40.056" status="PASS" endtime="20170508 17:23:40.057"></status>
</kw>
<status starttime="20170508 17:23:40.053" status="PASS" endtime="20170508 17:23:40.058"></status>
</kw>
<status starttime="20170508 17:23:40.052" status="PASS" endtime="20170508 17:23:40.058"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:40.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:39.718" status="PASS" endtime="20170508 17:23:40.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:40.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:40.058" status="PASS" endtime="20170508 17:23:40.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:40.060">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:23:40.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:23:40.060">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:23:40.060" status="PASS" endtime="20170508 17:23:40.060"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:40.061">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:39.718" status="PASS" endtime="20170508 17:23:40.061"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:40.061">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:39.717" status="PASS" endtime="20170508 17:23:40.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:23:40.062">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:23:40.062" status="FAIL" endtime="20170508 17:23:40.063"></status>
</kw>
<status starttime="20170508 17:23:39.716" status="FAIL" endtime="20170508 17:23:40.063"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.069">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:23:50.069" status="PASS" endtime="20170508 17:23:50.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:23:50.070" status="PASS" endtime="20170508 17:23:50.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.071">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:23:50.071" status="PASS" endtime="20170508 17:23:50.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:23:50.071" status="PASS" endtime="20170508 17:23:50.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:23:50.072" status="PASS" endtime="20170508 17:23:50.410"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:50.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:23:50.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:50.072" status="PASS" endtime="20170508 17:23:50.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:50.411" status="PASS" endtime="20170508 17:23:50.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:50.411" status="PASS" endtime="20170508 17:23:50.412"></status>
</kw>
<status starttime="20170508 17:23:50.068" status="PASS" endtime="20170508 17:23:50.412"></status>
</kw>
<status starttime="20170508 17:23:50.068" status="PASS" endtime="20170508 17:23:50.413"></status>
</kw>
<status starttime="20170508 17:23:50.067" status="PASS" endtime="20170508 17:23:50.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.413">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:23:50.413" status="PASS" endtime="20170508 17:23:50.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.415">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:50.415" status="PASS" endtime="20170508 17:23:50.415"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.416">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:23:50.416" status="PASS" endtime="20170508 17:23:50.416"></status>
</kw>
<status starttime="20170508 17:23:50.415" status="PASS" endtime="20170508 17:23:50.416"></status>
</kw>
<status starttime="20170508 17:23:50.414" status="PASS" endtime="20170508 17:23:50.417"></status>
</kw>
<status starttime="20170508 17:23:50.414" status="PASS" endtime="20170508 17:23:50.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.515">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:23:50.515">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:50.417" status="PASS" endtime="20170508 17:23:50.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.517">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:50.517" status="PASS" endtime="20170508 17:23:50.517"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.518">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:23:50.518" status="PASS" endtime="20170508 17:23:50.518"></status>
</kw>
<status starttime="20170508 17:23:50.517" status="PASS" endtime="20170508 17:23:50.518"></status>
</kw>
<status starttime="20170508 17:23:50.516" status="PASS" endtime="20170508 17:23:50.518"></status>
</kw>
<status starttime="20170508 17:23:50.516" status="PASS" endtime="20170508 17:23:50.518"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:50.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:23:50.067" status="PASS" endtime="20170508 17:23:50.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:23:50.519">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:23:50.519" status="PASS" endtime="20170508 17:23:50.519"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:23:50.520">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:23:50.520">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:23:50.520">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:23:50.520" status="PASS" endtime="20170508 17:23:50.520"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:50.520">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:50.066" status="PASS" endtime="20170508 17:23:50.520"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:23:50.521">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:23:50.065" status="PASS" endtime="20170508 17:23:50.521"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:23:50.521">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:23:50.521" status="FAIL" endtime="20170508 17:23:50.521"></status>
</kw>
<status starttime="20170508 17:23:50.064" status="FAIL" endtime="20170508 17:23:50.522"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.527">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:00.527" status="PASS" endtime="20170508 17:24:00.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.528">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:00.528" status="PASS" endtime="20170508 17:24:00.528"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.529">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:00.528" status="PASS" endtime="20170508 17:24:00.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.529">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:00.529" status="PASS" endtime="20170508 17:24:00.529"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:00.530" status="PASS" endtime="20170508 17:24:00.739"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:00.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:00.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:00.530" status="PASS" endtime="20170508 17:24:00.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:00.740" status="PASS" endtime="20170508 17:24:00.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:00.740" status="PASS" endtime="20170508 17:24:00.741"></status>
</kw>
<status starttime="20170508 17:24:00.526" status="PASS" endtime="20170508 17:24:00.741"></status>
</kw>
<status starttime="20170508 17:24:00.525" status="PASS" endtime="20170508 17:24:00.741"></status>
</kw>
<status starttime="20170508 17:24:00.525" status="PASS" endtime="20170508 17:24:00.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.742">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:00.741" status="PASS" endtime="20170508 17:24:00.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.744">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:00.744" status="PASS" endtime="20170508 17:24:00.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.746">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:00.745" status="PASS" endtime="20170508 17:24:00.746"></status>
</kw>
<status starttime="20170508 17:24:00.745" status="PASS" endtime="20170508 17:24:00.746"></status>
</kw>
<status starttime="20170508 17:24:00.743" status="PASS" endtime="20170508 17:24:00.746"></status>
</kw>
<status starttime="20170508 17:24:00.742" status="PASS" endtime="20170508 17:24:00.746"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.813">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:00.813">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:00.746" status="PASS" endtime="20170508 17:24:00.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.815">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:00.815" status="PASS" endtime="20170508 17:24:00.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.818">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:00.818" status="PASS" endtime="20170508 17:24:00.819"></status>
</kw>
<status starttime="20170508 17:24:00.816" status="PASS" endtime="20170508 17:24:00.819"></status>
</kw>
<status starttime="20170508 17:24:00.814" status="PASS" endtime="20170508 17:24:00.819"></status>
</kw>
<status starttime="20170508 17:24:00.814" status="PASS" endtime="20170508 17:24:00.819"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:00.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:00.524" status="PASS" endtime="20170508 17:24:00.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:00.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:00.819" status="PASS" endtime="20170508 17:24:00.820"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:00.820">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:00.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:00.821">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:00.820" status="PASS" endtime="20170508 17:24:00.821"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:00.821">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:00.523" status="PASS" endtime="20170508 17:24:00.821"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:00.821">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:00.523" status="PASS" endtime="20170508 17:24:00.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:00.822">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:00.821" status="FAIL" endtime="20170508 17:24:00.822"></status>
</kw>
<status starttime="20170508 17:24:00.522" status="FAIL" endtime="20170508 17:24:00.822"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:10.827">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:10.827" status="PASS" endtime="20170508 17:24:10.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:10.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:10.828" status="PASS" endtime="20170508 17:24:10.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:10.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:10.828" status="PASS" endtime="20170508 17:24:10.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:10.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:10.829" status="PASS" endtime="20170508 17:24:10.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:10.830" status="PASS" endtime="20170508 17:24:11.049"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:11.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:11.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:10.830" status="PASS" endtime="20170508 17:24:11.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:11.050" status="PASS" endtime="20170508 17:24:11.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:11.050" status="PASS" endtime="20170508 17:24:11.051"></status>
</kw>
<status starttime="20170508 17:24:10.826" status="PASS" endtime="20170508 17:24:11.051"></status>
</kw>
<status starttime="20170508 17:24:10.826" status="PASS" endtime="20170508 17:24:11.051"></status>
</kw>
<status starttime="20170508 17:24:10.825" status="PASS" endtime="20170508 17:24:11.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:11.052">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:11.052" status="PASS" endtime="20170508 17:24:11.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:11.054">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:11.054" status="PASS" endtime="20170508 17:24:11.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.055">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:11.055" status="PASS" endtime="20170508 17:24:11.055"></status>
</kw>
<status starttime="20170508 17:24:11.054" status="PASS" endtime="20170508 17:24:11.055"></status>
</kw>
<status starttime="20170508 17:24:11.053" status="PASS" endtime="20170508 17:24:11.055"></status>
</kw>
<status starttime="20170508 17:24:11.052" status="PASS" endtime="20170508 17:24:11.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:11.123">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:11.123">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:11.056" status="PASS" endtime="20170508 17:24:11.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:11.124">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:11.124" status="PASS" endtime="20170508 17:24:11.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.125">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:11.125" status="PASS" endtime="20170508 17:24:11.125"></status>
</kw>
<status starttime="20170508 17:24:11.125" status="PASS" endtime="20170508 17:24:11.126"></status>
</kw>
<status starttime="20170508 17:24:11.123" status="PASS" endtime="20170508 17:24:11.126"></status>
</kw>
<status starttime="20170508 17:24:11.123" status="PASS" endtime="20170508 17:24:11.126"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:11.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:10.825" status="PASS" endtime="20170508 17:24:11.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:11.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:11.126" status="PASS" endtime="20170508 17:24:11.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:11.127">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:11.127">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:11.127">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:11.127" status="PASS" endtime="20170508 17:24:11.127"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:11.128">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:10.824" status="PASS" endtime="20170508 17:24:11.128"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:11.128">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:10.824" status="PASS" endtime="20170508 17:24:11.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:11.129">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:11.128" status="FAIL" endtime="20170508 17:24:11.129"></status>
</kw>
<status starttime="20170508 17:24:10.823" status="FAIL" endtime="20170508 17:24:11.129"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.135">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:21.134" status="PASS" endtime="20170508 17:24:21.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.136">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:21.135" status="PASS" endtime="20170508 17:24:21.136"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.136">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:21.136" status="PASS" endtime="20170508 17:24:21.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.137">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:21.137" status="PASS" endtime="20170508 17:24:21.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.351">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:21.138" status="PASS" endtime="20170508 17:24:21.352"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:21.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:21.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:21.137" status="PASS" endtime="20170508 17:24:21.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.352">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:21.352" status="PASS" endtime="20170508 17:24:21.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:21.353" status="PASS" endtime="20170508 17:24:21.353"></status>
</kw>
<status starttime="20170508 17:24:21.133" status="PASS" endtime="20170508 17:24:21.353"></status>
</kw>
<status starttime="20170508 17:24:21.133" status="PASS" endtime="20170508 17:24:21.353"></status>
</kw>
<status starttime="20170508 17:24:21.132" status="PASS" endtime="20170508 17:24:21.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.354">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:21.354" status="PASS" endtime="20170508 17:24:21.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.356">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:21.355" status="PASS" endtime="20170508 17:24:21.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.357">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:21.357" status="PASS" endtime="20170508 17:24:21.357"></status>
</kw>
<status starttime="20170508 17:24:21.356" status="PASS" endtime="20170508 17:24:21.357"></status>
</kw>
<status starttime="20170508 17:24:21.355" status="PASS" endtime="20170508 17:24:21.357"></status>
</kw>
<status starttime="20170508 17:24:21.354" status="PASS" endtime="20170508 17:24:21.357"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.431">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:21.432">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:21.358" status="PASS" endtime="20170508 17:24:21.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.434">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:21.433" status="PASS" endtime="20170508 17:24:21.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.435">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:21.434" status="PASS" endtime="20170508 17:24:21.435"></status>
</kw>
<status starttime="20170508 17:24:21.434" status="PASS" endtime="20170508 17:24:21.435"></status>
</kw>
<status starttime="20170508 17:24:21.433" status="PASS" endtime="20170508 17:24:21.435"></status>
</kw>
<status starttime="20170508 17:24:21.432" status="PASS" endtime="20170508 17:24:21.435"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:21.435">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:21.131" status="PASS" endtime="20170508 17:24:21.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:21.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:21.435" status="PASS" endtime="20170508 17:24:21.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:21.436">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:21.436">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:21.436">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:21.436" status="PASS" endtime="20170508 17:24:21.437"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:21.437">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:21.131" status="PASS" endtime="20170508 17:24:21.437"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:21.437">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:21.130" status="PASS" endtime="20170508 17:24:21.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:21.438">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:21.437" status="FAIL" endtime="20170508 17:24:21.438"></status>
</kw>
<status starttime="20170508 17:24:21.130" status="FAIL" endtime="20170508 17:24:21.438"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.443">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:31.443" status="PASS" endtime="20170508 17:24:31.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.444">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:31.444" status="PASS" endtime="20170508 17:24:31.444"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.445">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:31.445" status="PASS" endtime="20170508 17:24:31.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:31.445" status="PASS" endtime="20170508 17:24:31.446"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:31.446" status="PASS" endtime="20170508 17:24:31.658"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:31.658">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:31.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:31.446" status="PASS" endtime="20170508 17:24:31.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.659">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:31.658" status="PASS" endtime="20170508 17:24:31.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:31.659" status="PASS" endtime="20170508 17:24:31.660"></status>
</kw>
<status starttime="20170508 17:24:31.442" status="PASS" endtime="20170508 17:24:31.660"></status>
</kw>
<status starttime="20170508 17:24:31.442" status="PASS" endtime="20170508 17:24:31.660"></status>
</kw>
<status starttime="20170508 17:24:31.441" status="PASS" endtime="20170508 17:24:31.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.661">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:31.660" status="PASS" endtime="20170508 17:24:31.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.663">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:31.662" status="PASS" endtime="20170508 17:24:31.663"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.664">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:31.663" status="PASS" endtime="20170508 17:24:31.664"></status>
</kw>
<status starttime="20170508 17:24:31.663" status="PASS" endtime="20170508 17:24:31.664"></status>
</kw>
<status starttime="20170508 17:24:31.661" status="PASS" endtime="20170508 17:24:31.664"></status>
</kw>
<status starttime="20170508 17:24:31.661" status="PASS" endtime="20170508 17:24:31.664"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.731">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:31.731">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:31.664" status="PASS" endtime="20170508 17:24:31.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.733">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:31.733" status="PASS" endtime="20170508 17:24:31.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.734">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:31.734" status="PASS" endtime="20170508 17:24:31.734"></status>
</kw>
<status starttime="20170508 17:24:31.733" status="PASS" endtime="20170508 17:24:31.734"></status>
</kw>
<status starttime="20170508 17:24:31.732" status="PASS" endtime="20170508 17:24:31.734"></status>
</kw>
<status starttime="20170508 17:24:31.732" status="PASS" endtime="20170508 17:24:31.734"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:31.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:31.441" status="PASS" endtime="20170508 17:24:31.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:31.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:31.735" status="PASS" endtime="20170508 17:24:31.735"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:31.736">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:31.736">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:31.736">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:31.736" status="PASS" endtime="20170508 17:24:31.736"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:31.737">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:31.440" status="PASS" endtime="20170508 17:24:31.737"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:31.737">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:31.440" status="PASS" endtime="20170508 17:24:31.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:31.738">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:31.737" status="FAIL" endtime="20170508 17:24:31.738"></status>
</kw>
<status starttime="20170508 17:24:31.439" status="FAIL" endtime="20170508 17:24:31.738"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:41.743">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:41.743" status="PASS" endtime="20170508 17:24:41.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:41.744">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:41.744" status="PASS" endtime="20170508 17:24:41.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:41.745">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:41.745" status="PASS" endtime="20170508 17:24:41.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:41.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:41.745" status="PASS" endtime="20170508 17:24:41.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:41.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:41.746" status="PASS" endtime="20170508 17:24:41.979"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:41.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:41.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:41.746" status="PASS" endtime="20170508 17:24:41.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:41.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:41.980" status="PASS" endtime="20170508 17:24:41.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:41.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:41.980" status="PASS" endtime="20170508 17:24:41.981"></status>
</kw>
<status starttime="20170508 17:24:41.742" status="PASS" endtime="20170508 17:24:41.981"></status>
</kw>
<status starttime="20170508 17:24:41.742" status="PASS" endtime="20170508 17:24:41.981"></status>
</kw>
<status starttime="20170508 17:24:41.741" status="PASS" endtime="20170508 17:24:41.981"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:41.982">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:41.981" status="PASS" endtime="20170508 17:24:41.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:41.984">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:41.983" status="PASS" endtime="20170508 17:24:41.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:41.985">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:41.985" status="PASS" endtime="20170508 17:24:41.985"></status>
</kw>
<status starttime="20170508 17:24:41.984" status="PASS" endtime="20170508 17:24:41.985"></status>
</kw>
<status starttime="20170508 17:24:41.982" status="PASS" endtime="20170508 17:24:41.985"></status>
</kw>
<status starttime="20170508 17:24:41.982" status="PASS" endtime="20170508 17:24:41.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:42.096">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:42.096">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:41.986" status="PASS" endtime="20170508 17:24:42.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:42.098">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:42.097" status="PASS" endtime="20170508 17:24:42.098"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:42.099">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:42.099" status="PASS" endtime="20170508 17:24:42.099"></status>
</kw>
<status starttime="20170508 17:24:42.098" status="PASS" endtime="20170508 17:24:42.099"></status>
</kw>
<status starttime="20170508 17:24:42.097" status="PASS" endtime="20170508 17:24:42.099"></status>
</kw>
<status starttime="20170508 17:24:42.096" status="PASS" endtime="20170508 17:24:42.099"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:42.100">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:41.740" status="PASS" endtime="20170508 17:24:42.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:42.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:42.100" status="PASS" endtime="20170508 17:24:42.100"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:42.101">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:42.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:42.101">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:42.101" status="PASS" endtime="20170508 17:24:42.101"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:42.101">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:41.740" status="PASS" endtime="20170508 17:24:42.101"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:42.102">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:41.739" status="PASS" endtime="20170508 17:24:42.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:42.102">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:42.102" status="FAIL" endtime="20170508 17:24:42.102"></status>
</kw>
<status starttime="20170508 17:24:41.738" status="FAIL" endtime="20170508 17:24:42.103"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.107">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:24:52.107" status="PASS" endtime="20170508 17:24:52.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:24:52.108" status="PASS" endtime="20170508 17:24:52.108"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.109">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:24:52.108" status="PASS" endtime="20170508 17:24:52.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:24:52.109" status="PASS" endtime="20170508 17:24:52.109"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:24:52.110" status="PASS" endtime="20170508 17:24:52.296"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:52.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:24:52.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:52.110" status="PASS" endtime="20170508 17:24:52.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:52.297" status="PASS" endtime="20170508 17:24:52.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:52.297" status="PASS" endtime="20170508 17:24:52.298"></status>
</kw>
<status starttime="20170508 17:24:52.106" status="PASS" endtime="20170508 17:24:52.298"></status>
</kw>
<status starttime="20170508 17:24:52.106" status="PASS" endtime="20170508 17:24:52.298"></status>
</kw>
<status starttime="20170508 17:24:52.105" status="PASS" endtime="20170508 17:24:52.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.299">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:24:52.298" status="PASS" endtime="20170508 17:24:52.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.301">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:52.300" status="PASS" endtime="20170508 17:24:52.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.302">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:24:52.302" status="PASS" endtime="20170508 17:24:52.302"></status>
</kw>
<status starttime="20170508 17:24:52.301" status="PASS" endtime="20170508 17:24:52.302"></status>
</kw>
<status starttime="20170508 17:24:52.300" status="PASS" endtime="20170508 17:24:52.302"></status>
</kw>
<status starttime="20170508 17:24:52.299" status="PASS" endtime="20170508 17:24:52.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.369">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:24:52.369">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:52.302" status="PASS" endtime="20170508 17:24:52.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.371">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:52.371" status="PASS" endtime="20170508 17:24:52.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.372">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:24:52.372" status="PASS" endtime="20170508 17:24:52.372"></status>
</kw>
<status starttime="20170508 17:24:52.371" status="PASS" endtime="20170508 17:24:52.372"></status>
</kw>
<status starttime="20170508 17:24:52.370" status="PASS" endtime="20170508 17:24:52.372"></status>
</kw>
<status starttime="20170508 17:24:52.370" status="PASS" endtime="20170508 17:24:52.372"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:52.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:24:52.105" status="PASS" endtime="20170508 17:24:52.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:24:52.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:24:52.373" status="PASS" endtime="20170508 17:24:52.373"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:24:52.374">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:24:52.374">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:24:52.374">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:24:52.374" status="PASS" endtime="20170508 17:24:52.374"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:52.374">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:52.104" status="PASS" endtime="20170508 17:24:52.374"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:24:52.375">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:24:52.104" status="PASS" endtime="20170508 17:24:52.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:24:52.375">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:24:52.375" status="FAIL" endtime="20170508 17:24:52.375"></status>
</kw>
<status starttime="20170508 17:24:52.103" status="FAIL" endtime="20170508 17:24:52.376"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.381">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:02.380" status="PASS" endtime="20170508 17:25:02.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:02.381" status="PASS" endtime="20170508 17:25:02.382"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.382">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:02.382" status="PASS" endtime="20170508 17:25:02.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:02.382" status="PASS" endtime="20170508 17:25:02.383"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:02.384" status="PASS" endtime="20170508 17:25:02.559"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:02.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:02.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:02.383" status="PASS" endtime="20170508 17:25:02.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:02.560" status="PASS" endtime="20170508 17:25:02.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:02.560" status="PASS" endtime="20170508 17:25:02.561"></status>
</kw>
<status starttime="20170508 17:25:02.379" status="PASS" endtime="20170508 17:25:02.561"></status>
</kw>
<status starttime="20170508 17:25:02.379" status="PASS" endtime="20170508 17:25:02.561"></status>
</kw>
<status starttime="20170508 17:25:02.378" status="PASS" endtime="20170508 17:25:02.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.562">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:25:02.561" status="PASS" endtime="20170508 17:25:02.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.564">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:02.563" status="PASS" endtime="20170508 17:25:02.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.565">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:02.565" status="PASS" endtime="20170508 17:25:02.565"></status>
</kw>
<status starttime="20170508 17:25:02.564" status="PASS" endtime="20170508 17:25:02.565"></status>
</kw>
<status starttime="20170508 17:25:02.563" status="PASS" endtime="20170508 17:25:02.565"></status>
</kw>
<status starttime="20170508 17:25:02.562" status="PASS" endtime="20170508 17:25:02.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.633">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:02.633">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:02.566" status="PASS" endtime="20170508 17:25:02.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.635">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:02.634" status="PASS" endtime="20170508 17:25:02.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.637">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:02.637" status="PASS" endtime="20170508 17:25:02.637"></status>
</kw>
<status starttime="20170508 17:25:02.635" status="PASS" endtime="20170508 17:25:02.637"></status>
</kw>
<status starttime="20170508 17:25:02.634" status="PASS" endtime="20170508 17:25:02.637"></status>
</kw>
<status starttime="20170508 17:25:02.633" status="PASS" endtime="20170508 17:25:02.637"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:02.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:02.378" status="PASS" endtime="20170508 17:25:02.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:02.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:02.638" status="PASS" endtime="20170508 17:25:02.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:02.639">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:02.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:02.639">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:02.639" status="PASS" endtime="20170508 17:25:02.639"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:02.639">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:02.377" status="PASS" endtime="20170508 17:25:02.639"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:02.640">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:02.377" status="PASS" endtime="20170508 17:25:02.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:02.640">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:25:02.640" status="FAIL" endtime="20170508 17:25:02.640"></status>
</kw>
<status starttime="20170508 17:25:02.376" status="FAIL" endtime="20170508 17:25:02.640"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.645">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:12.645" status="PASS" endtime="20170508 17:25:12.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:12.646" status="PASS" endtime="20170508 17:25:12.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.647">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:12.646" status="PASS" endtime="20170508 17:25:12.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:12.647" status="PASS" endtime="20170508 17:25:12.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:12.648" status="PASS" endtime="20170508 17:25:12.825"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:12.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:12.825">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:12.647" status="PASS" endtime="20170508 17:25:12.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:12.825" status="PASS" endtime="20170508 17:25:12.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:12.826" status="PASS" endtime="20170508 17:25:12.826"></status>
</kw>
<status starttime="20170508 17:25:12.644" status="PASS" endtime="20170508 17:25:12.827"></status>
</kw>
<status starttime="20170508 17:25:12.644" status="PASS" endtime="20170508 17:25:12.827"></status>
</kw>
<status starttime="20170508 17:25:12.643" status="PASS" endtime="20170508 17:25:12.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.827">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:25:12.827" status="PASS" endtime="20170508 17:25:12.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.830">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:12.829" status="PASS" endtime="20170508 17:25:12.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.830">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:12.830" status="PASS" endtime="20170508 17:25:12.831"></status>
</kw>
<status starttime="20170508 17:25:12.830" status="PASS" endtime="20170508 17:25:12.831"></status>
</kw>
<status starttime="20170508 17:25:12.828" status="PASS" endtime="20170508 17:25:12.831"></status>
</kw>
<status starttime="20170508 17:25:12.828" status="PASS" endtime="20170508 17:25:12.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.898">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:12.898">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:12.831" status="PASS" endtime="20170508 17:25:12.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.900">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:12.900" status="PASS" endtime="20170508 17:25:12.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.901">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:12.901" status="PASS" endtime="20170508 17:25:12.901"></status>
</kw>
<status starttime="20170508 17:25:12.900" status="PASS" endtime="20170508 17:25:12.902"></status>
</kw>
<status starttime="20170508 17:25:12.899" status="PASS" endtime="20170508 17:25:12.902"></status>
</kw>
<status starttime="20170508 17:25:12.899" status="PASS" endtime="20170508 17:25:12.902"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:12.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:12.642" status="PASS" endtime="20170508 17:25:12.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:12.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:12.902" status="PASS" endtime="20170508 17:25:12.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:12.903">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:12.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:12.903">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:12.903" status="PASS" endtime="20170508 17:25:12.903"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:12.904">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:12.642" status="PASS" endtime="20170508 17:25:12.904"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:12.904">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:12.641" status="PASS" endtime="20170508 17:25:12.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:12.905">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:25:12.904" status="FAIL" endtime="20170508 17:25:12.905"></status>
</kw>
<status starttime="20170508 17:25:12.641" status="FAIL" endtime="20170508 17:25:12.905"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:22.910">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:22.909" status="PASS" endtime="20170508 17:25:22.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:22.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:22.910" status="PASS" endtime="20170508 17:25:22.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:22.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:22.911" status="PASS" endtime="20170508 17:25:22.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:22.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:22.912" status="PASS" endtime="20170508 17:25:22.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:22.913" status="PASS" endtime="20170508 17:25:23.116"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:23.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:23.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:22.912" status="PASS" endtime="20170508 17:25:23.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.117">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:23.117" status="PASS" endtime="20170508 17:25:23.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:23.117" status="PASS" endtime="20170508 17:25:23.118"></status>
</kw>
<status starttime="20170508 17:25:22.909" status="PASS" endtime="20170508 17:25:23.118"></status>
</kw>
<status starttime="20170508 17:25:22.908" status="PASS" endtime="20170508 17:25:23.118"></status>
</kw>
<status starttime="20170508 17:25:22.907" status="PASS" endtime="20170508 17:25:23.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:23.119">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:25:23.118" status="PASS" endtime="20170508 17:25:23.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:23.121">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:23.120" status="PASS" endtime="20170508 17:25:23.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.122">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:23.122" status="PASS" endtime="20170508 17:25:23.122"></status>
</kw>
<status starttime="20170508 17:25:23.121" status="PASS" endtime="20170508 17:25:23.122"></status>
</kw>
<status starttime="20170508 17:25:23.119" status="PASS" endtime="20170508 17:25:23.122"></status>
</kw>
<status starttime="20170508 17:25:23.119" status="PASS" endtime="20170508 17:25:23.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:23.189">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:23.190">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:23.122" status="PASS" endtime="20170508 17:25:23.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:23.193">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:23.191" status="PASS" endtime="20170508 17:25:23.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.194">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:23.194" status="PASS" endtime="20170508 17:25:23.195"></status>
</kw>
<status starttime="20170508 17:25:23.194" status="PASS" endtime="20170508 17:25:23.195"></status>
</kw>
<status starttime="20170508 17:25:23.190" status="PASS" endtime="20170508 17:25:23.195"></status>
</kw>
<status starttime="20170508 17:25:23.190" status="PASS" endtime="20170508 17:25:23.195"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:23.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:22.907" status="PASS" endtime="20170508 17:25:23.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:23.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:23.195" status="PASS" endtime="20170508 17:25:23.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:23.196">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:23.196">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:23.196">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:23.196" status="PASS" endtime="20170508 17:25:23.196"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:23.197">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:22.906" status="PASS" endtime="20170508 17:25:23.197"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:23.197">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:22.906" status="PASS" endtime="20170508 17:25:23.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:23.198">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:25:23.197" status="FAIL" endtime="20170508 17:25:23.198"></status>
</kw>
<status starttime="20170508 17:25:22.905" status="FAIL" endtime="20170508 17:25:23.198"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.202">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:33.202" status="PASS" endtime="20170508 17:25:33.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:33.203" status="PASS" endtime="20170508 17:25:33.203"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.204">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:33.204" status="PASS" endtime="20170508 17:25:33.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:33.204" status="PASS" endtime="20170508 17:25:33.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:33.205" status="PASS" endtime="20170508 17:25:33.405"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:33.405">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:33.405">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:33.205" status="PASS" endtime="20170508 17:25:33.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:33.405" status="PASS" endtime="20170508 17:25:33.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:33.406" status="PASS" endtime="20170508 17:25:33.407"></status>
</kw>
<status starttime="20170508 17:25:33.201" status="PASS" endtime="20170508 17:25:33.407"></status>
</kw>
<status starttime="20170508 17:25:33.201" status="PASS" endtime="20170508 17:25:33.407"></status>
</kw>
<status starttime="20170508 17:25:33.200" status="PASS" endtime="20170508 17:25:33.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.408">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:25:33.407" status="PASS" endtime="20170508 17:25:33.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.410">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:33.409" status="PASS" endtime="20170508 17:25:33.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.411">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:33.411" status="PASS" endtime="20170508 17:25:33.411"></status>
</kw>
<status starttime="20170508 17:25:33.410" status="PASS" endtime="20170508 17:25:33.411"></status>
</kw>
<status starttime="20170508 17:25:33.409" status="PASS" endtime="20170508 17:25:33.411"></status>
</kw>
<status starttime="20170508 17:25:33.408" status="PASS" endtime="20170508 17:25:33.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.479">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:33.479">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:33.412" status="PASS" endtime="20170508 17:25:33.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.481">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:33.480" status="PASS" endtime="20170508 17:25:33.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.482">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:33.481" status="PASS" endtime="20170508 17:25:33.482"></status>
</kw>
<status starttime="20170508 17:25:33.481" status="PASS" endtime="20170508 17:25:33.482"></status>
</kw>
<status starttime="20170508 17:25:33.480" status="PASS" endtime="20170508 17:25:33.482"></status>
</kw>
<status starttime="20170508 17:25:33.479" status="PASS" endtime="20170508 17:25:33.482"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:33.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:33.200" status="PASS" endtime="20170508 17:25:33.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:33.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:33.483" status="PASS" endtime="20170508 17:25:33.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:33.484">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:33.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:33.484">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:33.483" status="PASS" endtime="20170508 17:25:33.484"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:33.484">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:33.199" status="PASS" endtime="20170508 17:25:33.484"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:33.484">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:33.199" status="PASS" endtime="20170508 17:25:33.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:33.485">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:25:33.485" status="FAIL" endtime="20170508 17:25:33.485"></status>
</kw>
<status starttime="20170508 17:25:33.198" status="FAIL" endtime="20170508 17:25:33.485"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.491">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:43.491" status="PASS" endtime="20170508 17:25:43.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:43.492" status="PASS" endtime="20170508 17:25:43.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:43.492" status="PASS" endtime="20170508 17:25:43.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:43.493" status="PASS" endtime="20170508 17:25:43.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:43.495" status="PASS" endtime="20170508 17:25:43.782"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:43.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:43.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:43.494" status="PASS" endtime="20170508 17:25:43.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:43.783" status="PASS" endtime="20170508 17:25:43.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:43.784" status="PASS" endtime="20170508 17:25:43.784"></status>
</kw>
<status starttime="20170508 17:25:43.490" status="PASS" endtime="20170508 17:25:43.784"></status>
</kw>
<status starttime="20170508 17:25:43.489" status="PASS" endtime="20170508 17:25:43.784"></status>
</kw>
<status starttime="20170508 17:25:43.488" status="PASS" endtime="20170508 17:25:43.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.785">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170508 17:25:43.785" status="PASS" endtime="20170508 17:25:43.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.787">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:43.786" status="PASS" endtime="20170508 17:25:43.787"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.788">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170508 17:25:43.788" status="PASS" endtime="20170508 17:25:43.788"></status>
</kw>
<status starttime="20170508 17:25:43.787" status="PASS" endtime="20170508 17:25:43.788"></status>
</kw>
<status starttime="20170508 17:25:43.786" status="PASS" endtime="20170508 17:25:43.788"></status>
</kw>
<status starttime="20170508 17:25:43.785" status="PASS" endtime="20170508 17:25:43.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.873">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:43.873">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:43.789" status="PASS" endtime="20170508 17:25:43.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.875">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:43.875" status="PASS" endtime="20170508 17:25:43.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.876">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:43.876" status="PASS" endtime="20170508 17:25:43.876"></status>
</kw>
<status starttime="20170508 17:25:43.875" status="PASS" endtime="20170508 17:25:43.876"></status>
</kw>
<status starttime="20170508 17:25:43.874" status="PASS" endtime="20170508 17:25:43.876"></status>
</kw>
<status starttime="20170508 17:25:43.874" status="PASS" endtime="20170508 17:25:43.876"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:43.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:43.488" status="PASS" endtime="20170508 17:25:43.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:43.877" status="PASS" endtime="20170508 17:25:43.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.878">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:43.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:43.878">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:43.878" status="PASS" endtime="20170508 17:25:43.878"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:43.878">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:43.487" status="PASS" endtime="20170508 17:25:43.878"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:43.879">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170508 17:25:43.487" status="PASS" endtime="20170508 17:25:43.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:43.879">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:25:43.879" status="FAIL" endtime="20170508 17:25:43.879"></status>
</kw>
<status starttime="20170508 17:25:43.486" status="FAIL" endtime="20170508 17:25:43.880"></status>
</kw>
<msg level="FAIL" timestamp="20170508 17:25:43.880">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170508 17:15:34.763" status="FAIL" endtime="20170508 17:25:43.880"></status>
</kw>
<status starttime="20170508 17:14:55.040" status="FAIL" endtime="20170508 17:25:43.880"></status>
</kw>
<status starttime="20170508 17:14:55.040" status="FAIL" endtime="20170508 17:25:43.880"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:43.885">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:43.885" status="PASS" endtime="20170508 17:25:43.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:43.886" status="PASS" endtime="20170508 17:25:43.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.887">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:43.886" status="PASS" endtime="20170508 17:25:43.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:43.887">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:43.887" status="PASS" endtime="20170508 17:25:43.887"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:43.888" status="PASS" endtime="20170508 17:25:44.114"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.114">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:44.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:43.888" status="PASS" endtime="20170508 17:25:44.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:44.115" status="PASS" endtime="20170508 17:25:44.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:44.115" status="PASS" endtime="20170508 17:25:44.116"></status>
</kw>
<status starttime="20170508 17:25:43.884" status="PASS" endtime="20170508 17:25:44.116"></status>
</kw>
<status starttime="20170508 17:25:43.884" status="PASS" endtime="20170508 17:25:44.116"></status>
</kw>
<status starttime="20170508 17:25:43.883" status="PASS" endtime="20170508 17:25:44.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.117">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:25:44.116" status="PASS" endtime="20170508 17:25:44.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.119">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:25:44.118" status="PASS" endtime="20170508 17:25:44.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.120">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:25:44.119" status="PASS" endtime="20170508 17:25:44.120"></status>
</kw>
<status starttime="20170508 17:25:44.119" status="PASS" endtime="20170508 17:25:44.120"></status>
</kw>
<status starttime="20170508 17:25:44.117" status="PASS" endtime="20170508 17:25:44.120"></status>
</kw>
<status starttime="20170508 17:25:44.117" status="PASS" endtime="20170508 17:25:44.120"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:44.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:44.120" status="PASS" endtime="20170508 17:25:44.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.198">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:44.197" status="PASS" endtime="20170508 17:25:44.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.199">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:25:44.199" status="PASS" endtime="20170508 17:25:44.199"></status>
</kw>
<status starttime="20170508 17:25:44.198" status="PASS" endtime="20170508 17:25:44.199"></status>
</kw>
<status starttime="20170508 17:25:44.196" status="PASS" endtime="20170508 17:25:44.200"></status>
</kw>
<status starttime="20170508 17:25:44.196" status="PASS" endtime="20170508 17:25:44.200"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:43.883" status="PASS" endtime="20170508 17:25:44.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:44.200" status="PASS" endtime="20170508 17:25:44.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.201">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:44.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:25:44.201">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:25:44.201" status="PASS" endtime="20170508 17:25:44.201"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.202">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170508 17:25:43.882" status="PASS" endtime="20170508 17:25:44.202"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.202">${host_state} = Quiesced</msg>
<status starttime="20170508 17:25:43.882" status="PASS" endtime="20170508 17:25:44.202"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170508 17:25:44.203" status="PASS" endtime="20170508 17:25:44.203"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.203">${status} = True</msg>
<status starttime="20170508 17:25:44.202" status="PASS" endtime="20170508 17:25:44.203"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:44.203">${status} = True</msg>
<status starttime="20170508 17:25:43.881" status="PASS" endtime="20170508 17:25:44.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:44.556">Length is 12</msg>
<status starttime="20170508 17:25:44.556" status="PASS" endtime="20170508 17:25:44.556"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:44.562">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:25:47.571">${RC} = 0</msg>
<msg level="INFO" timestamp="20170508 17:25:47.571">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.51 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.716 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170508 17:25:44.556" status="PASS" endtime="20170508 17:25:47.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.574">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=2.51 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.716 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=1.55 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.19 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.716/1.496/2.514/0.659 ms</msg>
<status starttime="20170508 17:25:47.574" status="PASS" endtime="20170508 17:25:47.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170508 17:25:47.575" status="PASS" endtime="20170508 17:25:47.575"></status>
</kw>
<status starttime="20170508 17:25:44.555" status="PASS" endtime="20170508 17:25:47.575"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.600">${cur_time} = 2017-05-08 17:25:47:599409</msg>
<status starttime="20170508 17:25:47.599" status="PASS" endtime="20170508 17:25:47.600"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.600">${cur_time} = 20170508172547599409</msg>
<status starttime="20170508 17:25:47.600" status="PASS" endtime="20170508 17:25:47.600"></status>
</kw>
<status starttime="20170508 17:25:47.599" status="PASS" endtime="20170508 17:25:47.600"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:47.601">${FFDC_TIME} = 20170508172547599409</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.613">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170508 17:25:47.613" status="PASS" endtime="20170508 17:25:47.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.614">${suite_name} = 20170508172547599409_TestsTestBasicPoweron</msg>
<status starttime="20170508 17:25:47.613" status="PASS" endtime="20170508 17:25:47.614"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.614">${test_name} = PowerOnTest</msg>
<status starttime="20170508 17:25:47.614" status="PASS" endtime="20170508 17:25:47.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.615">${test_name} = 20170508172547599409_PowerOnTest</msg>
<status starttime="20170508 17:25:47.614" status="PASS" endtime="20170508 17:25:47.615"></status>
</kw>
<status starttime="20170508 17:25:47.612" status="PASS" endtime="20170508 17:25:47.615"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:47.616">${FFDC_DIR_PATH} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170508 17:25:47.616">${FFDC_PREFIX} = 20170508172547599409_</msg>
<msg level="INFO" timestamp="20170508 17:25:47.641">${LOG_PREFIX} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.643" html="yes">Created directory '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.641" status="PASS" endtime="20170508 17:25:47.643"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:47.647">${FFDC_FILE_PATH} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.674" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.673" status="PASS" endtime="20170508 17:25:47.674"></status>
</kw>
<status starttime="20170508 17:25:47.673" status="PASS" endtime="20170508 17:25:47.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.675" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.675" status="PASS" endtime="20170508 17:25:47.675"></status>
</kw>
<status starttime="20170508 17:25:47.674" status="PASS" endtime="20170508 17:25:47.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.677" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.676" status="PASS" endtime="20170508 17:25:47.677"></status>
</kw>
<status starttime="20170508 17:25:47.675" status="PASS" endtime="20170508 17:25:47.677"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.678" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.678" status="PASS" endtime="20170508 17:25:47.678"></status>
</kw>
<status starttime="20170508 17:25:47.677" status="PASS" endtime="20170508 17:25:47.678"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.679" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.679" status="PASS" endtime="20170508 17:25:47.679"></status>
</kw>
<status starttime="20170508 17:25:47.678" status="PASS" endtime="20170508 17:25:47.680"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.681" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.680" status="PASS" endtime="20170508 17:25:47.681"></status>
</kw>
<status starttime="20170508 17:25:47.680" status="PASS" endtime="20170508 17:25:47.681"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.686" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.685" status="PASS" endtime="20170508 17:25:47.686"></status>
</kw>
<status starttime="20170508 17:25:47.681" status="PASS" endtime="20170508 17:25:47.686"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.687" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.687" status="PASS" endtime="20170508 17:25:47.687"></status>
</kw>
<status starttime="20170508 17:25:47.686" status="PASS" endtime="20170508 17:25:47.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.688" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.688" status="PASS" endtime="20170508 17:25:47.688"></status>
</kw>
<status starttime="20170508 17:25:47.687" status="PASS" endtime="20170508 17:25:47.689"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.690" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.690" status="PASS" endtime="20170508 17:25:47.690"></status>
</kw>
<status starttime="20170508 17:25:47.689" status="PASS" endtime="20170508 17:25:47.690"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.691" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.691" status="PASS" endtime="20170508 17:25:47.691"></status>
</kw>
<status starttime="20170508 17:25:47.690" status="PASS" endtime="20170508 17:25:47.692"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.693" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.692" status="PASS" endtime="20170508 17:25:47.693"></status>
</kw>
<status starttime="20170508 17:25:47.692" status="PASS" endtime="20170508 17:25:47.693"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.694" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:47.694" status="PASS" endtime="20170508 17:25:47.694"></status>
</kw>
<status starttime="20170508 17:25:47.693" status="PASS" endtime="20170508 17:25:47.694"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:47.697">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:25:47.696" status="FAIL" endtime="20170508 17:25:47.697"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:47.697">${has_host} = False</msg>
<status starttime="20170508 17:25:47.696" status="PASS" endtime="20170508 17:25:47.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:25:47.698" status="PASS" endtime="20170508 17:25:47.698"></status>
</kw>
<status starttime="20170508 17:25:47.697" status="PASS" endtime="20170508 17:25:47.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.700">${port_num} = 22</msg>
<status starttime="20170508 17:25:47.699" status="PASS" endtime="20170508 17:25:47.700"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.700">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:25:47.700" status="PASS" endtime="20170508 17:25:47.700"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:47.701">${https_num} = 443</msg>
<status starttime="20170508 17:25:47.701" status="PASS" endtime="20170508 17:25:47.701"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.702">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:25:47.701" status="PASS" endtime="20170508 17:25:47.702"></status>
</kw>
<status starttime="20170508 17:25:47.699" status="PASS" endtime="20170508 17:25:47.702"></status>
</kw>
<status starttime="20170508 17:25:47.698" status="PASS" endtime="20170508 17:25:47.702"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:47.703">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:25:47.703" status="FAIL" endtime="20170508 17:25:47.703"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:47.703">${has_port} = False</msg>
<status starttime="20170508 17:25:47.702" status="PASS" endtime="20170508 17:25:47.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:25:47.704" status="PASS" endtime="20170508 17:25:47.705"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:25:47.705" status="PASS" endtime="20170508 17:25:47.706"></status>
</kw>
<status starttime="20170508 17:25:47.704" status="PASS" endtime="20170508 17:25:47.706"></status>
</kw>
<status starttime="20170508 17:25:47.703" status="PASS" endtime="20170508 17:25:47.706"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:47.706">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:25:49.362">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:25:47.706" status="PASS" endtime="20170508 17:25:49.363"></status>
</kw>
<status starttime="20170508 17:25:47.695" status="PASS" endtime="20170508 17:25:49.363"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.364">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170508 17:25:49.451">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:49.451">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170508 17:25:49.451">${stderr} = </msg>
<status starttime="20170508 17:25:49.363" status="PASS" endtime="20170508 17:25:49.452"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.452">Length is 0</msg>
<status starttime="20170508 17:25:49.452" status="PASS" endtime="20170508 17:25:49.452"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.453">Length is 11</msg>
<status starttime="20170508 17:25:49.453" status="PASS" endtime="20170508 17:25:49.453"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:49.453">${model_name} = Witherspoon</msg>
<status starttime="20170508 17:25:47.694" status="PASS" endtime="20170508 17:25:49.453"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.454" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.454" status="PASS" endtime="20170508 17:25:49.454"></status>
</kw>
<status starttime="20170508 17:25:49.453" status="PASS" endtime="20170508 17:25:49.455"></status>
</kw>
<status starttime="20170508 17:25:47.689" status="PASS" endtime="20170508 17:25:49.455"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.456" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.455" status="PASS" endtime="20170508 17:25:49.456"></status>
</kw>
<status starttime="20170508 17:25:49.455" status="PASS" endtime="20170508 17:25:49.456"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.457">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170508 17:25:49.456" status="PASS" endtime="20170508 17:25:49.457"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.458" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.458" status="PASS" endtime="20170508 17:25:49.458"></status>
</kw>
<status starttime="20170508 17:25:49.457" status="PASS" endtime="20170508 17:25:49.458"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.460" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.459" status="PASS" endtime="20170508 17:25:49.460"></status>
</kw>
<status starttime="20170508 17:25:49.459" status="PASS" endtime="20170508 17:25:49.460"></status>
</kw>
<status starttime="20170508 17:25:49.457" status="PASS" endtime="20170508 17:25:49.460"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.461" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.461" status="PASS" endtime="20170508 17:25:49.461"></status>
</kw>
<status starttime="20170508 17:25:49.460" status="PASS" endtime="20170508 17:25:49.461"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.463" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.462" status="PASS" endtime="20170508 17:25:49.463"></status>
</kw>
<status starttime="20170508 17:25:49.462" status="PASS" endtime="20170508 17:25:49.463"></status>
</kw>
<status starttime="20170508 17:25:49.460" status="PASS" endtime="20170508 17:25:49.463"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.464" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.464" status="PASS" endtime="20170508 17:25:49.464"></status>
</kw>
<status starttime="20170508 17:25:49.463" status="PASS" endtime="20170508 17:25:49.464"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.465" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.465" status="PASS" endtime="20170508 17:25:49.465"></status>
</kw>
<status starttime="20170508 17:25:49.464" status="PASS" endtime="20170508 17:25:49.466"></status>
</kw>
<status starttime="20170508 17:25:49.463" status="PASS" endtime="20170508 17:25:49.466"></status>
</kw>
<status starttime="20170508 17:25:49.457" status="PASS" endtime="20170508 17:25:49.466"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.467" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:49.466" status="PASS" endtime="20170508 17:25:49.467"></status>
</kw>
<status starttime="20170508 17:25:49.466" status="PASS" endtime="20170508 17:25:49.467"></status>
</kw>
<status starttime="20170508 17:25:47.672" status="PASS" endtime="20170508 17:25:49.467"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.477">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170508 17:25:49.477" status="PASS" endtime="20170508 17:25:49.477"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.479">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC ...</msg>
<status starttime="20170508 17:25:49.479" status="PASS" endtime="20170508 17:25:49.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170508 17:25:49.480" status="PASS" endtime="20170508 17:25:49.480"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:49.480">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | Core Files | BMC Specific Files | OS FFDC | SEL Log ]</msg>
<status starttime="20170508 17:25:49.479" status="PASS" endtime="20170508 17:25:49.480"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:25:49.482" status="PASS" endtime="20170508 17:25:49.482"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:49.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:49.482">${ret_values} = None</msg>
<status starttime="20170508 17:25:49.481" status="PASS" endtime="20170508 17:25:49.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:25:49.483" status="PASS" endtime="20170508 17:25:49.483"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:49.536">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:25:49.535" status="FAIL" endtime="20170508 17:25:49.536"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:49.536">${has_host} = False</msg>
<status starttime="20170508 17:25:49.534" status="PASS" endtime="20170508 17:25:49.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:25:49.537" status="PASS" endtime="20170508 17:25:49.537"></status>
</kw>
<status starttime="20170508 17:25:49.536" status="PASS" endtime="20170508 17:25:49.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.540">${port_num} = 22</msg>
<status starttime="20170508 17:25:49.539" status="PASS" endtime="20170508 17:25:49.540"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.540">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:25:49.540" status="PASS" endtime="20170508 17:25:49.540"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:49.541">${https_num} = 443</msg>
<status starttime="20170508 17:25:49.541" status="PASS" endtime="20170508 17:25:49.541"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.542">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:25:49.542" status="PASS" endtime="20170508 17:25:49.543"></status>
</kw>
<status starttime="20170508 17:25:49.539" status="PASS" endtime="20170508 17:25:49.543"></status>
</kw>
<status starttime="20170508 17:25:49.538" status="PASS" endtime="20170508 17:25:49.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:49.544">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:25:49.543" status="FAIL" endtime="20170508 17:25:49.544"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:49.544">${has_port} = False</msg>
<status starttime="20170508 17:25:49.543" status="PASS" endtime="20170508 17:25:49.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:25:49.546" status="PASS" endtime="20170508 17:25:49.546"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:25:49.546" status="PASS" endtime="20170508 17:25:49.547"></status>
</kw>
<status starttime="20170508 17:25:49.545" status="PASS" endtime="20170508 17:25:49.547"></status>
</kw>
<status starttime="20170508 17:25:49.544" status="PASS" endtime="20170508 17:25:49.547"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:49.547">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:25:51.264">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:25:49.547" status="PASS" endtime="20170508 17:25:51.265"></status>
</kw>
<status starttime="20170508 17:25:49.533" status="PASS" endtime="20170508 17:25:51.265"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.266">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170508 17:25:51.265" status="PASS" endtime="20170508 17:25:51.266"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.267">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status starttime="20170508 17:25:51.267" status="PASS" endtime="20170508 17:25:51.267"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.268">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_record_log.txt</msg>
<status starttime="20170508 17:25:51.267" status="PASS" endtime="20170508 17:25:51.268"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.273">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:51.273" status="PASS" endtime="20170508 17:25:51.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:51.274" status="PASS" endtime="20170508 17:25:51.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.275">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:51.275" status="PASS" endtime="20170508 17:25:51.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:51.276" status="PASS" endtime="20170508 17:25:51.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.462">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:51.277" status="PASS" endtime="20170508 17:25:51.463"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:51.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.276" status="PASS" endtime="20170508 17:25:51.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:51.463" status="PASS" endtime="20170508 17:25:51.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:51.464" status="PASS" endtime="20170508 17:25:51.464"></status>
</kw>
<status starttime="20170508 17:25:51.270" status="PASS" endtime="20170508 17:25:51.464"></status>
</kw>
<status starttime="20170508 17:25:51.269" status="PASS" endtime="20170508 17:25:51.464"></status>
</kw>
<status starttime="20170508 17:25:51.269" status="PASS" endtime="20170508 17:25:51.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.465">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170508 17:25:51.465" status="PASS" endtime="20170508 17:25:51.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:25:51.465" status="PASS" endtime="20170508 17:25:51.466"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.515">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:51.515">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170508 17:25:51.466" status="PASS" endtime="20170508 17:25:51.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:25:51.515" status="PASS" endtime="20170508 17:25:51.515"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.516">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170508 17:25:51.268" status="PASS" endtime="20170508 17:25:51.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170508 17:25:51.517">404 != 200</msg>
<status starttime="20170508 17:25:51.516" status="FAIL" endtime="20170508 17:25:51.517"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.517">${status} = False</msg>
<status starttime="20170508 17:25:51.516" status="PASS" endtime="20170508 17:25:51.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170508 17:25:51.518">Continuing for loop from the next iteration.</msg>
<status starttime="20170508 17:25:51.518" status="PASS" endtime="20170508 17:25:51.518"></status>
</kw>
<status starttime="20170508 17:25:51.517" status="PASS" endtime="20170508 17:25:51.518"></status>
</kw>
<status starttime="20170508 17:25:51.267" status="PASS" endtime="20170508 17:25:51.518"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.519">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_elog.txt</msg>
<status starttime="20170508 17:25:51.519" status="PASS" endtime="20170508 17:25:51.519"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.522">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:51.522" status="PASS" endtime="20170508 17:25:51.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.523">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:51.523" status="PASS" endtime="20170508 17:25:51.523"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.524">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:51.523" status="PASS" endtime="20170508 17:25:51.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.524">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:51.524" status="PASS" endtime="20170508 17:25:51.524"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:51.525" status="PASS" endtime="20170508 17:25:51.744"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:51.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.525" status="PASS" endtime="20170508 17:25:51.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:51.745" status="PASS" endtime="20170508 17:25:51.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:51.745" status="PASS" endtime="20170508 17:25:51.746"></status>
</kw>
<status starttime="20170508 17:25:51.521" status="PASS" endtime="20170508 17:25:51.746"></status>
</kw>
<status starttime="20170508 17:25:51.520" status="PASS" endtime="20170508 17:25:51.746"></status>
</kw>
<status starttime="20170508 17:25:51.520" status="PASS" endtime="20170508 17:25:51.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.747">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170508 17:25:51.746" status="PASS" endtime="20170508 17:25:51.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:25:51.747" status="PASS" endtime="20170508 17:25:51.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.924">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:51.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.748" status="PASS" endtime="20170508 17:25:51.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:25:51.925" status="PASS" endtime="20170508 17:25:51.925"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.519" status="PASS" endtime="20170508 17:25:51.925"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:51.926" status="PASS" endtime="20170508 17:25:51.926"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:51.927">${status} = True</msg>
<status starttime="20170508 17:25:51.926" status="PASS" endtime="20170508 17:25:51.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170508 17:25:51.927" status="PASS" endtime="20170508 17:25:51.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.928">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 f6 a7 6c 00 00 00 04 51 f7 46 57 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710299148, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710302207, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710313437, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:51.928">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170508 17:25:51.929">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status starttime="20170508 17:25:51.927" status="PASS" endtime="20170508 17:25:51.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.930" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_elog.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:51.929" status="PASS" endtime="20170508 17:25:51.930"></status>
</kw>
<status starttime="20170508 17:25:51.929" status="PASS" endtime="20170508 17:25:51.931"></status>
</kw>
<status starttime="20170508 17:25:51.518" status="PASS" endtime="20170508 17:25:51.931"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.931">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_sensor_list.txt</msg>
<status starttime="20170508 17:25:51.931" status="PASS" endtime="20170508 17:25:51.931"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:51.935">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:51.934" status="PASS" endtime="20170508 17:25:51.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:51.935" status="PASS" endtime="20170508 17:25:51.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.936">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:51.936" status="PASS" endtime="20170508 17:25:51.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:51.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:51.937" status="PASS" endtime="20170508 17:25:51.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:51.938" status="PASS" endtime="20170508 17:25:52.157"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:52.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:52.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.937" status="PASS" endtime="20170508 17:25:52.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.157">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:52.157" status="PASS" endtime="20170508 17:25:52.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:52.158" status="PASS" endtime="20170508 17:25:52.158"></status>
</kw>
<status starttime="20170508 17:25:51.934" status="PASS" endtime="20170508 17:25:52.158"></status>
</kw>
<status starttime="20170508 17:25:51.933" status="PASS" endtime="20170508 17:25:52.158"></status>
</kw>
<status starttime="20170508 17:25:51.932" status="PASS" endtime="20170508 17:25:52.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.159">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170508 17:25:52.159" status="PASS" endtime="20170508 17:25:52.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:25:52.159" status="PASS" endtime="20170508 17:25:52.160"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.388">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:52.388">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:52.160" status="PASS" endtime="20170508 17:25:52.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:25:52.389" status="PASS" endtime="20170508 17:25:52.389"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:52.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:51.932" status="PASS" endtime="20170508 17:25:52.389"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:52.390" status="PASS" endtime="20170508 17:25:52.390"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:52.390">${status} = True</msg>
<status starttime="20170508 17:25:52.390" status="PASS" endtime="20170508 17:25:52.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170508 17:25:52.391" status="PASS" endtime="20170508 17:25:52.391"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.392">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:52.392">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170508 17:25:52.392">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170508 17:25:52.391" status="PASS" endtime="20170508 17:25:52.392"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.394" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_sensor_list.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:52.393" status="PASS" endtime="20170508 17:25:52.394"></status>
</kw>
<status starttime="20170508 17:25:52.392" status="PASS" endtime="20170508 17:25:52.394"></status>
</kw>
<status starttime="20170508 17:25:51.931" status="PASS" endtime="20170508 17:25:52.394"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.395">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_inventory.txt</msg>
<status starttime="20170508 17:25:52.394" status="PASS" endtime="20170508 17:25:52.395"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.398">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:52.397" status="PASS" endtime="20170508 17:25:52.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:52.398" status="PASS" endtime="20170508 17:25:52.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.399">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:52.399" status="PASS" endtime="20170508 17:25:52.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:52.400" status="PASS" endtime="20170508 17:25:52.400"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.586">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:52.401" status="PASS" endtime="20170508 17:25:52.586"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:52.586">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:52.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:52.400" status="PASS" endtime="20170508 17:25:52.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.587">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:52.586" status="PASS" endtime="20170508 17:25:52.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:52.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:52.587" status="PASS" endtime="20170508 17:25:52.588"></status>
</kw>
<status starttime="20170508 17:25:52.397" status="PASS" endtime="20170508 17:25:52.588"></status>
</kw>
<status starttime="20170508 17:25:52.396" status="PASS" endtime="20170508 17:25:52.588"></status>
</kw>
<status starttime="20170508 17:25:52.396" status="PASS" endtime="20170508 17:25:52.588"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:52.588">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170508 17:25:52.588" status="PASS" endtime="20170508 17:25:52.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:25:52.589" status="PASS" endtime="20170508 17:25:52.589"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.285">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:54.286">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:52.589" status="PASS" endtime="20170508 17:25:54.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:25:54.286" status="PASS" endtime="20170508 17:25:54.286"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.287">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:52.395" status="PASS" endtime="20170508 17:25:54.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.288">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:54.287" status="PASS" endtime="20170508 17:25:54.288"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.288">${status} = True</msg>
<status starttime="20170508 17:25:54.287" status="PASS" endtime="20170508 17:25:54.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170508 17:25:54.288" status="PASS" endtime="20170508 17:25:54.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.291">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:54.292">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170508 17:25:54.292">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170508 17:25:54.289" status="PASS" endtime="20170508 17:25:54.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.294" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_inventory.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:54.294" status="PASS" endtime="20170508 17:25:54.295"></status>
</kw>
<status starttime="20170508 17:25:54.293" status="PASS" endtime="20170508 17:25:54.295"></status>
</kw>
<status starttime="20170508 17:25:52.394" status="PASS" endtime="20170508 17:25:54.295"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.295">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_led.txt</msg>
<status starttime="20170508 17:25:54.295" status="PASS" endtime="20170508 17:25:54.295"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.298">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:25:54.298" status="PASS" endtime="20170508 17:25:54.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.299">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:25:54.299" status="PASS" endtime="20170508 17:25:54.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.300">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:25:54.299" status="PASS" endtime="20170508 17:25:54.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.300">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:25:54.300" status="PASS" endtime="20170508 17:25:54.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:25:54.301" status="PASS" endtime="20170508 17:25:54.479"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:54.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:54.301" status="PASS" endtime="20170508 17:25:54.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:54.480" status="PASS" endtime="20170508 17:25:54.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:54.480" status="PASS" endtime="20170508 17:25:54.481"></status>
</kw>
<status starttime="20170508 17:25:54.297" status="PASS" endtime="20170508 17:25:54.481"></status>
</kw>
<status starttime="20170508 17:25:54.297" status="PASS" endtime="20170508 17:25:54.481"></status>
</kw>
<status starttime="20170508 17:25:54.296" status="PASS" endtime="20170508 17:25:54.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.482">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170508 17:25:54.481" status="PASS" endtime="20170508 17:25:54.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:25:54.482" status="PASS" endtime="20170508 17:25:54.482"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.567">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:25:54.567">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:54.483" status="PASS" endtime="20170508 17:25:54.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:25:54.567" status="PASS" endtime="20170508 17:25:54.567"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.568">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:25:54.296" status="PASS" endtime="20170508 17:25:54.568"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:25:54.568" status="PASS" endtime="20170508 17:25:54.569"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.569">${status} = True</msg>
<status starttime="20170508 17:25:54.568" status="PASS" endtime="20170508 17:25:54.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170508 17:25:54.569" status="PASS" endtime="20170508 17:25:54.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.570">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:25:54.570">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170508 17:25:54.571">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170508 17:25:54.570" status="PASS" endtime="20170508 17:25:54.571"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.572" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_led.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:54.571" status="PASS" endtime="20170508 17:25:54.572"></status>
</kw>
<status starttime="20170508 17:25:54.571" status="PASS" endtime="20170508 17:25:54.572"></status>
</kw>
<status starttime="20170508 17:25:54.295" status="PASS" endtime="20170508 17:25:54.572"></status>
</kw>
<status starttime="20170508 17:25:51.267" status="PASS" endtime="20170508 17:25:54.572"></status>
</kw>
<status starttime="20170508 17:25:51.266" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:51.266" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:51.266" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:49.533" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:49.483" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:49.481" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<status starttime="20170508 17:25:49.481" status="PASS" endtime="20170508 17:25:54.573"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:25:54.575" status="PASS" endtime="20170508 17:25:54.575"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:54.575">${ret_values} = None</msg>
<status starttime="20170508 17:25:54.574" status="PASS" endtime="20170508 17:25:54.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:25:54.575" status="PASS" endtime="20170508 17:25:54.576"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:54.621">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:25:54.617" status="FAIL" endtime="20170508 17:25:54.621"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.621">${has_host} = False</msg>
<status starttime="20170508 17:25:54.617" status="PASS" endtime="20170508 17:25:54.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:25:54.622" status="PASS" endtime="20170508 17:25:54.623"></status>
</kw>
<status starttime="20170508 17:25:54.622" status="PASS" endtime="20170508 17:25:54.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.624">${port_num} = 22</msg>
<status starttime="20170508 17:25:54.624" status="PASS" endtime="20170508 17:25:54.625"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.625">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:25:54.625" status="PASS" endtime="20170508 17:25:54.625"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:54.626">${https_num} = 443</msg>
<status starttime="20170508 17:25:54.625" status="PASS" endtime="20170508 17:25:54.626"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.626">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:25:54.626" status="PASS" endtime="20170508 17:25:54.626"></status>
</kw>
<status starttime="20170508 17:25:54.624" status="PASS" endtime="20170508 17:25:54.627"></status>
</kw>
<status starttime="20170508 17:25:54.623" status="PASS" endtime="20170508 17:25:54.627"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:54.628">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:25:54.627" status="FAIL" endtime="20170508 17:25:54.628"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:54.628">${has_port} = False</msg>
<status starttime="20170508 17:25:54.627" status="PASS" endtime="20170508 17:25:54.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:25:54.629" status="PASS" endtime="20170508 17:25:54.629"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:25:54.630" status="PASS" endtime="20170508 17:25:54.630"></status>
</kw>
<status starttime="20170508 17:25:54.629" status="PASS" endtime="20170508 17:25:54.630"></status>
</kw>
<status starttime="20170508 17:25:54.628" status="PASS" endtime="20170508 17:25:54.630"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:54.631">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.280">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:25:54.630" status="PASS" endtime="20170508 17:25:56.280"></status>
</kw>
<status starttime="20170508 17:25:54.616" status="PASS" endtime="20170508 17:25:56.280"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.281">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170508 17:25:56.281" status="PASS" endtime="20170508 17:25:56.281"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.282">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170508 17:25:56.282" status="PASS" endtime="20170508 17:25:56.282"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.287">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170508 17:25:56.283" status="PASS" endtime="20170508 17:25:56.287"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.290" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.289" status="PASS" endtime="20170508 17:25:56.290"></status>
</kw>
<status starttime="20170508 17:25:56.289" status="PASS" endtime="20170508 17:25:56.290"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.291" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.291" status="PASS" endtime="20170508 17:25:56.292"></status>
</kw>
<status starttime="20170508 17:25:56.290" status="PASS" endtime="20170508 17:25:56.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.293" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.292" status="PASS" endtime="20170508 17:25:56.293"></status>
</kw>
<status starttime="20170508 17:25:56.292" status="PASS" endtime="20170508 17:25:56.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.294" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.294" status="PASS" endtime="20170508 17:25:56.295"></status>
</kw>
<status starttime="20170508 17:25:56.293" status="PASS" endtime="20170508 17:25:56.295"></status>
</kw>
<status starttime="20170508 17:25:56.288" status="PASS" endtime="20170508 17:25:56.295"></status>
</kw>
<status starttime="20170508 17:25:56.288" status="PASS" endtime="20170508 17:25:56.295"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.295">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.342">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.342">${stdout} = </msg>
<msg level="INFO" timestamp="20170508 17:25:56.342">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170508 17:25:56.295" status="PASS" endtime="20170508 17:25:56.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.348" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.348" status="PASS" endtime="20170508 17:25:56.348"></status>
</kw>
<status starttime="20170508 17:25:56.347" status="PASS" endtime="20170508 17:25:56.348"></status>
</kw>
<status starttime="20170508 17:25:56.342" status="PASS" endtime="20170508 17:25:56.348"></status>
</kw>
<status starttime="20170508 17:25:56.287" status="PASS" endtime="20170508 17:25:56.348"></status>
</kw>
<status starttime="20170508 17:25:56.287" status="PASS" endtime="20170508 17:25:56.348"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.352" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.351" status="PASS" endtime="20170508 17:25:56.352"></status>
</kw>
<status starttime="20170508 17:25:56.351" status="PASS" endtime="20170508 17:25:56.352"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.354" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.353" status="PASS" endtime="20170508 17:25:56.354"></status>
</kw>
<status starttime="20170508 17:25:56.352" status="PASS" endtime="20170508 17:25:56.354"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.355" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.355" status="PASS" endtime="20170508 17:25:56.355"></status>
</kw>
<status starttime="20170508 17:25:56.354" status="PASS" endtime="20170508 17:25:56.355"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.357" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.356" status="PASS" endtime="20170508 17:25:56.357"></status>
</kw>
<status starttime="20170508 17:25:56.356" status="PASS" endtime="20170508 17:25:56.357"></status>
</kw>
<status starttime="20170508 17:25:56.350" status="PASS" endtime="20170508 17:25:56.357"></status>
</kw>
<status starttime="20170508 17:25:56.350" status="PASS" endtime="20170508 17:25:56.357"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.357">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.432">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.432">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-17"
VERSION_ID="v1.99.5-17-g28770f8"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170508 17:25:56.432">${stderr} = </msg>
<status starttime="20170508 17:25:56.357" status="PASS" endtime="20170508 17:25:56.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.438" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.438" status="PASS" endtime="20170508 17:25:56.438"></status>
</kw>
<status starttime="20170508 17:25:56.437" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.433" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.349" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.349" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.287" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.281" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<status starttime="20170508 17:25:56.281" status="PASS" endtime="20170508 17:25:56.439"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.440">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170508 17:25:56.440" status="PASS" endtime="20170508 17:25:56.440"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.441">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170508 17:25:56.440" status="PASS" endtime="20170508 17:25:56.441"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.444" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.444" status="PASS" endtime="20170508 17:25:56.444"></status>
</kw>
<status starttime="20170508 17:25:56.443" status="PASS" endtime="20170508 17:25:56.445"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.446" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.446" status="PASS" endtime="20170508 17:25:56.446"></status>
</kw>
<status starttime="20170508 17:25:56.445" status="PASS" endtime="20170508 17:25:56.446"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.447" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.447" status="PASS" endtime="20170508 17:25:56.447"></status>
</kw>
<status starttime="20170508 17:25:56.446" status="PASS" endtime="20170508 17:25:56.447"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.448" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.448" status="PASS" endtime="20170508 17:25:56.449"></status>
</kw>
<status starttime="20170508 17:25:56.448" status="PASS" endtime="20170508 17:25:56.449"></status>
</kw>
<status starttime="20170508 17:25:56.443" status="PASS" endtime="20170508 17:25:56.449"></status>
</kw>
<status starttime="20170508 17:25:56.442" status="PASS" endtime="20170508 17:25:56.449"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.449">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.524">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.524">${stdout} =  17:54:44 up 25 min,  load average: 1.02, 1.33, 1.54</msg>
<msg level="INFO" timestamp="20170508 17:25:56.524">${stderr} = </msg>
<status starttime="20170508 17:25:56.449" status="PASS" endtime="20170508 17:25:56.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.530" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.529" status="PASS" endtime="20170508 17:25:56.530"></status>
</kw>
<status starttime="20170508 17:25:56.529" status="PASS" endtime="20170508 17:25:56.530"></status>
</kw>
<status starttime="20170508 17:25:56.525" status="PASS" endtime="20170508 17:25:56.530"></status>
</kw>
<status starttime="20170508 17:25:56.441" status="PASS" endtime="20170508 17:25:56.530"></status>
</kw>
<status starttime="20170508 17:25:56.441" status="PASS" endtime="20170508 17:25:56.530"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.533" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.533" status="PASS" endtime="20170508 17:25:56.533"></status>
</kw>
<status starttime="20170508 17:25:56.532" status="PASS" endtime="20170508 17:25:56.533"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.535" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.534" status="PASS" endtime="20170508 17:25:56.535"></status>
</kw>
<status starttime="20170508 17:25:56.534" status="PASS" endtime="20170508 17:25:56.535"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.536" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.536" status="PASS" endtime="20170508 17:25:56.536"></status>
</kw>
<status starttime="20170508 17:25:56.535" status="PASS" endtime="20170508 17:25:56.537"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.538" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.537" status="PASS" endtime="20170508 17:25:56.538"></status>
</kw>
<status starttime="20170508 17:25:56.537" status="PASS" endtime="20170508 17:25:56.538"></status>
</kw>
<status starttime="20170508 17:25:56.532" status="PASS" endtime="20170508 17:25:56.538"></status>
</kw>
<status starttime="20170508 17:25:56.531" status="PASS" endtime="20170508 17:25:56.538"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.539">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.655">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.655">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170508 17:25:56.655">${stderr} = </msg>
<status starttime="20170508 17:25:56.538" status="PASS" endtime="20170508 17:25:56.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.664" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.663" status="PASS" endtime="20170508 17:25:56.664"></status>
</kw>
<status starttime="20170508 17:25:56.662" status="PASS" endtime="20170508 17:25:56.664"></status>
</kw>
<status starttime="20170508 17:25:56.656" status="PASS" endtime="20170508 17:25:56.664"></status>
</kw>
<status starttime="20170508 17:25:56.531" status="PASS" endtime="20170508 17:25:56.664"></status>
</kw>
<status starttime="20170508 17:25:56.530" status="PASS" endtime="20170508 17:25:56.664"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.667" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.667" status="PASS" endtime="20170508 17:25:56.667"></status>
</kw>
<status starttime="20170508 17:25:56.666" status="PASS" endtime="20170508 17:25:56.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.668" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.668" status="PASS" endtime="20170508 17:25:56.668"></status>
</kw>
<status starttime="20170508 17:25:56.667" status="PASS" endtime="20170508 17:25:56.669"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.670" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.669" status="PASS" endtime="20170508 17:25:56.670"></status>
</kw>
<status starttime="20170508 17:25:56.669" status="PASS" endtime="20170508 17:25:56.670"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.671" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.671" status="PASS" endtime="20170508 17:25:56.671"></status>
</kw>
<status starttime="20170508 17:25:56.670" status="PASS" endtime="20170508 17:25:56.671"></status>
</kw>
<status starttime="20170508 17:25:56.666" status="PASS" endtime="20170508 17:25:56.671"></status>
</kw>
<status starttime="20170508 17:25:56.665" status="PASS" endtime="20170508 17:25:56.671"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.672">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.740">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:56.740">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Mon May 8 16:43:13 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170508 17:25:56.741">${stderr} = </msg>
<status starttime="20170508 17:25:56.672" status="PASS" endtime="20170508 17:25:56.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.746" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.746" status="PASS" endtime="20170508 17:25:56.746"></status>
</kw>
<status starttime="20170508 17:25:56.745" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.741" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.664" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.664" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.441" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.439" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<status starttime="20170508 17:25:56.439" status="PASS" endtime="20170508 17:25:56.747"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.748">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170508 17:25:56.748" status="PASS" endtime="20170508 17:25:56.748"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.749">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170508 17:25:56.748" status="PASS" endtime="20170508 17:25:56.749"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.753" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.752" status="PASS" endtime="20170508 17:25:56.753"></status>
</kw>
<status starttime="20170508 17:25:56.752" status="PASS" endtime="20170508 17:25:56.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.754" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.754" status="PASS" endtime="20170508 17:25:56.754"></status>
</kw>
<status starttime="20170508 17:25:56.753" status="PASS" endtime="20170508 17:25:56.754"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.756" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.755" status="PASS" endtime="20170508 17:25:56.756"></status>
</kw>
<status starttime="20170508 17:25:56.755" status="PASS" endtime="20170508 17:25:56.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:56.757" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:56.757" status="PASS" endtime="20170508 17:25:56.757"></status>
</kw>
<status starttime="20170508 17:25:56.756" status="PASS" endtime="20170508 17:25:56.757"></status>
</kw>
<status starttime="20170508 17:25:56.751" status="PASS" endtime="20170508 17:25:56.757"></status>
</kw>
<status starttime="20170508 17:25:56.750" status="PASS" endtime="20170508 17:25:56.757"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:56.758">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170508 17:25:58.015">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:58.016">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<msg level="INFO" timestamp="20170508 17:25:58.016">${stderr} = </msg>
<status starttime="20170508 17:25:56.758" status="PASS" endtime="20170508 17:25:58.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:58.022" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:25:58.021" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:58.021" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:58.016" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.749" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.749" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.749" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.747" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.747" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:56.281" status="PASS" endtime="20170508 17:25:58.022"></status>
</kw>
<status starttime="20170508 17:25:54.616" status="PASS" endtime="20170508 17:25:58.023"></status>
</kw>
<status starttime="20170508 17:25:54.576" status="PASS" endtime="20170508 17:25:58.023"></status>
</kw>
<status starttime="20170508 17:25:54.573" status="PASS" endtime="20170508 17:25:58.023"></status>
</kw>
<status starttime="20170508 17:25:54.573" status="PASS" endtime="20170508 17:25:58.023"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:25:58.024" status="PASS" endtime="20170508 17:25:58.025"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:58.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:25:58.025">${ret_values} = None</msg>
<status starttime="20170508 17:25:58.024" status="PASS" endtime="20170508 17:25:58.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:25:58.025" status="PASS" endtime="20170508 17:25:58.025"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:58.073">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:25:58.073" status="FAIL" endtime="20170508 17:25:58.073"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:58.073">${has_host} = False</msg>
<status starttime="20170508 17:25:58.072" status="PASS" endtime="20170508 17:25:58.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:25:58.074" status="PASS" endtime="20170508 17:25:58.075"></status>
</kw>
<status starttime="20170508 17:25:58.074" status="PASS" endtime="20170508 17:25:58.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:58.076">${port_num} = 22</msg>
<status starttime="20170508 17:25:58.076" status="PASS" endtime="20170508 17:25:58.076"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:58.077">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:25:58.077" status="PASS" endtime="20170508 17:25:58.077"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:58.078">${https_num} = 443</msg>
<status starttime="20170508 17:25:58.077" status="PASS" endtime="20170508 17:25:58.078"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:58.079">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:25:58.078" status="PASS" endtime="20170508 17:25:58.079"></status>
</kw>
<status starttime="20170508 17:25:58.076" status="PASS" endtime="20170508 17:25:58.079"></status>
</kw>
<status starttime="20170508 17:25:58.075" status="PASS" endtime="20170508 17:25:58.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:25:58.080">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:25:58.080" status="FAIL" endtime="20170508 17:25:58.080"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:25:58.080">${has_port} = False</msg>
<status starttime="20170508 17:25:58.079" status="PASS" endtime="20170508 17:25:58.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:25:58.082" status="PASS" endtime="20170508 17:25:58.082"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:25:58.082" status="PASS" endtime="20170508 17:25:58.083"></status>
</kw>
<status starttime="20170508 17:25:58.081" status="PASS" endtime="20170508 17:25:58.083"></status>
</kw>
<status starttime="20170508 17:25:58.080" status="PASS" endtime="20170508 17:25:58.083"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:25:58.083">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:25:59.733">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:25:58.083" status="PASS" endtime="20170508 17:25:59.733"></status>
</kw>
<status starttime="20170508 17:25:58.071" status="PASS" endtime="20170508 17:25:59.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:59.734">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170508 17:25:59.780">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:25:59.780">${core_files} = /tmp/core_phosphor-hwmon-.1599</msg>
<status starttime="20170508 17:25:59.733" status="PASS" endtime="20170508 17:25:59.780"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:25:59.781">@{core_list} = [ /tmp/core_phosphor-hwmon-.1599 ]</msg>
<status starttime="20170508 17:25:59.780" status="PASS" endtime="20170508 17:25:59.781"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170508 17:25:59.782" status="PASS" endtime="20170508 17:25:59.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170508 17:25:59.804" status="PASS" endtime="20170508 17:26:00.439"></status>
</kw>
<status starttime="20170508 17:25:59.803" status="PASS" endtime="20170508 17:26:00.439"></status>
</kw>
<status starttime="20170508 17:25:59.801" status="PASS" endtime="20170508 17:26:00.439"></status>
</kw>
<status starttime="20170508 17:25:59.781" status="PASS" endtime="20170508 17:26:00.439"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1599">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170508 17:26:00.440" status="PASS" endtime="20170508 17:26:00.753"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:00.754">Executing command 'rm /tmp/core_phosphor-hwmon-.1599'.</msg>
<msg level="INFO" timestamp="20170508 17:26:00.800">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:00.800">${stdout} = </msg>
<msg level="INFO" timestamp="20170508 17:26:00.801">${stderr} = </msg>
<status starttime="20170508 17:26:00.754" status="PASS" endtime="20170508 17:26:00.801"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:00.801">Length is 0</msg>
<status starttime="20170508 17:26:00.801" status="PASS" endtime="20170508 17:26:00.801"></status>
</kw>
<status starttime="20170508 17:26:00.753" status="PASS" endtime="20170508 17:26:00.801"></status>
</kw>
<status starttime="20170508 17:26:00.439" status="PASS" endtime="20170508 17:26:00.801"></status>
</kw>
<status starttime="20170508 17:26:00.439" status="PASS" endtime="20170508 17:26:00.801"></status>
</kw>
<status starttime="20170508 17:25:58.071" status="PASS" endtime="20170508 17:26:00.802"></status>
</kw>
<status starttime="20170508 17:25:58.026" status="PASS" endtime="20170508 17:26:00.802"></status>
</kw>
<status starttime="20170508 17:25:58.023" status="PASS" endtime="20170508 17:26:00.802"></status>
</kw>
<status starttime="20170508 17:25:58.023" status="PASS" endtime="20170508 17:26:00.802"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:26:00.803" status="PASS" endtime="20170508 17:26:00.804"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:00.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:00.804">${ret_values} = None</msg>
<status starttime="20170508 17:26:00.803" status="PASS" endtime="20170508 17:26:00.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:26:00.804" status="PASS" endtime="20170508 17:26:00.804"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:26:00.851">Dictionary does not contain key 'host'.</msg>
<status starttime="20170508 17:26:00.851" status="FAIL" endtime="20170508 17:26:00.852"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:00.852">${has_host} = False</msg>
<status starttime="20170508 17:26:00.851" status="PASS" endtime="20170508 17:26:00.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170508 17:26:00.853" status="PASS" endtime="20170508 17:26:00.853"></status>
</kw>
<status starttime="20170508 17:26:00.852" status="PASS" endtime="20170508 17:26:00.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:00.856">${port_num} = 22</msg>
<status starttime="20170508 17:26:00.855" status="PASS" endtime="20170508 17:26:00.856"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:00.857">${SSH_PORT} = 22</msg>
<status starttime="20170508 17:26:00.857" status="PASS" endtime="20170508 17:26:00.857"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:00.858">${https_num} = 443</msg>
<status starttime="20170508 17:26:00.858" status="PASS" endtime="20170508 17:26:00.858"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:00.859">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170508 17:26:00.859" status="PASS" endtime="20170508 17:26:00.859"></status>
</kw>
<status starttime="20170508 17:26:00.855" status="PASS" endtime="20170508 17:26:00.859"></status>
</kw>
<status starttime="20170508 17:26:00.854" status="PASS" endtime="20170508 17:26:00.859"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:26:00.860">Dictionary does not contain key 'port'.</msg>
<status starttime="20170508 17:26:00.860" status="FAIL" endtime="20170508 17:26:00.860"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:00.861">${has_port} = False</msg>
<status starttime="20170508 17:26:00.860" status="PASS" endtime="20170508 17:26:00.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170508 17:26:00.862" status="PASS" endtime="20170508 17:26:00.862"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170508 17:26:00.863" status="PASS" endtime="20170508 17:26:00.863"></status>
</kw>
<status starttime="20170508 17:26:00.862" status="PASS" endtime="20170508 17:26:00.863"></status>
</kw>
<status starttime="20170508 17:26:00.861" status="PASS" endtime="20170508 17:26:00.863"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:00.864">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170508 17:26:02.511">Read output: root@witherspoon:~#</msg>
<status starttime="20170508 17:26:00.863" status="PASS" endtime="20170508 17:26:02.511"></status>
</kw>
<status starttime="20170508 17:26:00.850" status="PASS" endtime="20170508 17:26:02.512"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.512">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170508 17:26:02.512" status="PASS" endtime="20170508 17:26:02.512"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.514">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170508 17:26:02.513" status="PASS" endtime="20170508 17:26:02.514"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.515">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_meminfo.txt</msg>
<status starttime="20170508 17:26:02.514" status="PASS" endtime="20170508 17:26:02.515"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170508 17:26:02.516" status="PASS" endtime="20170508 17:26:02.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.517">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170508 17:26:02.564">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:02.564">${stdout} = MemTotal:         432932 kB
MemFree:          267952 kB
MemAvailable:     309712 kB
Buffers:           10512 kB
Cached:            49872 kB
SwapCached:            0 kB
Active:           115784 kB
Inac...</msg>
<msg level="INFO" timestamp="20170508 17:26:02.564">${stderr} = </msg>
<status starttime="20170508 17:26:02.517" status="PASS" endtime="20170508 17:26:02.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:02.571" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_meminfo.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:02.570" status="PASS" endtime="20170508 17:26:02.571"></status>
</kw>
<status starttime="20170508 17:26:02.569" status="PASS" endtime="20170508 17:26:02.571"></status>
</kw>
<status starttime="20170508 17:26:02.564" status="PASS" endtime="20170508 17:26:02.571"></status>
</kw>
<status starttime="20170508 17:26:02.515" status="PASS" endtime="20170508 17:26:02.571"></status>
</kw>
<status starttime="20170508 17:26:02.514" status="PASS" endtime="20170508 17:26:02.571"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.572">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_journalctl.txt</msg>
<status starttime="20170508 17:26:02.572" status="PASS" endtime="20170508 17:26:02.573"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170508 17:26:02.574" status="PASS" endtime="20170508 17:26:02.574"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:02.575">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.084">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.087">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:20 UTC, end at Thu 2017-04-20 17:54:49 UTC. --
Apr 20 17:29:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:20 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170508 17:26:07.087">${stderr} = </msg>
<status starttime="20170508 17:26:02.575" status="PASS" endtime="20170508 17:26:07.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.099" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_journalctl.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:07.097" status="PASS" endtime="20170508 17:26:07.099"></status>
</kw>
<status starttime="20170508 17:26:07.094" status="PASS" endtime="20170508 17:26:07.100"></status>
</kw>
<status starttime="20170508 17:26:07.088" status="PASS" endtime="20170508 17:26:07.100"></status>
</kw>
<status starttime="20170508 17:26:02.573" status="PASS" endtime="20170508 17:26:07.100"></status>
</kw>
<status starttime="20170508 17:26:02.572" status="PASS" endtime="20170508 17:26:07.100"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.101">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_proc_list.txt</msg>
<status starttime="20170508 17:26:07.100" status="PASS" endtime="20170508 17:26:07.101"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170508 17:26:07.102" status="PASS" endtime="20170508 17:26:07.102"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.103">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.534">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.534">${stdout} = Mem: 165228K used, 267704K free, 14752K shrd, 10512K buff, 49876K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 1.09 1.34 1.54 1/134 2139
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170508 17:26:07.534">${stderr} = </msg>
<status starttime="20170508 17:26:07.102" status="PASS" endtime="20170508 17:26:07.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.540" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_proc_list.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:07.540" status="PASS" endtime="20170508 17:26:07.541"></status>
</kw>
<status starttime="20170508 17:26:07.539" status="PASS" endtime="20170508 17:26:07.541"></status>
</kw>
<status starttime="20170508 17:26:07.535" status="PASS" endtime="20170508 17:26:07.541"></status>
</kw>
<status starttime="20170508 17:26:07.101" status="PASS" endtime="20170508 17:26:07.541"></status>
</kw>
<status starttime="20170508 17:26:07.100" status="PASS" endtime="20170508 17:26:07.541"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.542">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_dmesg.txt</msg>
<status starttime="20170508 17:26:07.541" status="PASS" endtime="20170508 17:26:07.542"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170508 17:26:07.543" status="PASS" endtime="20170508 17:26:07.543"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.544">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.628">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.629">${stdout} = aspeed-smc 1e620000.flash-controller: control register changed to: 00000640
platform 1e620000.flash-controller:flash@0: mx25l25635e (32768 Kbytes)
5 ofpart partitions found on MTD device bmc
Creating ...</msg>
<msg level="INFO" timestamp="20170508 17:26:07.629">${stderr} = </msg>
<status starttime="20170508 17:26:07.543" status="PASS" endtime="20170508 17:26:07.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.637" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_dmesg.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:07.637" status="PASS" endtime="20170508 17:26:07.638"></status>
</kw>
<status starttime="20170508 17:26:07.635" status="PASS" endtime="20170508 17:26:07.638"></status>
</kw>
<status starttime="20170508 17:26:07.629" status="PASS" endtime="20170508 17:26:07.638"></status>
</kw>
<status starttime="20170508 17:26:07.542" status="PASS" endtime="20170508 17:26:07.638"></status>
</kw>
<status starttime="20170508 17:26:07.541" status="PASS" endtime="20170508 17:26:07.638"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.639">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_procinfo.txt</msg>
<status starttime="20170508 17:26:07.638" status="PASS" endtime="20170508 17:26:07.639"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170508 17:26:07.640" status="PASS" endtime="20170508 17:26:07.640"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.640">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.727">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170508 17:26:07.727">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170508 17:26:07.727">${stderr} = </msg>
<status starttime="20170508 17:26:07.640" status="PASS" endtime="20170508 17:26:07.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.736" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_procinfo.txt"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:07.735" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:07.734" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:07.728" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:07.639" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:07.638" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:02.514" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:02.513" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:02.513" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:02.512" status="PASS" endtime="20170508 17:26:07.736"></status>
</kw>
<status starttime="20170508 17:26:00.849" status="PASS" endtime="20170508 17:26:07.737"></status>
</kw>
<status starttime="20170508 17:26:00.805" status="PASS" endtime="20170508 17:26:07.737"></status>
</kw>
<status starttime="20170508 17:26:00.802" status="PASS" endtime="20170508 17:26:07.737"></status>
</kw>
<status starttime="20170508 17:26:00.802" status="PASS" endtime="20170508 17:26:07.737"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:26:07.739" status="PASS" endtime="20170508 17:26:07.739"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:07.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:07.740">${ret_values} = None</msg>
<status starttime="20170508 17:26:07.738" status="PASS" endtime="20170508 17:26:07.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:26:07.740" status="PASS" endtime="20170508 17:26:07.740"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.781">Returning from the enclosing user keyword.</msg>
<status starttime="20170508 17:26:07.781" status="PASS" endtime="20170508 17:26:07.782"></status>
</kw>
<status starttime="20170508 17:26:07.780" status="PASS" endtime="20170508 17:26:07.782"></status>
</kw>
<status starttime="20170508 17:26:07.741" status="PASS" endtime="20170508 17:26:07.782"></status>
</kw>
<status starttime="20170508 17:26:07.737" status="PASS" endtime="20170508 17:26:07.782"></status>
</kw>
<status starttime="20170508 17:26:07.737" status="PASS" endtime="20170508 17:26:07.782"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170508 17:26:07.783" status="PASS" endtime="20170508 17:26:07.784"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:07.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:07.784">${ret_values} = None</msg>
<status starttime="20170508 17:26:07.783" status="PASS" endtime="20170508 17:26:07.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170508 17:26:07.784" status="PASS" endtime="20170508 17:26:07.785"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:07.826">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:07.826" status="PASS" endtime="20170508 17:26:07.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:07.828" status="PASS" endtime="20170508 17:26:07.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.828">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:07.828" status="PASS" endtime="20170508 17:26:07.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:07.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:07.829" status="PASS" endtime="20170508 17:26:07.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:07.835" status="PASS" endtime="20170508 17:26:08.014"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.014">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:08.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:07.829" status="PASS" endtime="20170508 17:26:08.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.015">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.014" status="PASS" endtime="20170508 17:26:08.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.015" status="PASS" endtime="20170508 17:26:08.016"></status>
</kw>
<status starttime="20170508 17:26:07.825" status="PASS" endtime="20170508 17:26:08.016"></status>
</kw>
<status starttime="20170508 17:26:07.825" status="PASS" endtime="20170508 17:26:08.016"></status>
</kw>
<status starttime="20170508 17:26:07.824" status="PASS" endtime="20170508 17:26:08.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.016">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170508 17:26:08.016" status="PASS" endtime="20170508 17:26:08.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:26:08.017" status="PASS" endtime="20170508 17:26:08.017"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.169">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:08.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.017" status="PASS" endtime="20170508 17:26:08.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:26:08.170" status="PASS" endtime="20170508 17:26:08.170"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:07.824" status="PASS" endtime="20170508 17:26:08.170"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.171" status="PASS" endtime="20170508 17:26:08.171"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.171">${status} = True</msg>
<status starttime="20170508 17:26:08.170" status="PASS" endtime="20170508 17:26:08.171"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170508 17:26:08.172" status="PASS" endtime="20170508 17:26:08.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.173">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 f6 a7 6c 00 00 00 04 51 f7 46 57 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710299148, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710302207, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710313437, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:08.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:08.173">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Informational', u'associations': [], u'Timestamp': 1492710313437, u'Message': u'org.open_pow...</msg>
<status starttime="20170508 17:26:08.172" status="PASS" endtime="20170508 17:26:08.173"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.174">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status starttime="20170508 17:26:08.173" status="PASS" endtime="20170508 17:26:08.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.174">${logpath} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel</msg>
<status starttime="20170508 17:26:08.174" status="PASS" endtime="20170508 17:26:08.174"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.175" html="yes">Created file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:08.175" status="PASS" endtime="20170508 17:26:08.175"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.179">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:08.179" status="PASS" endtime="20170508 17:26:08.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.180">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:08.180" status="PASS" endtime="20170508 17:26:08.180"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.181">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:08.180" status="PASS" endtime="20170508 17:26:08.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:08.181" status="PASS" endtime="20170508 17:26:08.182"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:08.183" status="PASS" endtime="20170508 17:26:08.390"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:08.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.182" status="PASS" endtime="20170508 17:26:08.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.390" status="PASS" endtime="20170508 17:26:08.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.391" status="PASS" endtime="20170508 17:26:08.391"></status>
</kw>
<status starttime="20170508 17:26:08.178" status="PASS" endtime="20170508 17:26:08.391"></status>
</kw>
<status starttime="20170508 17:26:08.177" status="PASS" endtime="20170508 17:26:08.391"></status>
</kw>
<status starttime="20170508 17:26:08.177" status="PASS" endtime="20170508 17:26:08.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.392">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170508 17:26:08.392" status="PASS" endtime="20170508 17:26:08.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:26:08.392" status="PASS" endtime="20170508 17:26:08.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.476">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:08.476">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.393" status="PASS" endtime="20170508 17:26:08.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:26:08.476" status="PASS" endtime="20170508 17:26:08.477"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.176" status="PASS" endtime="20170508 17:26:08.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.477" status="PASS" endtime="20170508 17:26:08.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.478">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 f6 a7 6c 00 00 00 04 51 f7 46 57 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:08.478">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:08.478">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 f6 a7 6c 00 00 00 04 51 f7 46 57 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90...</msg>
<status starttime="20170508 17:26:08.478" status="PASS" endtime="20170508 17:26:08.479"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.479">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 f6 a7 6c 00 00 00 04 51 f7 46 57 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status starttime="20170508 17:26:08.176" status="PASS" endtime="20170508 17:26:08.479"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.479">Length is 1</msg>
<msg level="INFO" timestamp="20170508 17:26:08.479">${length} = 1</msg>
<status starttime="20170508 17:26:08.479" status="PASS" endtime="20170508 17:26:08.479"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170508 17:26:08.480" status="PASS" endtime="20170508 17:26:08.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.481" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:08.481" status="PASS" endtime="20170508 17:26:08.481"></status>
</kw>
<status starttime="20170508 17:26:08.480" status="PASS" endtime="20170508 17:26:08.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.483" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:08.482" status="PASS" endtime="20170508 17:26:08.483"></status>
</kw>
<status starttime="20170508 17:26:08.482" status="PASS" endtime="20170508 17:26:08.483"></status>
</kw>
<status starttime="20170508 17:26:08.175" status="PASS" endtime="20170508 17:26:08.483"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.488">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:08.487" status="PASS" endtime="20170508 17:26:08.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:08.489" status="PASS" endtime="20170508 17:26:08.489"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.489">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:08.489" status="PASS" endtime="20170508 17:26:08.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:08.490" status="PASS" endtime="20170508 17:26:08.490"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.669">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:08.491" status="PASS" endtime="20170508 17:26:08.670"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:08.670">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.490" status="PASS" endtime="20170508 17:26:08.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.670">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.670" status="PASS" endtime="20170508 17:26:08.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.671" status="PASS" endtime="20170508 17:26:08.671"></status>
</kw>
<status starttime="20170508 17:26:08.487" status="PASS" endtime="20170508 17:26:08.671"></status>
</kw>
<status starttime="20170508 17:26:08.486" status="PASS" endtime="20170508 17:26:08.671"></status>
</kw>
<status starttime="20170508 17:26:08.485" status="PASS" endtime="20170508 17:26:08.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.672">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170508 17:26:08.672" status="PASS" endtime="20170508 17:26:08.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:26:08.672" status="PASS" endtime="20170508 17:26:08.673"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.764">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:08.764">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.673" status="PASS" endtime="20170508 17:26:08.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:26:08.765" status="PASS" endtime="20170508 17:26:08.765"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.765">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.484" status="PASS" endtime="20170508 17:26:08.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.766" status="PASS" endtime="20170508 17:26:08.766"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.767">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:08.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:08.767">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90...</msg>
<status starttime="20170508 17:26:08.766" status="PASS" endtime="20170508 17:26:08.767"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.767">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f ...</msg>
<status starttime="20170508 17:26:08.483" status="PASS" endtime="20170508 17:26:08.767"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.768">Length is 1</msg>
<msg level="INFO" timestamp="20170508 17:26:08.768">${length} = 1</msg>
<status starttime="20170508 17:26:08.768" status="PASS" endtime="20170508 17:26:08.768"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170508 17:26:08.768" status="PASS" endtime="20170508 17:26:08.769"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.771" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:08.770" status="PASS" endtime="20170508 17:26:08.771"></status>
</kw>
<status starttime="20170508 17:26:08.769" status="PASS" endtime="20170508 17:26:08.771"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.772" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:08.772" status="PASS" endtime="20170508 17:26:08.772"></status>
</kw>
<status starttime="20170508 17:26:08.771" status="PASS" endtime="20170508 17:26:08.772"></status>
</kw>
<status starttime="20170508 17:26:08.483" status="PASS" endtime="20170508 17:26:08.772"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.776">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:08.776" status="PASS" endtime="20170508 17:26:08.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:08.777" status="PASS" endtime="20170508 17:26:08.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.777">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:08.777" status="PASS" endtime="20170508 17:26:08.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.778">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:08.778" status="PASS" endtime="20170508 17:26:08.778"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:08.779" status="PASS" endtime="20170508 17:26:08.957"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:08.957">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:08.957">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.778" status="PASS" endtime="20170508 17:26:08.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.958">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.957" status="PASS" endtime="20170508 17:26:08.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:08.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:08.958" status="PASS" endtime="20170508 17:26:08.959"></status>
</kw>
<status starttime="20170508 17:26:08.775" status="PASS" endtime="20170508 17:26:08.959"></status>
</kw>
<status starttime="20170508 17:26:08.775" status="PASS" endtime="20170508 17:26:08.959"></status>
</kw>
<status starttime="20170508 17:26:08.774" status="PASS" endtime="20170508 17:26:08.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:08.959">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170508 17:26:08.959" status="PASS" endtime="20170508 17:26:08.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170508 17:26:08.960" status="PASS" endtime="20170508 17:26:08.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.045">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:09.045">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.960" status="PASS" endtime="20170508 17:26:09.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170508 17:26:09.045" status="PASS" endtime="20170508 17:26:09.046"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.046">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:08.773" status="PASS" endtime="20170508 17:26:09.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.046" status="PASS" endtime="20170508 17:26:09.047"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.047">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 34 9c df dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 34 a0 01 3a 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 34 a0 12 f7 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 34 a0 46 a8 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 35 cf 24 39 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:09.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:09.047">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90...</msg>
<status starttime="20170508 17:26:09.047" status="PASS" endtime="20170508 17:26:09.047"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.048">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 bc 68 ee 00 00 00 04 c1 be 0b 33 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f ...</msg>
<status starttime="20170508 17:26:08.773" status="PASS" endtime="20170508 17:26:09.048"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.048">Length is 1</msg>
<msg level="INFO" timestamp="20170508 17:26:09.048">${length} = 1</msg>
<status starttime="20170508 17:26:09.048" status="PASS" endtime="20170508 17:26:09.048"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170508 17:26:09.049" status="PASS" endtime="20170508 17:26:09.049"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.050" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:09.050" status="PASS" endtime="20170508 17:26:09.050"></status>
</kw>
<status starttime="20170508 17:26:09.049" status="PASS" endtime="20170508 17:26:09.051"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.052" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel"&gt;/tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/20170508172547599409_esel&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:09.051" status="PASS" endtime="20170508 17:26:09.052"></status>
</kw>
<status starttime="20170508 17:26:09.051" status="PASS" endtime="20170508 17:26:09.052"></status>
</kw>
<status starttime="20170508 17:26:08.773" status="PASS" endtime="20170508 17:26:09.052"></status>
</kw>
<status starttime="20170508 17:26:08.175" status="PASS" endtime="20170508 17:26:09.052"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.057">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:26:09.060">${out} = </msg>
<status starttime="20170508 17:26:09.052" status="PASS" endtime="20170508 17:26:09.060"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:26:09.064">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170508 17:26:09.063" status="FAIL" endtime="20170508 17:26:09.064"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.064">${status} = False</msg>
<status starttime="20170508 17:26:09.062" status="PASS" endtime="20170508 17:26:09.064"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.065">Returning from the enclosing user keyword.</msg>
<status starttime="20170508 17:26:09.065" status="PASS" endtime="20170508 17:26:09.065"></status>
</kw>
<status starttime="20170508 17:26:07.823" status="PASS" endtime="20170508 17:26:09.066"></status>
</kw>
<status starttime="20170508 17:26:07.785" status="PASS" endtime="20170508 17:26:09.066"></status>
</kw>
<status starttime="20170508 17:26:07.782" status="PASS" endtime="20170508 17:26:09.066"></status>
</kw>
<status starttime="20170508 17:26:07.782" status="PASS" endtime="20170508 17:26:09.066"></status>
</kw>
<status starttime="20170508 17:25:49.480" status="PASS" endtime="20170508 17:26:09.066"></status>
</kw>
<status starttime="20170508 17:25:49.478" status="PASS" endtime="20170508 17:26:09.067"></status>
</kw>
<status starttime="20170508 17:25:49.478" status="PASS" endtime="20170508 17:26:09.067"></status>
</kw>
<status starttime="20170508 17:25:49.477" status="PASS" endtime="20170508 17:26:09.067"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170508 17:26:09.067" status="PASS" endtime="20170508 17:26:09.205"></status>
</kw>
<status starttime="20170508 17:25:49.476" status="PASS" endtime="20170508 17:26:09.205"></status>
</kw>
<status starttime="20170508 17:25:44.205" status="PASS" endtime="20170508 17:26:09.206"></status>
</kw>
<status starttime="20170508 17:25:44.204" status="PASS" endtime="20170508 17:26:09.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.212">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:09.212" status="PASS" endtime="20170508 17:26:09.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:09.213" status="PASS" endtime="20170508 17:26:09.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.214">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:09.214" status="PASS" endtime="20170508 17:26:09.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.215">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:09.214" status="PASS" endtime="20170508 17:26:09.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:09.215" status="PASS" endtime="20170508 17:26:09.685"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:09.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.215" status="PASS" endtime="20170508 17:26:09.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.686" status="PASS" endtime="20170508 17:26:09.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.687" status="PASS" endtime="20170508 17:26:09.687"></status>
</kw>
<status starttime="20170508 17:26:09.211" status="PASS" endtime="20170508 17:26:09.687"></status>
</kw>
<status starttime="20170508 17:26:09.210" status="PASS" endtime="20170508 17:26:09.687"></status>
</kw>
<status starttime="20170508 17:26:09.210" status="PASS" endtime="20170508 17:26:09.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.688">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:26:09.688" status="PASS" endtime="20170508 17:26:09.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.690">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:09.689" status="PASS" endtime="20170508 17:26:09.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.692">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:09.691" status="PASS" endtime="20170508 17:26:09.692"></status>
</kw>
<status starttime="20170508 17:26:09.691" status="PASS" endtime="20170508 17:26:09.692"></status>
</kw>
<status starttime="20170508 17:26:09.689" status="PASS" endtime="20170508 17:26:09.692"></status>
</kw>
<status starttime="20170508 17:26:09.688" status="PASS" endtime="20170508 17:26:09.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:09.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.692" status="PASS" endtime="20170508 17:26:09.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.759">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:09.758" status="PASS" endtime="20170508 17:26:09.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.760">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:09.760" status="PASS" endtime="20170508 17:26:09.760"></status>
</kw>
<status starttime="20170508 17:26:09.759" status="PASS" endtime="20170508 17:26:09.760"></status>
</kw>
<status starttime="20170508 17:26:09.758" status="PASS" endtime="20170508 17:26:09.760"></status>
</kw>
<status starttime="20170508 17:26:09.757" status="PASS" endtime="20170508 17:26:09.760"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.209" status="PASS" endtime="20170508 17:26:09.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.761" status="PASS" endtime="20170508 17:26:09.761"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.762">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:09.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:09.762">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:26:09.761" status="PASS" endtime="20170508 17:26:09.762"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.762">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170508 17:26:09.209" status="PASS" endtime="20170508 17:26:09.762"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.762">${host_state} = Quiesced</msg>
<status starttime="20170508 17:26:09.208" status="PASS" endtime="20170508 17:26:09.762"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170508 17:26:09.763" status="PASS" endtime="20170508 17:26:09.764"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.764">${status} = True</msg>
<status starttime="20170508 17:26:09.763" status="PASS" endtime="20170508 17:26:09.764"></status>
</kw>
<status starttime="20170508 17:26:09.208" status="PASS" endtime="20170508 17:26:09.764"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.764">${resp} = True</msg>
<status starttime="20170508 17:26:09.208" status="PASS" endtime="20170508 17:26:09.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.766">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170508 17:26:09.766" status="PASS" endtime="20170508 17:26:09.766"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.767">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170508 17:26:09.767" status="PASS" endtime="20170508 17:26:09.767"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.770">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:09.770" status="PASS" endtime="20170508 17:26:09.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:09.771" status="PASS" endtime="20170508 17:26:09.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.772">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:09.771" status="PASS" endtime="20170508 17:26:09.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.773">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:09.772" status="PASS" endtime="20170508 17:26:09.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:09.774" status="PASS" endtime="20170508 17:26:09.951"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:09.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:09.951">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.773" status="PASS" endtime="20170508 17:26:09.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.952" status="PASS" endtime="20170508 17:26:09.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:09.952" status="PASS" endtime="20170508 17:26:09.953"></status>
</kw>
<status starttime="20170508 17:26:09.769" status="PASS" endtime="20170508 17:26:09.953"></status>
</kw>
<status starttime="20170508 17:26:09.769" status="PASS" endtime="20170508 17:26:09.953"></status>
</kw>
<status starttime="20170508 17:26:09.768" status="PASS" endtime="20170508 17:26:09.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.954">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170508 17:26:09.953" status="PASS" endtime="20170508 17:26:09.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:09.954" status="PASS" endtime="20170508 17:26:09.954"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170508 17:26:09.955" status="PASS" endtime="20170508 17:26:09.955"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:09.956">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170508 17:26:09.956" status="PASS" endtime="20170508 17:26:09.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:09.957">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170508 17:26:09.957" status="PASS" endtime="20170508 17:26:09.957"></status>
</kw>
<status starttime="20170508 17:26:09.957" status="PASS" endtime="20170508 17:26:09.958"></status>
</kw>
<status starttime="20170508 17:26:09.955" status="PASS" endtime="20170508 17:26:09.958"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.523">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170508 17:26:10.523">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.958" status="PASS" endtime="20170508 17:26:10.523"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.525">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:10.524" status="PASS" endtime="20170508 17:26:10.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:10.526">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:10.526" status="PASS" endtime="20170508 17:26:10.526"></status>
</kw>
<status starttime="20170508 17:26:10.525" status="PASS" endtime="20170508 17:26:10.526"></status>
</kw>
<status starttime="20170508 17:26:10.523" status="PASS" endtime="20170508 17:26:10.526"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:10.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:09.767" status="PASS" endtime="20170508 17:26:10.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:10.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:10.527" status="PASS" endtime="20170508 17:26:10.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.528">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:10.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:10.528">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:26:10.527" status="PASS" endtime="20170508 17:26:10.528"></status>
</kw>
<status starttime="20170508 17:26:09.766" status="PASS" endtime="20170508 17:26:10.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170508 17:26:10.528" status="PASS" endtime="20170508 17:26:10.529"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:10.533">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:10.533" status="PASS" endtime="20170508 17:26:10.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.534">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:10.534" status="PASS" endtime="20170508 17:26:10.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.535">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:10.535" status="PASS" endtime="20170508 17:26:10.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:10.536">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:10.535" status="PASS" endtime="20170508 17:26:10.536"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:11.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:10.536" status="PASS" endtime="20170508 17:26:11.492"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:11.492">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:11.492">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:10.536" status="PASS" endtime="20170508 17:26:11.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:11.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:11.492" status="PASS" endtime="20170508 17:26:11.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:11.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:11.493" status="PASS" endtime="20170508 17:26:11.494"></status>
</kw>
<status starttime="20170508 17:26:10.532" status="PASS" endtime="20170508 17:26:11.494"></status>
</kw>
<status starttime="20170508 17:26:10.532" status="PASS" endtime="20170508 17:26:11.494"></status>
</kw>
<status starttime="20170508 17:26:10.531" status="PASS" endtime="20170508 17:26:11.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:11.495">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:26:11.494" status="PASS" endtime="20170508 17:26:11.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:11.498">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:11.497" status="PASS" endtime="20170508 17:26:11.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:11.499">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:11.499" status="PASS" endtime="20170508 17:26:11.499"></status>
</kw>
<status starttime="20170508 17:26:11.498" status="PASS" endtime="20170508 17:26:11.499"></status>
</kw>
<status starttime="20170508 17:26:11.496" status="PASS" endtime="20170508 17:26:11.499"></status>
</kw>
<status starttime="20170508 17:26:11.495" status="PASS" endtime="20170508 17:26:11.499"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:12.137">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:12.137">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:11.500" status="PASS" endtime="20170508 17:26:12.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:12.139">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:12.139" status="PASS" endtime="20170508 17:26:12.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:12.140">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:12.140" status="PASS" endtime="20170508 17:26:12.140"></status>
</kw>
<status starttime="20170508 17:26:12.140" status="PASS" endtime="20170508 17:26:12.141"></status>
</kw>
<status starttime="20170508 17:26:12.138" status="PASS" endtime="20170508 17:26:12.141"></status>
</kw>
<status starttime="20170508 17:26:12.138" status="PASS" endtime="20170508 17:26:12.141"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:12.141">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:10.531" status="PASS" endtime="20170508 17:26:12.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:12.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:12.141" status="PASS" endtime="20170508 17:26:12.142"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:12.142">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:12.142">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:12.142">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:26:12.142" status="PASS" endtime="20170508 17:26:12.142"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:12.143">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170508 17:26:10.530" status="PASS" endtime="20170508 17:26:12.143"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:12.143">${host_state} = Quiesced</msg>
<status starttime="20170508 17:26:10.530" status="PASS" endtime="20170508 17:26:12.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170508 17:26:12.144">Off != Quiesced</msg>
<status starttime="20170508 17:26:12.143" status="FAIL" endtime="20170508 17:26:12.144"></status>
</kw>
<status starttime="20170508 17:26:10.529" status="FAIL" endtime="20170508 17:26:12.144"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:22.150">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170508 17:26:22.149" status="PASS" endtime="20170508 17:26:22.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:22.151">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170508 17:26:22.150" status="PASS" endtime="20170508 17:26:22.151"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:22.151">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170508 17:26:22.151" status="PASS" endtime="20170508 17:26:22.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:22.152">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170508 17:26:22.152" status="PASS" endtime="20170508 17:26:22.152"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:22.711">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170508 17:26:22.153" status="PASS" endtime="20170508 17:26:22.711"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:22.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170508 17:26:22.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:22.152" status="PASS" endtime="20170508 17:26:22.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:22.712">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:22.712" status="PASS" endtime="20170508 17:26:22.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:22.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:22.713" status="PASS" endtime="20170508 17:26:22.713"></status>
</kw>
<status starttime="20170508 17:26:22.148" status="PASS" endtime="20170508 17:26:22.713"></status>
</kw>
<status starttime="20170508 17:26:22.148" status="PASS" endtime="20170508 17:26:22.713"></status>
</kw>
<status starttime="20170508 17:26:22.147" status="PASS" endtime="20170508 17:26:22.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:22.714">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170508 17:26:22.714" status="PASS" endtime="20170508 17:26:22.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:22.717">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:22.716" status="PASS" endtime="20170508 17:26:22.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:22.718">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170508 17:26:22.718" status="PASS" endtime="20170508 17:26:22.718"></status>
</kw>
<status starttime="20170508 17:26:22.717" status="PASS" endtime="20170508 17:26:22.718"></status>
</kw>
<status starttime="20170508 17:26:22.715" status="PASS" endtime="20170508 17:26:22.718"></status>
</kw>
<status starttime="20170508 17:26:22.715" status="PASS" endtime="20170508 17:26:22.718"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.522">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170508 17:26:28.522">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:22.719" status="PASS" endtime="20170508 17:26:28.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.524">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:28.524" status="PASS" endtime="20170508 17:26:28.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.526">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170508 17:26:28.525" status="PASS" endtime="20170508 17:26:28.526"></status>
</kw>
<status starttime="20170508 17:26:28.525" status="PASS" endtime="20170508 17:26:28.526"></status>
</kw>
<status starttime="20170508 17:26:28.523" status="PASS" endtime="20170508 17:26:28.526"></status>
</kw>
<status starttime="20170508 17:26:28.523" status="PASS" endtime="20170508 17:26:28.526"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170508 17:26:22.146" status="PASS" endtime="20170508 17:26:28.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170508 17:26:28.527" status="PASS" endtime="20170508 17:26:28.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.528">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170508 17:26:28.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170508 17:26:28.528">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170508 17:26:28.528" status="PASS" endtime="20170508 17:26:28.528"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.529">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170508 17:26:22.146" status="PASS" endtime="20170508 17:26:28.529"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.529">${host_state} = Off</msg>
<status starttime="20170508 17:26:22.145" status="PASS" endtime="20170508 17:26:28.529"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170508 17:26:28.530" status="PASS" endtime="20170508 17:26:28.530"></status>
</kw>
<status starttime="20170508 17:26:22.145" status="PASS" endtime="20170508 17:26:28.530"></status>
</kw>
<status starttime="20170508 17:26:10.529" status="PASS" endtime="20170508 17:26:28.530"></status>
</kw>
<status starttime="20170508 17:26:09.765" status="PASS" endtime="20170508 17:26:28.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.531">HOST is recovered from quiesced state</msg>
<status starttime="20170508 17:26:28.531" status="PASS" endtime="20170508 17:26:28.531"></status>
</kw>
<status starttime="20170508 17:26:09.765" status="PASS" endtime="20170508 17:26:28.531"></status>
</kw>
<status starttime="20170508 17:26:09.764" status="PASS" endtime="20170508 17:26:28.531"></status>
</kw>
<status starttime="20170508 17:26:09.207" status="PASS" endtime="20170508 17:26:28.531"></status>
</kw>
<status starttime="20170508 17:26:09.206" status="PASS" endtime="20170508 17:26:28.532"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.541">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170508 17:26:28.532" status="PASS" endtime="20170508 17:26:28.541"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.541">${FFDC_DIR_PATH} = /tmp/root/13223/obmc-robot/logs/20170508172547599409_TestsTestBasicPoweron/20170508172547599409_PowerOnTest/</msg>
<status starttime="20170508 17:26:28.541" status="PASS" endtime="20170508 17:26:28.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170508 17:26:28.542" status="PASS" endtime="20170508 17:26:28.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170508 17:26:28.542" status="PASS" endtime="20170508 17:26:28.542"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.543" html="yes">Directory '&lt;a href="file:///tmp/root/13223/obmc-robot/logs"&gt;/tmp/root/13223/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170508 17:26:28.543" status="PASS" endtime="20170508 17:26:28.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.544" html="yes">File '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13223/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170508 17:26:28.544" status="PASS" endtime="20170508 17:26:28.544"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.544">${exist} = True</msg>
<status starttime="20170508 17:26:28.543" status="PASS" endtime="20170508 17:26:28.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170508 17:26:28.544" status="PASS" endtime="20170508 17:26:28.545"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170508 17:26:28.545" status="PASS" endtime="20170508 17:26:28.545"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.546">${cur_time} = 2017-05-08 17:26:28:546140</msg>
<status starttime="20170508 17:26:28.546" status="PASS" endtime="20170508 17:26:28.546"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.547">${cur_time} = 20170508172628546140</msg>
<status starttime="20170508 17:26:28.547" status="PASS" endtime="20170508 17:26:28.547"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.547">${cur_time} = 20170508172628546140</msg>
<status starttime="20170508 17:26:28.545" status="PASS" endtime="20170508 17:26:28.547"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.548" html="yes">Appended to file '&lt;a href="file:///tmp/root/13223/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13223/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170508 17:26:28.547" status="PASS" endtime="20170508 17:26:28.548"></status>
</kw>
<status starttime="20170508 17:26:28.532" status="PASS" endtime="20170508 17:26:28.548"></status>
</kw>
<status starttime="20170508 17:25:43.881" status="PASS" endtime="20170508 17:26:28.549"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.550">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:26:28.550" status="PASS" endtime="20170508 17:26:28.550"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.551">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:26:28.550" status="PASS" endtime="20170508 17:26:28.551"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.551">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170508 17:26:28.549" status="PASS" endtime="20170508 17:26:28.551"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.552">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170508 17:26:28.552" status="PASS" endtime="20170508 17:26:28.552"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:26:28.552" status="PASS" endtime="20170508 17:26:28.559"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.564">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:26:28.569">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:26:28.569">${output} = /tmp/root/13223/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170508 17:26:28.560" status="PASS" endtime="20170508 17:26:28.569"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170508 17:26:28.571" status="PASS" endtime="20170508 17:26:28.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170508 17:26:28.579" status="PASS" endtime="20170508 17:26:28.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.581">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:26:28.580" status="PASS" endtime="20170508 17:26:28.581"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.581">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170508 17:26:28.551" status="PASS" endtime="20170508 17:26:28.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.582">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170508 17:26:28.581" status="PASS" endtime="20170508 17:26:28.582"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:26:28.582" status="PASS" endtime="20170508 17:26:28.591"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.595">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:26:28.607">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:26:28.607">${os_con_pid} = 175</msg>
<status starttime="20170508 17:26:28.591" status="PASS" endtime="20170508 17:26:28.607"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170508 17:26:28.610" status="PASS" endtime="20170508 17:26:28.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.621">${cmd_buf} = kill -9 175</msg>
<status starttime="20170508 17:26:28.621" status="PASS" endtime="20170508 17:26:28.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:26:28.622" status="PASS" endtime="20170508 17:26:28.634"></status>
</kw>
<status starttime="20170508 17:26:28.622" status="PASS" endtime="20170508 17:26:28.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.640">Running command 'kill -9 175 2&gt;&amp;1'.</msg>
<status starttime="20170508 17:26:28.635" status="PASS" endtime="20170508 17:26:28.643"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.644">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:26:28.644">${output} = </msg>
<status starttime="20170508 17:26:28.634" status="PASS" endtime="20170508 17:26:28.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170508 17:26:28.648" status="PASS" endtime="20170508 17:26:28.656"></status>
</kw>
<status starttime="20170508 17:26:28.646" status="PASS" endtime="20170508 17:26:28.656"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.657">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170508 17:26:28.656" status="PASS" endtime="20170508 17:26:28.657"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170508 17:26:28.657" status="PASS" endtime="20170508 17:26:28.664"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170508 17:26:28.670">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170508 17:26:28.674">${rc} = 0</msg>
<msg level="INFO" timestamp="20170508 17:26:28.674">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170508 17:26:28.664" status="PASS" endtime="20170508 17:26:28.674"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170508 17:26:28.676" status="PASS" endtime="20170508 17:26:28.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170508 17:26:28.686" status="PASS" endtime="20170508 17:26:28.686"></status>
</kw>
<msg level="INFO" timestamp="20170508 17:26:28.687">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170508 17:26:28.549" status="PASS" endtime="20170508 17:26:28.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170508 17:26:28.688">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37948|secure|SecureROM invalid - skipping functionality
 12.03359|ISTEP  6. 5
 12.71752|ISTEP  6. 6
 12.71817|ISTEP  6. 7
 13.48485|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.48486|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.78929|ISTEP  6. 8
 13.84134|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.84135|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.84152|ISTEP  6. 9
 14.47705|ISTEP  6.10
 14.52794|ISTEP  6.11
 14.52875|ISTEP  6.12
 14.78365|ISTEP  7. 2
 16.80109|ISTEP  7. 3
 17.44684|ISTEP  7. 4
 20.26465|ISTEP  7. 5
 20.34325|ISTEP  8. 1
 20.77316|ISTEP  8. 2
 20.82638|ISTEP  8. 3
 20.90427|ISTEP  8. 4
 31.28546|ISTEP  8. 5
 31.31280|ISTEP  8. 6
 31.31562|ISTEP  8. 7
 31.50221|ISTEP  8. 8
 31.55267|ISTEP  8. 9
 31.68064|ISTEP  8.10
 31.68266|ISTEP  8.11
 31.68369|ISTEP  8.12
 32.15805|ISTEP  8.13
 35.85531|ISTEP  8.14
 35.85767|ISTEP  8.15
 35.85930|ISTEP  8.16
 36.12081|ISTEP  8.17
 36.41515|================================================
 36.41516|Error reported by istep (0x1700) PLID 0x9000000E
 36.44057|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.44058|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.44059|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.44060|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.44061|  UserData2  Target PEC HUID : 0x0000000000000000
 36.46755|------------------------------------------------
 36.46756|  Callout type             : Procedure Callout
 36.46757|  Procedure                : EPUB_PRC_HB_CODE
 36.46758|  Priority                 : SRCI_PRIORITY_HIGH
 36.46759|------------------------------------------------
 36.46759|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.46760|================================================
 37.47097|ISTEP  8.18
 37.47429|ISTEP  8.19
 37.48935|ISTEP  8.20
 37.49747|ISTEP  9. 1
 37.62347|ISTEP  9. 2
 38.73581|ISTEP  9. 3
 38.76164|ISTEP  9. 4
 39.10331|ISTEP  9. 5
 39.12930|ISTEP  9. 6
 39.18225|ISTEP  9. 7
 39.27172|ISTEP  9. 8
 39.30257|ISTEP 10. 1
 39.88029|ISTEP 10. 2
 39.97886|================================================
 39.97887|Error reported by i2c (0x0700) PLID 0x9000000F
 40.00455|  Timed out waiting for command complete.
 40.00456|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.00456|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.03031|  UserData1  Status Register Value : 0x0001000000050001
 40.03032|  UserData2  Master Target : 0x0200ffff0190004d
 40.03033|------------------------------------------------
 40.03033|  Callout type             : Hardware Callout
 40.03034|  CPU id                   : 6
 40.03035|  Target                   : Physical:/Sys0/Node0/Proc1
 40.03036|  Deconfig State           : NO_DECONFIG
 40.03037|  GARD Error Type          : GARD_NULL
 40.03038|  Priority                 : SRCI_PRIORITY_HIGH
 40.03039|------------------------------------------------
 40.03040|  Callout type             : Procedure Callout
 40.03041|  Procedure                : EPUB_PRC_HB_CODE
 40.03042|  Priority                 : SRCI_PRIORITY_LOW
 40.03043|------------------------------------------------
 40.03043|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.03044|================================================
 43.57974|ISTEP 10. 3
 43.88543|ISTEP 11. 1
 43.96314|ISTEP 12. 1
 44.01530|ISTEP 13. 1
 45.13897|ISTEP 13. 2
 45.37164|ISTEP 13. 3
 45.68458|ISTEP 13. 4
 45.70857|ISTEP 13. 6
 45.92083|ISTEP 13. 7
 45.92232|ISTEP 13. 8
 48.19655|ISTEP 13. 9
 48.74858|ISTEP 13.10
 50.14681|ISTEP 13.11
 51.01515|================================================
 51.01516|Error reported by hwpf (0x0900) PLID 0x90000010
 51.04107|  HW Procedure generated error. See User Data.
 51.04107|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 51.04108|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 51.04109|  UserData1  RC value from HWP : 0x00000000004ecd25
 51.04110|  UserData2  &lt;unused&gt; : 0x0000000000000000
 51.04111|------------------------------------------------
 51.11801|  HwpReturnCode              : RC_MSS_DRAMINIT_TRAINING_MULTIPLE_ERRORS
 51.11804|  HWP Error description      : Multiple training stesp failed for a given position within this calibration.
 51.11805|------------------------------------------------
 51.22189|  Register FFDC              : REG_FFDC_MSS_DRAMINIT_TRAINING_FAILURE_DISABLE_REGS
 51.27288|  Chip Position              : 6
 51.27290|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP0_P0_0
 51.29888|    00000000 00000000 
 51.29890|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP0_P0_1
 51.29891|    00000000 00000000 
 51.29892|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP0_P0_2
 51.29893|    00000000 0000FF00 
 51.29895|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP0_P0_3
 51.29896|    00000000 00000000 
 51.29897|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP0_P0_4
 51.29898|    00000000 00000000 
 51.29899|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP1_P0_0
 51.29903|    00000000 00000000 
 51.29904|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP1_P0_1
 51.29905|    00000000 00000000 
 51.29907|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP1_P0_2
 51.29908|    00000000 00000000 
 51.29909|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP1_P0_3
 51.29910|    00000000 00000000 
 51.29912|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP1_P0_4
 51.29913|    00000000 00000000 
 51.29915|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP2_P0_0
 51.29916|    00000000 00000000 
 51.29917|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP2_P0_1
 51.29918|    00000000 00000000 
 51.29920|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP2_P0_2
 51.29921|    00000000 00000000 
 51.32520|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP2_P0_3
 51.32521|    00000000 00000000 
 51.32523|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP2_P0_4
 51.32524|    00000000 00000000 
 51.32525|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP3_P0_0
 51.32526|    00000000 00000000 
 51.32528|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP3_P0_1
 51.32529|    00000000 00000000 
 51.32530|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP3_P0_2
 51.32532|    00000000 00000000 
 51.32533|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP3_P0_3
 51.32534|    00000000 00000000 
 51.32536|  SCOM Register              : MCA_DDRPHY_DP16_DATA_BIT_DISABLE0_RP3_P0_4
 51.32537|    00000000 00000000 
 51.35151|------------------------------------------------
 51.40445|  Register FFDC              : REG_FFDC_MSS_DRAMINIT_TRAINING_ERROR_STATUS
 51.40446|  Chip Position              : 6
 51.40447|  SCOM Register              : MCA_DDRPHY_PC_INIT_CAL_ERROR_P0
 51.40448|    00000000 00000000 
 51.40449|  SCOM Register              : MCA_DDRPHY_DP16_RD_STATUS0_P0_0
 51.40449|    00000000 00000000 
 51.40450|  SCOM Register              : MCA_DDRPHY_DP16_RD_STATUS0_P0_1
 51.40451|    00000000 00000000 
 51.40452|  SCOM Register              : MCA_DDRPHY_DP16_RD_STATUS0_P0_2
 51.40453|    00000000 00001980 
 51.40454|  SCOM Register              : MCA_DDRPHY_DP16_RD_STATUS0_P0_3
 51.40455|    00000000 00000000 
 51.40455|  SCOM Register              : MCA_DDRPHY_DP16_RD_STATUS0_P0_4
 51.40456|    00000000 00000000 
 51.40457|  SCOM Register              : MCA_DDRPHY_DP16_WR_ERROR0_P0_0
 51.40458|    00000000 00000000 
 51.40459|  SCOM Register              : MCA_DDRPHY_DP16_WR_ERROR0_P0_1
 51.40460|    00000000 00000000 
 51.40460|  SCOM Register              : MCA_DDRPHY_DP16_WR_ERROR0_P0_2
 51.40461|    00000000 00000080 
 51.40462|  SCOM Register              : MCA_DDRPHY_DP16_WR_ERROR0_P0_3
 51.40463|    00000000 00000000 
 51.40464|  SCOM Register              : MCA_DDRPHY_DP16_WR_ERROR0_P0_4
 51.40465|    00000000 00000000 
 51.40466|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR0_P0_0
 51.40467|    00000000 00000212 
 51.40469|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR0_P0_1
 51.40470|    00000000 0000120A 
 51.40471|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR0_P0_2
 51.40472|    00000000 00000202 
 51.40473|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR0_P0_3
 51.40474|    00000000 00000206 
 51.40475|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR0_P0_4
 51.40476|    00000000 00000206 
 51.40477|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR1_P0_0
 51.40478|    00000000 00000212 
 51.40480|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR1_P0_1
 51.40481|    00000000 00001212 
 51.40482|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR1_P0_2
 51.40483|    00000000 00000202 
 51.40484|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR1_P0_3
 51.40485|    00000000 00000202 
 51.40486|  SCOM Register              : MCA_DDRPHY_DP16_WR_VREF_ERROR1_P0_4
 51.40487|    00000000 00000202 
 51.40488|------------------------------------------------
 51.45679|  HwpReturnCode              : RC_MSS_DRAMINIT_TRAINING_MULTIPLE_ERRORS
 51.45680|  FFDC                       : FAILED_STEPS
 51.45681|    00000000 00000508 
 51.45682|------------------------------------------------
 51.48291|  HwpReturnCode              : RC_MSS_DRAMINIT_TRAINING_MULTIPLE_ERRORS
 51.48292|  FFDC                       : PORT_POSITION
 51.48293|    00000006 
 51.48294|------------------------------------------------
 51.53507|  HwpReturnCode              : RC_MSS_DRAMINIT_TRAINING_MULTIPLE_ERRORS
 51.53508|  FFDC                       : RANKGROUP_POSITION
 51.53509|    00000000 00000008 
 51.56096|------------------------------------------------
 51.56097|  Callout type             : Procedure Callout
 51.56098|  Procedure                : EPUB_PRC_HB_CODE
 51.56099|  Priority                 : SRCI_PRIORITY_HIGH
 51.56099|------------------------------------------------
 51.56100|  Callout type             : Hardware Callout
 51.56101|  CPU id                   : 6
 51.56103|  Target                   : Physical:/Sys0/Node0/DIMM6
 51.56104|  Deconfig State           : NO_DECONFIG
 51.56105|  GARD Error Type          : GARD_NULL
 51.56105|  Priority                 : SRCI_PRIORITY_LOW
 51.56106|------------------------------------------------
 51.56107|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 51.56108|================================================
 52.08204|ISTEP 13.12
 52.08440|ISTEP 13.13
 52.30698|ISTEP 14. 1
100.81201|ISTEP 14. 2
100.86756|ISTEP 14. 3
100.97644|ISTEP 14. 4
100.97889|ISTEP 14. 5
101.29347|ISTEP 14. 6
101.34732|ISTEP 14. 7
101.37822|System shutting down with error status 0x9000001B
101.37825|================================================
101.37826|Error reported by initservice (0x0500) PLID 0x9000001B
101.37827|  Initialization Service launched a task and the task returned an error.
101.37828|  ModuleId   0x01 BASE_INITSVC_MOD_ID
101.37829|  ReasonCode 0x0505 WAIT_TASK_FAILED</msg>
<status starttime="20170508 17:26:28.687" status="PASS" endtime="20170508 17:26:28.688"></status>
</kw>
<status starttime="20170508 17:25:43.881" status="PASS" endtime="20170508 17:26:28.688"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170508 17:14:54.843" critical="yes" status="FAIL" endtime="20170508 17:26:28.689">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170508 17:14:54.812" status="FAIL" endtime="20170508 17:26:28.690"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170508 17:14:47.191" status="FAIL" endtime="20170508 17:26:28.694"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
