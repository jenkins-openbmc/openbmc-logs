<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170503 11:53:24.340" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/root/13444/obmc-robot/tests" name="Tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:24.867">Dictionary does not contain key 'host'.</msg>
<status endtime="20170503 11:53:24.867" starttime="20170503 11:53:24.867" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:24.867">${has_host} = False</msg>
<status endtime="20170503 11:53:24.867" starttime="20170503 11:53:24.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170503 11:53:24.868" starttime="20170503 11:53:24.868" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:24.868" starttime="20170503 11:53:24.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:24.870">${port_num} = 22</msg>
<status endtime="20170503 11:53:24.870" starttime="20170503 11:53:24.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:24.870">${SSH_PORT} = 22</msg>
<status endtime="20170503 11:53:24.870" starttime="20170503 11:53:24.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:24.871">${https_num} = 443</msg>
<status endtime="20170503 11:53:24.871" starttime="20170503 11:53:24.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:24.871">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170503 11:53:24.872" starttime="20170503 11:53:24.871" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:24.872" starttime="20170503 11:53:24.869" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:24.872" starttime="20170503 11:53:24.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:24.873">Dictionary does not contain key 'port'.</msg>
<status endtime="20170503 11:53:24.873" starttime="20170503 11:53:24.872" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:24.873">${has_port} = False</msg>
<status endtime="20170503 11:53:24.873" starttime="20170503 11:53:24.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170503 11:53:24.874" starttime="20170503 11:53:24.874" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170503 11:53:24.875" starttime="20170503 11:53:24.875" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:24.875" starttime="20170503 11:53:24.874" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:24.875" starttime="20170503 11:53:24.873" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:24.876">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170503 11:53:26.804">Read output: root@witherspoon:~#</msg>
<status endtime="20170503 11:53:26.804" starttime="20170503 11:53:24.875" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:26.804" starttime="20170503 11:53:24.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:26.806">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170503 11:53:26.872">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170503 11:53:26.872">${output} = VERSION_ID="v1.99.4-43-gf936191"</msg>
<msg level="INFO" timestamp="20170503 11:53:26.872">${stderr} = </msg>
<status endtime="20170503 11:53:26.872" starttime="20170503 11:53:26.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:26.873">Length is 0</msg>
<status endtime="20170503 11:53:26.873" starttime="20170503 11:53:26.873" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:26.873">VERSION_ID="v1.99.4-43-gf936191"</msg>
<status endtime="20170503 11:53:26.873" starttime="20170503 11:53:26.873" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:26.874" starttime="20170503 11:53:26.805" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:26.874" starttime="20170503 11:53:26.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:26.875">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170503 11:53:27.012">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170503 11:53:27.012">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170503 11:53:27.012">${stderr} = </msg>
<status endtime="20170503 11:53:27.012" starttime="20170503 11:53:26.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:27.013">Length is 0</msg>
<status endtime="20170503 11:53:27.013" starttime="20170503 11:53:27.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:27.013">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170503 11:53:27.013" starttime="20170503 11:53:26.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:27.013">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170503 11:53:27.014" starttime="20170503 11:53:27.013" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.015" starttime="20170503 11:53:26.874" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.015" starttime="20170503 11:53:26.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:27.017">Dictionary does not contain key 'host'.</msg>
<status endtime="20170503 11:53:27.017" starttime="20170503 11:53:27.017" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:27.017">${has_host} = False</msg>
<status endtime="20170503 11:53:27.017" starttime="20170503 11:53:27.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170503 11:53:27.018" starttime="20170503 11:53:27.018" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.018" starttime="20170503 11:53:27.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:27.020">${port_num} = 22</msg>
<status endtime="20170503 11:53:27.020" starttime="20170503 11:53:27.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:27.020">${SSH_PORT} = 22</msg>
<status endtime="20170503 11:53:27.020" starttime="20170503 11:53:27.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:27.021">${https_num} = 443</msg>
<status endtime="20170503 11:53:27.021" starttime="20170503 11:53:27.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:27.022">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170503 11:53:27.022" starttime="20170503 11:53:27.021" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.022" starttime="20170503 11:53:27.019" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.022" starttime="20170503 11:53:27.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:27.023">Dictionary does not contain key 'port'.</msg>
<status endtime="20170503 11:53:27.023" starttime="20170503 11:53:27.022" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:27.023">${has_port} = False</msg>
<status endtime="20170503 11:53:27.023" starttime="20170503 11:53:27.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170503 11:53:27.024" starttime="20170503 11:53:27.024" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170503 11:53:27.025" starttime="20170503 11:53:27.025" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.025" starttime="20170503 11:53:27.024" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:27.025" starttime="20170503 11:53:27.023" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:27.026">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170503 11:53:28.672">Read output: root@witherspoon:~#</msg>
<status endtime="20170503 11:53:28.673" starttime="20170503 11:53:27.025" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.673" starttime="20170503 11:53:27.016" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:28.673">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170503 11:53:28.740">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170503 11:53:28.740">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170503 11:53:28.740">${stderr} = </msg>
<status endtime="20170503 11:53:28.740" starttime="20170503 11:53:28.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:28.741">Length is 0</msg>
<status endtime="20170503 11:53:28.741" starttime="20170503 11:53:28.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:28.741">Length is 11</msg>
<status endtime="20170503 11:53:28.741" starttime="20170503 11:53:28.741" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:28.742">${bmc_model} = Witherspoon</msg>
<status endtime="20170503 11:53:28.742" starttime="20170503 11:53:27.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:28.742">BMC Model=Witherspoon</msg>
<status endtime="20170503 11:53:28.742" starttime="20170503 11:53:28.742" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.742" starttime="20170503 11:53:27.015" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.742" starttime="20170503 11:53:27.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:28.744">Dictionary does not contain key 'host'.</msg>
<status endtime="20170503 11:53:28.744" starttime="20170503 11:53:28.744" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:28.744">${has_host} = False</msg>
<status endtime="20170503 11:53:28.744" starttime="20170503 11:53:28.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170503 11:53:28.745" starttime="20170503 11:53:28.745" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.746" starttime="20170503 11:53:28.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:28.747">${port_num} = 22</msg>
<status endtime="20170503 11:53:28.747" starttime="20170503 11:53:28.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:28.748">${SSH_PORT} = 22</msg>
<status endtime="20170503 11:53:28.748" starttime="20170503 11:53:28.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:28.748">${https_num} = 443</msg>
<status endtime="20170503 11:53:28.748" starttime="20170503 11:53:28.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:28.749">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170503 11:53:28.749" starttime="20170503 11:53:28.749" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.749" starttime="20170503 11:53:28.746" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.749" starttime="20170503 11:53:28.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:28.750">Dictionary does not contain key 'port'.</msg>
<status endtime="20170503 11:53:28.750" starttime="20170503 11:53:28.750" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:28.750">${has_port} = False</msg>
<status endtime="20170503 11:53:28.750" starttime="20170503 11:53:28.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170503 11:53:28.752" starttime="20170503 11:53:28.752" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170503 11:53:28.753" starttime="20170503 11:53:28.752" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.753" starttime="20170503 11:53:28.751" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:28.753" starttime="20170503 11:53:28.751" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:28.753">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170503 11:53:30.400">Read output: root@witherspoon:~#</msg>
<status endtime="20170503 11:53:30.400" starttime="20170503 11:53:28.753" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.401" starttime="20170503 11:53:28.743" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.402">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170503 11:53:30.479">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170503 11:53:30.479">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170503 11:53:30.479">${stderr} = </msg>
<status endtime="20170503 11:53:30.479" starttime="20170503 11:53:30.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.479">Length is 0</msg>
<status endtime="20170503 11:53:30.479" starttime="20170503 11:53:30.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:30.479">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170503 11:53:30.480" starttime="20170503 11:53:30.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170503 11:53:30.480" starttime="20170503 11:53:30.480" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.480" starttime="20170503 11:53:28.743" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.480" starttime="20170503 11:53:28.742" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.480" starttime="20170503 11:53:24.865" status="PASS"></status>
</kw>
<suite source="/tmp/root/13444/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/root/13444/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.570">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:53:30.570" starttime="20170503 11:53:30.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:30.571" starttime="20170503 11:53:30.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.572">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:53:30.572" starttime="20170503 11:53:30.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:53:30.572" starttime="20170503 11:53:30.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.813">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170503 11:53:30.814" starttime="20170503 11:53:30.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:30.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170503 11:53:30.814">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:30.814" starttime="20170503 11:53:30.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.815">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:30.815" starttime="20170503 11:53:30.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:30.816" starttime="20170503 11:53:30.815" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.816" starttime="20170503 11:53:30.569" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.816" starttime="20170503 11:53:30.568" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:30.816" starttime="20170503 11:53:30.568" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:30.824">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:53:30.826" starttime="20170503 11:53:30.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:30.827" starttime="20170503 11:53:30.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.828">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:53:30.828" starttime="20170503 11:53:30.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:30.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:53:30.829" starttime="20170503 11:53:30.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.028">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170503 11:53:31.029" starttime="20170503 11:53:30.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.029">${status} = PASS</msg>
<msg level="INFO" timestamp="20170503 11:53:31.029">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:31.029" starttime="20170503 11:53:30.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.029">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:31.030" starttime="20170503 11:53:31.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:31.030" starttime="20170503 11:53:31.030" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.030" starttime="20170503 11:53:30.823" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.030" starttime="20170503 11:53:30.823" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.031" starttime="20170503 11:53:30.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.031">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170503 11:53:31.031" starttime="20170503 11:53:31.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.034">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:53:31.034" starttime="20170503 11:53:31.033" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.035">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:53:31.036" starttime="20170503 11:53:31.035" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.036" starttime="20170503 11:53:31.034" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.036" starttime="20170503 11:53:31.032" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.036" starttime="20170503 11:53:31.031" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.101">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170503 11:53:31.102">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:31.102" starttime="20170503 11:53:31.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.103">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:31.103" starttime="20170503 11:53:31.103" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.105">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:31.105" starttime="20170503 11:53:31.104" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.105" starttime="20170503 11:53:31.104" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.105" starttime="20170503 11:53:31.102" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.105" starttime="20170503 11:53:31.102" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.105">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:31.105" starttime="20170503 11:53:30.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:31.106" starttime="20170503 11:53:31.105" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.107">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170503 11:53:31.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170503 11:53:31.107">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170503 11:53:31.107" starttime="20170503 11:53:31.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.107">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170503 11:53:31.107" starttime="20170503 11:53:30.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.107">${host_state} = Running</msg>
<status endtime="20170503 11:53:31.107" starttime="20170503 11:53:30.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:31.108">Running != Quiesced</msg>
<status endtime="20170503 11:53:31.109" starttime="20170503 11:53:31.108" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.109">${status} = False</msg>
<status endtime="20170503 11:53:31.109" starttime="20170503 11:53:31.108" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.109">${status} = False</msg>
<status endtime="20170503 11:53:31.109" starttime="20170503 11:53:30.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170503 11:53:31.110" starttime="20170503 11:53:31.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170503 11:53:31.110" starttime="20170503 11:53:31.110" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.118">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170503 11:53:31.118" starttime="20170503 11:53:31.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.126">${FFDC_DIR_PATH} = </msg>
<status endtime="20170503 11:53:31.126" starttime="20170503 11:53:31.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.134">${cur_time} = 2017-05-03 11:53:31:133624</msg>
<status endtime="20170503 11:53:31.134" starttime="20170503 11:53:31.133" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.134">${cur_time} = 20170503115331133624</msg>
<status endtime="20170503 11:53:31.134" starttime="20170503 11:53:31.134" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.135" starttime="20170503 11:53:31.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.140">${FFDC_TIME} = 20170503115331133624</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.142">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170503 11:53:31.142" starttime="20170503 11:53:31.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.143">${suite_name} = 20170503115331133624_TestsSecurityTestSsl</msg>
<status endtime="20170503 11:53:31.143" starttime="20170503 11:53:31.142" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.143">${test_name} = TestSSLConnection</msg>
<status endtime="20170503 11:53:31.143" starttime="20170503 11:53:31.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.144">${test_name} = 20170503115331133624_TestSSLConnection</msg>
<status endtime="20170503 11:53:31.144" starttime="20170503 11:53:31.144" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.145" starttime="20170503 11:53:31.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.145">${FFDC_DIR_PATH} = /tmp/root/13444/obmc-robot/logs/20170503115331133624_TestsSecurityTestSsl/20170503115331133624_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170503 11:53:31.151">${FFDC_PREFIX} = 20170503115331133624_</msg>
<status endtime="20170503 11:53:31.151" starttime="20170503 11:53:31.126" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.151" starttime="20170503 11:53:31.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170503 11:53:31.152" starttime="20170503 11:53:31.151" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:53:31.153">Created directory '&lt;a href="file:///tmp/root/13444/obmc-robot/logs"&gt;/tmp/root/13444/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170503 11:53:31.153" starttime="20170503 11:53:31.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:31.154">File '/tmp/root/13444/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170503 11:53:31.154" starttime="20170503 11:53:31.154" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.154">${exist} = False</msg>
<status endtime="20170503 11:53:31.154" starttime="20170503 11:53:31.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:53:31.156">Created file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13444/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:53:31.156" starttime="20170503 11:53:31.155" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.156" starttime="20170503 11:53:31.155" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170503 11:53:31.156" starttime="20170503 11:53:31.156" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.157">${cur_time} = 2017-05-03 11:53:31:157068</msg>
<status endtime="20170503 11:53:31.157" starttime="20170503 11:53:31.157" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.158">${cur_time} = 20170503115331157068</msg>
<status endtime="20170503 11:53:31.158" starttime="20170503 11:53:31.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.158">${cur_time} = 20170503115331157068</msg>
<status endtime="20170503 11:53:31.158" starttime="20170503 11:53:31.156" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:53:31.159">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13444/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:53:31.159" starttime="20170503 11:53:31.158" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.159" starttime="20170503 11:53:31.110" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.159" starttime="20170503 11:53:30.817" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170503 11:53:31.160" starttime="20170503 11:53:30.567" status="PASS"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170503 11:53:31.161">Delete All Sessions</msg>
<status endtime="20170503 11:53:31.161" starttime="20170503 11:53:31.160" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170503 11:53:31.161" starttime="20170503 11:53:30.483" status="PASS"></status>
</suite>
<status endtime="20170503 11:53:31.163" starttime="20170503 11:53:30.480" status="PASS"></status>
</suite>
<suite source="/tmp/root/13444/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.200">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.200" starttime="20170503 11:53:31.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.201">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.201" starttime="20170503 11:53:31.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.201">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.201" starttime="20170503 11:53:31.199" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.203">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.203" starttime="20170503 11:53:31.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.203">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.203" starttime="20170503 11:53:31.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.203">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 11:53:31.204" starttime="20170503 11:53:31.202" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.205">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170503 11:53:31.205" starttime="20170503 11:53:31.204" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.212" starttime="20170503 11:53:31.205" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.223">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 11:53:31.227">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 11:53:31.227">${output} = /tmp/root/13444/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170503 11:53:31.227" starttime="20170503 11:53:31.212" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170503 11:53:31.238" starttime="20170503 11:53:31.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170503 11:53:31.238" starttime="20170503 11:53:31.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.239">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 11:53:31.239" starttime="20170503 11:53:31.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.239">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 11:53:31.240" starttime="20170503 11:53:31.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.240">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170503 11:53:31.240" starttime="20170503 11:53:31.240" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.250" starttime="20170503 11:53:31.240" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.254">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 11:53:31.275">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 11:53:31.275">${os_con_pid} = </msg>
<status endtime="20170503 11:53:31.275" starttime="20170503 11:53:31.251" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170503 11:53:31.300" starttime="20170503 11:53:31.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.301">${cmd_buf} = kill -9 </msg>
<status endtime="20170503 11:53:31.301" starttime="20170503 11:53:31.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.303" starttime="20170503 11:53:31.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.304">${rc} = None</msg>
<msg level="INFO" timestamp="20170503 11:53:31.304">${output} = None</msg>
<status endtime="20170503 11:53:31.304" starttime="20170503 11:53:31.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170503 11:53:31.305" starttime="20170503 11:53:31.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.306">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status endtime="20170503 11:53:31.306" starttime="20170503 11:53:31.306" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.314" starttime="20170503 11:53:31.306" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.324">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 11:53:31.332">${rc} = 1</msg>
<msg level="INFO" timestamp="20170503 11:53:31.332">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status endtime="20170503 11:53:31.332" starttime="20170503 11:53:31.314" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170503 11:53:31.343" starttime="20170503 11:53:31.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170503 11:53:31.344" starttime="20170503 11:53:31.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.344">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status endtime="20170503 11:53:31.344" starttime="20170503 11:53:31.201" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:53:31.345">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170503 11:53:31.345" starttime="20170503 11:53:31.345" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.346">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170503 11:53:31.346" starttime="20170503 11:53:31.346" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.354" starttime="20170503 11:53:31.346" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.358">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 11:53:31.362">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 11:53:31.362">${output} = /tmp/root/13444/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170503 11:53:31.362" starttime="20170503 11:53:31.354" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170503 11:53:31.372" starttime="20170503 11:53:31.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170503 11:53:31.373" starttime="20170503 11:53:31.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.374">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 11:53:31.374" starttime="20170503 11:53:31.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.374">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 11:53:31.374" starttime="20170503 11:53:31.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.374">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170503 11:53:31.375" starttime="20170503 11:53:31.374" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 11:53:31.382" starttime="20170503 11:53:31.375" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.385">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170503 11:53:31.390">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 11:53:31.390">${output} = </msg>
<status endtime="20170503 11:53:31.390" starttime="20170503 11:53:31.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170503 11:53:31.393" starttime="20170503 11:53:31.392" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.393" starttime="20170503 11:53:31.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.394">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.395">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170503 11:53:31.395" starttime="20170503 11:53:31.395" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.397">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170503 11:53:31.397" starttime="20170503 11:53:31.396" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.400">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:53:31.401" starttime="20170503 11:53:31.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:31.401" starttime="20170503 11:53:31.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.402">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:53:31.402" starttime="20170503 11:53:31.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.403">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:53:31.403" starttime="20170503 11:53:31.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170503 11:53:31.817" starttime="20170503 11:53:31.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:31.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170503 11:53:31.817">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:31.817" starttime="20170503 11:53:31.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:31.818" starttime="20170503 11:53:31.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:31.818" starttime="20170503 11:53:31.818" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.818" starttime="20170503 11:53:31.399" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.819" starttime="20170503 11:53:31.398" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.819" starttime="20170503 11:53:31.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.819">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170503 11:53:31.819" starttime="20170503 11:53:31.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:31.820" starttime="20170503 11:53:31.819" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170503 11:53:31.820" starttime="20170503 11:53:31.820" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:31.822">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170503 11:53:31.822" starttime="20170503 11:53:31.821" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:31.823">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170503 11:53:31.823" starttime="20170503 11:53:31.823" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.823" starttime="20170503 11:53:31.822" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:31.823" starttime="20170503 11:53:31.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.162">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170503 11:53:32.162">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:32.162" starttime="20170503 11:53:31.823" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.163">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:32.163" starttime="20170503 11:53:32.163" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:32.165">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:32.165" starttime="20170503 11:53:32.164" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:32.165" starttime="20170503 11:53:32.164" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:32.165" starttime="20170503 11:53:32.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:32.165">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:32.165" starttime="20170503 11:53:31.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:32.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:32.166" starttime="20170503 11:53:32.165" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.166">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170503 11:53:32.166">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170503 11:53:32.167">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170503 11:53:32.167" starttime="20170503 11:53:32.166" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:32.167" starttime="20170503 11:53:31.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170503 11:53:32.168" starttime="20170503 11:53:32.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:32.174">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:53:32.175" starttime="20170503 11:53:32.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:32.175" starttime="20170503 11:53:32.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.176">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:53:32.176" starttime="20170503 11:53:32.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:32.176">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:53:32.177" starttime="20170503 11:53:32.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170503 11:53:33.257" starttime="20170503 11:53:32.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:33.257">${status} = PASS</msg>
<msg level="INFO" timestamp="20170503 11:53:33.258">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:33.258" starttime="20170503 11:53:32.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:33.259" starttime="20170503 11:53:33.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:33.260" starttime="20170503 11:53:33.259" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.260" starttime="20170503 11:53:32.173" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.260" starttime="20170503 11:53:32.173" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.260" starttime="20170503 11:53:32.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:33.261">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170503 11:53:33.261" starttime="20170503 11:53:33.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:33.264">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:53:33.264" starttime="20170503 11:53:33.263" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.265">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:53:33.265" starttime="20170503 11:53:33.265" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.265" starttime="20170503 11:53:33.264" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.265" starttime="20170503 11:53:33.262" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.265" starttime="20170503 11:53:33.261" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:33.918">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170503 11:53:33.919">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:33.919" starttime="20170503 11:53:33.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:33.921">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:33.921" starttime="20170503 11:53:33.921" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.922">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170503 11:53:33.922" starttime="20170503 11:53:33.922" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.922" starttime="20170503 11:53:33.921" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.922" starttime="20170503 11:53:33.920" status="PASS"></status>
</kw>
<status endtime="20170503 11:53:33.922" starttime="20170503 11:53:33.919" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:33.923">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170503 11:53:33.923" starttime="20170503 11:53:32.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:33.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170503 11:53:33.923" starttime="20170503 11:53:33.923" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:33.924">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170503 11:53:33.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170503 11:53:33.924">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170503 11:53:33.924" starttime="20170503 11:53:33.924" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:33.924">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170503 11:53:33.924" starttime="20170503 11:53:32.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:33.925">${host_state} = Running</msg>
<status endtime="20170503 11:53:33.925" starttime="20170503 11:53:32.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:33.925">Off != Running</msg>
<status endtime="20170503 11:53:33.925" starttime="20170503 11:53:33.925" status="FAIL"></status>
</kw>
<status endtime="20170503 11:53:33.926" starttime="20170503 11:53:32.168" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:43.930">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:53:43.931" starttime="20170503 11:53:43.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:43.931">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:53:43.931" starttime="20170503 11:53:43.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:43.932">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:53:43.932" starttime="20170503 11:53:43.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:53:43.933">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:53:43.933" starttime="20170503 11:53:43.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:53:53.949">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:53:53.950" starttime="20170503 11:53:43.933" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:53:53.950">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:53:53.950">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:53:53.950" starttime="20170503 11:53:43.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:53:53.951">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:53:53.951">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:53:53.951" starttime="20170503 11:53:53.950" status="FAIL"></status>
</kw>
<status endtime="20170503 11:53:53.951" starttime="20170503 11:53:43.929" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:54:13.953">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:54:13.953" starttime="20170503 11:54:13.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:13.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:54:13.954" starttime="20170503 11:54:13.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:13.954">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:54:13.954" starttime="20170503 11:54:13.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:13.955">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:54:13.955" starttime="20170503 11:54:13.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:54:23.967">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:54:23.967" starttime="20170503 11:54:13.956" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:54:23.967">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:54:23.968">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:54:23.968" starttime="20170503 11:54:13.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:54:23.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:54:23.968">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:54:23.968" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:54:13.951" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:54:23.969">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:53:43.929" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:53:43.928" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:53:43.928" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.969" starttime="20170503 11:53:43.927" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.970" starttime="20170503 11:53:43.927" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:23.970" starttime="20170503 11:53:43.926" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:54:33.974">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:54:33.975" starttime="20170503 11:54:33.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:33.975">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:54:33.975" starttime="20170503 11:54:33.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:33.976">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:54:33.976" starttime="20170503 11:54:33.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:54:33.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:54:33.977" starttime="20170503 11:54:33.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:54:43.992">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:54:43.992" starttime="20170503 11:54:33.977" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:54:43.993">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:54:43.993">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:54:43.993" starttime="20170503 11:54:33.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:54:43.993">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:54:43.994">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:54:43.994" starttime="20170503 11:54:43.993" status="FAIL"></status>
</kw>
<status endtime="20170503 11:54:43.994" starttime="20170503 11:54:33.973" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:55:03.996">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:55:03.996" starttime="20170503 11:55:03.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:03.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:55:03.997" starttime="20170503 11:55:03.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:03.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:55:03.997" starttime="20170503 11:55:03.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:03.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:55:03.998" starttime="20170503 11:55:03.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:55:14.013">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:55:14.013" starttime="20170503 11:55:03.999" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:55:14.013">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:55:14.013">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:55:14.013" starttime="20170503 11:55:03.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:55:14.014">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:55:14.014">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:55:14.014" starttime="20170503 11:55:14.014" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:55:03.994" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:55:14.015">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:54:33.973" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:54:33.972" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:54:33.972" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:54:33.971" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.015" starttime="20170503 11:54:33.971" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:14.016" starttime="20170503 11:54:33.970" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:55:24.020">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:55:24.021" starttime="20170503 11:55:24.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:24.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:55:24.022" starttime="20170503 11:55:24.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:24.023">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:55:24.023" starttime="20170503 11:55:24.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:24.024">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:55:24.024" starttime="20170503 11:55:24.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:55:34.039">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:55:34.040" starttime="20170503 11:55:24.025" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:55:34.040">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:55:34.040">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:55:34.040" starttime="20170503 11:55:24.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:55:34.041">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:55:34.041">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:55:34.041" starttime="20170503 11:55:34.040" status="FAIL"></status>
</kw>
<status endtime="20170503 11:55:34.041" starttime="20170503 11:55:24.020" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:55:54.043">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:55:54.043" starttime="20170503 11:55:54.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:54.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:55:54.044" starttime="20170503 11:55:54.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:54.045">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:55:54.045" starttime="20170503 11:55:54.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:55:54.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:55:54.045" starttime="20170503 11:55:54.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:56:04.059">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:04.059" starttime="20170503 11:55:54.046" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:56:04.060">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:56:04.060">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:04.060" starttime="20170503 11:55:54.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:04.061">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:56:04.061">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:04.061" starttime="20170503 11:56:04.060" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.061" starttime="20170503 11:55:54.042" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:56:04.061">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.019" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.019" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.018" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.017" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.017" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:04.062" starttime="20170503 11:55:24.016" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:14.067">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:56:14.067" starttime="20170503 11:56:14.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:14.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:56:14.068" starttime="20170503 11:56:14.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:14.069">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:56:14.069" starttime="20170503 11:56:14.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:14.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:56:14.070" starttime="20170503 11:56:14.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:56:24.079">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:24.079" starttime="20170503 11:56:14.070" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:56:24.079">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:56:24.079">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:24.079" starttime="20170503 11:56:14.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:24.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:56:24.080">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:24.080" starttime="20170503 11:56:24.080" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:24.081" starttime="20170503 11:56:14.066" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:44.082">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:56:44.083" starttime="20170503 11:56:44.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:44.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:56:44.083" starttime="20170503 11:56:44.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:44.084">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:56:44.084" starttime="20170503 11:56:44.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:44.085">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:56:44.085" starttime="20170503 11:56:44.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:56:54.099">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:54.099" starttime="20170503 11:56:44.086" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:56:54.099">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:56:54.100">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:56:54.100" starttime="20170503 11:56:44.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:54.100">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:56:54.100">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:54.100" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:44.081" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:56:54.101">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:14.066" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:14.065" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:14.064" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.101" starttime="20170503 11:56:14.064" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:56:14.063" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:56:14.063" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:56:54.102">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:53:32.168" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:53:31.394" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:53:31.394" status="FAIL"></status>
</kw>
<status endtime="20170503 11:56:54.102" starttime="20170503 11:53:31.393" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:56:54.107">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:56:54.108" starttime="20170503 11:56:54.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:54.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:56:54.109" starttime="20170503 11:56:54.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:54.109">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:56:54.109" starttime="20170503 11:56:54.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:56:54.110">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:56:54.110" starttime="20170503 11:56:54.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:57:04.124">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:57:04.125" starttime="20170503 11:56:54.110" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:57:04.125">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:57:04.125">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:57:04.125" starttime="20170503 11:56:54.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:57:04.125">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:57:04.126">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:57:04.126" starttime="20170503 11:57:04.125" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:57:04.127">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170503 11:57:04.127" starttime="20170503 11:57:04.126" status="FAIL"></status>
</kw>
<status endtime="20170503 11:57:04.127" starttime="20170503 11:56:54.106" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:57:24.129">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170503 11:57:24.129" starttime="20170503 11:57:24.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:57:24.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170503 11:57:24.130" starttime="20170503 11:57:24.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:57:24.130">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170503 11:57:24.130" starttime="20170503 11:57:24.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:57:24.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170503 11:57:24.131" starttime="20170503 11:57:24.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:57:34.143">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:57:34.143" starttime="20170503 11:57:24.132" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:57:34.144">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170503 11:57:34.144">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170503 11:57:34.144" starttime="20170503 11:57:24.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:57:34.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:57:34.145">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170503 11:57:34.145" starttime="20170503 11:57:34.144" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:57:34.145">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170503 11:57:34.145" starttime="20170503 11:57:34.145" status="FAIL"></status>
</kw>
<status endtime="20170503 11:57:34.146" starttime="20170503 11:57:24.127" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 11:57:34.146">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170503 11:57:34.146" starttime="20170503 11:56:54.106" status="FAIL"></status>
</kw>
<status endtime="20170503 11:57:34.146" starttime="20170503 11:56:54.105" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:57:34.147">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170503 11:57:34.147" starttime="20170503 11:57:34.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:57:34.149">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:57:34.149" starttime="20170503 11:57:34.148" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:57:34.150">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170503 11:57:34.150" starttime="20170503 11:57:34.149" status="PASS"></status>
</kw>
<status endtime="20170503 11:57:34.150" starttime="20170503 11:57:34.149" status="PASS"></status>
</kw>
<status endtime="20170503 11:57:34.150" starttime="20170503 11:57:34.147" status="PASS"></status>
</kw>
<status endtime="20170503 11:57:34.150" starttime="20170503 11:57:34.147" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:14.795">${ret} = None</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.796">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /xyz/openbmc_project/state/host0//attr/CurrentHostState (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status endtime="20170503 11:58:14.796" starttime="20170503 11:57:34.150" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:14.798">${msg} = None</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.798">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status endtime="20170503 11:58:14.798" starttime="20170503 11:58:14.797" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:14.799">None</msg>
<status endtime="20170503 11:58:14.799" starttime="20170503 11:58:14.799" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:14.799" starttime="20170503 11:58:14.798" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:14.799" starttime="20170503 11:58:14.797" status="FAIL"></status>
</kw>
<status endtime="20170503 11:58:14.799" starttime="20170503 11:58:14.796" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:14.800">${resp} = None</msg>
<status endtime="20170503 11:58:14.800" starttime="20170503 11:56:54.105" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:58:14.800">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status endtime="20170503 11:58:14.800" starttime="20170503 11:58:14.800" status="FAIL"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:14.801">${content} = None</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.801">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status endtime="20170503 11:58:14.801" starttime="20170503 11:58:14.801" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:14.802">${state} = None</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.802">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status endtime="20170503 11:58:14.802" starttime="20170503 11:56:54.104" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:14.802">${host_state} = None</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.802">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status endtime="20170503 11:58:14.802" starttime="20170503 11:56:54.104" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:14.803">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170503 11:58:14.803">None != Quiesced</msg>
<status endtime="20170503 11:58:14.804" starttime="20170503 11:58:14.803" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:14.804">${status} = False</msg>
<status endtime="20170503 11:58:14.804" starttime="20170503 11:58:14.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:14.804">${status} = False</msg>
<status endtime="20170503 11:58:14.804" starttime="20170503 11:56:54.103" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:15.139">Length is 12</msg>
<status endtime="20170503 11:58:15.139" starttime="20170503 11:58:15.138" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:15.144">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 11:58:18.153">${RC} = 0</msg>
<msg level="INFO" timestamp="20170503 11:58:18.153">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.977 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.644 ms
64 bytes from 9.41.166.16...</msg>
<status endtime="20170503 11:58:18.154" starttime="20170503 11:58:15.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:18.166">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.977 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.644 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.645 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.614 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.614/0.720/0.977/0.148 ms</msg>
<status endtime="20170503 11:58:18.166" starttime="20170503 11:58:18.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170503 11:58:18.167" starttime="20170503 11:58:18.167" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.169" starttime="20170503 11:58:15.138" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.216">${cur_time} = 2017-05-03 11:58:18:216057</msg>
<status endtime="20170503 11:58:18.216" starttime="20170503 11:58:18.216" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.217">${cur_time} = 20170503115818216057</msg>
<status endtime="20170503 11:58:18.217" starttime="20170503 11:58:18.217" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.217" starttime="20170503 11:58:18.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:18.218">${FFDC_TIME} = 20170503115818216057</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.227">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170503 11:58:18.227" starttime="20170503 11:58:18.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.227">${suite_name} = 20170503115818216057_TestsTestBasicPoweron</msg>
<status endtime="20170503 11:58:18.227" starttime="20170503 11:58:18.227" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.228">${test_name} = PowerOnTest</msg>
<status endtime="20170503 11:58:18.228" starttime="20170503 11:58:18.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.229">${test_name} = 20170503115818216057_PowerOnTest</msg>
<status endtime="20170503 11:58:18.229" starttime="20170503 11:58:18.228" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.229" starttime="20170503 11:58:18.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:18.229">${FFDC_DIR_PATH} = /tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170503 11:58:18.229">${FFDC_PREFIX} = 20170503115818216057_</msg>
<msg level="INFO" timestamp="20170503 11:58:18.253">${LOG_PREFIX} = /tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.256">Created directory '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.256" starttime="20170503 11:58:18.254" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:18.260">${FFDC_FILE_PATH} = /tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.288">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.288" starttime="20170503 11:58:18.287" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.288" starttime="20170503 11:58:18.285" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.289">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.289" starttime="20170503 11:58:18.289" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.289" starttime="20170503 11:58:18.288" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.291">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.291" starttime="20170503 11:58:18.290" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.291" starttime="20170503 11:58:18.290" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.292">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.292" starttime="20170503 11:58:18.292" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.292" starttime="20170503 11:58:18.291" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.293">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.293" starttime="20170503 11:58:18.293" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.294" starttime="20170503 11:58:18.292" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.295">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.295" starttime="20170503 11:58:18.294" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.295" starttime="20170503 11:58:18.294" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.296">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.296" starttime="20170503 11:58:18.296" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.296" starttime="20170503 11:58:18.295" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.298">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.298" starttime="20170503 11:58:18.297" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.298" starttime="20170503 11:58:18.296" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.299">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.299" starttime="20170503 11:58:18.299" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.299" starttime="20170503 11:58:18.298" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.301">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.301" starttime="20170503 11:58:18.300" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.301" starttime="20170503 11:58:18.300" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.302">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.302" starttime="20170503 11:58:18.301" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.302" starttime="20170503 11:58:18.301" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.303">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.303" starttime="20170503 11:58:18.303" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.303" starttime="20170503 11:58:18.302" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 11:58:18.304">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 11:58:18.305" starttime="20170503 11:58:18.304" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.305" starttime="20170503 11:58:18.304" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:58:18.307">Dictionary does not contain key 'host'.</msg>
<status endtime="20170503 11:58:18.307" starttime="20170503 11:58:18.306" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:18.307">${has_host} = False</msg>
<status endtime="20170503 11:58:18.307" starttime="20170503 11:58:18.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170503 11:58:18.308" starttime="20170503 11:58:18.308" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.308" starttime="20170503 11:58:18.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.310">${port_num} = 22</msg>
<status endtime="20170503 11:58:18.310" starttime="20170503 11:58:18.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.310">${SSH_PORT} = 22</msg>
<status endtime="20170503 11:58:18.310" starttime="20170503 11:58:18.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170503 11:58:18.311">${https_num} = 443</msg>
<status endtime="20170503 11:58:18.311" starttime="20170503 11:58:18.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:18.312">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170503 11:58:18.312" starttime="20170503 11:58:18.311" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.312" starttime="20170503 11:58:18.309" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.312" starttime="20170503 11:58:18.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 11:58:18.313">Dictionary does not contain key 'port'.</msg>
<status endtime="20170503 11:58:18.313" starttime="20170503 11:58:18.313" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 11:58:18.313">${has_port} = False</msg>
<status endtime="20170503 11:58:18.313" starttime="20170503 11:58:18.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170503 11:58:18.315" starttime="20170503 11:58:18.315" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170503 11:58:18.316" starttime="20170503 11:58:18.315" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.316" starttime="20170503 11:58:18.314" status="PASS"></status>
</kw>
<status endtime="20170503 11:58:18.316" starttime="20170503 11:58:18.314" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 11:58:18.316">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="FAIL" timestamp="20170503 12:03:18.565">EOFError</msg>
<status endtime="20170503 12:03:18.565" starttime="20170503 11:58:18.316" status="FAIL"></status>
</kw>
<status endtime="20170503 12:03:18.565" starttime="20170503 11:58:18.305" status="FAIL"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.566">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170503 12:03:18.567">${bmc_model} = None</msg>
<msg level="INFO" timestamp="20170503 12:03:18.567">${stderr} = None</msg>
<msg level="FAIL" timestamp="20170503 12:03:18.567">SSHException: SSH session not active</msg>
<status endtime="20170503 12:03:18.567" starttime="20170503 12:03:18.566" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 12:03:18.568">Could not get length of 'None'.</msg>
<status endtime="20170503 12:03:18.568" starttime="20170503 12:03:18.568" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="FAIL" timestamp="20170503 12:03:18.569">Could not get length of 'None'.</msg>
<status endtime="20170503 12:03:18.569" starttime="20170503 12:03:18.568" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.569">${model_name} = None</msg>
<status endtime="20170503 12:03:18.569" starttime="20170503 11:58:18.305" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.570">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.570" starttime="20170503 12:03:18.570" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.571" starttime="20170503 12:03:18.569" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.571" starttime="20170503 11:58:18.299" status="FAIL"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.572">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.572" starttime="20170503 12:03:18.571" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.572" starttime="20170503 12:03:18.571" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.573">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170503 12:03:18.573" starttime="20170503 12:03:18.572" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.574">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.574" starttime="20170503 12:03:18.574" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.574" starttime="20170503 12:03:18.573" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.575">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.575" starttime="20170503 12:03:18.575" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.575" starttime="20170503 12:03:18.574" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.575" starttime="20170503 12:03:18.573" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.577">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.577" starttime="20170503 12:03:18.576" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.577" starttime="20170503 12:03:18.576" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.579">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.579" starttime="20170503 12:03:18.578" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.579" starttime="20170503 12:03:18.577" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.579" starttime="20170503 12:03:18.576" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.581">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.581" starttime="20170503 12:03:18.580" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.581" starttime="20170503 12:03:18.580" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.582">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.582" starttime="20170503 12:03:18.581" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.582" starttime="20170503 12:03:18.581" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.582" starttime="20170503 12:03:18.579" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.582" starttime="20170503 12:03:18.573" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.583">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt"&gt;/tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/20170503115818216057_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.583" starttime="20170503 12:03:18.583" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.583" starttime="20170503 12:03:18.582" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.584" starttime="20170503 11:58:18.285" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170503 12:03:18.584">Several failures occurred:

1) EOFError

2) SSHException: SSH session not active

3) Could not get length of 'None'.

4) Could not get length of 'None'.</msg>
<status endtime="20170503 12:03:18.584" starttime="20170503 11:58:14.805" status="FAIL"></status>
</kw>
<status endtime="20170503 12:03:18.584" starttime="20170503 11:58:14.804" status="FAIL"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170503 12:03:18.585" starttime="20170503 12:03:18.585" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.593">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170503 12:03:18.593" starttime="20170503 12:03:18.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.594">${FFDC_DIR_PATH} = /tmp/root/13444/obmc-robot/logs/20170503115818216057_TestsTestBasicPoweron/20170503115818216057_PowerOnTest/</msg>
<status endtime="20170503 12:03:18.594" starttime="20170503 12:03:18.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170503 12:03:18.595" starttime="20170503 12:03:18.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170503 12:03:18.595" starttime="20170503 12:03:18.595" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.596">Directory '&lt;a href="file:///tmp/root/13444/obmc-robot/logs"&gt;/tmp/root/13444/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170503 12:03:18.596" starttime="20170503 12:03:18.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.597">File '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13444/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170503 12:03:18.597" starttime="20170503 12:03:18.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.597">${exist} = True</msg>
<status endtime="20170503 12:03:18.597" starttime="20170503 12:03:18.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170503 12:03:18.597" starttime="20170503 12:03:18.597" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170503 12:03:18.598" starttime="20170503 12:03:18.598" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.599">${cur_time} = 2017-05-03 12:03:18:598754</msg>
<status endtime="20170503 12:03:18.599" starttime="20170503 12:03:18.599" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.599">${cur_time} = 20170503120318598754</msg>
<status endtime="20170503 12:03:18.599" starttime="20170503 12:03:18.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.600">${cur_time} = 20170503120318598754</msg>
<status endtime="20170503 12:03:18.600" starttime="20170503 12:03:18.598" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170503 12:03:18.600">Appended to file '&lt;a href="file:///tmp/root/13444/obmc-robot/logs/test_history.txt"&gt;/tmp/root/13444/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170503 12:03:18.601" starttime="20170503 12:03:18.600" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.601" starttime="20170503 12:03:18.585" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.601" starttime="20170503 11:56:54.103" status="FAIL"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.602">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 12:03:18.602" starttime="20170503 12:03:18.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.603">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 12:03:18.603" starttime="20170503 12:03:18.603" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.603">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170503 12:03:18.603" starttime="20170503 12:03:18.602" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.604">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170503 12:03:18.604" starttime="20170503 12:03:18.604" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 12:03:18.612" starttime="20170503 12:03:18.604" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.616">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 12:03:18.620">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 12:03:18.620">${output} = /tmp/root/13444/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170503 12:03:18.620" starttime="20170503 12:03:18.613" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170503 12:03:18.635" starttime="20170503 12:03:18.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170503 12:03:18.636" starttime="20170503 12:03:18.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.636">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 12:03:18.636" starttime="20170503 12:03:18.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.637">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status endtime="20170503 12:03:18.637" starttime="20170503 12:03:18.604" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.637">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170503 12:03:18.637" starttime="20170503 12:03:18.637" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 12:03:18.645" starttime="20170503 12:03:18.637" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.649">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 12:03:18.657">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 12:03:18.658">${os_con_pid} = 174</msg>
<status endtime="20170503 12:03:18.658" starttime="20170503 12:03:18.645" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170503 12:03:18.669" starttime="20170503 12:03:18.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.670">${cmd_buf} = kill -9 174</msg>
<status endtime="20170503 12:03:18.670" starttime="20170503 12:03:18.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 12:03:18.678" starttime="20170503 12:03:18.671" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.678" starttime="20170503 12:03:18.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 12:03:18.682">Running command 'kill -9 174 2&gt;&amp;1'.</msg>
<status endtime="20170503 12:03:18.685" starttime="20170503 12:03:18.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.686">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 12:03:18.686">${output} = </msg>
<status endtime="20170503 12:03:18.686" starttime="20170503 12:03:18.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170503 12:03:18.698" starttime="20170503 12:03:18.690" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.698" starttime="20170503 12:03:18.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.699">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status endtime="20170503 12:03:18.699" starttime="20170503 12:03:18.699" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170503 12:03:18.706" starttime="20170503 12:03:18.699" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170503 12:03:18.710">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170503 12:03:18.716">${rc} = 0</msg>
<msg level="INFO" timestamp="20170503 12:03:18.716">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status endtime="20170503 12:03:18.716" starttime="20170503 12:03:18.707" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170503 12:03:18.727" starttime="20170503 12:03:18.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170503 12:03:18.728" starttime="20170503 12:03:18.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170503 12:03:18.728">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status endtime="20170503 12:03:18.728" starttime="20170503 12:03:18.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170503 12:03:18.729">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
/dev/mapper/21762--vg-root: |=                                       /  1.4%   /dev/mapper/21762--vg-root: |=                                       -  1.5%   /dev/mapper/21762--vg-root: |=                                       \  1.6%   /dev/mapper/21762--vg-root: |=                                       |  1.7%   /dev/mapper/21762--vg-root: |=                                       /  1.8%   /dev/mapper/21762--vg-root: |=                                       -  1.9%   /dev/mapper/21762--vg-root: |=                                       \  2.0%   /dev/mapper/21762--vg-root: |=                                       |  2.1%   </msg>
<status endtime="20170503 12:03:18.729" starttime="20170503 12:03:18.728" status="PASS"></status>
</kw>
<status endtime="20170503 12:03:18.729" starttime="20170503 11:56:54.103" status="FAIL">Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) Several failures occurred:

1) EOFError

2) SSHException: SSH session not active

3) Could not get length of 'None'.

4) Could not get length of 'None'.</status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170503 12:03:18.729" starttime="20170503 11:53:31.198" status="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

Also teardown failed:
Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) Several failures occurred:

1) EOFError

2) SSHException: SSH session not active

3) Could not get length of 'None'.

4) Could not get length of 'None'.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170503 12:03:18.730" starttime="20170503 11:53:31.165" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170503 12:03:18.734" starttime="20170503 11:53:24.342" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
