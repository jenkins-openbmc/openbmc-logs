<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170713 20:29:07.675" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:08.501" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:08.501" starttime="20170713 20:29:08.501"></status>
</kw>
<msg timestamp="20170713 20:29:08.501" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:08.501" starttime="20170713 20:29:08.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:08.503" starttime="20170713 20:29:08.502"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:08.503" starttime="20170713 20:29:08.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:08.503" starttime="20170713 20:29:08.503"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:08.505" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:08.505" starttime="20170713 20:29:08.504"></status>
</kw>
<msg timestamp="20170713 20:29:08.505" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:08.505" starttime="20170713 20:29:08.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:08.507" starttime="20170713 20:29:08.506"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:08.507" starttime="20170713 20:29:08.506"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:08.507" starttime="20170713 20:29:08.505"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:08.507" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:10.361" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:10.362" starttime="20170713 20:29:08.507"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.362" starttime="20170713 20:29:08.499"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:29:10.363" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170713 20:29:10.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:29:10.439" level="INFO">${output} = 1499923276</msg>
<msg timestamp="20170713 20:29:10.439" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:29:10.439" starttime="20170713 20:29:10.362"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:29:10.440" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:29:10.440" starttime="20170713 20:29:10.440"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170713 20:29:10.441" level="INFO">${btime} = 1499923276</msg>
<status status="PASS" endtime="20170713 20:29:10.441" starttime="20170713 20:29:10.440"></status>
</kw>
<msg timestamp="20170713 20:29:10.441" level="INFO">${cur_btime} = 1499923276</msg>
<status status="PASS" endtime="20170713 20:29:10.441" starttime="20170713 20:29:08.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170713 20:29:10.443" level="INFO">${BOOT_TIME} = 1499923276</msg>
<status status="PASS" endtime="20170713 20:29:10.443" starttime="20170713 20:29:10.442"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.443" starttime="20170713 20:29:10.441"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.443" starttime="20170713 20:29:08.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.444" starttime="20170713 20:29:10.443"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.444" starttime="20170713 20:29:10.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.445" starttime="20170713 20:29:10.445"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.445" starttime="20170713 20:29:08.498"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:10.448" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:10.448" starttime="20170713 20:29:10.448"></status>
</kw>
<msg timestamp="20170713 20:29:10.448" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:10.448" starttime="20170713 20:29:10.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.449" starttime="20170713 20:29:10.449"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.450" starttime="20170713 20:29:10.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.450" starttime="20170713 20:29:10.450"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:10.451" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:10.451" starttime="20170713 20:29:10.451"></status>
</kw>
<msg timestamp="20170713 20:29:10.451" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:10.451" starttime="20170713 20:29:10.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:10.453" starttime="20170713 20:29:10.453"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.453" starttime="20170713 20:29:10.453"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:10.454" starttime="20170713 20:29:10.452"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:10.454" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:12.200" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:12.200" starttime="20170713 20:29:10.454"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.200" starttime="20170713 20:29:10.446"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170713 20:29:12.201" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170713 20:29:12.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:29:12.318" level="INFO">${output} = </msg>
<msg timestamp="20170713 20:29:12.318" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/12c6a00ebfdd479284cf09f39d1bc042.</msg>
<msg timestamp="20170713 20:29:12.318" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170713 20:29:12.319" starttime="20170713 20:29:12.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:12.319" starttime="20170713 20:29:12.319"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.319" starttime="20170713 20:29:10.446"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170713 20:29:12.322" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170713 20:29:12.322" starttime="20170713 20:29:12.321"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:12.323" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170713 20:29:12.323" starttime="20170713 20:29:12.323"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:12.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:12.327" starttime="20170713 20:29:12.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:12.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:12.328" starttime="20170713 20:29:12.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:12.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:12.329" starttime="20170713 20:29:12.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:12.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:12.329" starttime="20170713 20:29:12.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:12.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:12.572" starttime="20170713 20:29:12.330"></status>
</kw>
<msg timestamp="20170713 20:29:12.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:12.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.572" starttime="20170713 20:29:12.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:12.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.573" starttime="20170713 20:29:12.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:12.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.574" starttime="20170713 20:29:12.573"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.574" starttime="20170713 20:29:12.326"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.574" starttime="20170713 20:29:12.325"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.574" starttime="20170713 20:29:12.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:12.575" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170713 20:29:12.575" starttime="20170713 20:29:12.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:12.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:12.575" starttime="20170713 20:29:12.575"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:12.576" starttime="20170713 20:29:12.576"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:12.578" level="INFO">${msg} = URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type'...</msg>
<status status="PASS" endtime="20170713 20:29:12.578" starttime="20170713 20:29:12.577"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:12.579" level="INFO">URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:12.579" starttime="20170713 20:29:12.578"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.579" starttime="20170713 20:29:12.578"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.579" starttime="20170713 20:29:12.576"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:12.882" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:12.882" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.882" starttime="20170713 20:29:12.580"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:12.883" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:12.883" starttime="20170713 20:29:12.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:12.884" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:12.884" starttime="20170713 20:29:12.884"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.884" starttime="20170713 20:29:12.883"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.885" starttime="20170713 20:29:12.882"></status>
</kw>
<msg timestamp="20170713 20:29:12.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.885" starttime="20170713 20:29:12.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:12.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:12.887" starttime="20170713 20:29:12.885"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170713 20:29:12.887" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:12.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:12.887" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170713 20:29:12.887" starttime="20170713 20:29:12.887"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:12.888" starttime="20170713 20:29:12.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:12.888" starttime="20170713 20:29:12.888"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:12.893" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:12.893" starttime="20170713 20:29:12.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:12.894" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:12.894" starttime="20170713 20:29:12.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:12.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:12.895" starttime="20170713 20:29:12.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:12.895" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:12.895" starttime="20170713 20:29:12.895"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:13.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:13.285" starttime="20170713 20:29:12.896"></status>
</kw>
<msg timestamp="20170713 20:29:13.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:13.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.286" starttime="20170713 20:29:12.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:13.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.286" starttime="20170713 20:29:13.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:13.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.287" starttime="20170713 20:29:13.287"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.287" starttime="20170713 20:29:12.892"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.287" starttime="20170713 20:29:12.891"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.287" starttime="20170713 20:29:12.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:13.288" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170713 20:29:13.288" starttime="20170713 20:29:13.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:13.289" starttime="20170713 20:29:13.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:13.562" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170713 20:29:13.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.562" starttime="20170713 20:29:13.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:13.563" starttime="20170713 20:29:13.563"></status>
</kw>
<msg timestamp="20170713 20:29:13.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.563" starttime="20170713 20:29:12.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:13.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:13.564" starttime="20170713 20:29:13.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:13.565" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:13.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:13.565" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170713 20:29:13.565" starttime="20170713 20:29:13.564"></status>
</kw>
<msg timestamp="20170713 20:29:13.565" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170713 20:29:13.565" starttime="20170713 20:29:12.890"></status>
</kw>
<msg timestamp="20170713 20:29:13.565" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170713 20:29:13.565" starttime="20170713 20:29:12.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:13.566"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:12.889"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:12.889"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:12.321"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:12.320"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:13.566" starttime="20170713 20:29:12.320"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170713 20:29:13.568" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170713 20:29:13.568" starttime="20170713 20:29:13.567"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:13.569" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170713 20:29:13.569" starttime="20170713 20:29:13.568"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:13.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:13.573" starttime="20170713 20:29:13.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:13.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:13.574" starttime="20170713 20:29:13.574"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:13.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:13.575" starttime="20170713 20:29:13.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:13.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:13.575" starttime="20170713 20:29:13.575"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:14.039" starttime="20170713 20:29:13.576"></status>
</kw>
<msg timestamp="20170713 20:29:14.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:14.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.039" starttime="20170713 20:29:13.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.040" starttime="20170713 20:29:14.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.041" starttime="20170713 20:29:14.041"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.041" starttime="20170713 20:29:13.571"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.041" starttime="20170713 20:29:13.570"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.041" starttime="20170713 20:29:13.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:14.042" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170713 20:29:14.042" starttime="20170713 20:29:14.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:14.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:14.043" starttime="20170713 20:29:14.042"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.043" starttime="20170713 20:29:14.043"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:14.045" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:14.045" starttime="20170713 20:29:14.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:14.046" level="INFO">URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:14.046" starttime="20170713 20:29:14.045"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.046" starttime="20170713 20:29:14.045"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.046" starttime="20170713 20:29:14.043"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:14.288" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:14.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.288" starttime="20170713 20:29:14.046"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:14.290" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:14.290" starttime="20170713 20:29:14.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:14.291" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:14.291" starttime="20170713 20:29:14.291"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.291" starttime="20170713 20:29:14.290"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.291" starttime="20170713 20:29:14.288"></status>
</kw>
<msg timestamp="20170713 20:29:14.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.291" starttime="20170713 20:29:13.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.293" starttime="20170713 20:29:14.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170713 20:29:14.293" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:14.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:14.293" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170713 20:29:14.293" starttime="20170713 20:29:14.293"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.294" starttime="20170713 20:29:13.568"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:14.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:14.298" starttime="20170713 20:29:14.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:14.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:14.298" starttime="20170713 20:29:14.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:14.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:14.299" starttime="20170713 20:29:14.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:14.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:14.300" starttime="20170713 20:29:14.299"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:14.509" starttime="20170713 20:29:14.300"></status>
</kw>
<msg timestamp="20170713 20:29:14.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:14.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.509" starttime="20170713 20:29:14.300"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.510" starttime="20170713 20:29:14.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.511" starttime="20170713 20:29:14.510"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.511" starttime="20170713 20:29:14.296"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.511" starttime="20170713 20:29:14.296"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.511" starttime="20170713 20:29:14.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:14.511" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170713 20:29:14.512" starttime="20170713 20:29:14.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.512" starttime="20170713 20:29:14.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:14.651" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170713 20:29:14.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.651" starttime="20170713 20:29:14.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.652" starttime="20170713 20:29:14.651"></status>
</kw>
<msg timestamp="20170713 20:29:14.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.652" starttime="20170713 20:29:14.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.652" starttime="20170713 20:29:14.652"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:14.653" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:14.653" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:14.653" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170713 20:29:14.653" starttime="20170713 20:29:14.653"></status>
</kw>
<msg timestamp="20170713 20:29:14.654" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170713 20:29:14.654" starttime="20170713 20:29:14.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.654" starttime="20170713 20:29:14.654"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.654" starttime="20170713 20:29:13.567"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:14.655" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170713 20:29:14.655" starttime="20170713 20:29:14.655"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:14.659" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:14.659" starttime="20170713 20:29:14.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:14.660" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:14.660" starttime="20170713 20:29:14.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:14.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:14.660" starttime="20170713 20:29:14.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:14.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:14.661" starttime="20170713 20:29:14.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:14.939" starttime="20170713 20:29:14.662"></status>
</kw>
<msg timestamp="20170713 20:29:14.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:14.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.939" starttime="20170713 20:29:14.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.940" starttime="20170713 20:29:14.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:14.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:14.941" starttime="20170713 20:29:14.940"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.941" starttime="20170713 20:29:14.658"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.941" starttime="20170713 20:29:14.657"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:14.941" starttime="20170713 20:29:14.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:14.942" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170713 20:29:14.942" starttime="20170713 20:29:14.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:14.943" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:14.943" starttime="20170713 20:29:14.942"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.943" starttime="20170713 20:29:14.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:14.944" starttime="20170713 20:29:14.943"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:15.318" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:15.318" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:15.318" starttime="20170713 20:29:14.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:15.319" starttime="20170713 20:29:15.318"></status>
</kw>
<msg timestamp="20170713 20:29:15.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:15.319" starttime="20170713 20:29:14.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:15.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:15.320" starttime="20170713 20:29:15.319"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170713 20:29:25.320" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170713 20:29:25.321" starttime="20170713 20:29:15.320"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:25.321" starttime="20170713 20:29:14.654"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170713 20:29:25.326" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170713 20:29:25.326" starttime="20170713 20:29:25.326"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170713 20:29:25.330" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170713 20:29:28.335" level="INFO">${RC} = 0</msg>
<msg timestamp="20170713 20:29:28.335" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.44 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.563 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170713 20:29:28.335" starttime="20170713 20:29:25.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170713 20:29:28.339" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.44 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.563 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.751 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.605 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.563/0.839/1.440/0.355 ms</msg>
<status status="PASS" endtime="20170713 20:29:28.339" starttime="20170713 20:29:28.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.340" starttime="20170713 20:29:28.340"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.341" starttime="20170713 20:29:25.323"></status>
</kw>
<msg timestamp="20170713 20:29:28.341" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170713 20:29:28.341" starttime="20170713 20:29:25.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.342" starttime="20170713 20:29:28.341"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:28.346" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:28.347" starttime="20170713 20:29:28.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:28.347" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:28.347" starttime="20170713 20:29:28.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:28.348" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:28.348" starttime="20170713 20:29:28.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:28.349" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:28.349" starttime="20170713 20:29:28.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:28.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:28.563" starttime="20170713 20:29:28.350"></status>
</kw>
<msg timestamp="20170713 20:29:28.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:28.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:28.563" starttime="20170713 20:29:28.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:28.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:28.564" starttime="20170713 20:29:28.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:28.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:28.564" starttime="20170713 20:29:28.564"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.564" starttime="20170713 20:29:28.345"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.564" starttime="20170713 20:29:28.344"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.565" starttime="20170713 20:29:28.343"></status>
</kw>
<msg timestamp="20170713 20:29:28.565" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170713 20:29:28.565" starttime="20170713 20:29:28.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.565" starttime="20170713 20:29:28.565"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:28.567" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:28.567" starttime="20170713 20:29:28.567"></status>
</kw>
<msg timestamp="20170713 20:29:28.567" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:28.567" starttime="20170713 20:29:28.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.569" starttime="20170713 20:29:28.568"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.569" starttime="20170713 20:29:28.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.569" starttime="20170713 20:29:28.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:28.571" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:28.571" starttime="20170713 20:29:28.570"></status>
</kw>
<msg timestamp="20170713 20:29:28.571" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:28.571" starttime="20170713 20:29:28.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:28.573" starttime="20170713 20:29:28.572"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.573" starttime="20170713 20:29:28.572"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:28.573" starttime="20170713 20:29:28.571"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:28.574" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:30.325" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:30.326" starttime="20170713 20:29:28.573"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.326" starttime="20170713 20:29:28.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:29:30.326" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170713 20:29:30.383" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:29:30.383" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170713 20:29:30.383" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:29:30.383" starttime="20170713 20:29:30.326"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:29:30.383" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:29:30.384" starttime="20170713 20:29:30.383"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.384" starttime="20170713 20:29:25.322"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.384" starttime="20170713 20:29:25.322"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.384" starttime="20170713 20:29:25.321"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:30.387" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:30.387" starttime="20170713 20:29:30.386"></status>
</kw>
<msg timestamp="20170713 20:29:30.387" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:30.387" starttime="20170713 20:29:30.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:30.388" starttime="20170713 20:29:30.388"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.388" starttime="20170713 20:29:30.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:30.389" starttime="20170713 20:29:30.388"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:30.390" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:30.390" starttime="20170713 20:29:30.389"></status>
</kw>
<msg timestamp="20170713 20:29:30.390" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:30.390" starttime="20170713 20:29:30.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:30.392" starttime="20170713 20:29:30.391"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.392" starttime="20170713 20:29:30.391"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:30.392" starttime="20170713 20:29:30.390"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:30.393" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:32.101" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:32.101" starttime="20170713 20:29:30.392"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.102" starttime="20170713 20:29:30.385"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:29:32.102" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170713 20:29:32.249" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:29:32.249" level="INFO">${output} = 1499923276</msg>
<msg timestamp="20170713 20:29:32.250" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:29:32.250" starttime="20170713 20:29:32.102"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.250" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:29:32.250" starttime="20170713 20:29:32.250"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170713 20:29:32.251" level="INFO">${btime} = 1499923276</msg>
<status status="PASS" endtime="20170713 20:29:32.251" starttime="20170713 20:29:32.250"></status>
</kw>
<msg timestamp="20170713 20:29:32.251" level="INFO">${cur_btime} = 1499923276</msg>
<status status="PASS" endtime="20170713 20:29:32.251" starttime="20170713 20:29:30.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.252" starttime="20170713 20:29:32.251"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.252" starttime="20170713 20:29:30.384"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.253" starttime="20170713 20:29:32.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.253" starttime="20170713 20:29:32.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.254" starttime="20170713 20:29:32.254"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.254" starttime="20170713 20:29:30.384"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:32.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:32.258" starttime="20170713 20:29:32.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:32.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:32.259" starttime="20170713 20:29:32.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:32.261" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:32.261" starttime="20170713 20:29:32.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:32.262" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:32.262" starttime="20170713 20:29:32.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:32.467" starttime="20170713 20:29:32.263"></status>
</kw>
<msg timestamp="20170713 20:29:32.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:32.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.467" starttime="20170713 20:29:32.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.468" starttime="20170713 20:29:32.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.469" starttime="20170713 20:29:32.468"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.469" starttime="20170713 20:29:32.257"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.469" starttime="20170713 20:29:32.256"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.469" starttime="20170713 20:29:32.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:32.470" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170713 20:29:32.470" starttime="20170713 20:29:32.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.471" starttime="20170713 20:29:32.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:32.513" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170713 20:29:32.513" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.513" starttime="20170713 20:29:32.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.513" starttime="20170713 20:29:32.513"></status>
</kw>
<msg timestamp="20170713 20:29:32.514" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.514" starttime="20170713 20:29:32.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:29:32.515" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:29:32.515" starttime="20170713 20:29:32.514"></status>
</kw>
<status status="FAIL" endtime="20170713 20:29:32.515" starttime="20170713 20:29:32.255"></status>
</kw>
<msg timestamp="20170713 20:29:32.515" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:29:32.515" starttime="20170713 20:29:32.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170713 20:29:32.516" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170713 20:29:32.516" starttime="20170713 20:29:32.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:32.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:32.522" starttime="20170713 20:29:32.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:32.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:32.523" starttime="20170713 20:29:32.523"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:32.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:32.524" starttime="20170713 20:29:32.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:32.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:32.524" starttime="20170713 20:29:32.524"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.730" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:32.730" starttime="20170713 20:29:32.525"></status>
</kw>
<msg timestamp="20170713 20:29:32.730" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:32.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.730" starttime="20170713 20:29:32.525"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.731" starttime="20170713 20:29:32.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.731" starttime="20170713 20:29:32.731"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.732" starttime="20170713 20:29:32.521"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.732" starttime="20170713 20:29:32.521"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.732" starttime="20170713 20:29:32.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:32.732" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170713 20:29:32.732" starttime="20170713 20:29:32.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.733" starttime="20170713 20:29:32.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:32.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170713 20:29:32.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.811" starttime="20170713 20:29:32.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.811" starttime="20170713 20:29:32.811"></status>
</kw>
<msg timestamp="20170713 20:29:32.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.812" starttime="20170713 20:29:32.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:32.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:32.812" starttime="20170713 20:29:32.812"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:32.813" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:32.813" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:32.813" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170713 20:29:32.813" starttime="20170713 20:29:32.813"></status>
</kw>
<msg timestamp="20170713 20:29:32.813" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170713 20:29:32.813" starttime="20170713 20:29:32.519"></status>
</kw>
<msg timestamp="20170713 20:29:32.814" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170713 20:29:32.814" starttime="20170713 20:29:32.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:32.814" starttime="20170713 20:29:32.814"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.814" starttime="20170713 20:29:32.518"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.814" starttime="20170713 20:29:32.517"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.815" starttime="20170713 20:29:32.517"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.815" starttime="20170713 20:29:32.516"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.815" starttime="20170713 20:29:32.515"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.815" starttime="20170713 20:29:08.498"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:32.815" starttime="20170713 20:29:08.497"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170713 20:29:32.821" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170713 20:29:32.821" starttime="20170713 20:29:32.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170713 20:29:32.822" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170713 20:29:32.822" starttime="20170713 20:29:32.821"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:32.823" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170713 20:29:32.823" starttime="20170713 20:29:32.822"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:32.826" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:32.827" starttime="20170713 20:29:32.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:32.827" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:32.827" starttime="20170713 20:29:32.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:32.828" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:32.828" starttime="20170713 20:29:32.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:32.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:32.829" starttime="20170713 20:29:32.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.013" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:33.014" starttime="20170713 20:29:32.830"></status>
</kw>
<msg timestamp="20170713 20:29:33.014" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:33.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.014" starttime="20170713 20:29:32.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.014" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.015" starttime="20170713 20:29:33.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.015" starttime="20170713 20:29:33.015"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.015" starttime="20170713 20:29:32.825"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.016" starttime="20170713 20:29:32.825"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.016" starttime="20170713 20:29:32.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:33.016" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170713 20:29:33.017" starttime="20170713 20:29:33.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:33.017" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:33.017" starttime="20170713 20:29:33.017"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:33.018" starttime="20170713 20:29:33.018"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:33.019" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:33.020" starttime="20170713 20:29:33.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:33.020" level="INFO">URI:https://9.3.21.61/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:33.021" starttime="20170713 20:29:33.020"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.021" starttime="20170713 20:29:33.020"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.021" starttime="20170713 20:29:33.018"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:33.306" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:33.307" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.307" starttime="20170713 20:29:33.021"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:33.308" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:33.308" starttime="20170713 20:29:33.308"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:33.309" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:33.309" starttime="20170713 20:29:33.309"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.309" starttime="20170713 20:29:33.308"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.309" starttime="20170713 20:29:33.307"></status>
</kw>
<msg timestamp="20170713 20:29:33.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.310" starttime="20170713 20:29:32.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.310" starttime="20170713 20:29:33.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170713 20:29:33.311" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:33.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:33.311" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170713 20:29:33.311" starttime="20170713 20:29:33.311"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.311" starttime="20170713 20:29:32.822"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:33.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:33.315" starttime="20170713 20:29:33.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:33.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:33.316" starttime="20170713 20:29:33.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:33.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:33.316" starttime="20170713 20:29:33.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:33.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:33.317" starttime="20170713 20:29:33.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:33.588" starttime="20170713 20:29:33.318"></status>
</kw>
<msg timestamp="20170713 20:29:33.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:33.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.589" starttime="20170713 20:29:33.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.589" starttime="20170713 20:29:33.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.590" starttime="20170713 20:29:33.590"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.590" starttime="20170713 20:29:33.314"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.590" starttime="20170713 20:29:33.313"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.590" starttime="20170713 20:29:33.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:33.591" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170713 20:29:33.591" starttime="20170713 20:29:33.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:33.592" starttime="20170713 20:29:33.592"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:33.727" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170713 20:29:33.727" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.727" starttime="20170713 20:29:33.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:33.728" starttime="20170713 20:29:33.728"></status>
</kw>
<msg timestamp="20170713 20:29:33.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.728" starttime="20170713 20:29:33.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:33.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:33.729" starttime="20170713 20:29:33.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:33.730" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:33.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:33.730" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/f...</msg>
<status status="PASS" endtime="20170713 20:29:33.730" starttime="20170713 20:29:33.729"></status>
</kw>
<msg timestamp="20170713 20:29:33.730" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_settings': 1, u'restor...</msg>
<status status="PASS" endtime="20170713 20:29:33.730" starttime="20170713 20:29:33.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:33.731" starttime="20170713 20:29:33.730"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.731" starttime="20170713 20:29:32.820"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:33.731" starttime="20170713 20:29:32.815"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>/home/fspcibld/witherspoon-20170713195225.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:33.746" starttime="20170713 20:29:33.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:34.383" starttime="20170713 20:29:33.748"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:34.384" starttime="20170713 20:29:33.747"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:34.384" starttime="20170713 20:29:33.739"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:49.731" starttime="20170713 20:29:34.384"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:49.732" starttime="20170713 20:29:33.739"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:49.732" starttime="20170713 20:29:33.732"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170713 20:29:49.741" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170713 20:29:49.741" starttime="20170713 20:29:49.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:49.742" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170713 20:29:49.742" starttime="20170713 20:29:49.741"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:49.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:49.745" starttime="20170713 20:29:49.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:49.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:49.746" starttime="20170713 20:29:49.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:49.746" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:49.746" starttime="20170713 20:29:49.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:49.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:49.747" starttime="20170713 20:29:49.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:49.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:49.937" starttime="20170713 20:29:49.748"></status>
</kw>
<msg timestamp="20170713 20:29:49.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:49.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:49.937" starttime="20170713 20:29:49.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:49.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:49.938" starttime="20170713 20:29:49.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:49.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:49.939" starttime="20170713 20:29:49.939"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:49.939" starttime="20170713 20:29:49.744"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:49.939" starttime="20170713 20:29:49.743"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:49.939" starttime="20170713 20:29:49.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:49.940" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170713 20:29:49.940" starttime="20170713 20:29:49.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:49.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:49.941" starttime="20170713 20:29:49.940"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:49.941" starttime="20170713 20:29:49.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:49.942" starttime="20170713 20:29:49.941"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:54.027" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:54.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.027" starttime="20170713 20:29:49.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.028" starttime="20170713 20:29:54.028"></status>
</kw>
<msg timestamp="20170713 20:29:54.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.028" starttime="20170713 20:29:49.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.029" starttime="20170713 20:29:54.029"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:54.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:54.033" starttime="20170713 20:29:54.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:54.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:54.033" starttime="20170713 20:29:54.033"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:54.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:54.034" starttime="20170713 20:29:54.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:54.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:54.035" starttime="20170713 20:29:54.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:54.326" starttime="20170713 20:29:54.036"></status>
</kw>
<msg timestamp="20170713 20:29:54.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:54.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.326" starttime="20170713 20:29:54.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.327" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.327" starttime="20170713 20:29:54.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.328" starttime="20170713 20:29:54.327"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.328" starttime="20170713 20:29:54.032"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.328" starttime="20170713 20:29:54.031"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.328" starttime="20170713 20:29:54.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:54.329" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170713 20:29:54.329" starttime="20170713 20:29:54.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.330" starttime="20170713 20:29:54.329"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:54.424" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170713 20:29:54.424" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.424" starttime="20170713 20:29:54.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.425" starttime="20170713 20:29:54.425"></status>
</kw>
<msg timestamp="20170713 20:29:54.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.425" starttime="20170713 20:29:54.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:54.426" starttime="20170713 20:29:54.426"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:54.427" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Deferred for mounted filesystem. reboot BMC to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:54.427" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:54.427" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u...</msg>
<status status="PASS" endtime="20170713 20:29:54.427" starttime="20170713 20:29:54.426"></status>
</kw>
<msg timestamp="20170713 20:29:54.427" level="INFO">${data} = {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_se...</msg>
<status status="PASS" endtime="20170713 20:29:54.427" starttime="20170713 20:29:54.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.428" starttime="20170713 20:29:54.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.429" starttime="20170713 20:29:54.428"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.429" starttime="20170713 20:29:49.740"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.429" starttime="20170713 20:29:49.733"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ OBMC Reboot (off)</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.433" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:54.478" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:54.478" starttime="20170713 20:29:54.477"></status>
</kw>
<msg timestamp="20170713 20:29:54.478" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:54.478" starttime="20170713 20:29:54.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.480" starttime="20170713 20:29:54.479"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.480" starttime="20170713 20:29:54.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.481" starttime="20170713 20:29:54.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:54.483" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:54.483" starttime="20170713 20:29:54.482"></status>
</kw>
<msg timestamp="20170713 20:29:54.483" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:54.483" starttime="20170713 20:29:54.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:54.486" starttime="20170713 20:29:54.485"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.486" starttime="20170713 20:29:54.485"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:54.486" starttime="20170713 20:29:54.484"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:54.487" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:56.134" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:56.134" starttime="20170713 20:29:54.487"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.134" starttime="20170713 20:29:54.475"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:29:56.135" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170713 20:29:56.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:29:56.212" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170713 20:29:56.212" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:29:56.212" starttime="20170713 20:29:56.135"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.213" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:29:56.213" starttime="20170713 20:29:56.212"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.213" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170713 20:29:56.213" starttime="20170713 20:29:56.213"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.214" starttime="20170713 20:29:54.474"></status>
</kw>
<msg timestamp="20170713 20:29:56.214" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170713 20:29:56.433" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170713 20:29:56.445" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170713 20:29:56.445" starttime="20170713 20:29:56.444"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:56.447" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170713 20:29:56.447" starttime="20170713 20:29:56.446"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:56.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:56.452" starttime="20170713 20:29:56.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:56.453" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:56.453" starttime="20170713 20:29:56.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:56.454" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:56.454" starttime="20170713 20:29:56.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:56.455" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:56.455" starttime="20170713 20:29:56.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.746" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:56.746" starttime="20170713 20:29:56.456"></status>
</kw>
<msg timestamp="20170713 20:29:56.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:56.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.746" starttime="20170713 20:29:56.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.747" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.747" starttime="20170713 20:29:56.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.748" starttime="20170713 20:29:56.747"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.748" starttime="20170713 20:29:56.450"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.748" starttime="20170713 20:29:56.449"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.748" starttime="20170713 20:29:56.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:56.749" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170713 20:29:56.749" starttime="20170713 20:29:56.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:56.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:56.749" starttime="20170713 20:29:56.749"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:56.750" starttime="20170713 20:29:56.750"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:56.751" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:56.752" starttime="20170713 20:29:56.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:56.752" level="INFO">URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170713 20:29:56.753" starttime="20170713 20:29:56.752"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.753" starttime="20170713 20:29:56.752"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.753" starttime="20170713 20:29:56.750"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:56.940" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170713 20:29:56.940" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.940" starttime="20170713 20:29:56.753"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170713 20:29:56.941" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:56.941" starttime="20170713 20:29:56.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170713 20:29:56.942" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170713 20:29:56.942" starttime="20170713 20:29:56.942"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.942" starttime="20170713 20:29:56.941"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.943" starttime="20170713 20:29:56.940"></status>
</kw>
<msg timestamp="20170713 20:29:56.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.943" starttime="20170713 20:29:56.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:56.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:56.944" starttime="20170713 20:29:56.943"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170713 20:29:56.944" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:56.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:56.944" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170713 20:29:56.944" starttime="20170713 20:29:56.944"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:56.945" starttime="20170713 20:29:56.445"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:56.948" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:56.949" starttime="20170713 20:29:56.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:56.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:56.949" starttime="20170713 20:29:56.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:56.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:56.950" starttime="20170713 20:29:56.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:56.950" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:56.951" starttime="20170713 20:29:56.950"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:57.156" starttime="20170713 20:29:56.951"></status>
</kw>
<msg timestamp="20170713 20:29:57.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:57.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.156" starttime="20170713 20:29:56.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.157" starttime="20170713 20:29:57.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.158" starttime="20170713 20:29:57.157"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.158" starttime="20170713 20:29:56.947"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.158" starttime="20170713 20:29:56.946"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.158" starttime="20170713 20:29:56.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:57.159" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170713 20:29:57.159" starttime="20170713 20:29:57.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:57.160" starttime="20170713 20:29:57.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:57.246" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170713 20:29:57.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.246" starttime="20170713 20:29:57.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:57.246" starttime="20170713 20:29:57.246"></status>
</kw>
<msg timestamp="20170713 20:29:57.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.247" starttime="20170713 20:29:56.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.247" starttime="20170713 20:29:57.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:57.248" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:57.248" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:57.248" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170713 20:29:57.248" starttime="20170713 20:29:57.248"></status>
</kw>
<msg timestamp="20170713 20:29:57.248" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170713 20:29:57.248" starttime="20170713 20:29:56.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.249" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:57.249" starttime="20170713 20:29:57.249"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.249" starttime="20170713 20:29:56.443"></status>
</kw>
<msg timestamp="20170713 20:29:57.309" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170713 20:29:57.336" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170713 20:29:57.344" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170713 20:29:57.344" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:29:57.347" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:29:57.347" starttime="20170713 20:29:57.347"></status>
</kw>
<msg timestamp="20170713 20:29:57.347" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:29:57.347" starttime="20170713 20:29:57.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:57.349" starttime="20170713 20:29:57.348"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.349" starttime="20170713 20:29:57.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:57.349" starttime="20170713 20:29:57.349"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:29:57.350" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:29:57.351" starttime="20170713 20:29:57.350"></status>
</kw>
<msg timestamp="20170713 20:29:57.351" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:29:57.351" starttime="20170713 20:29:57.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:57.353" starttime="20170713 20:29:57.352"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.353" starttime="20170713 20:29:57.352"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:57.353" starttime="20170713 20:29:57.351"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:29:57.353" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:29:59.164" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:29:59.164" starttime="20170713 20:29:57.353"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.165" starttime="20170713 20:29:57.346"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:59.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:59.215" starttime="20170713 20:29:59.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:59.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:59.216" starttime="20170713 20:29:59.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:59.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:59.217" starttime="20170713 20:29:59.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:59.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:59.218" starttime="20170713 20:29:59.217"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.420" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:59.420" starttime="20170713 20:29:59.219"></status>
</kw>
<msg timestamp="20170713 20:29:59.420" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:59.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.420" starttime="20170713 20:29:59.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.421" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.421" starttime="20170713 20:29:59.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.422" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.422" starttime="20170713 20:29:59.422"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.423" starttime="20170713 20:29:59.207"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.423" starttime="20170713 20:29:59.205"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.423" starttime="20170713 20:29:59.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:59.424" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170713 20:29:59.424" starttime="20170713 20:29:59.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:59.425" starttime="20170713 20:29:59.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:59.493" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170713 20:29:59.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.493" starttime="20170713 20:29:59.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:59.494" starttime="20170713 20:29:59.494"></status>
</kw>
<msg timestamp="20170713 20:29:59.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.494" starttime="20170713 20:29:59.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.495" starttime="20170713 20:29:59.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:59.496" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:59.496" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:59.496" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170713 20:29:59.496" starttime="20170713 20:29:59.496"></status>
</kw>
<msg timestamp="20170713 20:29:59.497" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170713 20:29:59.497" starttime="20170713 20:29:59.196"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.497" starttime="20170713 20:29:59.190"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:59.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:59.501" starttime="20170713 20:29:59.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:59.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:59.502" starttime="20170713 20:29:59.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:59.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:59.503" starttime="20170713 20:29:59.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:59.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:59.503" starttime="20170713 20:29:59.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.694" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:29:59.694" starttime="20170713 20:29:59.504"></status>
</kw>
<msg timestamp="20170713 20:29:59.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:29:59.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.695" starttime="20170713 20:29:59.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.695" starttime="20170713 20:29:59.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.696" starttime="20170713 20:29:59.696"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.696" starttime="20170713 20:29:59.500"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.696" starttime="20170713 20:29:59.500"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.697" starttime="20170713 20:29:59.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:29:59.697" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170713 20:29:59.697" starttime="20170713 20:29:59.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:59.698" starttime="20170713 20:29:59.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:29:59.763" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170713 20:29:59.763" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.763" starttime="20170713 20:29:59.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:29:59.764" starttime="20170713 20:29:59.764"></status>
</kw>
<msg timestamp="20170713 20:29:59.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.764" starttime="20170713 20:29:59.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:29:59.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:29:59.765" starttime="20170713 20:29:59.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:29:59.766" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:29:59.766" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:29:59.766" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170713 20:29:59.766" starttime="20170713 20:29:59.765"></status>
</kw>
<msg timestamp="20170713 20:29:59.766" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170713 20:29:59.766" starttime="20170713 20:29:59.498"></status>
</kw>
<status status="PASS" endtime="20170713 20:29:59.766" starttime="20170713 20:29:59.497"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:29:59.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:29:59.771" starttime="20170713 20:29:59.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:29:59.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:29:59.771" starttime="20170713 20:29:59.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:29:59.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:29:59.772" starttime="20170713 20:29:59.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:29:59.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:29:59.773" starttime="20170713 20:29:59.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.060" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:30:00.060" starttime="20170713 20:29:59.773"></status>
</kw>
<msg timestamp="20170713 20:30:00.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:30:00.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.060" starttime="20170713 20:29:59.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.061" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.061" starttime="20170713 20:30:00.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.062" starttime="20170713 20:30:00.061"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.062" starttime="20170713 20:29:59.770"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.062" starttime="20170713 20:29:59.769"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.062" starttime="20170713 20:29:59.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:30:00.063" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170713 20:30:00.063" starttime="20170713 20:30:00.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.063" starttime="20170713 20:30:00.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:30:00.129" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170713 20:30:00.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.129" starttime="20170713 20:30:00.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.130" starttime="20170713 20:30:00.130"></status>
</kw>
<msg timestamp="20170713 20:30:00.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.130" starttime="20170713 20:29:59.768"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.131" starttime="20170713 20:30:00.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:30:00.132" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:30:00.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:30:00.132" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170713 20:30:00.132" starttime="20170713 20:30:00.131"></status>
</kw>
<msg timestamp="20170713 20:30:00.132" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170713 20:30:00.132" starttime="20170713 20:29:59.767"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.132" starttime="20170713 20:29:59.767"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:30:00.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:30:00.136" starttime="20170713 20:30:00.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:30:00.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:30:00.137" starttime="20170713 20:30:00.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:30:00.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:30:00.138" starttime="20170713 20:30:00.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:30:00.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:30:00.138" starttime="20170713 20:30:00.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:30:00.337" starttime="20170713 20:30:00.139"></status>
</kw>
<msg timestamp="20170713 20:30:00.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:30:00.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.337" starttime="20170713 20:30:00.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.338" starttime="20170713 20:30:00.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.338" starttime="20170713 20:30:00.338"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.339" starttime="20170713 20:30:00.135"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.339" starttime="20170713 20:30:00.135"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.339" starttime="20170713 20:30:00.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:30:00.339" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170713 20:30:00.339" starttime="20170713 20:30:00.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.340" starttime="20170713 20:30:00.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:30:00.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170713 20:30:00.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.403" starttime="20170713 20:30:00.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.403" starttime="20170713 20:30:00.403"></status>
</kw>
<msg timestamp="20170713 20:30:00.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.404" starttime="20170713 20:30:00.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:30:00.404" starttime="20170713 20:30:00.404"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:30:00.405" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:30:00.405" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:30:00.405" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170713 20:30:00.405" starttime="20170713 20:30:00.405"></status>
</kw>
<msg timestamp="20170713 20:30:00.405" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170713 20:30:00.405" starttime="20170713 20:30:00.133"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.406" starttime="20170713 20:30:00.132"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170713 20:30:00.411" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:30:00.413" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:30:00.413" starttime="20170713 20:30:00.413"></status>
</kw>
<msg timestamp="20170713 20:30:00.413" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:30:00.414" starttime="20170713 20:30:00.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.415" starttime="20170713 20:30:00.414"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.415" starttime="20170713 20:30:00.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.415" starttime="20170713 20:30:00.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:30:00.417" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:30:00.417" starttime="20170713 20:30:00.417"></status>
</kw>
<msg timestamp="20170713 20:30:00.417" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:30:00.417" starttime="20170713 20:30:00.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:30:00.420" starttime="20170713 20:30:00.419"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.420" starttime="20170713 20:30:00.419"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:00.420" starttime="20170713 20:30:00.418"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:30:00.420" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:30:02.199" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:30:02.200" starttime="20170713 20:30:00.420"></status>
</kw>
<status status="PASS" endtime="20170713 20:30:02.200" starttime="20170713 20:30:00.412"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>/sbin/reboot</arg>
</arguments>
<msg timestamp="20170713 20:30:02.200" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170713 20:30:02.207" starttime="20170713 20:30:02.200"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:06.229" level="FAIL">
#(UTC) 2017/07/13 20:30:06.227099 -    5.819882 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:06.230" starttime="20170713 20:30:02.218"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:10.260" level="FAIL">
#(UTC) 2017/07/13 20:30:10.248607 -    4.021508 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:10.264" starttime="20170713 20:30:06.232"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:14.305" level="FAIL">
#(UTC) 2017/07/13 20:30:14.295888 -    4.047281 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:14.306" starttime="20170713 20:30:10.278"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:18.332" level="FAIL">
#(UTC) 2017/07/13 20:30:18.323563 -    4.027675 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:18.333" starttime="20170713 20:30:14.309"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:22.345" level="FAIL">
#(UTC) 2017/07/13 20:30:22.343155 -    4.019592 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:22.346" starttime="20170713 20:30:18.336"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:26.362" level="FAIL">
#(UTC) 2017/07/13 20:30:26.359478 -    4.016323 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:26.362" starttime="20170713 20:30:22.349"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:30.374" level="FAIL">
#(UTC) 2017/07/13 20:30:30.371769 -    4.012291 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:30.375" starttime="20170713 20:30:26.365"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:34.389" level="FAIL">
#(UTC) 2017/07/13 20:30:34.387185 -    4.015416 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:34.390" starttime="20170713 20:30:30.377"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:38.419" level="FAIL">
#(UTC) 2017/07/13 20:30:38.407889 -    4.020704 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:38.423" starttime="20170713 20:30:34.392"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:42.451" level="FAIL">
#(UTC) 2017/07/13 20:30:42.449080 -    4.041191 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:42.452" starttime="20170713 20:30:38.437"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:46.467" level="FAIL">
#(UTC) 2017/07/13 20:30:46.465299 -    4.016219 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:46.468" starttime="20170713 20:30:42.455"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:50.482" level="FAIL">
#(UTC) 2017/07/13 20:30:50.479711 -    4.014412 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:50.483" starttime="20170713 20:30:46.470"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:54.498" level="FAIL">
#(UTC) 2017/07/13 20:30:54.495722 -    4.016011 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:54.499" starttime="20170713 20:30:50.486"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:30:58.533" level="FAIL">
#(UTC) 2017/07/13 20:30:58.521385 -    4.025663 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:30:58.538" starttime="20170713 20:30:54.501"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:02.566" level="FAIL">
#(UTC) 2017/07/13 20:31:02.563546 -    4.042161 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:02.567" starttime="20170713 20:30:58.550"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:06.583" level="FAIL">
#(UTC) 2017/07/13 20:31:06.580314 -    4.016768 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:06.584" starttime="20170713 20:31:02.570"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:10.598" level="FAIL">
#(UTC) 2017/07/13 20:31:10.595410 -    4.015096 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:10.599" starttime="20170713 20:31:06.586"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:14.614" level="FAIL">
#(UTC) 2017/07/13 20:31:14.612181 -    4.016771 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:14.615" starttime="20170713 20:31:10.604"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:18.632" level="FAIL">
#(UTC) 2017/07/13 20:31:18.627140 -    4.014959 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:18.637" starttime="20170713 20:31:14.618"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:22.662" level="FAIL">
#(UTC) 2017/07/13 20:31:22.659515 -    4.032375 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:22.663" starttime="20170713 20:31:18.650"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:26.675" level="FAIL">
#(UTC) 2017/07/13 20:31:26.672635 -    4.013120 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:26.676" starttime="20170713 20:31:22.665"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:30.691" level="FAIL">
#(UTC) 2017/07/13 20:31:30.687449 -    4.014814 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:30.692" starttime="20170713 20:31:26.679"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:34.706" level="FAIL">
#(UTC) 2017/07/13 20:31:34.703396 -    4.015947 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:34.707" starttime="20170713 20:31:30.694"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:38.723" level="FAIL">
#(UTC) 2017/07/13 20:31:38.721350 -    4.017954 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:38.724" starttime="20170713 20:31:34.710"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:42.738" level="FAIL">
#(UTC) 2017/07/13 20:31:42.735478 -    4.014128 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:42.739" starttime="20170713 20:31:38.726"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:46.754" level="FAIL">
#(UTC) 2017/07/13 20:31:46.751494 -    4.016016 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:46.755" starttime="20170713 20:31:42.742"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:50.775" level="FAIL">
#(UTC) 2017/07/13 20:31:50.772648 -    4.021154 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:50.776" starttime="20170713 20:31:46.758"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:54.789" level="FAIL">
#(UTC) 2017/07/13 20:31:54.787283 -    4.014635 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:54.790" starttime="20170713 20:31:50.779"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:31:58.802" level="FAIL">
#(UTC) 2017/07/13 20:31:58.799520 -    4.012237 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:31:58.803" starttime="20170713 20:31:54.793"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:02.818" level="FAIL">
#(UTC) 2017/07/13 20:32:02.815606 -    4.016086 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:02.819" starttime="20170713 20:31:58.806"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:06.838" level="FAIL">
#(UTC) 2017/07/13 20:32:06.835293 -    4.019687 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:06.839" starttime="20170713 20:32:02.822"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:10.855" level="FAIL">
#(UTC) 2017/07/13 20:32:10.852110 -    4.016817 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:10.855" starttime="20170713 20:32:06.843"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:14.875" level="FAIL">
#(UTC) 2017/07/13 20:32:14.872242 -    4.020132 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:14.876" starttime="20170713 20:32:10.858"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:18.908" level="FAIL">
#(UTC) 2017/07/13 20:32:18.896106 -    4.023864 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:18.909" starttime="20170713 20:32:14.878"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:22.944" level="FAIL">
#(UTC) 2017/07/13 20:32:22.932113 -    4.036007 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:22.948" starttime="20170713 20:32:18.912"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:26.992" level="FAIL">
#(UTC) 2017/07/13 20:32:26.980604 -    4.048491 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:26.996" starttime="20170713 20:32:22.960"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:31.064" level="FAIL">
#(UTC) 2017/07/13 20:32:31.027457 -    4.046853 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:31.068" starttime="20170713 20:32:27.009"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:35.105" level="FAIL">
#(UTC) 2017/07/13 20:32:35.093300 -    4.065843 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:35.111" starttime="20170713 20:32:31.074"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:39.138" level="FAIL">
#(UTC) 2017/07/13 20:32:39.135651 -    4.042351 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:39.139" starttime="20170713 20:32:35.123"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:43.150" level="FAIL">
#(UTC) 2017/07/13 20:32:43.147534 -    4.011883 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:43.151" starttime="20170713 20:32:39.142"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:47.166" level="FAIL">
#(UTC) 2017/07/13 20:32:47.163635 -    4.016101 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:47.167" starttime="20170713 20:32:43.154"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:51.182" level="FAIL">
#(UTC) 2017/07/13 20:32:51.179825 -    4.016190 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:51.183" starttime="20170713 20:32:47.170"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:55.198" level="FAIL">
#(UTC) 2017/07/13 20:32:55.195264 -    4.015439 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:55.199" starttime="20170713 20:32:51.186"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:32:59.214" level="FAIL">
#(UTC) 2017/07/13 20:32:59.211580 -    4.016316 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:32:59.215" starttime="20170713 20:32:55.205"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:03.230" level="FAIL">
#(UTC) 2017/07/13 20:33:03.227735 -    4.016155 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:03.231" starttime="20170713 20:32:59.218"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:07.242" level="FAIL">
#(UTC) 2017/07/13 20:33:07.239690 -    4.011955 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:07.243" starttime="20170713 20:33:03.234"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:11.258" level="FAIL">
#(UTC) 2017/07/13 20:33:11.255612 -    4.015922 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:11.259" starttime="20170713 20:33:07.246"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:15.270" level="FAIL">
#(UTC) 2017/07/13 20:33:15.267617 -    4.012005 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:15.271" starttime="20170713 20:33:11.262"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:19.286" level="FAIL">
#(UTC) 2017/07/13 20:33:19.283573 -    4.015956 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:19.287" starttime="20170713 20:33:15.274"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:23.300" level="FAIL">
#(UTC) 2017/07/13 20:33:23.295810 -    4.012237 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:23.301" starttime="20170713 20:33:19.289"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:27.315" level="FAIL">
#(UTC) 2017/07/13 20:33:27.311824 -    4.016014 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:27.316" starttime="20170713 20:33:23.303"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:31.330" level="FAIL">
#(UTC) 2017/07/13 20:33:31.327416 -    4.015592 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:31.331" starttime="20170713 20:33:27.318"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:35.347" level="FAIL">
#(UTC) 2017/07/13 20:33:35.344032 -    4.016616 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:35.348" starttime="20170713 20:33:31.333"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:39.363" level="FAIL">
#(UTC) 2017/07/13 20:33:39.360147 -    4.016115 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:39.363" starttime="20170713 20:33:35.350"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:43.378" level="FAIL">
#(UTC) 2017/07/13 20:33:43.375523 -    4.015376 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:43.379" starttime="20170713 20:33:39.366"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:47.395" level="FAIL">
#(UTC) 2017/07/13 20:33:47.392056 -    4.016533 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:47.395" starttime="20170713 20:33:43.382"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:51.410" level="FAIL">
#(UTC) 2017/07/13 20:33:51.407542 -    4.015486 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:51.411" starttime="20170713 20:33:47.398"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:55.422" level="FAIL">
#(UTC) 2017/07/13 20:33:55.419619 -    4.012077 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:55.423" starttime="20170713 20:33:51.414"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:33:59.434" level="FAIL">
#(UTC) 2017/07/13 20:33:59.431730 -    4.012111 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:33:59.435" starttime="20170713 20:33:55.425"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:03.446" level="FAIL">
#(UTC) 2017/07/13 20:34:03.443505 -    4.011775 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:03.447" starttime="20170713 20:33:59.437"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:07.458" level="FAIL">
#(UTC) 2017/07/13 20:34:07.455674 -    4.012169 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:07.459" starttime="20170713 20:34:03.449"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:11.474" level="FAIL">
#(UTC) 2017/07/13 20:34:11.471791 -    4.016117 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:11.475" starttime="20170713 20:34:07.462"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:15.487" level="FAIL">
#(UTC) 2017/07/13 20:34:15.483668 -    4.011877 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:15.488" starttime="20170713 20:34:11.477"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:19.503" level="FAIL">
#(UTC) 2017/07/13 20:34:19.499736 -    4.016068 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:19.504" starttime="20170713 20:34:15.490"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:23.517" level="FAIL">
#(UTC) 2017/07/13 20:34:23.511409 -    4.011673 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:23.518" starttime="20170713 20:34:19.506"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:27.535" level="FAIL">
#(UTC) 2017/07/13 20:34:27.533067 -    4.021658 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:27.536" starttime="20170713 20:34:23.520"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:31.550" level="FAIL">
#(UTC) 2017/07/13 20:34:31.547836 -    4.014769 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:31.551" starttime="20170713 20:34:27.538"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:35.567" level="FAIL">
#(UTC) 2017/07/13 20:34:35.563958 -    4.016122 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:35.568" starttime="20170713 20:34:31.554"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:39.583" level="FAIL">
#(UTC) 2017/07/13 20:34:39.580079 -    4.016121 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:39.583" starttime="20170713 20:34:35.570"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:43.594" level="FAIL">
#(UTC) 2017/07/13 20:34:43.591482 -    4.011403 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:43.595" starttime="20170713 20:34:39.586"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:47.606" level="FAIL">
#(UTC) 2017/07/13 20:34:47.603241 -    4.011759 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:47.606" starttime="20170713 20:34:43.597"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:51.619" level="FAIL">
#(UTC) 2017/07/13 20:34:51.616037 -    4.012796 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:51.619" starttime="20170713 20:34:47.609"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:55.635" level="FAIL">
#(UTC) 2017/07/13 20:34:55.631979 -    4.015942 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:55.636" starttime="20170713 20:34:51.622"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:34:59.650" level="FAIL">
#(UTC) 2017/07/13 20:34:59.647677 -    4.015698 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:34:59.651" starttime="20170713 20:34:55.638"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:03.666" level="FAIL">
#(UTC) 2017/07/13 20:35:03.663770 -    4.016093 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:03.667" starttime="20170713 20:34:59.654"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:07.704" level="FAIL">
#(UTC) 2017/07/13 20:35:07.686116 -    4.022346 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:07.707" starttime="20170713 20:35:03.670"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:11.730" level="FAIL">
#(UTC) 2017/07/13 20:35:11.727538 -    4.041422 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:11.731" starttime="20170713 20:35:07.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:15.746" level="FAIL">
#(UTC) 2017/07/13 20:35:15.743892 -    4.016354 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:15.747" starttime="20170713 20:35:11.734"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:19.783" level="FAIL">
#(UTC) 2017/07/13 20:35:19.770387 -    4.026495 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:19.788" starttime="20170713 20:35:15.750"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:23.818" level="FAIL">
#(UTC) 2017/07/13 20:35:23.815691 -    4.045304 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:23.819" starttime="20170713 20:35:19.799"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:27.834" level="FAIL">
#(UTC) 2017/07/13 20:35:27.831546 -    4.015855 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:27.835" starttime="20170713 20:35:23.822"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:31.850" level="FAIL">
#(UTC) 2017/07/13 20:35:31.847830 -    4.016284 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:31.851" starttime="20170713 20:35:27.838"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:35.867" level="FAIL">
#(UTC) 2017/07/13 20:35:35.864577 -    4.016747 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:35.868" starttime="20170713 20:35:31.854"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:39.882" level="FAIL">
#(UTC) 2017/07/13 20:35:39.879323 -    4.014746 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:39.882" starttime="20170713 20:35:35.870"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:43.894" level="FAIL">
#(UTC) 2017/07/13 20:35:43.891564 -    4.012241 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:43.895" starttime="20170713 20:35:39.885"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:47.911" level="FAIL">
#(UTC) 2017/07/13 20:35:47.908810 -    4.017246 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:47.912" starttime="20170713 20:35:43.898"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:51.926" level="FAIL">
#(UTC) 2017/07/13 20:35:51.923767 -    4.014957 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:51.927" starttime="20170713 20:35:47.915"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:55.942" level="FAIL">
#(UTC) 2017/07/13 20:35:55.939453 -    4.015686 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:55.943" starttime="20170713 20:35:51.930"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:35:59.955" level="FAIL">
#(UTC) 2017/07/13 20:35:59.951691 -    4.012238 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:35:59.956" starttime="20170713 20:35:55.946"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:03.970" level="FAIL">
#(UTC) 2017/07/13 20:36:03.967892 -    4.016201 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:03.971" starttime="20170713 20:35:59.958"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:07.982" level="FAIL">
#(UTC) 2017/07/13 20:36:07.979695 -    4.011803 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:07.983" starttime="20170713 20:36:03.974"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:11.998" level="FAIL">
#(UTC) 2017/07/13 20:36:11.995535 -    4.015840 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:11.999" starttime="20170713 20:36:07.986"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:16.014" level="FAIL">
#(UTC) 2017/07/13 20:36:16.011611 -    4.016076 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:16.015" starttime="20170713 20:36:12.002"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:20.026" level="FAIL">
#(UTC) 2017/07/13 20:36:20.023684 -    4.012073 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:20.027" starttime="20170713 20:36:16.018"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:24.042" level="FAIL">
#(UTC) 2017/07/13 20:36:24.039738 -    4.016054 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:24.043" starttime="20170713 20:36:20.030"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:28.059" level="FAIL">
#(UTC) 2017/07/13 20:36:28.056208 -    4.016470 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:28.060" starttime="20170713 20:36:24.046"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:32.074" level="FAIL">
#(UTC) 2017/07/13 20:36:32.071686 -    4.015478 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:32.075" starttime="20170713 20:36:28.062"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:36.090" level="FAIL">
#(UTC) 2017/07/13 20:36:36.087868 -    4.016182 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:36.091" starttime="20170713 20:36:32.078"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:40.106" level="FAIL">
#(UTC) 2017/07/13 20:36:40.103701 -    4.015833 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:40.107" starttime="20170713 20:36:36.094"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:44.124" level="FAIL">
#(UTC) 2017/07/13 20:36:44.121088 -    4.017387 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:44.125" starttime="20170713 20:36:40.110"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:48.139" level="FAIL">
#(UTC) 2017/07/13 20:36:48.135923 -    4.014835 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:48.140" starttime="20170713 20:36:44.127"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:52.156" level="FAIL">
#(UTC) 2017/07/13 20:36:52.151778 -    4.015855 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:52.157" starttime="20170713 20:36:48.142"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:36:56.170" level="FAIL">
#(UTC) 2017/07/13 20:36:56.167753 -    4.015975 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:36:56.171" starttime="20170713 20:36:52.159"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:00.186" level="FAIL">
#(UTC) 2017/07/13 20:37:00.183818 -    4.016065 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:00.187" starttime="20170713 20:36:56.175"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:04.203" level="FAIL">
#(UTC) 2017/07/13 20:37:04.200075 -    4.016257 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:04.204" starttime="20170713 20:37:00.190"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:08.218" level="FAIL">
#(UTC) 2017/07/13 20:37:08.216110 -    4.016035 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:08.219" starttime="20170713 20:37:04.207"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:12.235" level="FAIL">
#(UTC) 2017/07/13 20:37:12.232292 -    4.016182 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:12.236" starttime="20170713 20:37:08.222"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:16.252" level="FAIL">
#(UTC) 2017/07/13 20:37:16.249860 -    4.017568 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:16.253" starttime="20170713 20:37:12.239"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:20.269" level="FAIL">
#(UTC) 2017/07/13 20:37:20.266158 -    4.016298 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:20.269" starttime="20170713 20:37:16.256"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:24.282" level="FAIL">
#(UTC) 2017/07/13 20:37:24.279651 -    4.013493 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:24.283" starttime="20170713 20:37:20.272"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:28.299" level="FAIL">
#(UTC) 2017/07/13 20:37:28.296249 -    4.016598 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:28.300" starttime="20170713 20:37:24.286"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:32.314" level="FAIL">
#(UTC) 2017/07/13 20:37:32.311538 -    4.015289 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:32.315" starttime="20170713 20:37:28.302"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:36.331" level="FAIL">
#(UTC) 2017/07/13 20:37:36.327990 -    4.016452 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:36.332" starttime="20170713 20:37:32.317"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:40.346" level="FAIL">
#(UTC) 2017/07/13 20:37:40.343516 -    4.015526 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:40.347" starttime="20170713 20:37:36.334"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:44.363" level="FAIL">
#(UTC) 2017/07/13 20:37:44.359800 -    4.016284 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:44.364" starttime="20170713 20:37:40.350"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:48.378" level="FAIL">
#(UTC) 2017/07/13 20:37:48.375674 -    4.015874 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:48.379" starttime="20170713 20:37:44.367"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:52.395" level="FAIL">
#(UTC) 2017/07/13 20:37:52.392328 -    4.016654 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:52.396" starttime="20170713 20:37:48.381"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:37:56.412" level="FAIL">
#(UTC) 2017/07/13 20:37:56.409592 -    4.017264 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:37:56.413" starttime="20170713 20:37:52.399"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:38:00.427" level="FAIL">
#(UTC) 2017/07/13 20:38:00.423731 -    4.014139 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:38:00.428" starttime="20170713 20:37:56.416"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170713 20:38:04.462" level="FAIL">
#(UTC) 2017/07/13 20:38:04.449547 -    4.025816 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:38:04.466" starttime="20170713 20:38:00.430"></status>
</kw>
<msg timestamp="20170713 20:38:04.470" level="FAIL">Keyword 'Check State' failed after retrying for 8 minutes. The last error was: 
#(UTC) 2017/07/13 20:38:04.449547 -    4.025816 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170713 20:38:04.470" starttime="20170713 20:30:00.407"></status>
</kw>
<msg timestamp="20170713 20:38:04.487" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170713 20:38:04.491" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170713 20:38:04.509" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.21.61.170713.203804.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170713 20:38:04.528" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170713 20:38:04.528" starttime="20170713 20:38:04.528"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170713 20:38:04.541" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170713 20:38:07.537" level="INFO">${RC} = 0</msg>
<msg timestamp="20170713 20:38:07.537" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.958 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.954 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170713 20:38:07.537" starttime="20170713 20:38:04.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.541" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.958 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.954 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.620 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.635 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.620/0.791/0.958/0.167 ms</msg>
<status status="PASS" endtime="20170713 20:38:07.541" starttime="20170713 20:38:07.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:07.542" starttime="20170713 20:38:07.542"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.542" starttime="20170713 20:38:04.526"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:38:07.564" level="INFO">${cur_time} = 2017-07-13 20:38:07:563877</msg>
<status status="PASS" endtime="20170713 20:38:07.564" starttime="20170713 20:38:07.564"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:38:07.565" level="INFO">${cur_time} = 20170713203807563877</msg>
<status status="PASS" endtime="20170713 20:38:07.565" starttime="20170713 20:38:07.564"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.565" starttime="20170713 20:38:07.563"></status>
</kw>
<msg timestamp="20170713 20:38:07.570" level="INFO">${FFDC_TIME} = 20170713203807563877</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170713 20:38:07.571" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170713 20:38:07.571" starttime="20170713 20:38:07.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170713 20:38:07.572" level="INFO">${suite_name} = 20170713203807563877_UpdateBmc</msg>
<status status="PASS" endtime="20170713 20:38:07.572" starttime="20170713 20:38:07.572"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170713 20:38:07.572" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170713 20:38:07.573" starttime="20170713 20:38:07.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170713 20:38:07.573" level="INFO">${test_name} = 20170713203807563877_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170713 20:38:07.573" starttime="20170713 20:38:07.573"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.573" starttime="20170713 20:38:07.570"></status>
</kw>
<msg timestamp="20170713 20:38:07.574" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170713 20:38:07.574" level="INFO">${FFDC_PREFIX} = 9.3.21.61.170713.203804.</msg>
<msg timestamp="20170713 20:38:07.595" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170713 20:38:07.596" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.596" starttime="20170713 20:38:07.595"></status>
</kw>
<msg timestamp="20170713 20:38:07.600" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.613" starttime="20170713 20:38:07.612"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.613" starttime="20170713 20:38:07.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.614" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.614" starttime="20170713 20:38:07.614"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.614" starttime="20170713 20:38:07.613"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.617" starttime="20170713 20:38:07.616"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.617" starttime="20170713 20:38:07.615"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.619" starttime="20170713 20:38:07.618"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.619" starttime="20170713 20:38:07.617"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.620" starttime="20170713 20:38:07.620"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.620" starttime="20170713 20:38:07.619"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.621" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.622" starttime="20170713 20:38:07.621"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.622" starttime="20170713 20:38:07.620"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.623" starttime="20170713 20:38:07.623"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.623" starttime="20170713 20:38:07.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.624" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.624" starttime="20170713 20:38:07.624"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.624" starttime="20170713 20:38:07.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.626" starttime="20170713 20:38:07.625"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.626" starttime="20170713 20:38:07.625"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.627" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.627" starttime="20170713 20:38:07.627"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.628" starttime="20170713 20:38:07.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.629" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.629" starttime="20170713 20:38:07.628"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.629" starttime="20170713 20:38:07.628"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.630" starttime="20170713 20:38:07.630"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.630" starttime="20170713 20:38:07.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.632" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:07.632" starttime="20170713 20:38:07.631"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.632" starttime="20170713 20:38:07.630"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:07.634" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:07.634" starttime="20170713 20:38:07.634"></status>
</kw>
<msg timestamp="20170713 20:38:07.634" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:07.634" starttime="20170713 20:38:07.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:07.635" starttime="20170713 20:38:07.635"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.635" starttime="20170713 20:38:07.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:07.636" starttime="20170713 20:38:07.636"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:07.637" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:07.637" starttime="20170713 20:38:07.637"></status>
</kw>
<msg timestamp="20170713 20:38:07.637" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:07.637" starttime="20170713 20:38:07.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:07.639" starttime="20170713 20:38:07.639"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.640" starttime="20170713 20:38:07.639"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:07.640" starttime="20170713 20:38:07.638"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:07.640" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:09.387" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:09.387" starttime="20170713 20:38:07.640"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.388" starttime="20170713 20:38:07.632"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:09.388" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170713 20:38:09.465" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:09.465" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170713 20:38:09.465" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:09.465" starttime="20170713 20:38:09.388"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.466" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:38:09.466" starttime="20170713 20:38:09.466"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.466" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170713 20:38:09.467" starttime="20170713 20:38:09.466"></status>
</kw>
<msg timestamp="20170713 20:38:09.467" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170713 20:38:09.467" starttime="20170713 20:38:07.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.468" starttime="20170713 20:38:09.468"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.468" starttime="20170713 20:38:09.467"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.468" starttime="20170713 20:38:07.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.470" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.470" starttime="20170713 20:38:09.470"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.470" starttime="20170713 20:38:09.469"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:09.471" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170713 20:38:09.471" starttime="20170713 20:38:09.470"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.472" starttime="20170713 20:38:09.472"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.472" starttime="20170713 20:38:09.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.473" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.473" starttime="20170713 20:38:09.473"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.474" starttime="20170713 20:38:09.472"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.474" starttime="20170713 20:38:09.471"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.475" starttime="20170713 20:38:09.474"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.475" starttime="20170713 20:38:09.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.476" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.476" starttime="20170713 20:38:09.476"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.476" starttime="20170713 20:38:09.475"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.476" starttime="20170713 20:38:09.474"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.478" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.478" starttime="20170713 20:38:09.477"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.478" starttime="20170713 20:38:09.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.479" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.479" starttime="20170713 20:38:09.479"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.479" starttime="20170713 20:38:09.478"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.479" starttime="20170713 20:38:09.476"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.479" starttime="20170713 20:38:09.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:09.480" starttime="20170713 20:38:09.480"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.480" starttime="20170713 20:38:09.479"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.481" starttime="20170713 20:38:07.611"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:09.487" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170713 20:38:09.487" starttime="20170713 20:38:09.487"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170713 20:38:09.488" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170713 20:38:09.488" starttime="20170713 20:38:09.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.490" starttime="20170713 20:38:09.489"></status>
</kw>
<msg timestamp="20170713 20:38:09.490" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170713 20:38:09.490" starttime="20170713 20:38:09.489"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.492" starttime="20170713 20:38:09.492"></status>
</kw>
<msg timestamp="20170713 20:38:09.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:09.493" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:09.493" starttime="20170713 20:38:09.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.493" starttime="20170713 20:38:09.493"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:09.510" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:09.511" starttime="20170713 20:38:09.510"></status>
</kw>
<msg timestamp="20170713 20:38:09.511" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:09.511" starttime="20170713 20:38:09.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.512" starttime="20170713 20:38:09.512"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.512" starttime="20170713 20:38:09.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.513" starttime="20170713 20:38:09.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:09.514" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:09.514" starttime="20170713 20:38:09.514"></status>
</kw>
<msg timestamp="20170713 20:38:09.514" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:09.514" starttime="20170713 20:38:09.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:09.516" starttime="20170713 20:38:09.516"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.516" starttime="20170713 20:38:09.515"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:09.516" starttime="20170713 20:38:09.514"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:09.517" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:11.196" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:11.196" starttime="20170713 20:38:09.516"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.196" starttime="20170713 20:38:09.509"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:11.197" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170713 20:38:11.197" starttime="20170713 20:38:11.196"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:11.198" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170713 20:38:11.198" starttime="20170713 20:38:11.198"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:11.203" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170713 20:38:11.203" starttime="20170713 20:38:11.198"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:11.207" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:11.207" starttime="20170713 20:38:11.206"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.207" starttime="20170713 20:38:11.206"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:11.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:11.208" starttime="20170713 20:38:11.208"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.208" starttime="20170713 20:38:11.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:11.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:11.210" starttime="20170713 20:38:11.209"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.210" starttime="20170713 20:38:11.209"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:11.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:11.211" starttime="20170713 20:38:11.210"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.211" starttime="20170713 20:38:11.210"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.211" starttime="20170713 20:38:11.205"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:11.211" starttime="20170713 20:38:11.205"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:11.212" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170713 20:38:12.668" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:12.669" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170713 20:38:12.669" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:12.669" starttime="20170713 20:38:11.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.679" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.679" starttime="20170713 20:38:12.678"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.679" starttime="20170713 20:38:12.677"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.679" starttime="20170713 20:38:12.669"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.680" starttime="20170713 20:38:11.204"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.680" starttime="20170713 20:38:11.204"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.680" starttime="20170713 20:38:11.203"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.680" starttime="20170713 20:38:11.197"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.680" starttime="20170713 20:38:11.197"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:12.681" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170713 20:38:12.681" starttime="20170713 20:38:12.681"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.682" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170713 20:38:12.682" starttime="20170713 20:38:12.681"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.685" starttime="20170713 20:38:12.684"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.685" starttime="20170713 20:38:12.684"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.686" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.686" starttime="20170713 20:38:12.686"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.686" starttime="20170713 20:38:12.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.688" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.688" starttime="20170713 20:38:12.687"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.688" starttime="20170713 20:38:12.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.689" starttime="20170713 20:38:12.689"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.689" starttime="20170713 20:38:12.688"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.689" starttime="20170713 20:38:12.683"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.689" starttime="20170713 20:38:12.683"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:12.690" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170713 20:38:12.767" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170713 20:38:12.767" level="INFO">${stdout} = </msg>
<msg timestamp="20170713 20:38:12.767" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170713 20:38:12.767" starttime="20170713 20:38:12.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.773" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.773" starttime="20170713 20:38:12.773"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.774" starttime="20170713 20:38:12.772"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.774" starttime="20170713 20:38:12.767"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.774" starttime="20170713 20:38:12.682"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.774" starttime="20170713 20:38:12.682"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.777" starttime="20170713 20:38:12.777"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.777" starttime="20170713 20:38:12.776"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.779" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.779" starttime="20170713 20:38:12.778"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.779" starttime="20170713 20:38:12.777"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.780" starttime="20170713 20:38:12.779"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.780" starttime="20170713 20:38:12.779"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.781" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.781" starttime="20170713 20:38:12.781"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.781" starttime="20170713 20:38:12.780"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.781" starttime="20170713 20:38:12.775"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.781" starttime="20170713 20:38:12.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:12.782" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170713 20:38:12.857" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:12.857" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-79"
VERSION_ID="v1.99.7-79-g8064a9a"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170713 20:38:12.857" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:12.857" starttime="20170713 20:38:12.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.863"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.863"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.858"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.774"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.774"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.682"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.680"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.864" starttime="20170713 20:38:12.680"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:12.866" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170713 20:38:12.866" starttime="20170713 20:38:12.865"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.866" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170713 20:38:12.866" starttime="20170713 20:38:12.866"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.870" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.870" starttime="20170713 20:38:12.869"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.870" starttime="20170713 20:38:12.869"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.871" starttime="20170713 20:38:12.871"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.871" starttime="20170713 20:38:12.870"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.872" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.872" starttime="20170713 20:38:12.872"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.873" starttime="20170713 20:38:12.871"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.874" starttime="20170713 20:38:12.874"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.874" starttime="20170713 20:38:12.873"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.874" starttime="20170713 20:38:12.868"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.874" starttime="20170713 20:38:12.868"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:12.875" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170713 20:38:12.960" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:12.960" level="INFO">${stdout} =  20:38:14 up 15:16,  load average: 0.24, 0.27, 0.27</msg>
<msg timestamp="20170713 20:38:12.960" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:12.960" starttime="20170713 20:38:12.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.966" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.966" starttime="20170713 20:38:12.966"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.966" starttime="20170713 20:38:12.965"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.967" starttime="20170713 20:38:12.960"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.967" starttime="20170713 20:38:12.867"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.967" starttime="20170713 20:38:12.867"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.971" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.971" starttime="20170713 20:38:12.970"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.971" starttime="20170713 20:38:12.970"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.972" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.972" starttime="20170713 20:38:12.972"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.973" starttime="20170713 20:38:12.971"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.974" starttime="20170713 20:38:12.973"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.974" starttime="20170713 20:38:12.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:12.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:12.975" starttime="20170713 20:38:12.975"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.975" starttime="20170713 20:38:12.974"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.975" starttime="20170713 20:38:12.969"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:12.975" starttime="20170713 20:38:12.968"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:12.976" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170713 20:38:13.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:13.061" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     46.1...</msg>
<msg timestamp="20170713 20:38:13.061" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:13.061" starttime="20170713 20:38:12.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.067" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.067" starttime="20170713 20:38:13.067"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.067" starttime="20170713 20:38:13.066"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.068" starttime="20170713 20:38:13.061"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.068" starttime="20170713 20:38:12.967"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.068" starttime="20170713 20:38:12.967"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.071" starttime="20170713 20:38:13.071"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.072" starttime="20170713 20:38:13.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.073" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.073" starttime="20170713 20:38:13.072"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.073" starttime="20170713 20:38:13.072"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.074" starttime="20170713 20:38:13.074"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.074" starttime="20170713 20:38:13.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.076" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.076" starttime="20170713 20:38:13.075"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.076" starttime="20170713 20:38:13.075"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.076" starttime="20170713 20:38:13.069"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.076" starttime="20170713 20:38:13.069"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:13.076" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170713 20:38:13.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:13.161" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 13 05:05:27 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170713 20:38:13.161" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:13.161" starttime="20170713 20:38:13.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:13.167"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:13.167"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:13.162"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:13.068"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:13.068"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:12.867"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:12.865"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.168" starttime="20170713 20:38:12.864"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.169" starttime="20170713 20:38:11.197"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.169" starttime="20170713 20:38:09.509"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.169" starttime="20170713 20:38:09.494"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.169" starttime="20170713 20:38:09.490"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.169" starttime="20170713 20:38:09.490"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:13.171" starttime="20170713 20:38:13.170"></status>
</kw>
<msg timestamp="20170713 20:38:13.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:13.171" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:13.171" starttime="20170713 20:38:13.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:13.171" starttime="20170713 20:38:13.171"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:13.189" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:13.189" starttime="20170713 20:38:13.189"></status>
</kw>
<msg timestamp="20170713 20:38:13.189" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:13.189" starttime="20170713 20:38:13.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:13.190" starttime="20170713 20:38:13.190"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.190" starttime="20170713 20:38:13.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:13.191" starttime="20170713 20:38:13.191"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:13.192" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:13.192" starttime="20170713 20:38:13.192"></status>
</kw>
<msg timestamp="20170713 20:38:13.193" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:13.193" starttime="20170713 20:38:13.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:13.194" starttime="20170713 20:38:13.194"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.194" starttime="20170713 20:38:13.194"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:13.195" starttime="20170713 20:38:13.193"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:13.195" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:14.908" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:14.908" starttime="20170713 20:38:13.195"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:14.908" starttime="20170713 20:38:13.188"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:14.909" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170713 20:38:14.909" starttime="20170713 20:38:14.908"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:14.910" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170713 20:38:14.910" starttime="20170713 20:38:14.910"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:14.911" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_elog.txt</msg>
<status status="PASS" endtime="20170713 20:38:14.911" starttime="20170713 20:38:14.911"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:14.914" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:14.915" starttime="20170713 20:38:14.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:14.915" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:14.915" starttime="20170713 20:38:14.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:14.916" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:14.916" starttime="20170713 20:38:14.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:14.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:14.917" starttime="20170713 20:38:14.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:15.209" starttime="20170713 20:38:14.918"></status>
</kw>
<msg timestamp="20170713 20:38:15.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:15.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.209" starttime="20170713 20:38:14.918"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.210" starttime="20170713 20:38:15.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.211" starttime="20170713 20:38:15.210"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.211" starttime="20170713 20:38:14.913"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.211" starttime="20170713 20:38:14.913"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.211" starttime="20170713 20:38:14.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:15.211" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:15.211" starttime="20170713 20:38:15.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.212" starttime="20170713 20:38:15.212"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:15.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:15.254" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.254" starttime="20170713 20:38:15.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.255" starttime="20170713 20:38:15.255"></status>
</kw>
<msg timestamp="20170713 20:38:15.255" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.255" starttime="20170713 20:38:14.911"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:15.257" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:15.257" starttime="20170713 20:38:15.256"></status>
</kw>
<msg timestamp="20170713 20:38:15.257" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:15.257" starttime="20170713 20:38:15.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:15.258" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:15.258" starttime="20170713 20:38:15.258"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.258" starttime="20170713 20:38:15.257"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.258" starttime="20170713 20:38:14.910"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:15.259" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170713 20:38:15.259" starttime="20170713 20:38:15.258"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:15.262" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:15.262" starttime="20170713 20:38:15.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:15.263" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:15.263" starttime="20170713 20:38:15.262"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:15.263" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:15.263" starttime="20170713 20:38:15.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:15.264" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:15.264" starttime="20170713 20:38:15.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.454" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:15.454" starttime="20170713 20:38:15.265"></status>
</kw>
<msg timestamp="20170713 20:38:15.454" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:15.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.454" starttime="20170713 20:38:15.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.455" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.455" starttime="20170713 20:38:15.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.456" starttime="20170713 20:38:15.456"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.456" starttime="20170713 20:38:15.261"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.456" starttime="20170713 20:38:15.260"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.456" starttime="20170713 20:38:15.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:15.457" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:15.457" starttime="20170713 20:38:15.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.458" starttime="20170713 20:38:15.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:15.697" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:15.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.697" starttime="20170713 20:38:15.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.698" starttime="20170713 20:38:15.698"></status>
</kw>
<msg timestamp="20170713 20:38:15.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.698" starttime="20170713 20:38:15.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.700" starttime="20170713 20:38:15.699"></status>
</kw>
<msg timestamp="20170713 20:38:15.700" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170713 20:38:15.700" starttime="20170713 20:38:15.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.700" starttime="20170713 20:38:15.700"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170713 20:38:15.701" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:15.701" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170713 20:38:15.701" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170713 20:38:15.701" starttime="20170713 20:38:15.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:15.703" starttime="20170713 20:38:15.702"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.703" starttime="20170713 20:38:15.702"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.703" starttime="20170713 20:38:15.258"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:15.704" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_inventory.txt</msg>
<status status="PASS" endtime="20170713 20:38:15.704" starttime="20170713 20:38:15.703"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:15.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:15.707" starttime="20170713 20:38:15.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:15.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:15.708" starttime="20170713 20:38:15.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:15.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:15.708" starttime="20170713 20:38:15.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:15.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:15.709" starttime="20170713 20:38:15.709"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:15.912" starttime="20170713 20:38:15.710"></status>
</kw>
<msg timestamp="20170713 20:38:15.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:15.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.913" starttime="20170713 20:38:15.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.913" starttime="20170713 20:38:15.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:15.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:15.914" starttime="20170713 20:38:15.914"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.914" starttime="20170713 20:38:15.706"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.914" starttime="20170713 20:38:15.705"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:15.914" starttime="20170713 20:38:15.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:15.915" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:15.915" starttime="20170713 20:38:15.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:15.916" starttime="20170713 20:38:15.915"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:17.918" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:17.919" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:17.919" starttime="20170713 20:38:15.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:17.920" starttime="20170713 20:38:17.919"></status>
</kw>
<msg timestamp="20170713 20:38:17.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:17.920" starttime="20170713 20:38:15.704"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:17.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:17.922" starttime="20170713 20:38:17.921"></status>
</kw>
<msg timestamp="20170713 20:38:17.922" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170713 20:38:17.922" starttime="20170713 20:38:17.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:17.922" starttime="20170713 20:38:17.922"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170713 20:38:17.925" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7d9ce", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b970", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7db01", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbc4", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:17.926" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170713 20:38:17.926" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170713 20:38:17.926" starttime="20170713 20:38:17.923"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:17.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_inventory.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:17.928" starttime="20170713 20:38:17.927"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:17.928" starttime="20170713 20:38:17.926"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:17.928" starttime="20170713 20:38:15.703"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:17.929" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_led.txt</msg>
<status status="PASS" endtime="20170713 20:38:17.929" starttime="20170713 20:38:17.929"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:17.933" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:17.934" starttime="20170713 20:38:17.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:17.935" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:17.935" starttime="20170713 20:38:17.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:17.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:17.936" starttime="20170713 20:38:17.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:17.938" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:17.938" starttime="20170713 20:38:17.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.137" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:18.137" starttime="20170713 20:38:17.939"></status>
</kw>
<msg timestamp="20170713 20:38:18.137" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:18.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.137" starttime="20170713 20:38:17.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.138" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.138" starttime="20170713 20:38:18.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.139" starttime="20170713 20:38:18.138"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.139" starttime="20170713 20:38:17.932"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.139" starttime="20170713 20:38:17.931"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.139" starttime="20170713 20:38:17.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:18.140" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:18.140" starttime="20170713 20:38:18.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.141" starttime="20170713 20:38:18.140"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:18.195" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:18.195" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.195" starttime="20170713 20:38:18.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.195" starttime="20170713 20:38:18.195"></status>
</kw>
<msg timestamp="20170713 20:38:18.196" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.196" starttime="20170713 20:38:17.930"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:18.197" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:18.197" starttime="20170713 20:38:18.196"></status>
</kw>
<msg timestamp="20170713 20:38:18.197" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:18.197" starttime="20170713 20:38:18.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:18.198" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:18.198" starttime="20170713 20:38:18.198"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.198" starttime="20170713 20:38:18.198"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.198" starttime="20170713 20:38:17.928"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:18.199" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_record_log.txt</msg>
<status status="PASS" endtime="20170713 20:38:18.199" starttime="20170713 20:38:18.199"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:18.202" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:18.202" starttime="20170713 20:38:18.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:18.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:18.203" starttime="20170713 20:38:18.203"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:18.204" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:18.204" starttime="20170713 20:38:18.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:18.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:18.204" starttime="20170713 20:38:18.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:18.382" starttime="20170713 20:38:18.206"></status>
</kw>
<msg timestamp="20170713 20:38:18.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:18.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.382" starttime="20170713 20:38:18.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.383" starttime="20170713 20:38:18.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.383" starttime="20170713 20:38:18.383"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.384" starttime="20170713 20:38:18.201"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.384" starttime="20170713 20:38:18.201"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.384" starttime="20170713 20:38:18.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:18.384" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:18.385" starttime="20170713 20:38:18.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.385" starttime="20170713 20:38:18.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:18.428" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:18.428" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.428" starttime="20170713 20:38:18.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.429" starttime="20170713 20:38:18.428"></status>
</kw>
<msg timestamp="20170713 20:38:18.429" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:18.429" starttime="20170713 20:38:18.199"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:18.430" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:18.430" starttime="20170713 20:38:18.430"></status>
</kw>
<msg timestamp="20170713 20:38:18.431" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:18.431" starttime="20170713 20:38:18.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:18.432" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:18.432"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:18.431"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:18.198"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:14.910"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:14.909"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:14.909"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:14.909"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:13.187"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:13.172"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:13.169"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.432" starttime="20170713 20:38:13.169"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.434" starttime="20170713 20:38:18.434"></status>
</kw>
<msg timestamp="20170713 20:38:18.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:18.435" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:18.435" starttime="20170713 20:38:18.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.435" starttime="20170713 20:38:18.435"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:18.454" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:18.454" starttime="20170713 20:38:18.453"></status>
</kw>
<msg timestamp="20170713 20:38:18.454" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:18.454" starttime="20170713 20:38:18.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.455" starttime="20170713 20:38:18.455"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.455" starttime="20170713 20:38:18.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.456" starttime="20170713 20:38:18.455"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:18.457" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:18.457" starttime="20170713 20:38:18.457"></status>
</kw>
<msg timestamp="20170713 20:38:18.457" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:18.457" starttime="20170713 20:38:18.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:18.461" starttime="20170713 20:38:18.459"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.461" starttime="20170713 20:38:18.458"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:18.461" starttime="20170713 20:38:18.457"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:18.461" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:20.208" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:20.209" starttime="20170713 20:38:18.461"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.209" starttime="20170713 20:38:18.451"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170713 20:38:20.210" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170713 20:38:20.259" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170713 20:38:20.259" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170713 20:38:20.259" starttime="20170713 20:38:20.210"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170713 20:38:20.260" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170713 20:38:20.260" starttime="20170713 20:38:20.259"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.261" starttime="20170713 20:38:20.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.898" starttime="20170713 20:38:20.262"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:20.262"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:20.260"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:20.899"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:18.451"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:18.436"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:18.433"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.899" starttime="20170713 20:38:18.433"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.902" starttime="20170713 20:38:20.901"></status>
</kw>
<msg timestamp="20170713 20:38:20.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:20.902" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:20.902" starttime="20170713 20:38:20.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.902" starttime="20170713 20:38:20.902"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:20.922" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:20.922" starttime="20170713 20:38:20.921"></status>
</kw>
<msg timestamp="20170713 20:38:20.922" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:20.922" starttime="20170713 20:38:20.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.923" starttime="20170713 20:38:20.923"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.923" starttime="20170713 20:38:20.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.924" starttime="20170713 20:38:20.923"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:20.925" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:20.925" starttime="20170713 20:38:20.925"></status>
</kw>
<msg timestamp="20170713 20:38:20.925" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:20.925" starttime="20170713 20:38:20.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:20.927" starttime="20170713 20:38:20.927"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.927" starttime="20170713 20:38:20.926"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:20.927" starttime="20170713 20:38:20.925"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:20.928" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:22.682" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:22.682" starttime="20170713 20:38:20.927"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:22.682" starttime="20170713 20:38:20.920"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:22.683" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170713 20:38:22.683" starttime="20170713 20:38:22.683"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:22.685" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170713 20:38:22.685" starttime="20170713 20:38:22.684"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:22.686" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170713 20:38:22.686" starttime="20170713 20:38:22.685"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:22.688" starttime="20170713 20:38:22.687"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:22.688" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170713 20:38:23.027" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:23.028" level="INFO">${stdout} = Mem: 239820K used, 192512K free, 80516K shrd, 10952K buff, 117124K cached
CPU:   8% usr   0% sys   0% nic  91% idle   0% io   0% irq   0% sirq
Load average: 0.36 0.30 0.28 1/156 5419
  PID  PPID USER ...</msg>
<msg timestamp="20170713 20:38:23.028" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:23.028" starttime="20170713 20:38:22.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:23.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:23.037" starttime="20170713 20:38:23.034"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.037" starttime="20170713 20:38:23.034"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.037" starttime="20170713 20:38:23.028"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.037" starttime="20170713 20:38:22.686"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.037" starttime="20170713 20:38:22.685"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:23.038" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170713 20:38:23.038" starttime="20170713 20:38:23.037"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:23.039" starttime="20170713 20:38:23.039"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:23.040" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170713 20:38:23.125" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:23.125" level="INFO">${stdout} = [ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<msg timestamp="20170713 20:38:23.125" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:23.125" starttime="20170713 20:38:23.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:23.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:23.133" starttime="20170713 20:38:23.132"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.133" starttime="20170713 20:38:23.131"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.133" starttime="20170713 20:38:23.126"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.133" starttime="20170713 20:38:23.038"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.133" starttime="20170713 20:38:23.037"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:23.134" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170713 20:38:23.134" starttime="20170713 20:38:23.133"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:23.135" starttime="20170713 20:38:23.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:23.136" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170713 20:38:23.262" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:23.263" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          192324 kB
MemAvailable:     238040 kB
Buffers:           10952 kB
Cached:           117124 kB
SwapCached:            0 kB
Active:           160664 kB
Inac...</msg>
<msg timestamp="20170713 20:38:23.263" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:23.263" starttime="20170713 20:38:23.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:23.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:23.273" starttime="20170713 20:38:23.272"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.273" starttime="20170713 20:38:23.271"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.273" starttime="20170713 20:38:23.263"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.273" starttime="20170713 20:38:23.134"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.273" starttime="20170713 20:38:23.133"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:23.274" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170713 20:38:23.274" starttime="20170713 20:38:23.273"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:23.275" starttime="20170713 20:38:23.275"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:23.276" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170713 20:38:23.552" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:23.552" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170713 20:38:23.552" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:23.552" starttime="20170713 20:38:23.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:23.559" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:23.559" starttime="20170713 20:38:23.559"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.559" starttime="20170713 20:38:23.558"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.559" starttime="20170713 20:38:23.553"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.559" starttime="20170713 20:38:23.274"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:23.559" starttime="20170713 20:38:23.273"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:23.560" level="INFO">${logpath} = /home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170713 20:38:23.560" starttime="20170713 20:38:23.560"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:23.562" starttime="20170713 20:38:23.561"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:23.562" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170713 20:38:32.550" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:32.557" level="INFO">${stdout} = -- Logs begin at Thu 2017-07-13 05:21:31 UTC, end at Thu 2017-07-13 20:38:22 UTC. --
Jul 13 05:21:31 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 13 05:21:31 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170713 20:38:32.557" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:32.557" starttime="20170713 20:38:23.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:32.581" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170713203807563877_UpdateBmc/20170713203807563877_InitiateCodeUpdateBMC/9.3.21.61.170713.203804.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:32.581" starttime="20170713 20:38:32.571"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.581" starttime="20170713 20:38:32.566"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.581" starttime="20170713 20:38:32.558"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:23.561"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:23.560"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:22.685"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:22.684"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:22.683"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:22.683"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:20.919"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:20.903"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:20.900"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.582" starttime="20170713 20:38:20.899"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.584" starttime="20170713 20:38:32.584"></status>
</kw>
<msg timestamp="20170713 20:38:32.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:32.585" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:32.585" starttime="20170713 20:38:32.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.585" starttime="20170713 20:38:32.585"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:32.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:32.606" starttime="20170713 20:38:32.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:32.607" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:32.607" starttime="20170713 20:38:32.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:32.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:32.608" starttime="20170713 20:38:32.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:32.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:32.609" starttime="20170713 20:38:32.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:32.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:32.790" starttime="20170713 20:38:32.610"></status>
</kw>
<msg timestamp="20170713 20:38:32.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:32.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:32.791" starttime="20170713 20:38:32.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:32.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:32.791" starttime="20170713 20:38:32.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:32.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:32.792" starttime="20170713 20:38:32.792"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.792" starttime="20170713 20:38:32.604"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.792" starttime="20170713 20:38:32.603"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.793" starttime="20170713 20:38:32.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:32.793" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170713 20:38:32.793" starttime="20170713 20:38:32.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.794" starttime="20170713 20:38:32.794"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:32.851" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:32.851" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:32.851" starttime="20170713 20:38:32.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.851" starttime="20170713 20:38:32.851"></status>
</kw>
<msg timestamp="20170713 20:38:32.852" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:32.852" starttime="20170713 20:38:32.602"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:32.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:32.853" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:32.853" starttime="20170713 20:38:32.853"></status>
</kw>
<msg timestamp="20170713 20:38:32.853" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:32.853" starttime="20170713 20:38:32.852"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170713 20:38:32.854" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170713 20:38:32.854" starttime="20170713 20:38:32.854"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.854" starttime="20170713 20:38:32.601"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.854" starttime="20170713 20:38:32.586"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.854" starttime="20170713 20:38:32.583"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.854" starttime="20170713 20:38:32.582"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.856" starttime="20170713 20:38:32.856"></status>
</kw>
<msg timestamp="20170713 20:38:32.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:32.856" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:32.856" starttime="20170713 20:38:32.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:32.857" starttime="20170713 20:38:32.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170713 20:38:32.875" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170713 20:38:32.875" starttime="20170713 20:38:32.874"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.875" starttime="20170713 20:38:32.873"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.875" starttime="20170713 20:38:32.857"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.875" starttime="20170713 20:38:32.855"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.876" starttime="20170713 20:38:32.854"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.876" starttime="20170713 20:38:09.490"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.876" starttime="20170713 20:38:09.487"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.876" starttime="20170713 20:38:09.487"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:32.876" starttime="20170713 20:38:09.487"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170713 20:38:33.121" starttime="20170713 20:38:32.876"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:33.122" starttime="20170713 20:38:09.486"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:33.122" starttime="20170713 20:38:04.515"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:33.126" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:33.126" starttime="20170713 20:38:33.125"></status>
</kw>
<msg timestamp="20170713 20:38:33.126" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:33.126" starttime="20170713 20:38:33.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:33.128" starttime="20170713 20:38:33.127"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:33.128" starttime="20170713 20:38:33.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:33.128" starttime="20170713 20:38:33.128"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:33.130" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:33.130" starttime="20170713 20:38:33.129"></status>
</kw>
<msg timestamp="20170713 20:38:33.130" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:33.130" starttime="20170713 20:38:33.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:33.132" starttime="20170713 20:38:33.131"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:33.132" starttime="20170713 20:38:33.131"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:33.132" starttime="20170713 20:38:33.130"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:33.132" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:35.643" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:35.644" starttime="20170713 20:38:33.132"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:35.644" starttime="20170713 20:38:33.124"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:35.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:35.718" starttime="20170713 20:38:35.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:35.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:35.719" starttime="20170713 20:38:35.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:35.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:35.720" starttime="20170713 20:38:35.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:35.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:35.721" starttime="20170713 20:38:35.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:35.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:35.901" starttime="20170713 20:38:35.721"></status>
</kw>
<msg timestamp="20170713 20:38:35.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:35.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:35.901" starttime="20170713 20:38:35.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:35.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:35.902" starttime="20170713 20:38:35.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:35.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:35.903" starttime="20170713 20:38:35.903"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:35.903" starttime="20170713 20:38:35.716"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:35.903" starttime="20170713 20:38:35.716"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:35.903" starttime="20170713 20:38:35.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:35.904" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170713 20:38:35.904" starttime="20170713 20:38:35.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:35.905" starttime="20170713 20:38:35.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:36.001" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170713 20:38:36.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.001" starttime="20170713 20:38:35.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.002" starttime="20170713 20:38:36.002"></status>
</kw>
<msg timestamp="20170713 20:38:36.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.002" starttime="20170713 20:38:35.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.003" starttime="20170713 20:38:36.003"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:38:36.004" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:36.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:38:36.004" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170713 20:38:36.004" starttime="20170713 20:38:36.003"></status>
</kw>
<msg timestamp="20170713 20:38:36.004" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170713 20:38:36.004" starttime="20170713 20:38:35.711"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.004" starttime="20170713 20:38:35.703"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:36.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:36.009" starttime="20170713 20:38:36.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:36.010" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:36.010" starttime="20170713 20:38:36.009"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:36.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:36.010" starttime="20170713 20:38:36.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:36.011" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:36.011" starttime="20170713 20:38:36.011"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:36.294" starttime="20170713 20:38:36.012"></status>
</kw>
<msg timestamp="20170713 20:38:36.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:36.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.294" starttime="20170713 20:38:36.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.295" starttime="20170713 20:38:36.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.296" starttime="20170713 20:38:36.295"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.296" starttime="20170713 20:38:36.008"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.296" starttime="20170713 20:38:36.007"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.296" starttime="20170713 20:38:36.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:36.296" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170713 20:38:36.297" starttime="20170713 20:38:36.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.297" starttime="20170713 20:38:36.297"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:36.362" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170713 20:38:36.362" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.362" starttime="20170713 20:38:36.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.363" starttime="20170713 20:38:36.363"></status>
</kw>
<msg timestamp="20170713 20:38:36.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.363" starttime="20170713 20:38:36.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.364" starttime="20170713 20:38:36.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:38:36.365" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:36.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:38:36.365" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170713 20:38:36.365" starttime="20170713 20:38:36.364"></status>
</kw>
<msg timestamp="20170713 20:38:36.365" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170713 20:38:36.365" starttime="20170713 20:38:36.005"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.365" starttime="20170713 20:38:36.005"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:36.371" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:36.372" starttime="20170713 20:38:36.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:36.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:36.373" starttime="20170713 20:38:36.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:36.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:36.374" starttime="20170713 20:38:36.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:36.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:36.375" starttime="20170713 20:38:36.374"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:36.557" starttime="20170713 20:38:36.376"></status>
</kw>
<msg timestamp="20170713 20:38:36.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:36.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.557" starttime="20170713 20:38:36.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.558" starttime="20170713 20:38:36.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.558" starttime="20170713 20:38:36.558"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.559" starttime="20170713 20:38:36.370"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.559" starttime="20170713 20:38:36.369"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.559" starttime="20170713 20:38:36.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:36.560" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170713 20:38:36.560" starttime="20170713 20:38:36.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.560" starttime="20170713 20:38:36.560"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:36.724" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170713 20:38:36.724" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.724" starttime="20170713 20:38:36.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.725" starttime="20170713 20:38:36.725"></status>
</kw>
<msg timestamp="20170713 20:38:36.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.726" starttime="20170713 20:38:36.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.727" starttime="20170713 20:38:36.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:38:36.728" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:36.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:38:36.728" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170713 20:38:36.728" starttime="20170713 20:38:36.727"></status>
</kw>
<msg timestamp="20170713 20:38:36.728" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170713 20:38:36.728" starttime="20170713 20:38:36.366"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.729" starttime="20170713 20:38:36.366"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:36.735" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:36.735" starttime="20170713 20:38:36.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:36.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:36.736" starttime="20170713 20:38:36.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:36.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:36.737" starttime="20170713 20:38:36.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:36.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:36.738" starttime="20170713 20:38:36.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.929" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:36.929" starttime="20170713 20:38:36.739"></status>
</kw>
<msg timestamp="20170713 20:38:36.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:36.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.930" starttime="20170713 20:38:36.738"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.930" starttime="20170713 20:38:36.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:36.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:36.931" starttime="20170713 20:38:36.931"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.931" starttime="20170713 20:38:36.733"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.931" starttime="20170713 20:38:36.732"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:36.932" starttime="20170713 20:38:36.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:36.932" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170713 20:38:36.932" starttime="20170713 20:38:36.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:36.933" starttime="20170713 20:38:36.932"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:37.000" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170713 20:38:37.000" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.000" starttime="20170713 20:38:36.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:37.001" starttime="20170713 20:38:37.000"></status>
</kw>
<msg timestamp="20170713 20:38:37.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.001" starttime="20170713 20:38:36.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.002" starttime="20170713 20:38:37.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:38:37.002" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:37.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:38:37.002" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170713 20:38:37.002" starttime="20170713 20:38:37.002"></status>
</kw>
<msg timestamp="20170713 20:38:37.003" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170713 20:38:37.003" starttime="20170713 20:38:36.730"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.003" starttime="20170713 20:38:36.729"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.074" starttime="20170713 20:38:04.504"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:37.103" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:37.106" starttime="20170713 20:38:37.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:37.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:37.107" starttime="20170713 20:38:37.106"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:37.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:37.108" starttime="20170713 20:38:37.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:37.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:37.108" starttime="20170713 20:38:37.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.408" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:37.408" starttime="20170713 20:38:37.109"></status>
</kw>
<msg timestamp="20170713 20:38:37.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:37.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.408" starttime="20170713 20:38:37.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.409" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.409" starttime="20170713 20:38:37.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.410" starttime="20170713 20:38:37.410"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.410" starttime="20170713 20:38:37.098"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.410" starttime="20170713 20:38:37.097"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.410" starttime="20170713 20:38:37.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:37.411" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170713 20:38:37.411" starttime="20170713 20:38:37.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:37.412" starttime="20170713 20:38:37.411"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:37.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170713 20:38:37.454" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.454" starttime="20170713 20:38:37.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:37.455" starttime="20170713 20:38:37.454"></status>
</kw>
<msg timestamp="20170713 20:38:37.455" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.455" starttime="20170713 20:38:37.092"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.456" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170713 20:38:37.457" starttime="20170713 20:38:37.455"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.457" starttime="20170713 20:38:37.090"></status>
</kw>
<msg timestamp="20170713 20:38:37.462" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170713 20:38:37.580" starttime="20170713 20:38:37.466"></status>
</kw>
<msg timestamp="20170713 20:38:37.591" level="FAIL">#(UTC) 2017/07/13 20:38:37.590827 -    4.469255 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170713 20:38:37.591" starttime="20170713 20:29:54.433"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170713 20:38:37.596" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170713 20:38:37.597" starttime="20170713 20:38:37.592"></status>
</kw>
<status status="FAIL" endtime="20170713 20:38:37.597" starttime="20170713 20:29:54.433"></status>
</kw>
<msg timestamp="20170713 20:38:37.598" level="FAIL">#(UTC) 2017/07/13 20:38:37.590827 -    4.469255 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170713 20:38:37.598" starttime="20170713 20:29:54.429"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:37.613" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:37.613" starttime="20170713 20:38:37.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:37.614" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:37.614" starttime="20170713 20:38:37.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:37.614" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:37.614" starttime="20170713 20:38:37.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:37.615" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:37.615" starttime="20170713 20:38:37.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:37.835" starttime="20170713 20:38:37.616"></status>
</kw>
<msg timestamp="20170713 20:38:37.835" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:37.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.835" starttime="20170713 20:38:37.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.836" starttime="20170713 20:38:37.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.836" starttime="20170713 20:38:37.836"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.837" starttime="20170713 20:38:37.612"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.837" starttime="20170713 20:38:37.611"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:37.837" starttime="20170713 20:38:37.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:37.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170713 20:38:37.837" starttime="20170713 20:38:37.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:37.838" starttime="20170713 20:38:37.838"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:37.902" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170713 20:38:37.902" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.902" starttime="20170713 20:38:37.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:37.903" starttime="20170713 20:38:37.903"></status>
</kw>
<msg timestamp="20170713 20:38:37.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.903" starttime="20170713 20:38:37.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:37.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:37.904" starttime="20170713 20:38:37.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170713 20:38:37.905" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:37.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170713 20:38:37.905" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170713 20:38:37.905" starttime="20170713 20:38:37.904"></status>
</kw>
<msg timestamp="20170713 20:38:37.905" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170713 20:38:37.905" starttime="20170713 20:38:37.609"></status>
</kw>
<msg timestamp="20170713 20:38:37.905" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170713 20:38:37.906" starttime="20170713 20:38:37.608"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170713 20:38:37.907" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170713 20:38:37.907" starttime="20170713 20:38:37.906"></status>
</kw>
<msg timestamp="20170713 20:38:37.907" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:37.907" starttime="20170713 20:38:37.906"></status>
</kw>
<msg timestamp="20170713 20:38:37.907" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:37.907" starttime="20170713 20:38:37.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170713 20:38:37.918" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170713 20:38:37.919" starttime="20170713 20:38:37.918"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170713 20:38:37.925" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170713 20:38:40.927" level="INFO">${RC} = 0</msg>
<msg timestamp="20170713 20:38:40.927" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.723 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.06 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170713 20:38:40.928" starttime="20170713 20:38:37.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.932" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.723 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.06 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.593 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.578 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.578/0.739/1.063/0.196 ms</msg>
<status status="PASS" endtime="20170713 20:38:40.932" starttime="20170713 20:38:40.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:40.933" starttime="20170713 20:38:40.932"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.933" starttime="20170713 20:38:37.918"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:38:40.947" level="INFO">${cur_time} = 2017-07-13 20:38:40:946451</msg>
<status status="PASS" endtime="20170713 20:38:40.947" starttime="20170713 20:38:40.946"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:38:40.947" level="INFO">${cur_time} = 20170713203840946451</msg>
<status status="PASS" endtime="20170713 20:38:40.947" starttime="20170713 20:38:40.947"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.947" starttime="20170713 20:38:40.946"></status>
</kw>
<msg timestamp="20170713 20:38:40.948" level="INFO">${FFDC_TIME} = 20170713203840946451</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170713 20:38:40.949" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170713 20:38:40.949" starttime="20170713 20:38:40.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170713 20:38:40.950" level="INFO">${suite_name} = 20170713203840946451_UpdateBmc</msg>
<status status="PASS" endtime="20170713 20:38:40.950" starttime="20170713 20:38:40.949"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170713 20:38:40.950" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170713 20:38:40.951" starttime="20170713 20:38:40.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170713 20:38:40.951" level="INFO">${test_name} = 20170713203840946451_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170713 20:38:40.951" starttime="20170713 20:38:40.951"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.951" starttime="20170713 20:38:40.948"></status>
</kw>
<msg timestamp="20170713 20:38:40.952" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170713 20:38:40.952" level="INFO">${FFDC_PREFIX} = 20170713203840946451_</msg>
<msg timestamp="20170713 20:38:40.971" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170713 20:38:40.972" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.972" starttime="20170713 20:38:40.972"></status>
</kw>
<msg timestamp="20170713 20:38:40.972" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.984" starttime="20170713 20:38:40.983"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.984" starttime="20170713 20:38:40.982"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.988" starttime="20170713 20:38:40.985"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.988" starttime="20170713 20:38:40.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.989" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.989" starttime="20170713 20:38:40.989"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.989" starttime="20170713 20:38:40.988"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.991" starttime="20170713 20:38:40.990"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.991" starttime="20170713 20:38:40.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.992" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.992" starttime="20170713 20:38:40.992"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.992" starttime="20170713 20:38:40.991"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.993" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.993" starttime="20170713 20:38:40.993"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.993" starttime="20170713 20:38:40.992"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.995" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.995" starttime="20170713 20:38:40.994"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.995" starttime="20170713 20:38:40.994"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.996" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.996" starttime="20170713 20:38:40.996"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.996" starttime="20170713 20:38:40.995"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.997" starttime="20170713 20:38:40.997"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.998" starttime="20170713 20:38:40.996"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:40.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:40.999" starttime="20170713 20:38:40.999"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:40.999" starttime="20170713 20:38:40.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:41.001" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:41.001" starttime="20170713 20:38:41.000"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.001" starttime="20170713 20:38:41.000"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:41.002" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:41.002" starttime="20170713 20:38:41.002"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.002" starttime="20170713 20:38:41.001"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:41.004" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:41.004" starttime="20170713 20:38:41.003"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.004" starttime="20170713 20:38:41.002"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:41.006" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:41.006" starttime="20170713 20:38:41.006"></status>
</kw>
<msg timestamp="20170713 20:38:41.006" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:41.006" starttime="20170713 20:38:41.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:41.007" starttime="20170713 20:38:41.007"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.007" starttime="20170713 20:38:41.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:41.008" starttime="20170713 20:38:41.008"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:41.009" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:41.009" starttime="20170713 20:38:41.009"></status>
</kw>
<msg timestamp="20170713 20:38:41.009" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:41.009" starttime="20170713 20:38:41.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:41.011" starttime="20170713 20:38:41.011"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.011" starttime="20170713 20:38:41.010"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:41.011" starttime="20170713 20:38:41.010"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:41.012" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:42.658" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:42.658" starttime="20170713 20:38:41.012"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.658" starttime="20170713 20:38:41.004"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:42.659" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170713 20:38:42.735" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:42.736" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170713 20:38:42.736" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:42.736" starttime="20170713 20:38:42.659"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.736" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170713 20:38:42.736" starttime="20170713 20:38:42.736"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.737" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170713 20:38:42.737" starttime="20170713 20:38:42.737"></status>
</kw>
<msg timestamp="20170713 20:38:42.737" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170713 20:38:42.737" starttime="20170713 20:38:41.004"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.739" starttime="20170713 20:38:42.738"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.739" starttime="20170713 20:38:42.737"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.739" starttime="20170713 20:38:40.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.740" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.740" starttime="20170713 20:38:42.740"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.740" starttime="20170713 20:38:42.739"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:42.741" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170713 20:38:42.741" starttime="20170713 20:38:42.740"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.743" starttime="20170713 20:38:42.742"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.743" starttime="20170713 20:38:42.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.744" starttime="20170713 20:38:42.744"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.744" starttime="20170713 20:38:42.743"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.744" starttime="20170713 20:38:42.741"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.745" starttime="20170713 20:38:42.745"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.746" starttime="20170713 20:38:42.744"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.747" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.747" starttime="20170713 20:38:42.746"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.747" starttime="20170713 20:38:42.746"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.747" starttime="20170713 20:38:42.744"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.748" starttime="20170713 20:38:42.748"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.749" starttime="20170713 20:38:42.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.750" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.750" starttime="20170713 20:38:42.749"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.750" starttime="20170713 20:38:42.749"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.750" starttime="20170713 20:38:42.747"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.750" starttime="20170713 20:38:42.741"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:42.751" starttime="20170713 20:38:42.751"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.751" starttime="20170713 20:38:42.750"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.751" starttime="20170713 20:38:40.982"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:42.757" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170713 20:38:42.757" starttime="20170713 20:38:42.757"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170713 20:38:42.759" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170713 20:38:42.759" starttime="20170713 20:38:42.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.760" starttime="20170713 20:38:42.760"></status>
</kw>
<msg timestamp="20170713 20:38:42.760" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170713 20:38:42.760" starttime="20170713 20:38:42.759"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.762" starttime="20170713 20:38:42.762"></status>
</kw>
<msg timestamp="20170713 20:38:42.762" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:42.763" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:42.763" starttime="20170713 20:38:42.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.763" starttime="20170713 20:38:42.763"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:42.779" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:42.779" starttime="20170713 20:38:42.778"></status>
</kw>
<msg timestamp="20170713 20:38:42.779" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:42.779" starttime="20170713 20:38:42.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.780" starttime="20170713 20:38:42.780"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.780" starttime="20170713 20:38:42.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.781" starttime="20170713 20:38:42.780"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:42.782" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:42.782" starttime="20170713 20:38:42.782"></status>
</kw>
<msg timestamp="20170713 20:38:42.782" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:42.782" starttime="20170713 20:38:42.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:42.784" starttime="20170713 20:38:42.784"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.784" starttime="20170713 20:38:42.783"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:42.784" starttime="20170713 20:38:42.782"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:42.785" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:44.565" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:44.566" starttime="20170713 20:38:42.784"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.566" starttime="20170713 20:38:42.777"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:44.567" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170713 20:38:44.567" starttime="20170713 20:38:44.566"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:44.569" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170713 20:38:44.569" starttime="20170713 20:38:44.568"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:44.569" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170713 20:38:44.569" starttime="20170713 20:38:44.569"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:44.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:44.573" starttime="20170713 20:38:44.572"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.573" starttime="20170713 20:38:44.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:44.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:44.574" starttime="20170713 20:38:44.574"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.574" starttime="20170713 20:38:44.573"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:44.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:44.576" starttime="20170713 20:38:44.575"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.576" starttime="20170713 20:38:44.575"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:44.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:44.577" starttime="20170713 20:38:44.577"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.577" starttime="20170713 20:38:44.576"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.577" starttime="20170713 20:38:44.571"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:44.577" starttime="20170713 20:38:44.571"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:44.578" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170713 20:38:45.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:45.946" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170713 20:38:45.946" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:45.946" starttime="20170713 20:38:44.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.953" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:45.953" starttime="20170713 20:38:45.953"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.953" starttime="20170713 20:38:45.952"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.953" starttime="20170713 20:38:45.946"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.954" starttime="20170713 20:38:44.570"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.954" starttime="20170713 20:38:44.570"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.954" starttime="20170713 20:38:44.569"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.954" starttime="20170713 20:38:44.567"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.954" starttime="20170713 20:38:44.567"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:45.955" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170713 20:38:45.955" starttime="20170713 20:38:45.955"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.956" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170713 20:38:45.956" starttime="20170713 20:38:45.955"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.959" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:45.960" starttime="20170713 20:38:45.959"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.960" starttime="20170713 20:38:45.958"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.961" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:45.961" starttime="20170713 20:38:45.961"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.961" starttime="20170713 20:38:45.960"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.962" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:45.962" starttime="20170713 20:38:45.962"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.962" starttime="20170713 20:38:45.961"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:45.964" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:45.964" starttime="20170713 20:38:45.963"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.964" starttime="20170713 20:38:45.963"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.964" starttime="20170713 20:38:45.958"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:45.964" starttime="20170713 20:38:45.957"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:45.964" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170713 20:38:46.041" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170713 20:38:46.041" level="INFO">${stdout} = </msg>
<msg timestamp="20170713 20:38:46.041" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170713 20:38:46.041" starttime="20170713 20:38:45.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.048" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.048" starttime="20170713 20:38:46.047"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.048" starttime="20170713 20:38:46.047"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.048" starttime="20170713 20:38:46.041"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.048" starttime="20170713 20:38:45.956"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.048" starttime="20170713 20:38:45.956"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.051" starttime="20170713 20:38:46.051"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.052" starttime="20170713 20:38:46.050"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.053" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.053" starttime="20170713 20:38:46.052"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.053" starttime="20170713 20:38:46.052"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.054" starttime="20170713 20:38:46.054"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.054" starttime="20170713 20:38:46.053"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.056" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.056" starttime="20170713 20:38:46.055"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.056" starttime="20170713 20:38:46.055"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.056" starttime="20170713 20:38:46.050"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.056" starttime="20170713 20:38:46.049"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:46.057" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170713 20:38:46.141" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:46.142" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-79"
VERSION_ID="v1.99.7-79-g8064a9a"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170713 20:38:46.142" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:46.142" starttime="20170713 20:38:46.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.148" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.148" starttime="20170713 20:38:46.148"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:46.147"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:46.142"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:46.049"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:46.048"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:45.956"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:45.954"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.149" starttime="20170713 20:38:45.954"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:46.150" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170713 20:38:46.150" starttime="20170713 20:38:46.150"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.151" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170713 20:38:46.151" starttime="20170713 20:38:46.150"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.154" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.154" starttime="20170713 20:38:46.154"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.154" starttime="20170713 20:38:46.153"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.156" starttime="20170713 20:38:46.155"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.156" starttime="20170713 20:38:46.154"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.157" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.157" starttime="20170713 20:38:46.157"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.157" starttime="20170713 20:38:46.156"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.158" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.158" starttime="20170713 20:38:46.158"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.158" starttime="20170713 20:38:46.157"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.159" starttime="20170713 20:38:46.153"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.159" starttime="20170713 20:38:46.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:46.159" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170713 20:38:46.228" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:46.228" level="INFO">${stdout} =  20:38:47 up 15:17,  load average: 0.55, 0.35, 0.29</msg>
<msg timestamp="20170713 20:38:46.228" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:46.228" starttime="20170713 20:38:46.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.236" starttime="20170713 20:38:46.235"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.236" starttime="20170713 20:38:46.234"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.236" starttime="20170713 20:38:46.228"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.236" starttime="20170713 20:38:46.151"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.236" starttime="20170713 20:38:46.151"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.240" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.240" starttime="20170713 20:38:46.239"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.240" starttime="20170713 20:38:46.239"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.241" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.241" starttime="20170713 20:38:46.241"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.241" starttime="20170713 20:38:46.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.243" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.243" starttime="20170713 20:38:46.242"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.243" starttime="20170713 20:38:46.242"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.244" starttime="20170713 20:38:46.244"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.244" starttime="20170713 20:38:46.243"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.244" starttime="20170713 20:38:46.238"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.244" starttime="20170713 20:38:46.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:46.245" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170713 20:38:46.329" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:46.330" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     46.1...</msg>
<msg timestamp="20170713 20:38:46.330" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:46.330" starttime="20170713 20:38:46.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.338" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.338" starttime="20170713 20:38:46.337"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.338" starttime="20170713 20:38:46.336"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.338" starttime="20170713 20:38:46.330"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.338" starttime="20170713 20:38:46.237"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.338" starttime="20170713 20:38:46.236"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.341" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.341" starttime="20170713 20:38:46.341"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.342" starttime="20170713 20:38:46.340"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.343" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.343" starttime="20170713 20:38:46.342"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.343" starttime="20170713 20:38:46.342"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.344" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.344" starttime="20170713 20:38:46.344"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.344" starttime="20170713 20:38:46.343"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.345" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.346" starttime="20170713 20:38:46.345"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.346" starttime="20170713 20:38:46.344"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.346" starttime="20170713 20:38:46.340"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.346" starttime="20170713 20:38:46.339"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:46.346" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170713 20:38:46.431" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:46.431" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 13 05:05:27 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170713 20:38:46.431" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:46.431" starttime="20170713 20:38:46.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.438"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.437"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.432"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.339"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.338"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.151"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.149"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:46.149"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.439" starttime="20170713 20:38:44.567"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.440" starttime="20170713 20:38:42.777"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.440" starttime="20170713 20:38:42.763"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.440" starttime="20170713 20:38:42.760"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.440" starttime="20170713 20:38:42.760"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:46.442" starttime="20170713 20:38:46.441"></status>
</kw>
<msg timestamp="20170713 20:38:46.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:46.442" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:46.442" starttime="20170713 20:38:46.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:46.442" starttime="20170713 20:38:46.442"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:46.458" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:46.458" starttime="20170713 20:38:46.458"></status>
</kw>
<msg timestamp="20170713 20:38:46.458" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:46.459" starttime="20170713 20:38:46.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:46.460" starttime="20170713 20:38:46.459"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.460" starttime="20170713 20:38:46.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:46.460" starttime="20170713 20:38:46.460"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:46.462" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:46.462" starttime="20170713 20:38:46.461"></status>
</kw>
<msg timestamp="20170713 20:38:46.462" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:46.462" starttime="20170713 20:38:46.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:46.464" starttime="20170713 20:38:46.463"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.464" starttime="20170713 20:38:46.463"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:46.464" starttime="20170713 20:38:46.462"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:46.464" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:48.245" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:48.245" starttime="20170713 20:38:46.464"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.245" starttime="20170713 20:38:46.457"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:48.246" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170713 20:38:48.246" starttime="20170713 20:38:48.246"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:48.249" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170713 20:38:48.249" starttime="20170713 20:38:48.248"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:48.250" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_elog.txt</msg>
<status status="PASS" endtime="20170713 20:38:48.250" starttime="20170713 20:38:48.250"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:48.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:48.255" starttime="20170713 20:38:48.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:48.256" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:48.256" starttime="20170713 20:38:48.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:48.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:48.257" starttime="20170713 20:38:48.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:48.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:48.258" starttime="20170713 20:38:48.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:48.466" starttime="20170713 20:38:48.259"></status>
</kw>
<msg timestamp="20170713 20:38:48.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:48.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.466" starttime="20170713 20:38:48.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.467" starttime="20170713 20:38:48.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.468" starttime="20170713 20:38:48.468"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.468" starttime="20170713 20:38:48.253"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.468" starttime="20170713 20:38:48.253"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.468" starttime="20170713 20:38:48.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:48.469" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:48.469" starttime="20170713 20:38:48.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:48.470" starttime="20170713 20:38:48.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:48.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:48.513" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.513" starttime="20170713 20:38:48.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:48.513" starttime="20170713 20:38:48.513"></status>
</kw>
<msg timestamp="20170713 20:38:48.513" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.514" starttime="20170713 20:38:48.251"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:48.515" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:48.515" starttime="20170713 20:38:48.514"></status>
</kw>
<msg timestamp="20170713 20:38:48.515" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:48.515" starttime="20170713 20:38:48.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:48.516" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:48.516" starttime="20170713 20:38:48.516"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.516" starttime="20170713 20:38:48.515"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.516" starttime="20170713 20:38:48.249"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:48.517" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170713 20:38:48.517" starttime="20170713 20:38:48.517"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:48.520" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:48.520" starttime="20170713 20:38:48.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:48.521" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:48.521" starttime="20170713 20:38:48.521"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:48.522" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:48.522" starttime="20170713 20:38:48.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:48.522" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:48.522" starttime="20170713 20:38:48.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:48.712" starttime="20170713 20:38:48.523"></status>
</kw>
<msg timestamp="20170713 20:38:48.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:48.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.712" starttime="20170713 20:38:48.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.713" starttime="20170713 20:38:48.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:48.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:48.714" starttime="20170713 20:38:48.713"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.714" starttime="20170713 20:38:48.519"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.714" starttime="20170713 20:38:48.519"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:48.714" starttime="20170713 20:38:48.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:48.715" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:48.715" starttime="20170713 20:38:48.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:48.716" starttime="20170713 20:38:48.715"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:49.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:49.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.062" starttime="20170713 20:38:48.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:49.063" starttime="20170713 20:38:49.062"></status>
</kw>
<msg timestamp="20170713 20:38:49.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.063" starttime="20170713 20:38:48.517"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:49.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.065" starttime="20170713 20:38:49.064"></status>
</kw>
<msg timestamp="20170713 20:38:49.065" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170713 20:38:49.065" starttime="20170713 20:38:49.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:49.066" starttime="20170713 20:38:49.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170713 20:38:49.067" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:49.067" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170713 20:38:49.068" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170713 20:38:49.068" starttime="20170713 20:38:49.066"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:49.069" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:49.069" starttime="20170713 20:38:49.069"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:49.070" starttime="20170713 20:38:49.068"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:49.070" starttime="20170713 20:38:48.516"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:49.070" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170713 20:38:49.070" starttime="20170713 20:38:49.070"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:49.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:49.074" starttime="20170713 20:38:49.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:49.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:49.075" starttime="20170713 20:38:49.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:49.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:49.075" starttime="20170713 20:38:49.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:49.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:49.076" starttime="20170713 20:38:49.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:49.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:49.271" starttime="20170713 20:38:49.078"></status>
</kw>
<msg timestamp="20170713 20:38:49.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:49.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.271" starttime="20170713 20:38:49.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:49.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.272" starttime="20170713 20:38:49.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:49.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:49.274" starttime="20170713 20:38:49.272"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:49.274" starttime="20170713 20:38:49.072"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:49.274" starttime="20170713 20:38:49.072"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:49.274" starttime="20170713 20:38:49.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:49.275" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:49.275" starttime="20170713 20:38:49.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:49.275" starttime="20170713 20:38:49.275"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:51.250" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:51.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.251" starttime="20170713 20:38:49.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.252" starttime="20170713 20:38:51.251"></status>
</kw>
<msg timestamp="20170713 20:38:51.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.252" starttime="20170713 20:38:49.071"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.253" starttime="20170713 20:38:51.253"></status>
</kw>
<msg timestamp="20170713 20:38:51.253" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170713 20:38:51.253" starttime="20170713 20:38:51.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.254" starttime="20170713 20:38:51.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170713 20:38:51.257" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7d9ce", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b970", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7db01", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 0, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbc4", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170713 20:38:51.258" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170713 20:38:51.258" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170713 20:38:51.258" starttime="20170713 20:38:51.254"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:51.260" starttime="20170713 20:38:51.259"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.260" starttime="20170713 20:38:51.258"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.260" starttime="20170713 20:38:49.070"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:51.261" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_led.txt</msg>
<status status="PASS" endtime="20170713 20:38:51.261" starttime="20170713 20:38:51.260"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:51.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:51.264" starttime="20170713 20:38:51.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:51.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:51.265" starttime="20170713 20:38:51.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:51.265" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:51.266" starttime="20170713 20:38:51.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:51.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:51.266" starttime="20170713 20:38:51.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:51.498" starttime="20170713 20:38:51.267"></status>
</kw>
<msg timestamp="20170713 20:38:51.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:51.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.499" starttime="20170713 20:38:51.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.499" starttime="20170713 20:38:51.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.500" starttime="20170713 20:38:51.500"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.500" starttime="20170713 20:38:51.263"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.500" starttime="20170713 20:38:51.262"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.501" starttime="20170713 20:38:51.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:51.501" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:51.501" starttime="20170713 20:38:51.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.502" starttime="20170713 20:38:51.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:51.602" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:51.602" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.602" starttime="20170713 20:38:51.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.603" starttime="20170713 20:38:51.602"></status>
</kw>
<msg timestamp="20170713 20:38:51.603" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.603" starttime="20170713 20:38:51.261"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:51.604" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:51.604" starttime="20170713 20:38:51.604"></status>
</kw>
<msg timestamp="20170713 20:38:51.604" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:51.604" starttime="20170713 20:38:51.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:51.605" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:51.606" starttime="20170713 20:38:51.605"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.606" starttime="20170713 20:38:51.605"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.606" starttime="20170713 20:38:51.260"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:51.606" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170713 20:38:51.607" starttime="20170713 20:38:51.606"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:38:51.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:38:51.610" starttime="20170713 20:38:51.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:38:51.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:38:51.610" starttime="20170713 20:38:51.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:38:51.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:38:51.611" starttime="20170713 20:38:51.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:38:51.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:38:51.612" starttime="20170713 20:38:51.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:38:51.830" starttime="20170713 20:38:51.613"></status>
</kw>
<msg timestamp="20170713 20:38:51.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:51.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.830" starttime="20170713 20:38:51.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.831" starttime="20170713 20:38:51.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.832" starttime="20170713 20:38:51.831"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.832" starttime="20170713 20:38:51.608"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.832" starttime="20170713 20:38:51.608"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.832" starttime="20170713 20:38:51.607"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:38:51.833" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170713 20:38:51.833" starttime="20170713 20:38:51.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.833" starttime="20170713 20:38:51.833"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:38:51.876" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:38:51.876" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.876" starttime="20170713 20:38:51.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.877" starttime="20170713 20:38:51.876"></status>
</kw>
<msg timestamp="20170713 20:38:51.877" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:38:51.877" starttime="20170713 20:38:51.607"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:38:51.878" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:38:51.878" starttime="20170713 20:38:51.878"></status>
</kw>
<msg timestamp="20170713 20:38:51.878" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:38:51.878" starttime="20170713 20:38:51.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170713 20:38:51.879" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:51.879"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:51.879"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:51.606"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:48.249"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:48.247"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:48.247"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:48.246"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:46.456"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:46.443"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:46.440"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.880" starttime="20170713 20:38:46.440"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.882" starttime="20170713 20:38:51.882"></status>
</kw>
<msg timestamp="20170713 20:38:51.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:51.882" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:51.882" starttime="20170713 20:38:51.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.883" starttime="20170713 20:38:51.883"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:51.899" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:51.899" starttime="20170713 20:38:51.898"></status>
</kw>
<msg timestamp="20170713 20:38:51.899" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:51.899" starttime="20170713 20:38:51.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.901" starttime="20170713 20:38:51.900"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.901" starttime="20170713 20:38:51.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.902" starttime="20170713 20:38:51.901"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:51.903" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:51.903" starttime="20170713 20:38:51.903"></status>
</kw>
<msg timestamp="20170713 20:38:51.903" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:51.903" starttime="20170713 20:38:51.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:51.905" starttime="20170713 20:38:51.905"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.905" starttime="20170713 20:38:51.904"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:51.905" starttime="20170713 20:38:51.903"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:51.906" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:53.551" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:53.552" starttime="20170713 20:38:51.905"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:53.552" starttime="20170713 20:38:51.897"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170713 20:38:53.552" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170713 20:38:53.609" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170713 20:38:53.609" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170713 20:38:53.609" starttime="20170713 20:38:53.552"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170713 20:38:53.610" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170713 20:38:53.610" starttime="20170713 20:38:53.609"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:53.611" starttime="20170713 20:38:53.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.479" starttime="20170713 20:38:53.612"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.479" starttime="20170713 20:38:53.612"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.479" starttime="20170713 20:38:53.610"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170713 20:38:54.479" starttime="20170713 20:38:54.479"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.479" starttime="20170713 20:38:51.897"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.480" starttime="20170713 20:38:51.883"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.480" starttime="20170713 20:38:51.881"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.480" starttime="20170713 20:38:51.880"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.482" starttime="20170713 20:38:54.482"></status>
</kw>
<msg timestamp="20170713 20:38:54.482" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:38:54.482" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:38:54.482" starttime="20170713 20:38:54.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.483" starttime="20170713 20:38:54.482"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170713 20:38:54.499" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170713 20:38:54.499" starttime="20170713 20:38:54.498"></status>
</kw>
<msg timestamp="20170713 20:38:54.499" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170713 20:38:54.499" starttime="20170713 20:38:54.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.500" starttime="20170713 20:38:54.500"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.500" starttime="20170713 20:38:54.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.501" starttime="20170713 20:38:54.500"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170713 20:38:54.502" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170713 20:38:54.502" starttime="20170713 20:38:54.502"></status>
</kw>
<msg timestamp="20170713 20:38:54.502" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170713 20:38:54.502" starttime="20170713 20:38:54.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:54.505" starttime="20170713 20:38:54.504"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.505" starttime="20170713 20:38:54.504"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:54.505" starttime="20170713 20:38:54.503"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170713 20:38:54.506" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170713 20:38:56.251" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170713 20:38:56.251" starttime="20170713 20:38:54.505"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.251" starttime="20170713 20:38:54.497"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170713 20:38:56.252" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170713 20:38:56.252" starttime="20170713 20:38:56.252"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170713 20:38:56.254" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170713 20:38:56.254" starttime="20170713 20:38:56.254"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:56.256" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170713 20:38:56.256" starttime="20170713 20:38:56.255"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:56.258" starttime="20170713 20:38:56.257"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:56.259" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170713 20:38:56.618" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:56.618" level="INFO">${stdout} = Mem: 236280K used, 196052K free, 80536K shrd, 10952K buff, 117144K cached
CPU:   7% usr  23% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 0.54 0.36 0.30 1/146 5488
  PID  PPID USER ...</msg>
<msg timestamp="20170713 20:38:56.618" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:56.619" starttime="20170713 20:38:56.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:56.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:56.626" starttime="20170713 20:38:56.626"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.626" starttime="20170713 20:38:56.625"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.626" starttime="20170713 20:38:56.619"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.626" starttime="20170713 20:38:56.256"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.627" starttime="20170713 20:38:56.255"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:56.627" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170713 20:38:56.627" starttime="20170713 20:38:56.627"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:56.629" starttime="20170713 20:38:56.628"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:56.629" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170713 20:38:56.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:56.746" level="INFO">${stdout} = [ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ 5432.960000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<msg timestamp="20170713 20:38:56.746" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:56.746" starttime="20170713 20:38:56.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:56.754" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:56.754" starttime="20170713 20:38:56.754"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.754" starttime="20170713 20:38:56.753"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.755" starttime="20170713 20:38:56.747"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.755" starttime="20170713 20:38:56.628"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.755" starttime="20170713 20:38:56.627"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:56.755" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170713 20:38:56.756" starttime="20170713 20:38:56.755"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:56.757" starttime="20170713 20:38:56.757"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:56.757" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170713 20:38:56.833" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:56.833" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          196020 kB
MemAvailable:     241448 kB
Buffers:           10952 kB
Cached:           117144 kB
SwapCached:            0 kB
Active:           158260 kB
Inac...</msg>
<msg timestamp="20170713 20:38:56.833" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:56.833" starttime="20170713 20:38:56.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:56.842" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:56.842" starttime="20170713 20:38:56.842"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.842" starttime="20170713 20:38:56.841"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.843" starttime="20170713 20:38:56.833"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.843" starttime="20170713 20:38:56.756"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.843" starttime="20170713 20:38:56.755"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:56.843" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170713 20:38:56.843" starttime="20170713 20:38:56.843"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:56.845" starttime="20170713 20:38:56.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:56.845" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170713 20:38:56.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:38:56.921" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170713 20:38:56.921" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:38:56.921" starttime="20170713 20:38:56.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:38:56.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:38:56.928" starttime="20170713 20:38:56.927"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.928" starttime="20170713 20:38:56.927"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.928" starttime="20170713 20:38:56.922"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.928" starttime="20170713 20:38:56.844"></status>
</kw>
<status status="PASS" endtime="20170713 20:38:56.928" starttime="20170713 20:38:56.843"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170713 20:38:56.929" level="INFO">${logpath} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170713 20:38:56.929" starttime="20170713 20:38:56.929"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:38:56.930" starttime="20170713 20:38:56.930"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170713 20:38:56.931" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170713 20:39:06.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170713 20:39:06.942" level="INFO">${stdout} = -- Logs begin at Thu 2017-07-13 05:21:31 UTC, end at Thu 2017-07-13 20:38:56 UTC. --
Jul 13 05:21:31 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 13 05:21:31 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170713 20:39:06.942" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170713 20:39:06.942" starttime="20170713 20:38:56.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170713 20:39:06.958" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/20170713203840946451_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:39:06.958" starttime="20170713 20:39:06.955"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.958" starttime="20170713 20:39:06.948"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.958" starttime="20170713 20:39:06.943"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.929"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.928"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.255"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.253"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.253"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:56.253"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:54.497"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:54.483"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:54.480"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:06.959" starttime="20170713 20:38:54.480"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:06.961" starttime="20170713 20:39:06.961"></status>
</kw>
<msg timestamp="20170713 20:39:06.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:39:06.962" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:39:06.962" starttime="20170713 20:39:06.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:06.962" starttime="20170713 20:39:06.962"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170713 20:39:06.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170713 20:39:06.980" starttime="20170713 20:39:06.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170713 20:39:06.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170713 20:39:06.981" starttime="20170713 20:39:06.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170713 20:39:06.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170713 20:39:06.981" starttime="20170713 20:39:06.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170713 20:39:06.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170713 20:39:06.982" starttime="20170713 20:39:06.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170713 20:39:07.264" starttime="20170713 20:39:06.983"></status>
</kw>
<msg timestamp="20170713 20:39:07.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:39:07.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170713 20:39:07.265" starttime="20170713 20:39:06.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:39:07.265" starttime="20170713 20:39:07.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170713 20:39:07.266" starttime="20170713 20:39:07.266"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.266" starttime="20170713 20:39:06.979"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.266" starttime="20170713 20:39:06.978"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.267" starttime="20170713 20:39:06.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170713 20:39:07.267" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170713 20:39:07.267" starttime="20170713 20:39:07.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.268" starttime="20170713 20:39:07.267"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170713 20:39:07.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170713 20:39:07.316" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:39:07.316" starttime="20170713 20:39:07.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.316" starttime="20170713 20:39:07.316"></status>
</kw>
<msg timestamp="20170713 20:39:07.317" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170713 20:39:07.317" starttime="20170713 20:39:06.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170713 20:39:07.318" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170713 20:39:07.318" starttime="20170713 20:39:07.317"></status>
</kw>
<msg timestamp="20170713 20:39:07.318" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170713 20:39:07.318" starttime="20170713 20:39:07.317"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170713 20:39:07.319" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170713 20:39:07.319" starttime="20170713 20:39:07.318"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.319" starttime="20170713 20:39:06.977"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.319" starttime="20170713 20:39:06.963"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.319" starttime="20170713 20:39:06.960"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.319" starttime="20170713 20:39:06.959"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.321" starttime="20170713 20:39:07.321"></status>
</kw>
<msg timestamp="20170713 20:39:07.321" level="INFO">${status} = PASS</msg>
<msg timestamp="20170713 20:39:07.321" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170713 20:39:07.321" starttime="20170713 20:39:07.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.322" starttime="20170713 20:39:07.322"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170713 20:39:07.337" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170713 20:39:07.337" starttime="20170713 20:39:07.337"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:39:07.336"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:39:07.322"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:39:07.319"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:39:07.319"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:38:42.760"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:38:42.758"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:38:42.757"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.338" starttime="20170713 20:38:42.757"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170713 20:39:07.456" starttime="20170713 20:39:07.338"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.456" starttime="20170713 20:38:42.756"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.457" starttime="20170713 20:38:37.908"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.457" starttime="20170713 20:38:37.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.457" starttime="20170713 20:39:07.457"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170713 20:39:07.459" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170713 20:39:07.459" starttime="20170713 20:39:07.458"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170713 20:39:07.459" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170713203840946451_UpdateBmc/20170713203840946451_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170713 20:39:07.459" starttime="20170713 20:39:07.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.460" starttime="20170713 20:39:07.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.461" starttime="20170713 20:39:07.460"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.461" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170713 20:39:07.461" starttime="20170713 20:39:07.461"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.462" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170713 20:39:07.462" starttime="20170713 20:39:07.462"></status>
</kw>
<msg timestamp="20170713 20:39:07.463" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170713 20:39:07.463" starttime="20170713 20:39:07.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.463" starttime="20170713 20:39:07.463"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170713 20:39:07.464" starttime="20170713 20:39:07.463"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:39:07.465" level="INFO">${cur_time} = 2017-07-13 20:39:07:465034</msg>
<status status="PASS" endtime="20170713 20:39:07.465" starttime="20170713 20:39:07.465"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170713 20:39:07.466" level="INFO">${cur_time} = 20170713203907465034</msg>
<status status="PASS" endtime="20170713 20:39:07.466" starttime="20170713 20:39:07.466"></status>
</kw>
<msg timestamp="20170713 20:39:07.466" level="INFO">${cur_time} = 20170713203907465034</msg>
<status status="PASS" endtime="20170713 20:39:07.466" starttime="20170713 20:39:07.464"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170713 20:39:07.467" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170713 20:39:07.467" starttime="20170713 20:39:07.466"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.467" starttime="20170713 20:39:07.458"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.467" starttime="20170713 20:38:37.607"></status>
</kw>
<status status="PASS" endtime="20170713 20:39:07.467" starttime="20170713 20:38:37.598"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170713 20:39:07.468" critical="yes" starttime="20170713 20:29:08.496">#(UTC) 2017/07/13 20:38:37.590827 -    4.469255 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170713 20:39:07.468" starttime="20170713 20:29:07.676"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
