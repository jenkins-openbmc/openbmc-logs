<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170927 01:39:45.865" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:39:46.787" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:39:46.788" starttime="20170927 01:39:46.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:39:46.789" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:39:46.789" starttime="20170927 01:39:46.789"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:39:46.790" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:39:46.790" starttime="20170927 01:39:46.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:39:46.791" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:39:46.791" starttime="20170927 01:39:46.790"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:39:46.997" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:39:46.997" starttime="20170927 01:39:46.791"></status>
</kw>
<msg timestamp="20170927 01:39:46.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:39:46.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:39:46.997" starttime="20170927 01:39:46.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:39:46.998" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:39:46.998" starttime="20170927 01:39:46.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:39:46.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:39:46.999" starttime="20170927 01:39:46.998"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:46.999" starttime="20170927 01:39:46.785"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:46.999" starttime="20170927 01:39:46.784"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:46.999" starttime="20170927 01:39:46.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:39:47.000" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170927 01:39:47.000" starttime="20170927 01:39:47.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:39:47.001" starttime="20170927 01:39:47.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:39:47.046" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170927 01:39:47.046" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:39:47.046" starttime="20170927 01:39:47.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:39:47.047" starttime="20170927 01:39:47.046"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:39:47.047" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:39:47.047" starttime="20170927 01:39:47.047"></status>
</kw>
<msg timestamp="20170927 01:39:47.048" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:39:47.048" starttime="20170927 01:39:46.783"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170927 01:39:47.048" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170927 01:39:47.048" starttime="20170927 01:39:47.048"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:47.049" starttime="20170927 01:39:46.782"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:47.049" starttime="20170927 01:39:46.782"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170927 01:39:47.050" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170927 01:39:47.050" starttime="20170927 01:39:47.050"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170927 01:39:47.077" level="INFO">${image_version} = v1.99.10-50-g52e35a4</msg>
<status status="PASS" endtime="20170927 01:39:47.077" starttime="20170927 01:39:47.050"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170927 01:39:47.078" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170927 01:39:57.904" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170927 01:39:57.904" starttime="20170927 01:39:47.078"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:39:57.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:39:57.908" starttime="20170927 01:39:57.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:39:57.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:39:57.909" starttime="20170927 01:39:57.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:39:57.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:39:57.910" starttime="20170927 01:39:57.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:39:57.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:39:57.910" starttime="20170927 01:39:57.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:39:58.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:39:58.098" starttime="20170927 01:39:57.911"></status>
</kw>
<msg timestamp="20170927 01:39:58.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:39:58.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:39:58.098" starttime="20170927 01:39:57.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:39:58.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:39:58.099" starttime="20170927 01:39:58.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:39:58.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:39:58.100" starttime="20170927 01:39:58.099"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:58.100" starttime="20170927 01:39:57.907"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:58.100" starttime="20170927 01:39:57.906"></status>
</kw>
<status status="PASS" endtime="20170927 01:39:58.100" starttime="20170927 01:39:57.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:39:58.100" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170927 01:39:58.101" starttime="20170927 01:39:58.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:39:58.101" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170927 01:39:58.101" starttime="20170927 01:39:58.101"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:39:58.102" starttime="20170927 01:39:58.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:39:58.103" starttime="20170927 01:39:58.102"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:03.978" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170927 01:40:03.978" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:03.978" starttime="20170927 01:39:58.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:03.979" starttime="20170927 01:40:03.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:03.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:03.980" starttime="20170927 01:40:03.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:03.981" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:03.981" starttime="20170927 01:40:03.980"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:03.981" starttime="20170927 01:39:57.905"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170927 01:40:03.988" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170927 01:40:03.988" starttime="20170927 01:40:03.987"></status>
</kw>
<msg timestamp="20170927 01:40:03.988" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170927 01:40:03.988" starttime="20170927 01:40:03.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:03.989" starttime="20170927 01:40:03.989"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:03.989" starttime="20170927 01:40:03.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:03.990" starttime="20170927 01:40:03.989"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170927 01:40:03.991" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170927 01:40:03.991" starttime="20170927 01:40:03.991"></status>
</kw>
<msg timestamp="20170927 01:40:03.991" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170927 01:40:03.991" starttime="20170927 01:40:03.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:03.993" starttime="20170927 01:40:03.993"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:03.993" starttime="20170927 01:40:03.992"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:03.993" starttime="20170927 01:40:03.992"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170927 01:40:03.994" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:06.242" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170927 01:40:06.243" starttime="20170927 01:40:03.994"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:06.243" starttime="20170927 01:40:03.986"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:06.251" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170927 01:40:06.298" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170927 01:40:06.298" level="INFO">${stdout} = /tmp/images/94335362/</msg>
<msg timestamp="20170927 01:40:06.298" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:06.298" starttime="20170927 01:40:06.251"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170927 01:40:06.299" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170927 01:40:06.299" starttime="20170927 01:40:06.299"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:06.299" starttime="20170927 01:40:06.250"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170927 01:40:06.305" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170927 01:40:06.305" starttime="20170927 01:40:06.305"></status>
</kw>
<msg timestamp="20170927 01:40:06.305" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170927 01:40:06.305" starttime="20170927 01:40:06.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:06.306" starttime="20170927 01:40:06.306"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:06.307" starttime="20170927 01:40:06.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:06.307" starttime="20170927 01:40:06.307"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170927 01:40:06.308" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170927 01:40:06.308" starttime="20170927 01:40:06.308"></status>
</kw>
<msg timestamp="20170927 01:40:06.309" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170927 01:40:06.309" starttime="20170927 01:40:06.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:06.311" starttime="20170927 01:40:06.310"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:06.311" starttime="20170927 01:40:06.310"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:06.311" starttime="20170927 01:40:06.309"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170927 01:40:06.311" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:08.022" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170927 01:40:08.022" starttime="20170927 01:40:06.311"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:08.022" starttime="20170927 01:40:06.303"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/94335362/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:08.031" level="INFO">Executing command 'cat /tmp/images/94335362/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170927 01:40:08.108" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170927 01:40:08.108" level="INFO">${stdout} = version=v1.99.10-50-g52e35a4</msg>
<msg timestamp="20170927 01:40:08.108" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:08.108" starttime="20170927 01:40:08.030"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170927 01:40:08.108" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170927 01:40:08.108" starttime="20170927 01:40:08.108"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:08.109" starttime="20170927 01:40:08.030"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170927 01:40:08.114" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170927 01:40:08.114" starttime="20170927 01:40:08.114"></status>
</kw>
<msg timestamp="20170927 01:40:08.114" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170927 01:40:08.114" starttime="20170927 01:40:08.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:08.116" starttime="20170927 01:40:08.115"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:08.116" starttime="20170927 01:40:08.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:08.117" starttime="20170927 01:40:08.116"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170927 01:40:08.118" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170927 01:40:08.118" starttime="20170927 01:40:08.117"></status>
</kw>
<msg timestamp="20170927 01:40:08.118" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170927 01:40:08.118" starttime="20170927 01:40:08.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:08.120" starttime="20170927 01:40:08.119"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:08.120" starttime="20170927 01:40:08.119"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:08.120" starttime="20170927 01:40:08.118"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170927 01:40:08.121" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:09.766" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170927 01:40:09.767" starttime="20170927 01:40:08.120"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:09.767" starttime="20170927 01:40:08.112"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170927 01:40:09.773" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170927 01:40:09.773" starttime="20170927 01:40:09.773"></status>
</kw>
<msg timestamp="20170927 01:40:09.773" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170927 01:40:09.773" starttime="20170927 01:40:09.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:09.774" starttime="20170927 01:40:09.774"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:09.774" starttime="20170927 01:40:09.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:09.775" starttime="20170927 01:40:09.775"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170927 01:40:09.776" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170927 01:40:09.776" starttime="20170927 01:40:09.776"></status>
</kw>
<msg timestamp="20170927 01:40:09.776" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170927 01:40:09.777" starttime="20170927 01:40:09.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:09.778" starttime="20170927 01:40:09.778"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:09.778" starttime="20170927 01:40:09.778"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:09.778" starttime="20170927 01:40:09.777"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170927 01:40:09.779" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:11.440" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170927 01:40:11.440" starttime="20170927 01:40:09.779"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.440" starttime="20170927 01:40:09.771"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/94335362/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:11.449" level="INFO">Executing command 'cat /tmp/images/94335362/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170927 01:40:11.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170927 01:40:11.528" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20170927 01:40:11.528" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:11.528" starttime="20170927 01:40:11.448"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170927 01:40:11.529" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170927 01:40:11.529" starttime="20170927 01:40:11.528"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.529" starttime="20170927 01:40:11.448"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/94335362</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:11.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:11.540" starttime="20170927 01:40:11.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:11.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:11.541" starttime="20170927 01:40:11.540"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:11.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:11.541" starttime="20170927 01:40:11.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:11.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:11.542" starttime="20170927 01:40:11.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:11.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:11.755" starttime="20170927 01:40:11.543"></status>
</kw>
<msg timestamp="20170927 01:40:11.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:11.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.755" starttime="20170927 01:40:11.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:11.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.756" starttime="20170927 01:40:11.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:11.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.756" starttime="20170927 01:40:11.756"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.757" starttime="20170927 01:40:11.539"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.757" starttime="20170927 01:40:11.538"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.757" starttime="20170927 01:40:11.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:11.757" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362/attr/Activation</msg>
<status status="PASS" endtime="20170927 01:40:11.757" starttime="20170927 01:40:11.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:11.759" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:11.760" starttime="20170927 01:40:11.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:11.760" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:11.761" starttime="20170927 01:40:11.760"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.761" starttime="20170927 01:40:11.760"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.761" starttime="20170927 01:40:11.758"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.761" starttime="20170927 01:40:11.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:11.889" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170927 01:40:11.890" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.890" starttime="20170927 01:40:11.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:11.892" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:11.892" starttime="20170927 01:40:11.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:11.893" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:11.893" starttime="20170927 01:40:11.892"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.893" starttime="20170927 01:40:11.892"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.893" starttime="20170927 01:40:11.891"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.893" starttime="20170927 01:40:11.890"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:11.894" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:11.894" starttime="20170927 01:40:11.894"></status>
</kw>
<msg timestamp="20170927 01:40:11.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.894" starttime="20170927 01:40:11.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:11.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:11.895" starttime="20170927 01:40:11.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170927 01:40:11.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:11.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:11.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170927 01:40:11.896" starttime="20170927 01:40:11.895"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:11.896" starttime="20170927 01:40:11.536"></status>
</kw>
<msg timestamp="20170927 01:40:11.896" level="INFO">${ret} = True</msg>
<msg timestamp="20170927 01:40:11.896" level="INFO">${version_id} = 94335362</msg>
<status status="PASS" endtime="20170927 01:40:11.896" starttime="20170927 01:40:03.981"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:11.897" starttime="20170927 01:40:11.896"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:11.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:11.901" starttime="20170927 01:40:11.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:11.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:11.901" starttime="20170927 01:40:11.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:11.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:11.902" starttime="20170927 01:40:11.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:11.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:11.903" starttime="20170927 01:40:11.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:12.082" starttime="20170927 01:40:11.904"></status>
</kw>
<msg timestamp="20170927 01:40:12.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:12.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.082" starttime="20170927 01:40:11.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.082" starttime="20170927 01:40:12.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.083" starttime="20170927 01:40:12.083"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.083" starttime="20170927 01:40:11.899"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.083" starttime="20170927 01:40:11.899"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.084" starttime="20170927 01:40:11.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:12.084" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362</msg>
<status status="PASS" endtime="20170927 01:40:12.084" starttime="20170927 01:40:12.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:12.086" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:12.086" starttime="20170927 01:40:12.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:12.087" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:12.087" starttime="20170927 01:40:12.087"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.088" starttime="20170927 01:40:12.087"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.088" starttime="20170927 01:40:12.085"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.088" starttime="20170927 01:40:12.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:12.201" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362, headers=None json=None</msg>
<msg timestamp="20170927 01:40:12.201" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.201" starttime="20170927 01:40:12.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:12.203" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20170927 01:40:12.203" starttime="20170927 01:40:12.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:12.204" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:12.204" starttime="20170927 01:40:12.204"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.205" starttime="20170927 01:40:12.204"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.205" starttime="20170927 01:40:12.202"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.205" starttime="20170927 01:40:12.202"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:12.205" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:12.206" starttime="20170927 01:40:12.205"></status>
</kw>
<msg timestamp="20170927 01:40:12.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.206" starttime="20170927 01:40:11.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.207" starttime="20170927 01:40:12.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170927 01:40:12.207" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:12.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:12.208" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170927 01:40:12.208" starttime="20170927 01:40:12.207"></status>
</kw>
<msg timestamp="20170927 01:40:12.208" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20170927 01:40:12.208" starttime="20170927 01:40:11.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.209" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.209" starttime="20170927 01:40:12.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170927 01:40:12.210" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170927 01:40:12.210" starttime="20170927 01:40:12.209"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:12.211" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362</msg>
<status status="PASS" endtime="20170927 01:40:12.211" starttime="20170927 01:40:12.211"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:12.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:12.217" starttime="20170927 01:40:12.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:12.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:12.218" starttime="20170927 01:40:12.217"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:12.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:12.218" starttime="20170927 01:40:12.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:12.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:12.219" starttime="20170927 01:40:12.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.413" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:12.413" starttime="20170927 01:40:12.220"></status>
</kw>
<msg timestamp="20170927 01:40:12.413" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:12.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.413" starttime="20170927 01:40:12.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.414" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.414" starttime="20170927 01:40:12.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:12.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:12.415" starttime="20170927 01:40:12.414"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.415" starttime="20170927 01:40:12.216"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.415" starttime="20170927 01:40:12.215"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.415" starttime="20170927 01:40:12.214"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:12.416" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170927 01:40:12.416" starttime="20170927 01:40:12.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:12.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:12.417" starttime="20170927 01:40:12.416"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:12.417" starttime="20170927 01:40:12.417"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:12.419" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170927 01:40:12.419" starttime="20170927 01:40:12.418"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:12.420" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170927 01:40:12.420" starttime="20170927 01:40:12.419"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.420" starttime="20170927 01:40:12.419"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:12.420" starttime="20170927 01:40:12.417"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:13.560" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170927 01:40:13.560" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.560" starttime="20170927 01:40:12.421"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:13.562" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:13.562" starttime="20170927 01:40:13.561"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:13.563" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:13.563" starttime="20170927 01:40:13.562"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.563" starttime="20170927 01:40:13.562"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.563" starttime="20170927 01:40:13.560"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:13.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:13.564" starttime="20170927 01:40:13.563"></status>
</kw>
<msg timestamp="20170927 01:40:13.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.564" starttime="20170927 01:40:12.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:13.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.565" starttime="20170927 01:40:13.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170927 01:40:13.565" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:13.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:13.565" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170927 01:40:13.565" starttime="20170927 01:40:13.565"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.565" starttime="20170927 01:40:12.210"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:13.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:13.569" starttime="20170927 01:40:13.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:13.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:13.570" starttime="20170927 01:40:13.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:13.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:13.571" starttime="20170927 01:40:13.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:13.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:13.571" starttime="20170927 01:40:13.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:13.889" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:13.889" starttime="20170927 01:40:13.572"></status>
</kw>
<msg timestamp="20170927 01:40:13.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:13.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.889" starttime="20170927 01:40:13.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:13.890" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.890" starttime="20170927 01:40:13.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:13.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:13.891" starttime="20170927 01:40:13.890"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.891" starttime="20170927 01:40:13.568"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.891" starttime="20170927 01:40:13.567"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.891" starttime="20170927 01:40:13.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:13.891" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362</msg>
<status status="PASS" endtime="20170927 01:40:13.892" starttime="20170927 01:40:13.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:13.894" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:13.894" starttime="20170927 01:40:13.893"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:13.895" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:13.895" starttime="20170927 01:40:13.895"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.895" starttime="20170927 01:40:13.894"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.895" starttime="20170927 01:40:13.892"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:13.895" starttime="20170927 01:40:13.892"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:14.220" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362, headers=None json=None</msg>
<msg timestamp="20170927 01:40:14.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:14.220" starttime="20170927 01:40:13.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:14.222" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Softw...</msg>
<status status="PASS" endtime="20170927 01:40:14.223" starttime="20170927 01:40:14.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:14.224" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:14.224" starttime="20170927 01:40:14.223"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.224" starttime="20170927 01:40:14.223"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.224" starttime="20170927 01:40:14.221"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.224" starttime="20170927 01:40:14.221"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:14.225" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:14.225" starttime="20170927 01:40:14.225"></status>
</kw>
<msg timestamp="20170927 01:40:14.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:14.225" starttime="20170927 01:40:13.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:14.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:14.226" starttime="20170927 01:40:14.226"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170927 01:40:14.227" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:14.227" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:14.228" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170927 01:40:14.228" starttime="20170927 01:40:14.227"></status>
</kw>
<msg timestamp="20170927 01:40:14.228" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Faile...</msg>
<status status="PASS" endtime="20170927 01:40:14.228" starttime="20170927 01:40:13.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170927 01:40:14.229" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:14.229" starttime="20170927 01:40:14.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:14.230" starttime="20170927 01:40:14.230"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170927 01:40:14.236" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170927 01:40:14.236" starttime="20170927 01:40:14.236"></status>
</kw>
<msg timestamp="20170927 01:40:14.237" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170927 01:40:14.237" starttime="20170927 01:40:14.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:14.238" starttime="20170927 01:40:14.237"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.238" starttime="20170927 01:40:14.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:14.239" starttime="20170927 01:40:14.238"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170927 01:40:14.240" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170927 01:40:14.240" starttime="20170927 01:40:14.239"></status>
</kw>
<msg timestamp="20170927 01:40:14.240" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170927 01:40:14.240" starttime="20170927 01:40:14.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:14.242" starttime="20170927 01:40:14.241"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.242" starttime="20170927 01:40:14.241"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:14.242" starttime="20170927 01:40:14.240"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170927 01:40:14.242" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:15.921" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170927 01:40:15.921" starttime="20170927 01:40:14.242"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:15.921" starttime="20170927 01:40:14.235"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/94335362</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:15.932" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:15.932" starttime="20170927 01:40:15.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:15.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:15.933" starttime="20170927 01:40:15.932"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:15.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:15.933" starttime="20170927 01:40:15.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:15.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:15.934" starttime="20170927 01:40:15.934"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:16.135" starttime="20170927 01:40:15.937"></status>
</kw>
<msg timestamp="20170927 01:40:16.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:16.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.136" starttime="20170927 01:40:15.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.136" starttime="20170927 01:40:16.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.137" starttime="20170927 01:40:16.137"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.137" starttime="20170927 01:40:15.931"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.137" starttime="20170927 01:40:15.930"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.137" starttime="20170927 01:40:15.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:16.138" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362</msg>
<status status="PASS" endtime="20170927 01:40:16.138" starttime="20170927 01:40:16.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:16.142" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:16.142" starttime="20170927 01:40:16.141"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:16.143" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:16.143" starttime="20170927 01:40:16.143"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.143" starttime="20170927 01:40:16.142"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.143" starttime="20170927 01:40:16.139"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.144" starttime="20170927 01:40:16.139"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:16.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362, headers=None json=None</msg>
<msg timestamp="20170927 01:40:16.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.255" starttime="20170927 01:40:16.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:16.257" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Softw...</msg>
<status status="PASS" endtime="20170927 01:40:16.257" starttime="20170927 01:40:16.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:16.258" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:16.259" starttime="20170927 01:40:16.258"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.259" starttime="20170927 01:40:16.258"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.259" starttime="20170927 01:40:16.256"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.259" starttime="20170927 01:40:16.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:16.259" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:16.259" starttime="20170927 01:40:16.259"></status>
</kw>
<msg timestamp="20170927 01:40:16.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.260" starttime="20170927 01:40:15.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.260" starttime="20170927 01:40:16.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170927 01:40:16.261" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:16.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:16.261" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170927 01:40:16.261" starttime="20170927 01:40:16.261"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.261" starttime="20170927 01:40:15.928"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.262" starttime="20170927 01:40:14.231"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:16.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:16.265" starttime="20170927 01:40:16.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:16.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:16.266" starttime="20170927 01:40:16.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:16.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:16.267" starttime="20170927 01:40:16.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:16.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:16.268" starttime="20170927 01:40:16.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:16.492" starttime="20170927 01:40:16.268"></status>
</kw>
<msg timestamp="20170927 01:40:16.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:16.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.492" starttime="20170927 01:40:16.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.493" starttime="20170927 01:40:16.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.494" starttime="20170927 01:40:16.494"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.494" starttime="20170927 01:40:16.264"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.494" starttime="20170927 01:40:16.263"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.494" starttime="20170927 01:40:16.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:16.495" level="INFO">${base_uri} = /xyz/openbmc_project/software/94335362</msg>
<status status="PASS" endtime="20170927 01:40:16.495" starttime="20170927 01:40:16.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:16.497" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:16.498" starttime="20170927 01:40:16.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:16.498" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/94335362, method:Get, args:{}</msg>
<status status="PASS" endtime="20170927 01:40:16.499" starttime="20170927 01:40:16.498"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.499" starttime="20170927 01:40:16.498"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.499" starttime="20170927 01:40:16.496"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.499" starttime="20170927 01:40:16.495"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:16.617" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/94335362, headers=None json=None</msg>
<msg timestamp="20170927 01:40:16.617" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.617" starttime="20170927 01:40:16.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170927 01:40:16.620" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Softw...</msg>
<status status="PASS" endtime="20170927 01:40:16.620" starttime="20170927 01:40:16.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170927 01:40:16.621" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170927 01:40:16.621" starttime="20170927 01:40:16.621"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.621" starttime="20170927 01:40:16.620"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.622" starttime="20170927 01:40:16.618"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:16.622" starttime="20170927 01:40:16.617"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:16.622" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:16.622" starttime="20170927 01:40:16.622"></status>
</kw>
<msg timestamp="20170927 01:40:16.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.622" starttime="20170927 01:40:16.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:16.623" starttime="20170927 01:40:16.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170927 01:40:16.624" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "Path": "/tmp/images/94335362", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-50-g52e35a4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:16.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170927 01:40:16.624" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170927 01:40:16.624" starttime="20170927 01:40:16.623"></status>
</kw>
<msg timestamp="20170927 01:40:16.624" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Faile...</msg>
<status status="PASS" endtime="20170927 01:40:16.624" starttime="20170927 01:40:16.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170927 01:40:16.625" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<msg timestamp="20170927 01:40:16.625" level="FAIL">xyz.openbmc_project.Software.Activation.Activations.Failed != xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="FAIL" endtime="20170927 01:40:16.625" starttime="20170927 01:40:16.625"></status>
</kw>
<status status="FAIL" endtime="20170927 01:40:16.625" starttime="20170927 01:39:47.049"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170927 01:40:16.638" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170927 01:40:16.638" starttime="20170927 01:40:16.638"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170927 01:40:16.643" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170927 01:40:19.647" level="INFO">${RC} = 0</msg>
<msg timestamp="20170927 01:40:19.647" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.831 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.590 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170927 01:40:19.647" starttime="20170927 01:40:16.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.650" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.831 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.590 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.632 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.607 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.590/0.665/0.831/0.097 ms</msg>
<status status="PASS" endtime="20170927 01:40:19.650" starttime="20170927 01:40:19.649"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:19.651" starttime="20170927 01:40:19.651"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.651" starttime="20170927 01:40:16.637"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170927 01:40:19.669" level="INFO">${cur_time} = 2017-09-27 01:40:19:669285</msg>
<status status="PASS" endtime="20170927 01:40:19.670" starttime="20170927 01:40:19.669"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170927 01:40:19.670" level="INFO">${cur_time} = 20170927014019669285</msg>
<status status="PASS" endtime="20170927 01:40:19.670" starttime="20170927 01:40:19.670"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.670" starttime="20170927 01:40:19.668"></status>
</kw>
<msg timestamp="20170927 01:40:19.676" level="INFO">${FFDC_TIME} = 20170927014019669285</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170927 01:40:19.678" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170927 01:40:19.678" starttime="20170927 01:40:19.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170927 01:40:19.678" level="INFO">${suite_name} = 20170927014019669285_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170927 01:40:19.678" starttime="20170927 01:40:19.678"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170927 01:40:19.679" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170927 01:40:19.679" starttime="20170927 01:40:19.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170927 01:40:19.680" level="INFO">${test_name} = 20170927014019669285_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170927 01:40:19.680" starttime="20170927 01:40:19.679"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.680" starttime="20170927 01:40:19.677"></status>
</kw>
<msg timestamp="20170927 01:40:19.685" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170927 01:40:19.691" level="INFO">${FFDC_PREFIX} = 20170927014019669285_</msg>
<msg timestamp="20170927 01:40:19.710" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170927 01:40:19.712" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.712" starttime="20170927 01:40:19.711"></status>
</kw>
<msg timestamp="20170927 01:40:19.717" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.728" starttime="20170927 01:40:19.727"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.728" starttime="20170927 01:40:19.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.729" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.729" starttime="20170927 01:40:19.729"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.729" starttime="20170927 01:40:19.728"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.731" starttime="20170927 01:40:19.731"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.731" starttime="20170927 01:40:19.730"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.733" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.733" starttime="20170927 01:40:19.732"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.733" starttime="20170927 01:40:19.731"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.734" starttime="20170927 01:40:19.734"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.734" starttime="20170927 01:40:19.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.735" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.736" starttime="20170927 01:40:19.735"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.736" starttime="20170927 01:40:19.734"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.737" starttime="20170927 01:40:19.737"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.737" starttime="20170927 01:40:19.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.738" starttime="20170927 01:40:19.738"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.738" starttime="20170927 01:40:19.737"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.740" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.740" starttime="20170927 01:40:19.739"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.740" starttime="20170927 01:40:19.739"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.742" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.742" starttime="20170927 01:40:19.741"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.742" starttime="20170927 01:40:19.740"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.743" starttime="20170927 01:40:19.743"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.743" starttime="20170927 01:40:19.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.744" starttime="20170927 01:40:19.744"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.744" starttime="20170927 01:40:19.743"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:19.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:19.746" starttime="20170927 01:40:19.745"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:19.746" starttime="20170927 01:40:19.745"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170927 01:40:19.765" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:19.765" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170927 01:40:20.557" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170927 01:40:20.558" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170927 01:40:20.624" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170927 01:40:20.633" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170927 01:40:20.633" level="INFO">${stderr} = </msg>
<msg timestamp="20170927 01:40:20.633" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170927 01:40:20.633" starttime="20170927 01:40:19.747"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.634" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170927 01:40:20.634" starttime="20170927 01:40:20.634"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.635" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170927 01:40:20.635" starttime="20170927 01:40:20.635"></status>
</kw>
<msg timestamp="20170927 01:40:20.635" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170927 01:40:20.635" starttime="20170927 01:40:19.746"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.637" starttime="20170927 01:40:20.636"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.637" starttime="20170927 01:40:20.636"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.637" starttime="20170927 01:40:19.740"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.638" starttime="20170927 01:40:20.638"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.638" starttime="20170927 01:40:20.637"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170927 01:40:20.639" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170927 01:40:20.639" starttime="20170927 01:40:20.639"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.640" starttime="20170927 01:40:20.640"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.641" starttime="20170927 01:40:20.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.642" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.642" starttime="20170927 01:40:20.641"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.642" starttime="20170927 01:40:20.641"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.642" starttime="20170927 01:40:20.639"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.643" starttime="20170927 01:40:20.643"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.643" starttime="20170927 01:40:20.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.645" starttime="20170927 01:40:20.644"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.645" starttime="20170927 01:40:20.643"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.645" starttime="20170927 01:40:20.642"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.646" starttime="20170927 01:40:20.646"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.647" starttime="20170927 01:40:20.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.648" starttime="20170927 01:40:20.647"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.648" starttime="20170927 01:40:20.647"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.648" starttime="20170927 01:40:20.645"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.648" starttime="20170927 01:40:20.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.649" starttime="20170927 01:40:20.649"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.649" starttime="20170927 01:40:20.648"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.649" starttime="20170927 01:40:19.726"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170927 01:40:20.655" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170927 01:40:20.655" starttime="20170927 01:40:20.654"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170927 01:40:20.656" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170927 01:40:20.656" starttime="20170927 01:40:20.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:20.658" starttime="20170927 01:40:20.658"></status>
</kw>
<msg timestamp="20170927 01:40:20.658" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170927 01:40:20.658" starttime="20170927 01:40:20.657"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:20.661" starttime="20170927 01:40:20.660"></status>
</kw>
<msg timestamp="20170927 01:40:20.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:20.661" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:20.661" starttime="20170927 01:40:20.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:20.661" starttime="20170927 01:40:20.661"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170927 01:40:20.676" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170927 01:40:20.676" starttime="20170927 01:40:20.675"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170927 01:40:20.677" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170927 01:40:20.677" starttime="20170927 01:40:20.677"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.683" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170927 01:40:20.683" starttime="20170927 01:40:20.677"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.689" starttime="20170927 01:40:20.688"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.689" starttime="20170927 01:40:20.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.690" starttime="20170927 01:40:20.690"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.690" starttime="20170927 01:40:20.689"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.692" starttime="20170927 01:40:20.691"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.692" starttime="20170927 01:40:20.691"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:20.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:20.693" starttime="20170927 01:40:20.693"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.693" starttime="20170927 01:40:20.692"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.693" starttime="20170927 01:40:20.685"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:20.693" starttime="20170927 01:40:20.684"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:20.694" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:20.694" starttime="20170927 01:40:20.694"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:20.735" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:20.735" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170927 01:40:22.042" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.042" starttime="20170927 01:40:20.712"></status>
</kw>
<msg timestamp="20170927 01:40:22.042" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.042" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170927 01:40:22.042" starttime="20170927 01:40:20.694"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.043" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170927 01:40:22.043" starttime="20170927 01:40:22.043"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.044" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.044" starttime="20170927 01:40:22.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.051" starttime="20170927 01:40:22.051"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.051" starttime="20170927 01:40:22.050"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:22.044"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:20.683"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:20.683"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:20.683"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:20.676"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.052" starttime="20170927 01:40:20.676"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170927 01:40:22.053" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170927 01:40:22.053" starttime="20170927 01:40:22.053"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.054" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170927 01:40:22.054" starttime="20170927 01:40:22.053"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.058" starttime="20170927 01:40:22.057"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.058" starttime="20170927 01:40:22.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.059" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.059" starttime="20170927 01:40:22.059"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.059" starttime="20170927 01:40:22.058"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.060" starttime="20170927 01:40:22.060"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.061" starttime="20170927 01:40:22.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.062" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.062" starttime="20170927 01:40:22.061"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.062" starttime="20170927 01:40:22.061"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.062" starttime="20170927 01:40:22.056"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.062" starttime="20170927 01:40:22.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:22.063" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:22.063" starttime="20170927 01:40:22.063"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:22.104" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:22.105" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170927 01:40:22.190" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.190" starttime="20170927 01:40:22.082"></status>
</kw>
<msg timestamp="20170927 01:40:22.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.190" level="INFO">${ret_values} = (u'20170927004817', u'', 0)</msg>
<status status="PASS" endtime="20170927 01:40:22.190" starttime="20170927 01:40:22.064"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.191" level="INFO">${stdout} = 20170927004817</msg>
<status status="PASS" endtime="20170927 01:40:22.191" starttime="20170927 01:40:22.190"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.191" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.191" starttime="20170927 01:40:22.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.199" starttime="20170927 01:40:22.198"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.199" starttime="20170927 01:40:22.198"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.199" starttime="20170927 01:40:22.192"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.199" starttime="20170927 01:40:22.054"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.199" starttime="20170927 01:40:22.054"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.202" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.202" starttime="20170927 01:40:22.202"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.203" starttime="20170927 01:40:22.201"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.204" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.204" starttime="20170927 01:40:22.203"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.204" starttime="20170927 01:40:22.203"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.206" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.206" starttime="20170927 01:40:22.205"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.206" starttime="20170927 01:40:22.205"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.207" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.207" starttime="20170927 01:40:22.207"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.207" starttime="20170927 01:40:22.206"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.207" starttime="20170927 01:40:22.201"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.207" starttime="20170927 01:40:22.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:22.208" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:22.208" starttime="20170927 01:40:22.208"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:22.249" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:22.249" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170927 01:40:22.306" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.306" starttime="20170927 01:40:22.226"></status>
</kw>
<msg timestamp="20170927 01:40:22.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.306" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-50"\nVERSION_ID="v1.99.10-50-geff1ff8"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170927 01:40:22.306" starttime="20170927 01:40:22.208"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.307" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-50"
VERSION_ID="v1.99.10-50-geff1ff8"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170927 01:40:22.307" starttime="20170927 01:40:22.307"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.308" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.308" starttime="20170927 01:40:22.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.314"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.314"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.308"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.200"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.199"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.315" starttime="20170927 01:40:22.054"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.316" starttime="20170927 01:40:22.052"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.316" starttime="20170927 01:40:22.052"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170927 01:40:22.317" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170927 01:40:22.317" starttime="20170927 01:40:22.316"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.317" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170927 01:40:22.318" starttime="20170927 01:40:22.317"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.321" starttime="20170927 01:40:22.320"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.321" starttime="20170927 01:40:22.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.323" starttime="20170927 01:40:22.322"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.323" starttime="20170927 01:40:22.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.325" starttime="20170927 01:40:22.324"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.325" starttime="20170927 01:40:22.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.326" starttime="20170927 01:40:22.326"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.326" starttime="20170927 01:40:22.325"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.326" starttime="20170927 01:40:22.319"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.327" starttime="20170927 01:40:22.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:22.327" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:22.327" starttime="20170927 01:40:22.327"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:22.368" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:22.369" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170927 01:40:22.435" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.435" starttime="20170927 01:40:22.345"></status>
</kw>
<msg timestamp="20170927 01:40:22.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.436" level="INFO">${ret_values} = (u' 01:40:35 up 19 min,  load average: 0.34, 0.82, 1.07', u'', 0)</msg>
<status status="PASS" endtime="20170927 01:40:22.436" starttime="20170927 01:40:22.328"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.436" level="INFO">${stdout} =  01:40:35 up 19 min,  load average: 0.34, 0.82, 1.07</msg>
<status status="PASS" endtime="20170927 01:40:22.436" starttime="20170927 01:40:22.436"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.437" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.437" starttime="20170927 01:40:22.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.444" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.444" starttime="20170927 01:40:22.444"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.445" starttime="20170927 01:40:22.443"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.445" starttime="20170927 01:40:22.437"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.445" starttime="20170927 01:40:22.318"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.445" starttime="20170927 01:40:22.318"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.448" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.448" starttime="20170927 01:40:22.447"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.448" starttime="20170927 01:40:22.447"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.449" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.449" starttime="20170927 01:40:22.449"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.450" starttime="20170927 01:40:22.448"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.451" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.451" starttime="20170927 01:40:22.450"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.451" starttime="20170927 01:40:22.450"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.452" starttime="20170927 01:40:22.452"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.452" starttime="20170927 01:40:22.451"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.452" starttime="20170927 01:40:22.446"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.452" starttime="20170927 01:40:22.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:22.453" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:22.453" starttime="20170927 01:40:22.453"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:22.494" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:22.495" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170927 01:40:22.562" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.562" starttime="20170927 01:40:22.472"></status>
</kw>
<msg timestamp="20170927 01:40:22.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.562" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170927 01:40:22.562" starttime="20170927 01:40:22.453"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.563" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170927 01:40:22.563" starttime="20170927 01:40:22.562"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.563" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.563" starttime="20170927 01:40:22.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.574" starttime="20170927 01:40:22.573"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.574" starttime="20170927 01:40:22.572"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.574" starttime="20170927 01:40:22.564"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.574" starttime="20170927 01:40:22.445"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.574" starttime="20170927 01:40:22.445"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.578" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.578" starttime="20170927 01:40:22.577"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.578" starttime="20170927 01:40:22.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.579" starttime="20170927 01:40:22.579"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.579" starttime="20170927 01:40:22.578"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.580" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.580" starttime="20170927 01:40:22.580"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.581" starttime="20170927 01:40:22.579"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.582" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.582" starttime="20170927 01:40:22.581"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.582" starttime="20170927 01:40:22.581"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.582" starttime="20170927 01:40:22.576"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.582" starttime="20170927 01:40:22.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:22.583" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:22.583" starttime="20170927 01:40:22.582"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:22.625" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:22.626" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170927 01:40:22.672" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:22.672" starttime="20170927 01:40:22.601"></status>
</kw>
<msg timestamp="20170927 01:40:22.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.672" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170927 01:40:22.672" starttime="20170927 01:40:22.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:22.673" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170927 01:40:22.673" starttime="20170927 01:40:22.673"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:22.674" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:22.674" starttime="20170927 01:40:22.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:22.685" starttime="20170927 01:40:22.685"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.684"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.675"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.575"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.574"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.318"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.316"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:22.316"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:20.676"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:20.675"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:20.662"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:20.658"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.686" starttime="20170927 01:40:20.658"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:22.688" starttime="20170927 01:40:22.688"></status>
</kw>
<msg timestamp="20170927 01:40:22.688" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.688" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:22.689" starttime="20170927 01:40:22.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:22.689" starttime="20170927 01:40:22.689"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170927 01:40:22.704" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170927 01:40:22.704" starttime="20170927 01:40:22.704"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170927 01:40:22.706" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170927 01:40:22.706" starttime="20170927 01:40:22.705"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:22.706" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170927 01:40:22.707" starttime="20170927 01:40:22.706"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:22.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:22.710" starttime="20170927 01:40:22.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:22.711" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:22.711" starttime="20170927 01:40:22.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:22.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:22.712" starttime="20170927 01:40:22.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:22.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:22.712" starttime="20170927 01:40:22.712"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:22.905" starttime="20170927 01:40:22.713"></status>
</kw>
<msg timestamp="20170927 01:40:22.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:22.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:22.905" starttime="20170927 01:40:22.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:22.906" starttime="20170927 01:40:22.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:22.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:22.907" starttime="20170927 01:40:22.906"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.907" starttime="20170927 01:40:22.708"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.907" starttime="20170927 01:40:22.708"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:22.907" starttime="20170927 01:40:22.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:22.908" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:22.908" starttime="20170927 01:40:22.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:22.909" starttime="20170927 01:40:22.908"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:23.490" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:23.490" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.490" starttime="20170927 01:40:22.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:23.491" starttime="20170927 01:40:23.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:23.491" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:23.492" starttime="20170927 01:40:23.491"></status>
</kw>
<msg timestamp="20170927 01:40:23.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.492" starttime="20170927 01:40:22.707"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.493" starttime="20170927 01:40:23.493"></status>
</kw>
<msg timestamp="20170927 01:40:23.493" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:23.493" starttime="20170927 01:40:23.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:23.494" starttime="20170927 01:40:23.493"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:23.495" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26410
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 281
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:23.495" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:23.495" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170927 01:40:23.496" starttime="20170927 01:40:23.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:23.497" starttime="20170927 01:40:23.497"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.497" starttime="20170927 01:40:23.496"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.497" starttime="20170927 01:40:22.706"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:23.498" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_OCC_state.txt</msg>
<status status="PASS" endtime="20170927 01:40:23.498" starttime="20170927 01:40:23.498"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:23.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:23.502" starttime="20170927 01:40:23.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:23.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:23.502" starttime="20170927 01:40:23.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:23.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:23.503" starttime="20170927 01:40:23.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:23.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:23.504" starttime="20170927 01:40:23.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.688" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:23.688" starttime="20170927 01:40:23.505"></status>
</kw>
<msg timestamp="20170927 01:40:23.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:23.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.689" starttime="20170927 01:40:23.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.689" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.689" starttime="20170927 01:40:23.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.690" starttime="20170927 01:40:23.690"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.690" starttime="20170927 01:40:23.500"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.690" starttime="20170927 01:40:23.500"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.691" starttime="20170927 01:40:23.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:23.691" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:23.691" starttime="20170927 01:40:23.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:23.692" starttime="20170927 01:40:23.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:23.837" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:23.837" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.837" starttime="20170927 01:40:23.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:23.838" starttime="20170927 01:40:23.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:23.839" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:23.839" starttime="20170927 01:40:23.838"></status>
</kw>
<msg timestamp="20170927 01:40:23.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.839" starttime="20170927 01:40:23.498"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:23.840" starttime="20170927 01:40:23.840"></status>
</kw>
<msg timestamp="20170927 01:40:23.840" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:23.840" starttime="20170927 01:40:23.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:23.841" starttime="20170927 01:40:23.841"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:23.842" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:23.842" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:23.842" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170927 01:40:23.842" starttime="20170927 01:40:23.841"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:23.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_OCC_state.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:23.843" starttime="20170927 01:40:23.843"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.843" starttime="20170927 01:40:23.842"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:23.843" starttime="20170927 01:40:23.498"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:23.844" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170927 01:40:23.844" starttime="20170927 01:40:23.844"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:23.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:23.848" starttime="20170927 01:40:23.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:23.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:23.849" starttime="20170927 01:40:23.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:23.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:23.849" starttime="20170927 01:40:23.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:23.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:23.850" starttime="20170927 01:40:23.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:24.031" starttime="20170927 01:40:23.851"></status>
</kw>
<msg timestamp="20170927 01:40:24.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:24.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.031" starttime="20170927 01:40:23.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.032" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.032" starttime="20170927 01:40:24.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.033" starttime="20170927 01:40:24.032"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.033" starttime="20170927 01:40:23.846"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.033" starttime="20170927 01:40:23.846"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.033" starttime="20170927 01:40:23.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:24.034" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:24.034" starttime="20170927 01:40:24.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:24.035" starttime="20170927 01:40:24.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:24.321" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:24.321" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.321" starttime="20170927 01:40:24.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:24.322" starttime="20170927 01:40:24.322"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:24.323" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:24.323" starttime="20170927 01:40:24.322"></status>
</kw>
<msg timestamp="20170927 01:40:24.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.323" starttime="20170927 01:40:23.844"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.324" starttime="20170927 01:40:24.324"></status>
</kw>
<msg timestamp="20170927 01:40:24.324" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:24.324" starttime="20170927 01:40:24.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:24.325" starttime="20170927 01:40:24.325"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:24.326" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:24.326" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:24.326" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170927 01:40:24.326" starttime="20170927 01:40:24.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:24.328" starttime="20170927 01:40:24.327"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.328" starttime="20170927 01:40:24.326"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.328" starttime="20170927 01:40:23.844"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:24.329" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_led.txt</msg>
<status status="PASS" endtime="20170927 01:40:24.329" starttime="20170927 01:40:24.329"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:24.332" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:24.333" starttime="20170927 01:40:24.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:24.333" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:24.333" starttime="20170927 01:40:24.333"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:24.334" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:24.334" starttime="20170927 01:40:24.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:24.335" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:24.335" starttime="20170927 01:40:24.334"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:24.559" starttime="20170927 01:40:24.335"></status>
</kw>
<msg timestamp="20170927 01:40:24.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:24.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.559" starttime="20170927 01:40:24.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.560" starttime="20170927 01:40:24.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:24.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:24.561" starttime="20170927 01:40:24.560"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.561" starttime="20170927 01:40:24.331"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.561" starttime="20170927 01:40:24.331"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:24.561" starttime="20170927 01:40:24.330"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:24.561" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:24.562" starttime="20170927 01:40:24.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:24.562" starttime="20170927 01:40:24.562"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:26.240" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:26.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.240" starttime="20170927 01:40:24.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:26.241" starttime="20170927 01:40:26.241"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:26.242" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:26.242" starttime="20170927 01:40:26.241"></status>
</kw>
<msg timestamp="20170927 01:40:26.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.242" starttime="20170927 01:40:24.329"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.243" starttime="20170927 01:40:26.243"></status>
</kw>
<msg timestamp="20170927 01:40:26.243" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:26.243" starttime="20170927 01:40:26.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:26.244" starttime="20170927 01:40:26.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:26.246" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:26.246" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:26.246" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170927 01:40:26.246" starttime="20170927 01:40:26.244"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.248" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_led.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:26.248" starttime="20170927 01:40:26.247"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.248" starttime="20170927 01:40:26.247"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.248" starttime="20170927 01:40:24.328"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:26.249" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170927 01:40:26.249" starttime="20170927 01:40:26.248"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:26.252" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:26.252" starttime="20170927 01:40:26.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:26.253" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:26.253" starttime="20170927 01:40:26.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:26.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:26.254" starttime="20170927 01:40:26.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:26.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:26.254" starttime="20170927 01:40:26.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:26.470" starttime="20170927 01:40:26.255"></status>
</kw>
<msg timestamp="20170927 01:40:26.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:26.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.470" starttime="20170927 01:40:26.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.471" starttime="20170927 01:40:26.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.472" starttime="20170927 01:40:26.471"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.472" starttime="20170927 01:40:26.251"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.472" starttime="20170927 01:40:26.250"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.472" starttime="20170927 01:40:26.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:26.473" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:26.473" starttime="20170927 01:40:26.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:26.473" starttime="20170927 01:40:26.473"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:26.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:26.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.818" starttime="20170927 01:40:26.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:26.819" starttime="20170927 01:40:26.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:26.819" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:26.819" starttime="20170927 01:40:26.819"></status>
</kw>
<msg timestamp="20170927 01:40:26.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.819" starttime="20170927 01:40:26.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:26.821" starttime="20170927 01:40:26.820"></status>
</kw>
<msg timestamp="20170927 01:40:26.821" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:26.821" starttime="20170927 01:40:26.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:26.821" starttime="20170927 01:40:26.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:26.822" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/94335362": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
      "Path": "/tmp/images/94335362", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
      "Version": "v1.99.10-50-g52e35a4", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/94335362/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:26.822" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:26.823" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20170927 01:40:26.823" starttime="20170927 01:40:26.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:26.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:26.824" starttime="20170927 01:40:26.824"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.824" starttime="20170927 01:40:26.823"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:26.824" starttime="20170927 01:40:26.248"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:26.825" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_elog.txt</msg>
<status status="PASS" endtime="20170927 01:40:26.825" starttime="20170927 01:40:26.825"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:26.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:26.829" starttime="20170927 01:40:26.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:26.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:26.830" starttime="20170927 01:40:26.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:26.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:26.830" starttime="20170927 01:40:26.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:26.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:26.831" starttime="20170927 01:40:26.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:27.026" starttime="20170927 01:40:26.832"></status>
</kw>
<msg timestamp="20170927 01:40:27.026" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:27.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.026" starttime="20170927 01:40:26.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.027" starttime="20170927 01:40:27.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.028" starttime="20170927 01:40:27.027"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.028" starttime="20170927 01:40:26.827"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.028" starttime="20170927 01:40:26.827"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.028" starttime="20170927 01:40:26.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:27.029" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:27.029" starttime="20170927 01:40:27.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:27.030" starttime="20170927 01:40:27.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:27.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:27.073" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.073" starttime="20170927 01:40:27.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:27.074" starttime="20170927 01:40:27.074"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:27.074" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:27.074" starttime="20170927 01:40:27.074"></status>
</kw>
<msg timestamp="20170927 01:40:27.075" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.075" starttime="20170927 01:40:26.825"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170927 01:40:27.076" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170927 01:40:27.076" starttime="20170927 01:40:27.075"></status>
</kw>
<msg timestamp="20170927 01:40:27.076" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170927 01:40:27.076" starttime="20170927 01:40:27.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170927 01:40:27.077" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170927 01:40:27.078" starttime="20170927 01:40:27.077"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.078" starttime="20170927 01:40:27.077"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.078" starttime="20170927 01:40:26.824"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:27.079" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170927 01:40:27.079" starttime="20170927 01:40:27.078"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:27.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:27.084" starttime="20170927 01:40:27.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:27.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:27.085" starttime="20170927 01:40:27.084"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:27.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:27.085" starttime="20170927 01:40:27.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:27.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:27.086" starttime="20170927 01:40:27.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:27.273" starttime="20170927 01:40:27.087"></status>
</kw>
<msg timestamp="20170927 01:40:27.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:27.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.273" starttime="20170927 01:40:27.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.274" starttime="20170927 01:40:27.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:27.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:27.274" starttime="20170927 01:40:27.274"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.275" starttime="20170927 01:40:27.083"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.275" starttime="20170927 01:40:27.080"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:27.275" starttime="20170927 01:40:27.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:27.275" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170927 01:40:27.276" starttime="20170927 01:40:27.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:27.276" starttime="20170927 01:40:27.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:29.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:29.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:29.408" starttime="20170927 01:40:27.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.409" starttime="20170927 01:40:29.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:29.409" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:29.409" starttime="20170927 01:40:29.409"></status>
</kw>
<msg timestamp="20170927 01:40:29.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:29.410" starttime="20170927 01:40:27.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:29.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:29.411" starttime="20170927 01:40:29.410"></status>
</kw>
<msg timestamp="20170927 01:40:29.411" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170927 01:40:29.411" starttime="20170927 01:40:29.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.412" starttime="20170927 01:40:29.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170927 01:40:29.415" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/94335362"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170927 01:40:29.415" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170927 01:40:29.415" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170927 01:40:29.416" starttime="20170927 01:40:29.412"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:29.417" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:29.417" starttime="20170927 01:40:29.417"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:29.416"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:27.078"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.706"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.705"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.704"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.704"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.703"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.689"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.687"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.418" starttime="20170927 01:40:22.686"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.420" starttime="20170927 01:40:29.420"></status>
</kw>
<msg timestamp="20170927 01:40:29.420" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:29.420" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:29.420" starttime="20170927 01:40:29.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.421" starttime="20170927 01:40:29.421"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.437" starttime="20170927 01:40:29.435"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170927 01:40:29.440" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170927 01:40:29.440" starttime="20170927 01:40:29.438"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.440" starttime="20170927 01:40:29.434"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.440" starttime="20170927 01:40:29.421"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.440" starttime="20170927 01:40:29.418"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:29.441" starttime="20170927 01:40:29.418"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.443" starttime="20170927 01:40:29.443"></status>
</kw>
<msg timestamp="20170927 01:40:29.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:29.443" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:29.443" starttime="20170927 01:40:29.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.444" starttime="20170927 01:40:29.444"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170927 01:40:29.477" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:29.478" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170927 01:40:29.545" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170927 01:40:29.555" level="INFO">${core_files} = None</msg>
<msg timestamp="20170927 01:40:29.555" level="INFO">${stderr} = None</msg>
<msg timestamp="20170927 01:40:29.555" level="INFO">${rc} = None</msg>
<msg timestamp="20170927 01:40:29.555" level="FAIL">#(UTC) 2017/09/27 01:40:29.554060 -    0.076957 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170927 01:40:29.555" starttime="20170927 01:40:29.458"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170927 01:40:29.556" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170927 01:40:29.556" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170927 01:40:29.556" starttime="20170927 01:40:29.555"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:29.573" starttime="20170927 01:40:29.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:30.217" starttime="20170927 01:40:29.574"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.217" starttime="20170927 01:40:29.574"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.217" starttime="20170927 01:40:29.564"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.217" starttime="20170927 01:40:29.556"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170927 01:40:30.218" starttime="20170927 01:40:30.217"></status>
</kw>
<status status="FAIL" endtime="20170927 01:40:30.218" starttime="20170927 01:40:29.458"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.218" starttime="20170927 01:40:29.445"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.218" starttime="20170927 01:40:29.441"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.218" starttime="20170927 01:40:29.441"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:30.220" starttime="20170927 01:40:30.220"></status>
</kw>
<msg timestamp="20170927 01:40:30.220" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:30.220" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:30.220" starttime="20170927 01:40:30.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:30.221" starttime="20170927 01:40:30.221"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170927 01:40:30.235" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170927 01:40:30.235" starttime="20170927 01:40:30.235"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170927 01:40:30.237" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170927 01:40:30.237" starttime="20170927 01:40:30.236"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:30.238" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170927 01:40:30.238" starttime="20170927 01:40:30.237"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:30.240" starttime="20170927 01:40:30.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:30.241" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:30.241" starttime="20170927 01:40:30.240"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:30.282" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:30.282" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170927 01:40:30.329" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:30.330" starttime="20170927 01:40:30.259"></status>
</kw>
<msg timestamp="20170927 01:40:30.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:30.330" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170927 01:40:30.330" starttime="20170927 01:40:30.242"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:30.332" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170927 01:40:30.332" starttime="20170927 01:40:30.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:30.333" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:30.333" starttime="20170927 01:40:30.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:30.345" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:30.345" starttime="20170927 01:40:30.345"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.346" starttime="20170927 01:40:30.343"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.346" starttime="20170927 01:40:30.334"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.346" starttime="20170927 01:40:30.238"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:30.346" starttime="20170927 01:40:30.237"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:30.347" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170927 01:40:30.347" starttime="20170927 01:40:30.346"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:30.348" starttime="20170927 01:40:30.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:30.349" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:30.349" starttime="20170927 01:40:30.348"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:30.390" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:30.391" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170927 01:40:30.992" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:30.992" starttime="20170927 01:40:30.367"></status>
</kw>
<msg timestamp="20170927 01:40:30.993" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:30.994" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 27 01:24 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 27 01:24 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170927 01:40:30.994" starttime="20170927 01:40:30.349"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:30.995" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 27 01:24 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 27 01:24 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170927 01:40:30.995" starttime="20170927 01:40:30.994"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:30.996" level="INFO">${stderr} = ls: /proc/2538/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170927 01:40:30.996" starttime="20170927 01:40:30.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:31.007" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:31.008" starttime="20170927 01:40:31.007"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:31.008" starttime="20170927 01:40:31.005"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:31.008" starttime="20170927 01:40:30.996"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:31.008" starttime="20170927 01:40:30.347"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:31.008" starttime="20170927 01:40:30.346"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:31.009" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170927 01:40:31.009" starttime="20170927 01:40:31.008"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:31.010" starttime="20170927 01:40:31.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:31.011" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:31.011" starttime="20170927 01:40:31.011"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:31.052" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:31.052" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170927 01:40:33.836" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:33.837" starttime="20170927 01:40:31.029"></status>
</kw>
<msg timestamp="20170927 01:40:33.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:33.841" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-09-27 01:21:41 UTC, end at Wed 2017-09-27 01:40:43 UTC. --\nSep 27 01:21:41 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 27 01:21:41 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170927 01:40:33.841" starttime="20170927 01:40:31.011"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:33.843" level="INFO">${stdout} = -- Logs begin at Wed 2017-09-27 01:21:41 UTC, end at Wed 2017-09-27 01:40:43 UTC. --
Sep 27 01:21:41 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 27 01:21:41 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170927 01:40:33.843" starttime="20170927 01:40:33.842"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:33.844" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:33.844" starttime="20170927 01:40:33.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:33.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:33.854" starttime="20170927 01:40:33.853"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:33.854" starttime="20170927 01:40:33.850"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:33.854" starttime="20170927 01:40:33.844"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:33.854" starttime="20170927 01:40:31.009"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:33.854" starttime="20170927 01:40:31.008"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:33.855" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170927 01:40:33.855" starttime="20170927 01:40:33.855"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:33.857" starttime="20170927 01:40:33.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:33.857" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:33.858" starttime="20170927 01:40:33.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:33.898" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:33.899" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170927 01:40:43.062" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:43.065" starttime="20170927 01:40:33.875"></status>
</kw>
<msg timestamp="20170927 01:40:43.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.112" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=fc6e03c9bb5f45fda866629fe58283db;i=1;b=fc2d9820d3fa41058b6a14c49a987096;m=13c1df7;t=55a219d2e320b;x=9d156bcf0c2da9aa",\n\t"__REALTIME_TIMESTAMP" : "1506475301024267",\n\t"__MON...</msg>
<status status="PASS" endtime="20170927 01:40:43.112" starttime="20170927 01:40:33.858"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:43.123" level="INFO">${stdout} = {
	"__CURSOR" : "s=fc6e03c9bb5f45fda866629fe58283db;i=1;b=fc2d9820d3fa41058b6a14c49a987096;m=13c1df7;t=55a219d2e320b;x=9d156bcf0c2da9aa",
	"__REALTIME_TIMESTAMP" : "1506475301024267",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170927 01:40:43.123" starttime="20170927 01:40:43.113"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:43.124" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:43.124" starttime="20170927 01:40:43.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.154" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:43.154" starttime="20170927 01:40:43.147"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.154" starttime="20170927 01:40:43.134"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.154" starttime="20170927 01:40:43.125"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.154" starttime="20170927 01:40:33.855"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.154" starttime="20170927 01:40:33.854"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:43.155" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170927 01:40:43.155" starttime="20170927 01:40:43.155"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.157" starttime="20170927 01:40:43.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:43.157" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:43.158" starttime="20170927 01:40:43.157"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:43.198" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:43.199" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170927 01:40:43.257" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:43.257" starttime="20170927 01:40:43.175"></status>
</kw>
<msg timestamp="20170927 01:40:43.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.257" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          219952 kB\nMemAvailable:     322196 kB\nBuffers:           31604 kB\nCached:            81044 kB\nSwapCached:            0 kB\nActive:           16231...</msg>
<status status="PASS" endtime="20170927 01:40:43.257" starttime="20170927 01:40:43.158"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:43.258" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          219952 kB
MemAvailable:     322196 kB
Buffers:           31604 kB
Cached:            81044 kB
SwapCached:            0 kB
Active:           162312 kB
Inac...</msg>
<status status="PASS" endtime="20170927 01:40:43.258" starttime="20170927 01:40:43.258"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:43.259" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:43.259" starttime="20170927 01:40:43.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:43.268" starttime="20170927 01:40:43.267"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.268" starttime="20170927 01:40:43.266"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.268" starttime="20170927 01:40:43.259"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.268" starttime="20170927 01:40:43.155"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.268" starttime="20170927 01:40:43.154"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:43.269" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170927 01:40:43.269" starttime="20170927 01:40:43.268"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.270" starttime="20170927 01:40:43.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:43.271" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:43.271" starttime="20170927 01:40:43.270"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:43.312" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:43.312" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170927 01:40:43.652" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:43.653" starttime="20170927 01:40:43.289"></status>
</kw>
<msg timestamp="20170927 01:40:43.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.653" level="INFO">${ret_values} = (u'Mem: 212292K used, 219952K free, 8944K shrd, 31604K buff, 81044K cached\nCPU:   8% usr  33% sys   0% nic  58% idle   0% io   0% irq   0% sirq\nLoad average: 0.62 0.85 1.08 1/167 2542\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170927 01:40:43.653" starttime="20170927 01:40:43.271"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:43.654" level="INFO">${stdout} = Mem: 212292K used, 219952K free, 8944K shrd, 31604K buff, 81044K cached
CPU:   8% usr  33% sys   0% nic  58% idle   0% io   0% irq   0% sirq
Load average: 0.62 0.85 1.08 1/167 2542
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170927 01:40:43.654" starttime="20170927 01:40:43.654"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:43.655" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:43.655" starttime="20170927 01:40:43.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.666" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:43.666" starttime="20170927 01:40:43.666"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.667" starttime="20170927 01:40:43.665"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.667" starttime="20170927 01:40:43.656"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.667" starttime="20170927 01:40:43.269"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.667" starttime="20170927 01:40:43.268"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170927 01:40:43.668" level="INFO">${logpath} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170927 01:40:43.668" starttime="20170927 01:40:43.667"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.669" starttime="20170927 01:40:43.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170927 01:40:43.670" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170927 01:40:43.670" starttime="20170927 01:40:43.669"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170927 01:40:43.711" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170927 01:40:43.711" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170927 01:40:43.768" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170927 01:40:43.768" starttime="20170927 01:40:43.688"></status>
</kw>
<msg timestamp="20170927 01:40:43.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.769" level="INFO">${ret_values} = (u'[    0.240000] io scheduler noop registered\n[    0.240000] io scheduler deadline registered\n[    0.240000] io scheduler cfq registered (default)\n[    0.260000] ipmi-bt-host 1e789140.ibt: Found b...</msg>
<status status="PASS" endtime="20170927 01:40:43.769" starttime="20170927 01:40:43.670"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170927 01:40:43.770" level="INFO">${stdout} = [    0.240000] io scheduler noop registered
[    0.240000] io scheduler deadline registered
[    0.240000] io scheduler cfq registered (default)
[    0.260000] ipmi-bt-host 1e789140.ibt: Found bt bmc ...</msg>
<status status="PASS" endtime="20170927 01:40:43.770" starttime="20170927 01:40:43.769"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170927 01:40:43.770" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170927 01:40:43.770" starttime="20170927 01:40:43.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.778" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/20170927014019669285_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:43.778"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:43.777"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:43.771"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:43.668"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:43.667"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.237"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.236"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.235"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.235"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.234"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.221"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.218"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.779" starttime="20170927 01:40:30.218"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.781" starttime="20170927 01:40:43.781"></status>
</kw>
<msg timestamp="20170927 01:40:43.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.782" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:43.782" starttime="20170927 01:40:43.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.782" starttime="20170927 01:40:43.782"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:43.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:43.799" starttime="20170927 01:40:43.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:43.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:43.800" starttime="20170927 01:40:43.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:43.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:43.801" starttime="20170927 01:40:43.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:43.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:43.802" starttime="20170927 01:40:43.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:43.985" starttime="20170927 01:40:43.802"></status>
</kw>
<msg timestamp="20170927 01:40:43.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:43.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:43.985" starttime="20170927 01:40:43.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.986" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:43.986" starttime="20170927 01:40:43.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:43.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:43.987" starttime="20170927 01:40:43.986"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.987" starttime="20170927 01:40:43.798"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.987" starttime="20170927 01:40:43.798"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:43.987" starttime="20170927 01:40:43.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:43.988" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170927 01:40:43.988" starttime="20170927 01:40:43.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:43.988" starttime="20170927 01:40:43.988"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:44.033" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170927 01:40:44.033" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.034" starttime="20170927 01:40:43.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.034" starttime="20170927 01:40:44.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:44.035" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:44.035" starttime="20170927 01:40:44.035"></status>
</kw>
<msg timestamp="20170927 01:40:44.035" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.035" starttime="20170927 01:40:43.796"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170927 01:40:44.037" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170927 01:40:44.037" starttime="20170927 01:40:44.036"></status>
</kw>
<msg timestamp="20170927 01:40:44.037" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170927 01:40:44.037" starttime="20170927 01:40:44.035"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170927 01:40:44.038" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170927 01:40:44.038" starttime="20170927 01:40:44.037"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.038" starttime="20170927 01:40:43.796"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.038" starttime="20170927 01:40:43.783"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.038" starttime="20170927 01:40:43.780"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.038" starttime="20170927 01:40:43.780"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.040" starttime="20170927 01:40:44.040"></status>
</kw>
<msg timestamp="20170927 01:40:44.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:44.040" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170927 01:40:44.040" starttime="20170927 01:40:44.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.041" starttime="20170927 01:40:44.041"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170927 01:40:44.056" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:44.055"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:44.055"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:44.041"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:44.038"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:44.038"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.056" starttime="20170927 01:40:20.658"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.057" starttime="20170927 01:40:20.655"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.057" starttime="20170927 01:40:20.655"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.057" starttime="20170927 01:40:20.655"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170927 01:40:44.284" starttime="20170927 01:40:44.062"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.284" starttime="20170927 01:40:44.057"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.284" starttime="20170927 01:40:20.654"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.285" starttime="20170927 01:40:16.627"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.285" starttime="20170927 01:40:16.627"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170927 01:40:44.286" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170927 01:40:44.286" starttime="20170927 01:40:44.286"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170927 01:40:44.287" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170927014019669285_BmcCodeUpdate/20170927014019669285_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170927 01:40:44.287" starttime="20170927 01:40:44.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.288" starttime="20170927 01:40:44.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.288" starttime="20170927 01:40:44.288"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.289" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170927 01:40:44.289" starttime="20170927 01:40:44.289"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.290" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170927 01:40:44.290" starttime="20170927 01:40:44.290"></status>
</kw>
<msg timestamp="20170927 01:40:44.290" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170927 01:40:44.290" starttime="20170927 01:40:44.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.292" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:44.292" starttime="20170927 01:40:44.291"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.292" starttime="20170927 01:40:44.291"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.292" starttime="20170927 01:40:44.292"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170927 01:40:44.294" level="INFO">${cur_time} = 2017-09-27 01:40:44:293459</msg>
<status status="PASS" endtime="20170927 01:40:44.294" starttime="20170927 01:40:44.293"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170927 01:40:44.294" level="INFO">${cur_time} = 20170927014044293459</msg>
<status status="PASS" endtime="20170927 01:40:44.294" starttime="20170927 01:40:44.294"></status>
</kw>
<msg timestamp="20170927 01:40:44.294" level="INFO">${cur_time} = 20170927014044293459</msg>
<status status="PASS" endtime="20170927 01:40:44.295" starttime="20170927 01:40:44.293"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170927 01:40:44.298" starttime="20170927 01:40:44.295"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.298" starttime="20170927 01:40:44.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:44.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:44.304" starttime="20170927 01:40:44.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:44.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:44.304" starttime="20170927 01:40:44.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:44.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:44.305" starttime="20170927 01:40:44.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:44.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:44.306" starttime="20170927 01:40:44.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.676" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:44.676" starttime="20170927 01:40:44.306"></status>
</kw>
<msg timestamp="20170927 01:40:44.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:44.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.676" starttime="20170927 01:40:44.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.677" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.677" starttime="20170927 01:40:44.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.678" starttime="20170927 01:40:44.678"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.678" starttime="20170927 01:40:44.302"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.678" starttime="20170927 01:40:44.301"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.679" starttime="20170927 01:40:44.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:44.679" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170927 01:40:44.679" starttime="20170927 01:40:44.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.680" starttime="20170927 01:40:44.679"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:44.739" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170927 01:40:44.739" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.739" starttime="20170927 01:40:44.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.740" starttime="20170927 01:40:44.739"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:44.740" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:44.740" starttime="20170927 01:40:44.740"></status>
</kw>
<msg timestamp="20170927 01:40:44.741" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.741" starttime="20170927 01:40:44.300"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.741" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170927 01:40:44.741" starttime="20170927 01:40:44.741"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.742" starttime="20170927 01:40:44.300"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170927 01:40:44.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170927 01:40:44.745" starttime="20170927 01:40:44.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170927 01:40:44.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170927 01:40:44.746" starttime="20170927 01:40:44.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170927 01:40:44.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170927 01:40:44.747" starttime="20170927 01:40:44.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170927 01:40:44.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170927 01:40:44.747" starttime="20170927 01:40:44.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170927 01:40:44.944" starttime="20170927 01:40:44.748"></status>
</kw>
<msg timestamp="20170927 01:40:44.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170927 01:40:44.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.944" starttime="20170927 01:40:44.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.945" starttime="20170927 01:40:44.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.946" starttime="20170927 01:40:44.945"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.946" starttime="20170927 01:40:44.744"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.946" starttime="20170927 01:40:44.743"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.946" starttime="20170927 01:40:44.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170927 01:40:44.947" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170927 01:40:44.947" starttime="20170927 01:40:44.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.948" starttime="20170927 01:40:44.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170927 01:40:44.992" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170927 01:40:44.992" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.992" starttime="20170927 01:40:44.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.993" starttime="20170927 01:40:44.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170927 01:40:44.993" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170927 01:40:44.993" starttime="20170927 01:40:44.993"></status>
</kw>
<msg timestamp="20170927 01:40:44.993" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170927 01:40:44.994" starttime="20170927 01:40:44.742"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170927 01:40:44.994" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170927 01:40:44.994" starttime="20170927 01:40:44.994"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.994" starttime="20170927 01:40:44.742"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.995" starttime="20170927 01:40:44.299"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.995" starttime="20170927 01:40:44.299"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.995" starttime="20170927 01:40:16.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170927 01:40:44.995" starttime="20170927 01:40:44.995"></status>
</kw>
<status status="PASS" endtime="20170927 01:40:44.995" starttime="20170927 01:40:16.626"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170927 01:40:44.996" critical="yes" starttime="20170927 01:39:46.781">xyz.openbmc_project.Software.Activation.Activations.Failed != xyz.openbmc_project.Software.Activation.Activations.Active</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170927 01:40:44.997" starttime="20170927 01:39:45.866"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
