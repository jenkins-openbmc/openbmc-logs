<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20171013 17:52:38.888">
<suite id="s1" source="/tmp/fspcibld/3931/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw name="Clear System Entry From Knownhosts" library="connection_client">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:39.975">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status status="PASS" endtime="20171013 17:52:39.975" starttime="20171013 17:52:39.974"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:39.982">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:39.997">${rc} = 2</msg>
<msg level="INFO" timestamp="20171013 17:52:39.997">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status status="PASS" endtime="20171013 17:52:39.997" starttime="20171013 17:52:39.975"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.001" starttime="20171013 17:52:39.974"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.002" starttime="20171013 17:52:39.974"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:40.016">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171013 17:52:40.017" starttime="20171013 17:52:40.016"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:40.017">${has_host} = False</msg>
<status status="PASS" endtime="20171013 17:52:40.017" starttime="20171013 17:52:40.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:40.018" starttime="20171013 17:52:40.018"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.018" starttime="20171013 17:52:40.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:40.020">${port_num} = 22</msg>
<status status="PASS" endtime="20171013 17:52:40.020" starttime="20171013 17:52:40.020"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:40.021">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20171013 17:52:40.021" starttime="20171013 17:52:40.020"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:40.021">${https_num} = 443</msg>
<status status="PASS" endtime="20171013 17:52:40.021" starttime="20171013 17:52:40.021"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:40.022">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20171013 17:52:40.022" starttime="20171013 17:52:40.022"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.022" starttime="20171013 17:52:40.019"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.022" starttime="20171013 17:52:40.018"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:40.024">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171013 17:52:40.024" starttime="20171013 17:52:40.023"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:40.024">${has_port} = False</msg>
<status status="PASS" endtime="20171013 17:52:40.024" starttime="20171013 17:52:40.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:40.026" starttime="20171013 17:52:40.025"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:40.027" starttime="20171013 17:52:40.026"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.027" starttime="20171013 17:52:40.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:40.027" starttime="20171013 17:52:40.024"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:40.028">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171013 17:52:42.284">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171013 17:52:42.285" starttime="20171013 17:52:40.027"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.285" starttime="20171013 17:52:40.008"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.286">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20171013 17:52:42.434">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171013 17:52:42.434">${output} = VERSION_ID="v1.99.10-153-g1f4b94c"</msg>
<msg level="INFO" timestamp="20171013 17:52:42.434">${stderr} = </msg>
<status status="PASS" endtime="20171013 17:52:42.434" starttime="20171013 17:52:42.286"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.435">Length is 0</msg>
<status status="PASS" endtime="20171013 17:52:42.435" starttime="20171013 17:52:42.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.436">VERSION_ID="v1.99.10-153-g1f4b94c"</msg>
<status status="PASS" endtime="20171013 17:52:42.436" starttime="20171013 17:52:42.435"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.436" starttime="20171013 17:52:42.286"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.436" starttime="20171013 17:52:42.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.438">${software} = []</msg>
<status status="PASS" endtime="20171013 17:52:42.438" starttime="20171013 17:52:42.438"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.439">${host_list} = []</msg>
<status status="PASS" endtime="20171013 17:52:42.439" starttime="20171013 17:52:42.439"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.445">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:42.446" starttime="20171013 17:52:42.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:42.447" starttime="20171013 17:52:42.446"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.448">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:42.448" starttime="20171013 17:52:42.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:42.449" starttime="20171013 17:52:42.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.871">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:42.871" starttime="20171013 17:52:42.450"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:42.871">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:42.871">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:42.871" starttime="20171013 17:52:42.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.872">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:42.872" starttime="20171013 17:52:42.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:42.873" starttime="20171013 17:52:42.872"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.873" starttime="20171013 17:52:42.443"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.873" starttime="20171013 17:52:42.443"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.873" starttime="20171013 17:52:42.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.874">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" endtime="20171013 17:52:42.874" starttime="20171013 17:52:42.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:42.876">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:42.876" starttime="20171013 17:52:42.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:42.877">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:42.877" starttime="20171013 17:52:42.876"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.877" starttime="20171013 17:52:42.876"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.877" starttime="20171013 17:52:42.874"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:42.877" starttime="20171013 17:52:42.874"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.022">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:43.023">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.023" starttime="20171013 17:52:42.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.024">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/050d0894", 
    "/xyz/openbmc_project/software/ea65c77f", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_pr...</msg>
<status status="PASS" endtime="20171013 17:52:43.024" starttime="20171013 17:52:43.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.025">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/050d0894", 
    "/xyz/openbmc_project/software/ea65c77f", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:43.025" starttime="20171013 17:52:43.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.026" starttime="20171013 17:52:43.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.026" starttime="20171013 17:52:43.023"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.026" starttime="20171013 17:52:43.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:43.026">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:43.026" starttime="20171013 17:52:43.026"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.026">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.027" starttime="20171013 17:52:42.441"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.027" starttime="20171013 17:52:43.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.028">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/050d0894", 
    "/xyz/openbmc_project/software/ea65c77f", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:43.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:43.028">${content} = {u'data': [u'/xyz/openbmc_project/software/050d0894', u'/xyz/openbmc_project/software/ea65c77f', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_proj...</msg>
<status status="PASS" endtime="20171013 17:52:43.028" starttime="20171013 17:52:43.028"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.028">${sw_list} = [u'/xyz/openbmc_project/software/050d0894', u'/xyz/openbmc_project/software/ea65c77f', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/softwa...</msg>
<status status="PASS" endtime="20171013 17:52:43.028" starttime="20171013 17:52:42.440"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/050d0894">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.032">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:43.032" starttime="20171013 17:52:43.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:43.033" starttime="20171013 17:52:43.033"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.034">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:43.034" starttime="20171013 17:52:43.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:43.034" starttime="20171013 17:52:43.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:43.389" starttime="20171013 17:52:43.035"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:43.389">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.389" starttime="20171013 17:52:43.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.390" starttime="20171013 17:52:43.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.391" starttime="20171013 17:52:43.391"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.391" starttime="20171013 17:52:43.031"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.391" starttime="20171013 17:52:43.031"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.391" starttime="20171013 17:52:43.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.392">${base_uri} = /xyz/openbmc_project/software/050d0894/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:43.392" starttime="20171013 17:52:43.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:43.393" starttime="20171013 17:52:43.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.593">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/050d0894/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:43.593">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.593" starttime="20171013 17:52:43.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:43.594" starttime="20171013 17:52:43.593"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:43.594">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:43.594" starttime="20171013 17:52:43.594"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.594">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.595" starttime="20171013 17:52:43.029"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:43.595" starttime="20171013 17:52:43.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.596">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:43.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:43.596">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:43.596" starttime="20171013 17:52:43.595"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.596">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" endtime="20171013 17:52:43.596" starttime="20171013 17:52:43.029"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.597">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 17:52:43.597" starttime="20171013 17:52:43.597"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.597" starttime="20171013 17:52:43.029"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/ea65c77f">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.601">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:43.601" starttime="20171013 17:52:43.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.602">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:43.602" starttime="20171013 17:52:43.601"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.602">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:43.602" starttime="20171013 17:52:43.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.603">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:43.603" starttime="20171013 17:52:43.603"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.785">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:43.785" starttime="20171013 17:52:43.604"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:43.785">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:43.785">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.785" starttime="20171013 17:52:43.603"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.786">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.786" starttime="20171013 17:52:43.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:43.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:43.787" starttime="20171013 17:52:43.786"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.787" starttime="20171013 17:52:43.600"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.787" starttime="20171013 17:52:43.599"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:43.787" starttime="20171013 17:52:43.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:43.788">${base_uri} = /xyz/openbmc_project/software/ea65c77f/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:43.788" starttime="20171013 17:52:43.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:43.788" starttime="20171013 17:52:43.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.043">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/ea65c77f/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:44.043">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.043" starttime="20171013 17:52:43.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:44.044" starttime="20171013 17:52:44.043"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:44.044">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:44.044" starttime="20171013 17:52:44.044"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:44.044">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.044" starttime="20171013 17:52:43.598"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:44.045" starttime="20171013 17:52:44.045"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.046">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:44.046">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:44.046">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:44.046" starttime="20171013 17:52:44.045"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:44.046">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" endtime="20171013 17:52:44.046" starttime="20171013 17:52:43.597"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.047">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 17:52:44.047" starttime="20171013 17:52:44.046"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:44.047" starttime="20171013 17:52:43.597"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.051">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:44.051" starttime="20171013 17:52:44.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:44.052" starttime="20171013 17:52:44.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.053">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:44.053" starttime="20171013 17:52:44.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.053">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:44.053" starttime="20171013 17:52:44.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:44.413" starttime="20171013 17:52:44.054"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:44.413">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:44.414">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.414" starttime="20171013 17:52:44.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.414">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.414" starttime="20171013 17:52:44.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.415" starttime="20171013 17:52:44.415"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:44.415" starttime="20171013 17:52:44.050"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:44.415" starttime="20171013 17:52:44.049"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:44.415" starttime="20171013 17:52:44.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.416">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:44.416" starttime="20171013 17:52:44.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:44.417" starttime="20171013 17:52:44.416"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.644">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:44.644">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.644" starttime="20171013 17:52:44.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:44.645" starttime="20171013 17:52:44.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:44.646">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:44.646" starttime="20171013 17:52:44.645"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:44.646">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:44.646" starttime="20171013 17:52:44.048"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.647">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171013 17:52:44.647" starttime="20171013 17:52:44.646"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:44.647">${attr_purpose} = None</msg>
<status status="PASS" endtime="20171013 17:52:44.647" starttime="20171013 17:52:44.047"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.647">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 17:52:44.648" starttime="20171013 17:52:44.647"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:44.648" starttime="20171013 17:52:44.047"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:44.651">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:44.651" starttime="20171013 17:52:44.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:44.652" starttime="20171013 17:52:44.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:44.653" starttime="20171013 17:52:44.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:44.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:44.654" starttime="20171013 17:52:44.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:45.061" starttime="20171013 17:52:44.655"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:45.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.061" starttime="20171013 17:52:44.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.062" starttime="20171013 17:52:45.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.063" starttime="20171013 17:52:45.062"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.063" starttime="20171013 17:52:44.650"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.063" starttime="20171013 17:52:44.649"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.063" starttime="20171013 17:52:44.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.064">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:45.064" starttime="20171013 17:52:45.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.064" starttime="20171013 17:52:45.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.177">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:45.177">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.177" starttime="20171013 17:52:45.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.178" starttime="20171013 17:52:45.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:45.178">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:45.178" starttime="20171013 17:52:45.178"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.179">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.179" starttime="20171013 17:52:44.648"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.179" starttime="20171013 17:52:45.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.180">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:45.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:45.180">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:45.180" starttime="20171013 17:52:45.180"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.180">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20171013 17:52:45.180" starttime="20171013 17:52:44.648"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.181" starttime="20171013 17:52:45.181"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.182" starttime="20171013 17:52:45.181"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.182" starttime="20171013 17:52:44.648"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.185">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:45.185" starttime="20171013 17:52:45.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:45.186" starttime="20171013 17:52:45.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.187">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:45.187" starttime="20171013 17:52:45.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.187">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:45.187" starttime="20171013 17:52:45.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:45.452" starttime="20171013 17:52:45.188"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:45.452">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.452" starttime="20171013 17:52:45.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.453" starttime="20171013 17:52:45.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.454" starttime="20171013 17:52:45.453"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.454" starttime="20171013 17:52:45.184"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.454" starttime="20171013 17:52:45.184"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.454" starttime="20171013 17:52:45.183"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.455">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:45.455" starttime="20171013 17:52:45.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.456" starttime="20171013 17:52:45.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.746">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:45.746">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.746" starttime="20171013 17:52:45.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.747" starttime="20171013 17:52:45.746"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:45.747">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:45.747" starttime="20171013 17:52:45.747"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.747">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:45.748" starttime="20171013 17:52:45.182"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.748" starttime="20171013 17:52:45.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.749">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:45.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:45.749">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:45.749" starttime="20171013 17:52:45.748"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:45.749">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20171013 17:52:45.749" starttime="20171013 17:52:45.182"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.750" starttime="20171013 17:52:45.750"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:45.751" starttime="20171013 17:52:45.750"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:45.751" starttime="20171013 17:52:45.182"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:45.757">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:45.758" starttime="20171013 17:52:45.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.760">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:45.760" starttime="20171013 17:52:45.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.761">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:45.761" starttime="20171013 17:52:45.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:45.762">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:45.762" starttime="20171013 17:52:45.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:46.119" starttime="20171013 17:52:45.764"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.119">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:46.119">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.119" starttime="20171013 17:52:45.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.120">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.120" starttime="20171013 17:52:46.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.121" starttime="20171013 17:52:46.120"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.121" starttime="20171013 17:52:45.753"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.121" starttime="20171013 17:52:45.753"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.121" starttime="20171013 17:52:45.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.122">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status status="PASS" endtime="20171013 17:52:46.122" starttime="20171013 17:52:46.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:46.122" starttime="20171013 17:52:46.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.237">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:46.237">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.237" starttime="20171013 17:52:46.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:46.237" starttime="20171013 17:52:46.237"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:46.238">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:46.238" starttime="20171013 17:52:46.238"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.238">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.238" starttime="20171013 17:52:45.751"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.239">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171013 17:52:46.239" starttime="20171013 17:52:46.238"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.239">${attr_purpose} = None</msg>
<status status="PASS" endtime="20171013 17:52:46.239" starttime="20171013 17:52:45.751"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.240">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 17:52:46.240" starttime="20171013 17:52:46.239"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.240" starttime="20171013 17:52:45.751"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.240" starttime="20171013 17:52:43.029"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.240">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" endtime="20171013 17:52:46.240" starttime="20171013 17:52:42.439"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.243">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:46.243" starttime="20171013 17:52:46.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:46.244" starttime="20171013 17:52:46.244"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.245">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:46.245" starttime="20171013 17:52:46.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.245">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:46.245" starttime="20171013 17:52:46.245"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.581">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:46.581" starttime="20171013 17:52:46.246"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.582">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:46.582">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.582" starttime="20171013 17:52:46.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.582">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.583" starttime="20171013 17:52:46.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.583" starttime="20171013 17:52:46.583"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.583" starttime="20171013 17:52:46.242"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.583" starttime="20171013 17:52:46.242"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.584" starttime="20171013 17:52:46.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.584">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status status="PASS" endtime="20171013 17:52:46.584" starttime="20171013 17:52:46.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:46.585" starttime="20171013 17:52:46.585"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.860">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:46.860">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.860" starttime="20171013 17:52:46.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:46.861" starttime="20171013 17:52:46.860"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:46.861">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:46.861" starttime="20171013 17:52:46.861"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:46.862">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:46.862" starttime="20171013 17:52:46.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.862">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:46.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:46.862">${json} = {u'data': {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Acti...</msg>
<status status="PASS" endtime="20171013 17:52:46.862" starttime="20171013 17:52:46.862"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:46.863" starttime="20171013 17:52:46.863"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:46.863" starttime="20171013 17:52:46.240"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:46.866">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:46.867" starttime="20171013 17:52:46.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:46.867" starttime="20171013 17:52:46.867"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.868">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:46.868" starttime="20171013 17:52:46.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:46.869">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:46.869" starttime="20171013 17:52:46.868"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:47.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:47.211" starttime="20171013 17:52:46.869"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:47.211">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:47.211">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:47.211" starttime="20171013 17:52:46.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:47.212">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:47.212" starttime="20171013 17:52:47.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:47.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:47.213" starttime="20171013 17:52:47.212"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.213" starttime="20171013 17:52:46.866"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.213" starttime="20171013 17:52:46.865"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.213" starttime="20171013 17:52:46.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:47.214">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20171013 17:52:47.214" starttime="20171013 17:52:47.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:47.214" starttime="20171013 17:52:47.214"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:47.466">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:47.466">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:47.466" starttime="20171013 17:52:47.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:47.467" starttime="20171013 17:52:47.467"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:47.467">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:47.467" starttime="20171013 17:52:47.467"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:47.468">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:47.468" starttime="20171013 17:52:46.864"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:47.468">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:47.468">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:47.469">${json} = {u'data': {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Acti...</msg>
<status status="PASS" endtime="20171013 17:52:47.469" starttime="20171013 17:52:47.468"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:47.469" starttime="20171013 17:52:47.469"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.469" starttime="20171013 17:52:46.863"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.469" starttime="20171013 17:52:46.240"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:47.470">${software} = [{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Activation': ...</msg>
<status status="PASS" endtime="20171013 17:52:47.470" starttime="20171013 17:52:42.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:47.470">[{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2'}, {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a'}]</msg>
<status status="PASS" endtime="20171013 17:52:47.470" starttime="20171013 17:52:47.470"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.470" starttime="20171013 17:52:42.437"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:47.470" starttime="20171013 17:52:42.437"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:47.489">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 17:52:47.489">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171013 17:52:48.848">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171013 17:52:48.848">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:48.916">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171013 17:52:48.923">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171013 17:52:48.923">${stderr} = </msg>
<msg level="INFO" timestamp="20171013 17:52:48.923">${rc} = 0</msg>
<status status="PASS" endtime="20171013 17:52:48.924" starttime="20171013 17:52:47.472"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:48.924">Length is 0</msg>
<status status="PASS" endtime="20171013 17:52:48.924" starttime="20171013 17:52:48.924"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:48.925">Length is 11</msg>
<status status="PASS" endtime="20171013 17:52:48.925" starttime="20171013 17:52:48.924"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:48.925">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20171013 17:52:48.925" starttime="20171013 17:52:47.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:48.926">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20171013 17:52:48.926" starttime="20171013 17:52:48.925"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.926" starttime="20171013 17:52:47.471"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.926" starttime="20171013 17:52:47.471"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:48.929">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171013 17:52:48.929" starttime="20171013 17:52:48.928"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:48.929">${has_host} = False</msg>
<status status="PASS" endtime="20171013 17:52:48.929" starttime="20171013 17:52:48.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:48.930" starttime="20171013 17:52:48.930"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.930" starttime="20171013 17:52:48.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:48.932">${port_num} = 22</msg>
<status status="PASS" endtime="20171013 17:52:48.932" starttime="20171013 17:52:48.931"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:48.932">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20171013 17:52:48.932" starttime="20171013 17:52:48.932"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:48.933">${https_num} = 443</msg>
<status status="PASS" endtime="20171013 17:52:48.933" starttime="20171013 17:52:48.933"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:48.934">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20171013 17:52:48.934" starttime="20171013 17:52:48.933"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.934" starttime="20171013 17:52:48.931"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.934" starttime="20171013 17:52:48.931"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:48.935">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171013 17:52:48.935" starttime="20171013 17:52:48.935"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:48.935">${has_port} = False</msg>
<status status="PASS" endtime="20171013 17:52:48.935" starttime="20171013 17:52:48.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:48.937" starttime="20171013 17:52:48.937"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:48.938" starttime="20171013 17:52:48.937"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.938" starttime="20171013 17:52:48.936"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:48.938" starttime="20171013 17:52:48.936"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:48.938">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.084">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171013 17:52:51.084" starttime="20171013 17:52:48.938"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.085" starttime="20171013 17:52:48.927"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.086">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.203">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.203">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20171013 17:52:51.203">${stderr} = </msg>
<status status="PASS" endtime="20171013 17:52:51.203" starttime="20171013 17:52:51.085"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.204">Length is 0</msg>
<status status="PASS" endtime="20171013 17:52:51.204" starttime="20171013 17:52:51.203"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.204">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20171013 17:52:51.204" starttime="20171013 17:52:51.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.204" starttime="20171013 17:52:51.204"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.205" starttime="20171013 17:52:48.927"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.205" starttime="20171013 17:52:48.926"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.205" starttime="20171013 17:52:39.973"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/3931/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/3931/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.248">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:51.249" starttime="20171013 17:52:51.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:51.250" starttime="20171013 17:52:51.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.250">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:51.250" starttime="20171013 17:52:51.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:51.251" starttime="20171013 17:52:51.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:51.597" starttime="20171013 17:52:51.252"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:51.597">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:51.597" starttime="20171013 17:52:51.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:51.598" starttime="20171013 17:52:51.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:51.599" starttime="20171013 17:52:51.598"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.599" starttime="20171013 17:52:51.247"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.599" starttime="20171013 17:52:51.247"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.599" starttime="20171013 17:52:51.246"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.601" starttime="20171013 17:52:51.600"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.618">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20171013 17:52:51.618" starttime="20171013 17:52:51.601"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.631">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20171013 17:52:51.631" starttime="20171013 17:52:51.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.633">${cur_time} = 2017-10-13 17:52:51:633065</msg>
<status status="PASS" endtime="20171013 17:52:51.633" starttime="20171013 17:52:51.633"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.634">${cur_time} = 20171013175251633065</msg>
<status status="PASS" endtime="20171013 17:52:51.634" starttime="20171013 17:52:51.634"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.634" starttime="20171013 17:52:51.632"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.639">${FFDC_TIME} = 20171013175251633065</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.640">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20171013 17:52:51.640" starttime="20171013 17:52:51.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.641">${suite_name} = 20171013175251633065_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20171013 17:52:51.641" starttime="20171013 17:52:51.640"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.641">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20171013 17:52:51.642" starttime="20171013 17:52:51.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.642">${test_name} = 20171013175251633065_TestSSLConnection</msg>
<status status="PASS" endtime="20171013 17:52:51.642" starttime="20171013 17:52:51.642"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.642" starttime="20171013 17:52:51.639"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.643">${FFDC_DIR_PATH} = /tmp/fspcibld/3931/obmc-robot/logs/20171013175251633065_TestsSecurityTestSsl/20171013175251633065_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20171013 17:52:51.647">${FFDC_PREFIX} = 20171013175251633065_</msg>
<status status="PASS" endtime="20171013 17:52:51.648" starttime="20171013 17:52:51.632"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.648" starttime="20171013 17:52:51.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.648" starttime="20171013 17:52:51.648"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.649" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs"&gt;/tmp/fspcibld/3931/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 17:52:51.649" starttime="20171013 17:52:51.649"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:51.650">File '/tmp/fspcibld/3931/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171013 17:52:51.650" starttime="20171013 17:52:51.650"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.650">${exist} = False</msg>
<status status="PASS" endtime="20171013 17:52:51.650" starttime="20171013 17:52:51.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.652" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 17:52:51.652" starttime="20171013 17:52:51.651"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.652" starttime="20171013 17:52:51.651"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.653" starttime="20171013 17:52:51.652"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.654">${cur_time} = 2017-10-13 17:52:51:653389</msg>
<status status="PASS" endtime="20171013 17:52:51.654" starttime="20171013 17:52:51.653"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.654">${cur_time} = 20171013175251653389</msg>
<status status="PASS" endtime="20171013 17:52:51.654" starttime="20171013 17:52:51.654"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.654">${cur_time} = 20171013175251653389</msg>
<status status="PASS" endtime="20171013 17:52:51.654" starttime="20171013 17:52:51.653"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.655" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 17:52:51.655" starttime="20171013 17:52:51.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.655" starttime="20171013 17:52:51.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.656" starttime="20171013 17:52:51.656"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.656" starttime="20171013 17:52:51.599"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20171013 17:52:51.656" starttime="20171013 17:52:51.246"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:51.657">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:51.657" starttime="20171013 17:52:51.657"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20171013 17:52:51.657" starttime="20171013 17:52:51.208"></status>
</suite>
<status status="PASS" endtime="20171013 17:52:51.658" starttime="20171013 17:52:51.205"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/3931/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.723">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.723" starttime="20171013 17:52:51.723"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.724">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.724" starttime="20171013 17:52:51.724"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.724">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.724" starttime="20171013 17:52:51.722"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.726">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.726" starttime="20171013 17:52:51.726"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.727">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.727" starttime="20171013 17:52:51.726"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.727">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 17:52:51.727" starttime="20171013 17:52:51.725"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.729">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20171013 17:52:51.729" starttime="20171013 17:52:51.729"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.730" starttime="20171013 17:52:51.729"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.733">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.737">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:51.737">${output} = /tmp/fspcibld/3931/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:51.737" starttime="20171013 17:52:51.730"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.740" starttime="20171013 17:52:51.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.742" starttime="20171013 17:52:51.741"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.742">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:51.742" starttime="20171013 17:52:51.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.743">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:51.743" starttime="20171013 17:52:51.742"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.743">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:51.743" starttime="20171013 17:52:51.728"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.744">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:51.744" starttime="20171013 17:52:51.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.745">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171013 17:52:51.745" starttime="20171013 17:52:51.744"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.745" starttime="20171013 17:52:51.745"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.748">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.762">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:51.762">${os_con_pid} = </msg>
<status status="PASS" endtime="20171013 17:52:51.763" starttime="20171013 17:52:51.746"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.783" starttime="20171013 17:52:51.775"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.786">${os_con_pid} = </msg>
<status status="PASS" endtime="20171013 17:52:51.786" starttime="20171013 17:52:51.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.788">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20171013 17:52:51.788" starttime="20171013 17:52:51.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.793" starttime="20171013 17:52:51.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.794">${rc} = None</msg>
<msg level="INFO" timestamp="20171013 17:52:51.794">${output} = None</msg>
<status status="PASS" endtime="20171013 17:52:51.794" starttime="20171013 17:52:51.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.796" starttime="20171013 17:52:51.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:52:51.802">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" endtime="20171013 17:52:51.802" starttime="20171013 17:52:51.800"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.802" starttime="20171013 17:52:51.799"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:51.802" starttime="20171013 17:52:51.797"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.803">${output} = </msg>
<status status="PASS" endtime="20171013 17:52:51.803" starttime="20171013 17:52:51.802"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.803">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20171013 17:52:51.803" starttime="20171013 17:52:51.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.866" starttime="20171013 17:52:51.805"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.867">${rc} = 1</msg>
<msg level="INFO" timestamp="20171013 17:52:51.867">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" endtime="20171013 17:52:51.867" starttime="20171013 17:52:51.804"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.868">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" endtime="20171013 17:52:51.868" starttime="20171013 17:52:51.724"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:51.870" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 17:52:51.870" starttime="20171013 17:52:51.869"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.871">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20171013 17:52:51.871" starttime="20171013 17:52:51.871"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.872" starttime="20171013 17:52:51.871"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.875">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.879">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:51.879">${output} = /tmp/fspcibld/3931/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:51.879" starttime="20171013 17:52:51.872"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.885" starttime="20171013 17:52:51.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.892" starttime="20171013 17:52:51.892"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.893">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:51.893" starttime="20171013 17:52:51.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.903">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:51.903" starttime="20171013 17:52:51.893"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:51.904">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:51.904" starttime="20171013 17:52:51.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.904">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20171013 17:52:51.904" starttime="20171013 17:52:51.904"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.905" starttime="20171013 17:52:51.905"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:51.913">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171013 17:52:51.932">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:51.933">${output} = </msg>
<status status="PASS" endtime="20171013 17:52:51.934" starttime="20171013 17:52:51.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:51.950" starttime="20171013 17:52:51.947"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:52.953">Slept 1 second</msg>
<status status="PASS" endtime="20171013 17:52:52.954" starttime="20171013 17:52:51.951"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:52.961">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20171013 17:52:52.961" starttime="20171013 17:52:52.960"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:52.963" starttime="20171013 17:52:52.962"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:52.975">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:52.996">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:52.996">${output} = /tmp/fspcibld/3931/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:52.997" starttime="20171013 17:52:52.963"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:53.009" starttime="20171013 17:52:53.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:53.015" starttime="20171013 17:52:53.014"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:53.015">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20171013 17:52:53.015" starttime="20171013 17:52:53.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.020">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:53.020" starttime="20171013 17:52:53.016"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:53.021">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:53.021" starttime="20171013 17:52:52.959"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.022">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 17:52:53.023" starttime="20171013 17:52:53.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.024">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171013 17:52:53.024" starttime="20171013 17:52:53.023"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:53.025" starttime="20171013 17:52:53.025"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.036">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 17:52:53.052">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 17:52:53.052">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171013 17:52:53.052" starttime="20171013 17:52:53.025"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:53.056" starttime="20171013 17:52:53.054"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:53.056">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171013 17:52:53.056" starttime="20171013 17:52:52.955"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.060">Length is 3</msg>
<status status="PASS" endtime="20171013 17:52:53.060" starttime="20171013 17:52:53.058"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.060" starttime="20171013 17:52:51.722"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.064">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.069">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20171013 17:52:53.069" starttime="20171013 17:52:53.067"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.076">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171013 17:52:53.076" starttime="20171013 17:52:53.071"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.084">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:53.087" starttime="20171013 17:52:53.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:53.089" starttime="20171013 17:52:53.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.090">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:53.090" starttime="20171013 17:52:53.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.091">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:53.091" starttime="20171013 17:52:53.090"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:53.438" starttime="20171013 17:52:53.093"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:53.438">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:53.438">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:53.438" starttime="20171013 17:52:53.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:53.439" starttime="20171013 17:52:53.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:53.440" starttime="20171013 17:52:53.439"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.440" starttime="20171013 17:52:53.081"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.440" starttime="20171013 17:52:53.079"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.440" starttime="20171013 17:52:53.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.441">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171013 17:52:53.441" starttime="20171013 17:52:53.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:53.441" starttime="20171013 17:52:53.441"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:53.442" starttime="20171013 17:52:53.441"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:53.443">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20171013 17:52:53.443" starttime="20171013 17:52:53.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:53.445">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171013 17:52:53.445" starttime="20171013 17:52:53.444"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.445" starttime="20171013 17:52:53.444"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:53.445" starttime="20171013 17:52:53.442"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.228">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 17:52:54.229">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.229" starttime="20171013 17:52:53.445"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.230">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:54.230" starttime="20171013 17:52:54.229"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.231">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:54.231" starttime="20171013 17:52:54.231"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.231" starttime="20171013 17:52:54.230"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.231" starttime="20171013 17:52:54.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:54.232">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:54.232" starttime="20171013 17:52:54.232"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:54.232">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.232" starttime="20171013 17:52:53.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.233" starttime="20171013 17:52:54.232"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.233">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:54.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:54.233">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:54.233" starttime="20171013 17:52:54.233"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.234" starttime="20171013 17:52:53.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:54.234" starttime="20171013 17:52:54.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:54.241" starttime="20171013 17:52:54.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:54.242" starttime="20171013 17:52:54.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.243">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:54.243" starttime="20171013 17:52:54.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.243">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:54.243" starttime="20171013 17:52:54.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:54.996" starttime="20171013 17:52:54.244"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:54.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:54.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.996" starttime="20171013 17:52:54.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.997" starttime="20171013 17:52:54.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:54.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:54.998" starttime="20171013 17:52:54.997"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.998" starttime="20171013 17:52:54.239"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.998" starttime="20171013 17:52:54.239"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:54.998" starttime="20171013 17:52:54.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:54.998">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:52:54.998" starttime="20171013 17:52:54.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.001">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:55.001" starttime="20171013 17:52:55.000"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:55.002">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:55.002" starttime="20171013 17:52:55.001"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.002" starttime="20171013 17:52:55.001"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.002" starttime="20171013 17:52:54.999"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.002" starttime="20171013 17:52:54.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.685">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:55.685">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:55.685" starttime="20171013 17:52:55.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.687">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:55.687" starttime="20171013 17:52:55.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:55.688">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:55.688" starttime="20171013 17:52:55.688"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.688" starttime="20171013 17:52:55.687"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.688" starttime="20171013 17:52:55.686"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.688" starttime="20171013 17:52:55.685"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:55.689">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:55.689" starttime="20171013 17:52:55.689"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:55.689">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:55.689" starttime="20171013 17:52:54.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:55.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:55.690" starttime="20171013 17:52:55.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.690">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:55.690">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:55.690">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:55.691" starttime="20171013 17:52:55.690"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:55.691">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 17:52:55.691" starttime="20171013 17:52:54.237"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:55.691">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 17:52:55.691" starttime="20171013 17:52:54.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:55.692" starttime="20171013 17:52:55.691"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:55.692" starttime="20171013 17:52:54.236"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:55.697">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:55.697" starttime="20171013 17:52:55.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:55.698" starttime="20171013 17:52:55.698"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.699">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:55.699" starttime="20171013 17:52:55.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:55.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:55.699" starttime="20171013 17:52:55.699"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:56.063" starttime="20171013 17:52:55.700"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:56.064">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.064" starttime="20171013 17:52:55.700"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.064" starttime="20171013 17:52:56.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.065" starttime="20171013 17:52:56.065"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.065" starttime="20171013 17:52:55.696"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.065" starttime="20171013 17:52:55.696"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.066" starttime="20171013 17:52:55.695"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.066">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:52:56.066" starttime="20171013 17:52:56.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.068">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:56.068" starttime="20171013 17:52:56.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.069">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:52:56.070" starttime="20171013 17:52:56.069"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.070" starttime="20171013 17:52:56.068"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.070" starttime="20171013 17:52:56.067"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.070" starttime="20171013 17:52:56.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.327">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:52:56.327">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.327" starttime="20171013 17:52:56.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.329">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:56.329" starttime="20171013 17:52:56.328"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.330">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:52:56.330" starttime="20171013 17:52:56.329"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.330" starttime="20171013 17:52:56.329"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.330" starttime="20171013 17:52:56.328"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.330" starttime="20171013 17:52:56.327"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:52:56.330">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:52:56.331" starttime="20171013 17:52:56.330"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.331">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.331" starttime="20171013 17:52:55.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.331" starttime="20171013 17:52:56.331"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.332">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:52:56.332">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:52:56.332">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:52:56.332" starttime="20171013 17:52:56.332"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.332">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171013 17:52:56.332" starttime="20171013 17:52:55.693"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.333">${host_state} = Off</msg>
<status status="PASS" endtime="20171013 17:52:56.333" starttime="20171013 17:52:55.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:56.333" starttime="20171013 17:52:56.333"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.333" starttime="20171013 17:52:54.236"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.334" starttime="20171013 17:52:54.235"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.334" starttime="20171013 17:52:54.235"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.334">${status} = True</msg>
<status status="PASS" endtime="20171013 17:52:56.334" starttime="20171013 17:52:54.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:56.334" starttime="20171013 17:52:56.334"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.335" starttime="20171013 17:52:53.065"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.336">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20171013 17:52:56.336" starttime="20171013 17:52:56.335"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.337">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171013 17:52:56.337" starttime="20171013 17:52:56.337"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.340">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:52:56.340" starttime="20171013 17:52:56.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:56.341" starttime="20171013 17:52:56.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.342">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:52:56.342" starttime="20171013 17:52:56.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:52:56.342" starttime="20171013 17:52:56.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:52:56.690" starttime="20171013 17:52:56.343"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:52:56.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:52:56.690">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.690" starttime="20171013 17:52:56.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.691">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.691" starttime="20171013 17:52:56.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:52:56.692" starttime="20171013 17:52:56.691"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.692" starttime="20171013 17:52:56.339"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.692" starttime="20171013 17:52:56.339"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.692" starttime="20171013 17:52:56.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171013 17:52:56.693" starttime="20171013 17:52:56.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:52:56.693" starttime="20171013 17:52:56.693"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:52:56.694" starttime="20171013 17:52:56.694"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:52:56.695">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20171013 17:52:56.696" starttime="20171013 17:52:56.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:52:56.696">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171013 17:52:56.697" starttime="20171013 17:52:56.696"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.697" starttime="20171013 17:52:56.696"></status>
</kw>
<status status="PASS" endtime="20171013 17:52:56.697" starttime="20171013 17:52:56.694"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.711">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 17:53:01.711">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:01.711" starttime="20171013 17:52:56.697"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.712">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:01.712" starttime="20171013 17:53:01.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:01.713">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:01.713" starttime="20171013 17:53:01.713"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:01.713" starttime="20171013 17:53:01.713"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:01.714" starttime="20171013 17:53:01.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:01.714">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:01.714" starttime="20171013 17:53:01.714"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:01.714">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:01.714" starttime="20171013 17:52:56.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:01.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:01.715" starttime="20171013 17:53:01.715"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.716">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:01.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:01.716">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:01.716" starttime="20171013 17:53:01.715"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:01.716" starttime="20171013 17:52:56.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 17:53:01.717" starttime="20171013 17:53:01.716"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:01.722">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:01.722" starttime="20171013 17:53:01.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:01.723" starttime="20171013 17:53:01.722"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.723">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:01.723" starttime="20171013 17:53:01.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:01.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:01.724" starttime="20171013 17:53:01.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:02.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:02.965" starttime="20171013 17:53:01.725"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:02.966">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:02.966">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:02.966" starttime="20171013 17:53:01.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:02.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:02.966" starttime="20171013 17:53:02.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:02.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:02.967" starttime="20171013 17:53:02.967"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.967" starttime="20171013 17:53:01.721"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.967" starttime="20171013 17:53:01.720"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.967" starttime="20171013 17:53:01.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:02.968">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:53:02.968" starttime="20171013 17:53:02.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:02.971">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:02.971" starttime="20171013 17:53:02.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:02.971">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:02.972" starttime="20171013 17:53:02.971"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.972" starttime="20171013 17:53:02.971"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.972" starttime="20171013 17:53:02.969"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:02.972" starttime="20171013 17:53:02.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171013 17:53:12.986">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171013 17:53:25.403">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:25.403">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:25.403" starttime="20171013 17:53:02.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:25.406">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:25.406" starttime="20171013 17:53:25.405"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:25.407">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:25.407" starttime="20171013 17:53:25.406"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:25.407" starttime="20171013 17:53:25.406"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:25.407" starttime="20171013 17:53:25.404"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:25.407" starttime="20171013 17:53:25.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:25.407">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:25.407" starttime="20171013 17:53:25.407"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:25.408">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:25.408" starttime="20171013 17:53:01.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:25.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:25.408" starttime="20171013 17:53:25.408"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:25.409">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:25.409">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:25.409">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:25.409" starttime="20171013 17:53:25.409"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:25.409">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 17:53:25.410" starttime="20171013 17:53:01.718"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:25.410">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 17:53:25.410" starttime="20171013 17:53:01.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:53:25.410">On != Off</msg>
<status status="FAIL" endtime="20171013 17:53:25.411" starttime="20171013 17:53:25.410"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:25.411" starttime="20171013 17:53:01.718"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:25.411" starttime="20171013 17:53:01.717"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:35.417">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:35.418" starttime="20171013 17:53:35.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:35.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:35.419" starttime="20171013 17:53:35.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:35.419">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:35.419" starttime="20171013 17:53:35.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:35.420">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:35.420" starttime="20171013 17:53:35.420"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:36.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:36.041" starttime="20171013 17:53:35.421"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:36.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:36.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:36.041" starttime="20171013 17:53:35.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:36.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:36.042" starttime="20171013 17:53:36.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:36.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:36.042" starttime="20171013 17:53:36.042"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.042" starttime="20171013 17:53:35.416"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.043" starttime="20171013 17:53:35.416"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.043" starttime="20171013 17:53:35.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:36.043">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:53:36.043" starttime="20171013 17:53:36.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:36.046">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:36.046" starttime="20171013 17:53:36.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:36.047">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:36.047" starttime="20171013 17:53:36.046"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.047" starttime="20171013 17:53:36.046"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.047" starttime="20171013 17:53:36.044"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:36.047" starttime="20171013 17:53:36.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.022">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:37.022">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.022" starttime="20171013 17:53:36.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.024">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:37.024" starttime="20171013 17:53:37.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.025">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:37.025" starttime="20171013 17:53:37.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.025" starttime="20171013 17:53:37.024"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.025" starttime="20171013 17:53:37.023"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.026" starttime="20171013 17:53:37.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:37.026">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:37.026" starttime="20171013 17:53:37.026"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:37.026">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.026" starttime="20171013 17:53:35.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.027" starttime="20171013 17:53:37.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.028">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:37.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:37.028">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:37.028" starttime="20171013 17:53:37.027"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:37.028">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:53:37.028" starttime="20171013 17:53:35.414"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:37.028">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:53:37.028" starttime="20171013 17:53:35.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:53:37.029" starttime="20171013 17:53:37.029"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.029" starttime="20171013 17:53:35.413"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.033">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:37.033" starttime="20171013 17:53:37.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:37.034" starttime="20171013 17:53:37.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.035">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:37.035" starttime="20171013 17:53:37.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:37.035" starttime="20171013 17:53:37.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:37.679" starttime="20171013 17:53:37.036"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:37.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:37.680">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.680" starttime="20171013 17:53:37.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.680" starttime="20171013 17:53:37.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:37.681" starttime="20171013 17:53:37.681"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.681" starttime="20171013 17:53:37.032"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.681" starttime="20171013 17:53:37.031"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.682" starttime="20171013 17:53:37.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.682">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:53:37.682" starttime="20171013 17:53:37.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:37.684">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:37.684" starttime="20171013 17:53:37.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:37.685">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:37.685" starttime="20171013 17:53:37.685"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.685" starttime="20171013 17:53:37.684"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.685" starttime="20171013 17:53:37.683"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:37.686" starttime="20171013 17:53:37.682"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.661">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:38.662">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:38.662" starttime="20171013 17:53:37.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.664">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:38.664" starttime="20171013 17:53:38.663"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:38.665">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:38.665" starttime="20171013 17:53:38.665"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:38.665" starttime="20171013 17:53:38.664"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:38.665" starttime="20171013 17:53:38.662"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:38.665" starttime="20171013 17:53:38.662"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:38.666">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:38.666" starttime="20171013 17:53:38.666"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:38.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:38.666" starttime="20171013 17:53:37.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:38.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:38.667" starttime="20171013 17:53:38.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.667">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:38.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:38.667">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:38.667" starttime="20171013 17:53:38.667"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:38.668">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:53:38.668" starttime="20171013 17:53:37.030"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:38.668">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:53:38.668" starttime="20171013 17:53:37.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:53:38.669" starttime="20171013 17:53:38.668"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:38.673">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:38.674" starttime="20171013 17:53:38.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:38.674" starttime="20171013 17:53:38.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.675">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:38.675" starttime="20171013 17:53:38.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:38.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:38.676" starttime="20171013 17:53:38.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:39.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:39.409" starttime="20171013 17:53:38.677"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:39.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:39.409">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:39.409" starttime="20171013 17:53:38.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:39.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:39.410" starttime="20171013 17:53:39.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:39.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:39.410" starttime="20171013 17:53:39.410"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.410" starttime="20171013 17:53:38.672"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.411" starttime="20171013 17:53:38.672"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.411" starttime="20171013 17:53:38.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:39.411">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:53:39.411" starttime="20171013 17:53:39.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:39.413">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:39.413" starttime="20171013 17:53:39.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:39.414">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:39.414" starttime="20171013 17:53:39.414"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.415" starttime="20171013 17:53:39.414"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.415" starttime="20171013 17:53:39.412"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:39.415" starttime="20171013 17:53:39.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:40.478">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:40.478">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:40.478" starttime="20171013 17:53:39.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:40.480">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:40.480" starttime="20171013 17:53:40.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:40.481">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:40.481" starttime="20171013 17:53:40.481"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:40.481" starttime="20171013 17:53:40.480"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:40.482" starttime="20171013 17:53:40.479"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:40.482" starttime="20171013 17:53:40.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:40.482">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:40.482" starttime="20171013 17:53:40.482"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:40.482">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:40.482" starttime="20171013 17:53:38.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:40.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:40.483" starttime="20171013 17:53:40.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:40.484">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:40.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:40.484">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:40.484" starttime="20171013 17:53:40.483"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:40.484">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171013 17:53:40.484" starttime="20171013 17:53:38.670"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:40.484">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171013 17:53:40.484" starttime="20171013 17:53:38.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:40.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:53:40.485">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20171013 17:53:40.485" starttime="20171013 17:53:40.485"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:40.485" starttime="20171013 17:53:38.669"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:40.486" starttime="20171013 17:53:35.412"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:50.491">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:50.491" starttime="20171013 17:53:50.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:50.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:50.492" starttime="20171013 17:53:50.491"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:50.492">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:50.492" starttime="20171013 17:53:50.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:50.493">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:50.493" starttime="20171013 17:53:50.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:51.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:51.471" starttime="20171013 17:53:50.494"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:51.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:51.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:51.471" starttime="20171013 17:53:50.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:51.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:51.472" starttime="20171013 17:53:51.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:51.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:51.473" starttime="20171013 17:53:51.473"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.474" starttime="20171013 17:53:50.490"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.474" starttime="20171013 17:53:50.489"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.474" starttime="20171013 17:53:50.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:51.475">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:53:51.475" starttime="20171013 17:53:51.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:51.478">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:51.478" starttime="20171013 17:53:51.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:51.479">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:51.479" starttime="20171013 17:53:51.479"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.479" starttime="20171013 17:53:51.478"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.480" starttime="20171013 17:53:51.476"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:51.480" starttime="20171013 17:53:51.475"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.379">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:52.379">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.379" starttime="20171013 17:53:51.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.382">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:52.382" starttime="20171013 17:53:52.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.383">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:52.384" starttime="20171013 17:53:52.383"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.384" starttime="20171013 17:53:52.382"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.384" starttime="20171013 17:53:52.380"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.384" starttime="20171013 17:53:52.380"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:52.385">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:52.385" starttime="20171013 17:53:52.384"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:52.385">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.385" starttime="20171013 17:53:50.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.386" starttime="20171013 17:53:52.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:52.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:52.386">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:52.387" starttime="20171013 17:53:52.386"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:52.387">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:53:52.387" starttime="20171013 17:53:50.488"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:52.387">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:53:52.387" starttime="20171013 17:53:50.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:53:52.388" starttime="20171013 17:53:52.387"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.388" starttime="20171013 17:53:50.487"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.392">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:52.393" starttime="20171013 17:53:52.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:52.393" starttime="20171013 17:53:52.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.394">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:52.394" starttime="20171013 17:53:52.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:52.395" starttime="20171013 17:53:52.394"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:52.844" starttime="20171013 17:53:52.395"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:52.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:52.845">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.845" starttime="20171013 17:53:52.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.845" starttime="20171013 17:53:52.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:52.846" starttime="20171013 17:53:52.846"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.846" starttime="20171013 17:53:52.391"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.846" starttime="20171013 17:53:52.390"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.846" starttime="20171013 17:53:52.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.847">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:53:52.847" starttime="20171013 17:53:52.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:52.849">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:52.849" starttime="20171013 17:53:52.848"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:52.850">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:52.850" starttime="20171013 17:53:52.850"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.850" starttime="20171013 17:53:52.849"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.850" starttime="20171013 17:53:52.848"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:52.850" starttime="20171013 17:53:52.847"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.164">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:53.164">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.164" starttime="20171013 17:53:52.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.166">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:53.166" starttime="20171013 17:53:53.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.167">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:53.167" starttime="20171013 17:53:53.167"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.167" starttime="20171013 17:53:53.166"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.167" starttime="20171013 17:53:53.165"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.167" starttime="20171013 17:53:53.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:53.168">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:53.168" starttime="20171013 17:53:53.168"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.168">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.168" starttime="20171013 17:53:52.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.169" starttime="20171013 17:53:53.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.169">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:53.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:53.169">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:53.169" starttime="20171013 17:53:53.169"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.170">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:53:53.170" starttime="20171013 17:53:52.388"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.170">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:53:53.170" starttime="20171013 17:53:52.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:53:53.171" starttime="20171013 17:53:53.170"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.176">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:53:53.177" starttime="20171013 17:53:53.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:53:53.178" starttime="20171013 17:53:53.177"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.179">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:53:53.179" starttime="20171013 17:53:53.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:53:53.180" starttime="20171013 17:53:53.179"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.630">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:53:53.630" starttime="20171013 17:53:53.181"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.630">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:53:53.630">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.630" starttime="20171013 17:53:53.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.631">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.631" starttime="20171013 17:53:53.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.631" starttime="20171013 17:53:53.631"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.632" starttime="20171013 17:53:53.175"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.632" starttime="20171013 17:53:53.174"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.632" starttime="20171013 17:53:53.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.632">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:53:53.632" starttime="20171013 17:53:53.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.634">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:53.634" starttime="20171013 17:53:53.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.635">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:53:53.636" starttime="20171013 17:53:53.635"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.636" starttime="20171013 17:53:53.635"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.636" starttime="20171013 17:53:53.633"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.636" starttime="20171013 17:53:53.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.969">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:53:53.969">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.969" starttime="20171013 17:53:53.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.971">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:53.971" starttime="20171013 17:53:53.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.972">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:53:53.972" starttime="20171013 17:53:53.972"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.972" starttime="20171013 17:53:53.971"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.973" starttime="20171013 17:53:53.970"></status>
</kw>
<status status="PASS" endtime="20171013 17:53:53.973" starttime="20171013 17:53:53.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:53:53.973">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:53:53.973" starttime="20171013 17:53:53.973"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.973">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.973" starttime="20171013 17:53:53.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:53:53.974" starttime="20171013 17:53:53.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:53:53.975">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:53:53.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:53:53.975">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:53:53.975" starttime="20171013 17:53:53.974"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.975">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:53:53.975" starttime="20171013 17:53:53.172"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:53:53.975">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:53:53.975" starttime="20171013 17:53:53.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:53:53.976">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:53:53.976">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:53:53.976" starttime="20171013 17:53:53.976"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:53.976" starttime="20171013 17:53:53.171"></status>
</kw>
<status status="FAIL" endtime="20171013 17:53:53.977" starttime="20171013 17:53:50.486"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:03.983">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:03.983" starttime="20171013 17:54:03.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:03.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:03.984" starttime="20171013 17:54:03.983"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:03.985">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:03.985" starttime="20171013 17:54:03.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:03.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:03.986" starttime="20171013 17:54:03.985"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:04.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:04.476" starttime="20171013 17:54:03.987"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:04.476">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:04.477">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:04.477" starttime="20171013 17:54:03.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:04.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:04.477" starttime="20171013 17:54:04.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:04.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:04.478" starttime="20171013 17:54:04.478"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.478" starttime="20171013 17:54:03.981"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.478" starttime="20171013 17:54:03.981"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.478" starttime="20171013 17:54:03.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:04.479">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:54:04.479" starttime="20171013 17:54:04.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:04.481">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:04.481" starttime="20171013 17:54:04.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:04.482">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:04.482" starttime="20171013 17:54:04.482"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.482" starttime="20171013 17:54:04.481"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.482" starttime="20171013 17:54:04.480"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:04.482" starttime="20171013 17:54:04.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.198">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:05.198">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.198" starttime="20171013 17:54:04.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.200">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:05.201" starttime="20171013 17:54:05.200"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.202">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:05.202" starttime="20171013 17:54:05.201"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.202" starttime="20171013 17:54:05.201"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.202" starttime="20171013 17:54:05.199"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.202" starttime="20171013 17:54:05.199"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:05.203">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:05.203" starttime="20171013 17:54:05.203"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.203">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.203" starttime="20171013 17:54:03.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.204" starttime="20171013 17:54:05.203"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.204">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:05.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:05.205">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:05.205" starttime="20171013 17:54:05.204"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.205">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:54:05.205" starttime="20171013 17:54:03.978"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.205">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:54:05.205" starttime="20171013 17:54:03.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:05.206" starttime="20171013 17:54:05.206"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.206" starttime="20171013 17:54:03.978"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:05.210" starttime="20171013 17:54:05.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:05.211" starttime="20171013 17:54:05.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.212">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:05.212" starttime="20171013 17:54:05.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:05.212" starttime="20171013 17:54:05.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:05.611" starttime="20171013 17:54:05.213"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.611">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:05.611">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.611" starttime="20171013 17:54:05.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.612" starttime="20171013 17:54:05.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.613" starttime="20171013 17:54:05.612"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.613" starttime="20171013 17:54:05.209"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.613" starttime="20171013 17:54:05.208"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.613" starttime="20171013 17:54:05.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.614">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:54:05.614" starttime="20171013 17:54:05.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.616">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:05.616" starttime="20171013 17:54:05.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.617">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:05.617" starttime="20171013 17:54:05.616"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.617" starttime="20171013 17:54:05.616"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.617" starttime="20171013 17:54:05.614"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.617" starttime="20171013 17:54:05.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.736">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:05.736">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.736" starttime="20171013 17:54:05.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.738">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:05.738" starttime="20171013 17:54:05.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.739">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:05.739" starttime="20171013 17:54:05.739"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.739" starttime="20171013 17:54:05.738"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.740" starttime="20171013 17:54:05.737"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.740" starttime="20171013 17:54:05.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:05.740">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:05.740" starttime="20171013 17:54:05.740"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.740">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.740" starttime="20171013 17:54:05.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.741" starttime="20171013 17:54:05.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.742">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:05.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:05.742">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:05.742" starttime="20171013 17:54:05.741"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.742">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:54:05.742" starttime="20171013 17:54:05.206"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.742">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:54:05.742" starttime="20171013 17:54:05.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:05.743" starttime="20171013 17:54:05.743"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.747">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:05.748" starttime="20171013 17:54:05.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:05.748" starttime="20171013 17:54:05.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.749">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:05.749" starttime="20171013 17:54:05.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.750">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:05.750" starttime="20171013 17:54:05.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:05.957" starttime="20171013 17:54:05.750"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:05.957">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:05.957">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.957" starttime="20171013 17:54:05.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.958">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.958" starttime="20171013 17:54:05.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:05.959" starttime="20171013 17:54:05.958"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.959" starttime="20171013 17:54:05.746"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.959" starttime="20171013 17:54:05.746"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.959" starttime="20171013 17:54:05.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.960">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:54:05.960" starttime="20171013 17:54:05.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:05.962">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:05.962" starttime="20171013 17:54:05.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:05.963">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:05.963" starttime="20171013 17:54:05.963"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.963" starttime="20171013 17:54:05.962"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.963" starttime="20171013 17:54:05.960"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:05.963" starttime="20171013 17:54:05.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:06.088">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:06.088">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:06.088" starttime="20171013 17:54:05.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:06.090">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:06.090" starttime="20171013 17:54:06.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:06.091">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:06.091" starttime="20171013 17:54:06.091"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:06.091" starttime="20171013 17:54:06.090"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:06.092" starttime="20171013 17:54:06.089"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:06.092" starttime="20171013 17:54:06.089"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:06.092">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:06.092" starttime="20171013 17:54:06.092"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:06.092">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:06.092" starttime="20171013 17:54:05.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:06.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:06.093" starttime="20171013 17:54:06.093"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:06.094">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:06.094">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:06.094">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:06.094" starttime="20171013 17:54:06.093"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:06.094">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:06.094" starttime="20171013 17:54:05.744"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:06.094">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:06.094" starttime="20171013 17:54:05.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:06.095">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:54:06.095">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:54:06.095" starttime="20171013 17:54:06.095"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:06.095" starttime="20171013 17:54:05.743"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:06.096" starttime="20171013 17:54:03.977"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.101">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:16.101" starttime="20171013 17:54:16.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:16.102" starttime="20171013 17:54:16.101"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.103">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:16.103" starttime="20171013 17:54:16.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:16.103" starttime="20171013 17:54:16.103"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.908">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:16.908" starttime="20171013 17:54:16.110"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:16.908">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:16.909">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.909" starttime="20171013 17:54:16.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.909">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.909" starttime="20171013 17:54:16.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.910" starttime="20171013 17:54:16.910"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.910" starttime="20171013 17:54:16.100"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.910" starttime="20171013 17:54:16.099"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.910" starttime="20171013 17:54:16.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.911">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:54:16.911" starttime="20171013 17:54:16.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.914">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:16.914" starttime="20171013 17:54:16.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.915">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:16.915" starttime="20171013 17:54:16.915"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.915" starttime="20171013 17:54:16.914"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.915" starttime="20171013 17:54:16.912"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.915" starttime="20171013 17:54:16.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.978">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:16.978">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.978" starttime="20171013 17:54:16.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.979">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:16.980" starttime="20171013 17:54:16.979"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.980">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:16.981" starttime="20171013 17:54:16.980"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.981" starttime="20171013 17:54:16.980"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.981" starttime="20171013 17:54:16.978"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.981" starttime="20171013 17:54:16.978"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:16.981">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:16.981" starttime="20171013 17:54:16.981"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:16.981">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.982" starttime="20171013 17:54:16.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:16.982" starttime="20171013 17:54:16.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.983">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:16.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:16.983">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:16.983" starttime="20171013 17:54:16.982"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:16.983">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:54:16.983" starttime="20171013 17:54:16.097"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:16.984">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:54:16.984" starttime="20171013 17:54:16.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:16.984" starttime="20171013 17:54:16.984"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:16.984" starttime="20171013 17:54:16.097"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:16.988">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:16.989" starttime="20171013 17:54:16.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:16.989" starttime="20171013 17:54:16.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.990">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:16.990" starttime="20171013 17:54:16.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:16.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:16.990" starttime="20171013 17:54:16.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.400">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:17.400" starttime="20171013 17:54:16.993"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:17.400">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:17.400">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.400" starttime="20171013 17:54:16.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.401">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.401" starttime="20171013 17:54:17.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.402" starttime="20171013 17:54:17.401"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.402" starttime="20171013 17:54:16.987"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.402" starttime="20171013 17:54:16.987"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.402" starttime="20171013 17:54:16.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.402">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:54:17.403" starttime="20171013 17:54:17.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.405">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:17.405" starttime="20171013 17:54:17.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.406">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:17.406" starttime="20171013 17:54:17.405"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.406" starttime="20171013 17:54:17.405"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.406" starttime="20171013 17:54:17.403"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.406" starttime="20171013 17:54:17.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.651">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:17.651">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.651" starttime="20171013 17:54:17.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.653">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:17.653" starttime="20171013 17:54:17.652"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.656">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:17.656" starttime="20171013 17:54:17.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.656" starttime="20171013 17:54:17.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.656" starttime="20171013 17:54:17.652"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:17.656" starttime="20171013 17:54:17.651"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:17.656">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:17.656" starttime="20171013 17:54:17.656"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:17.657">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.657" starttime="20171013 17:54:16.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:17.657" starttime="20171013 17:54:17.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:17.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:17.658">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:17.658" starttime="20171013 17:54:17.658"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:17.658">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:54:17.658" starttime="20171013 17:54:16.985"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:17.659">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:54:17.659" starttime="20171013 17:54:16.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:17.659" starttime="20171013 17:54:17.659"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:17.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:17.664" starttime="20171013 17:54:17.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:17.664" starttime="20171013 17:54:17.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.665">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:17.665" starttime="20171013 17:54:17.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:17.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:17.666" starttime="20171013 17:54:17.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:18.073" starttime="20171013 17:54:17.666"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:18.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:18.073">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.073" starttime="20171013 17:54:17.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.073" starttime="20171013 17:54:18.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.074" starttime="20171013 17:54:18.074"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.075" starttime="20171013 17:54:17.662"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.075" starttime="20171013 17:54:17.662"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.075" starttime="20171013 17:54:17.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:18.075">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:54:18.075" starttime="20171013 17:54:18.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:18.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:18.077" starttime="20171013 17:54:18.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:18.078" starttime="20171013 17:54:18.078"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.079" starttime="20171013 17:54:18.078"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.079" starttime="20171013 17:54:18.076"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.079" starttime="20171013 17:54:18.076"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:18.370">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:18.370">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.370" starttime="20171013 17:54:18.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:18.372">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:18.372" starttime="20171013 17:54:18.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.373">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:18.373" starttime="20171013 17:54:18.373"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.373" starttime="20171013 17:54:18.372"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.373" starttime="20171013 17:54:18.371"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:18.373" starttime="20171013 17:54:18.370"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:18.374">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:18.374" starttime="20171013 17:54:18.374"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:18.374">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.374" starttime="20171013 17:54:17.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:18.375" starttime="20171013 17:54:18.374"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:18.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:18.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:18.375">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:18.375" starttime="20171013 17:54:18.375"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:18.376">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:18.376" starttime="20171013 17:54:17.660"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:18.376">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:18.376" starttime="20171013 17:54:17.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:18.377">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:54:18.377">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:54:18.377" starttime="20171013 17:54:18.376"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:18.377" starttime="20171013 17:54:17.659"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:18.377" starttime="20171013 17:54:16.096"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.383">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:28.383" starttime="20171013 17:54:28.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:28.384" starttime="20171013 17:54:28.383"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.384">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:28.384" starttime="20171013 17:54:28.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.385">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:28.385" starttime="20171013 17:54:28.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.568">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:28.568" starttime="20171013 17:54:28.386"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.568">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:28.568">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.569" starttime="20171013 17:54:28.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.569">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.569" starttime="20171013 17:54:28.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.570" starttime="20171013 17:54:28.570"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.570" starttime="20171013 17:54:28.381"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.570" starttime="20171013 17:54:28.381"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.570" starttime="20171013 17:54:28.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.571">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:54:28.571" starttime="20171013 17:54:28.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.573">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:28.573" starttime="20171013 17:54:28.572"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.574">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:28.574" starttime="20171013 17:54:28.574"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.574" starttime="20171013 17:54:28.573"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.574" starttime="20171013 17:54:28.572"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.574" starttime="20171013 17:54:28.571"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.638">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:28.638">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.638" starttime="20171013 17:54:28.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.640">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:28.640" starttime="20171013 17:54:28.639"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.641">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:28.641" starttime="20171013 17:54:28.641"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.641" starttime="20171013 17:54:28.640"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.642" starttime="20171013 17:54:28.639"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.642" starttime="20171013 17:54:28.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:28.642">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:28.642" starttime="20171013 17:54:28.642"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.642">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.642" starttime="20171013 17:54:28.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.643" starttime="20171013 17:54:28.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.645">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:28.645">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:28.645">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:28.645" starttime="20171013 17:54:28.643"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.645">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:54:28.645" starttime="20171013 17:54:28.379"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.646">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:54:28.646" starttime="20171013 17:54:28.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:28.646" starttime="20171013 17:54:28.646"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.646" starttime="20171013 17:54:28.378"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:28.650" starttime="20171013 17:54:28.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:28.651" starttime="20171013 17:54:28.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.651">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:28.652" starttime="20171013 17:54:28.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.652">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:28.652" starttime="20171013 17:54:28.652"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.896">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:28.896" starttime="20171013 17:54:28.653"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:28.896">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.896" starttime="20171013 17:54:28.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.897" starttime="20171013 17:54:28.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.898" starttime="20171013 17:54:28.897"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.898" starttime="20171013 17:54:28.649"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.898" starttime="20171013 17:54:28.649"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.898" starttime="20171013 17:54:28.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.899">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:54:28.899" starttime="20171013 17:54:28.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.902">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:28.902" starttime="20171013 17:54:28.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.903">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:28.903" starttime="20171013 17:54:28.902"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.903" starttime="20171013 17:54:28.902"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.903" starttime="20171013 17:54:28.900"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.903" starttime="20171013 17:54:28.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.994">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:28.994">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.994" starttime="20171013 17:54:28.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.996">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:28.996" starttime="20171013 17:54:28.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.997">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:28.997" starttime="20171013 17:54:28.997"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.997" starttime="20171013 17:54:28.996"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.997" starttime="20171013 17:54:28.995"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:28.997" starttime="20171013 17:54:28.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:28.998">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:28.998" starttime="20171013 17:54:28.997"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:28.998">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.998" starttime="20171013 17:54:28.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:28.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:28.999" starttime="20171013 17:54:28.998"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:28.999">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:28.999">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:28.999">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:28.999" starttime="20171013 17:54:28.999"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.000">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:54:29.000" starttime="20171013 17:54:28.647"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.000">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:54:29.000" starttime="20171013 17:54:28.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:29.001" starttime="20171013 17:54:29.000"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.005">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:29.005" starttime="20171013 17:54:29.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:29.006" starttime="20171013 17:54:29.005"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.006">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:29.006" starttime="20171013 17:54:29.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:29.007" starttime="20171013 17:54:29.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:29.708" starttime="20171013 17:54:29.008"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:29.708">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.708" starttime="20171013 17:54:29.007"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.709" starttime="20171013 17:54:29.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.710" starttime="20171013 17:54:29.709"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.710" starttime="20171013 17:54:29.004"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.710" starttime="20171013 17:54:29.003"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.710" starttime="20171013 17:54:29.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.711">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:54:29.711" starttime="20171013 17:54:29.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.713">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:29.713" starttime="20171013 17:54:29.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.714">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:29.714" starttime="20171013 17:54:29.714"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.714" starttime="20171013 17:54:29.713"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.714" starttime="20171013 17:54:29.712"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.714" starttime="20171013 17:54:29.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.910">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:29.911">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.911" starttime="20171013 17:54:29.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.912">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:29.912" starttime="20171013 17:54:29.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.913">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:29.913" starttime="20171013 17:54:29.913"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.913" starttime="20171013 17:54:29.912"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.914" starttime="20171013 17:54:29.911"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:29.914" starttime="20171013 17:54:29.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:29.914">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:29.914" starttime="20171013 17:54:29.914"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.914">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.914" starttime="20171013 17:54:29.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:29.915" starttime="20171013 17:54:29.915"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:29.916">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:29.916">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:29.916">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:29.916" starttime="20171013 17:54:29.915"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.916">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:29.916" starttime="20171013 17:54:29.002"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:29.916">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:29.916" starttime="20171013 17:54:29.001"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:29.917">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:54:29.917">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:54:29.917" starttime="20171013 17:54:29.917"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:29.917" starttime="20171013 17:54:29.001"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:29.917" starttime="20171013 17:54:28.378"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:39.923">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:39.923" starttime="20171013 17:54:39.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:39.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:39.924" starttime="20171013 17:54:39.923"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:39.924">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:39.924" starttime="20171013 17:54:39.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:39.925">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:39.925" starttime="20171013 17:54:39.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:40.770" starttime="20171013 17:54:39.926"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:40.770">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:40.770">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.771" starttime="20171013 17:54:39.925"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.771">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.771" starttime="20171013 17:54:40.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.772" starttime="20171013 17:54:40.772"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.772" starttime="20171013 17:54:39.922"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.773" starttime="20171013 17:54:39.921"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.773" starttime="20171013 17:54:39.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.773">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:54:40.773" starttime="20171013 17:54:40.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.775">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:40.775" starttime="20171013 17:54:40.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.776">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:40.776" starttime="20171013 17:54:40.776"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.777" starttime="20171013 17:54:40.776"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.777" starttime="20171013 17:54:40.774"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.777" starttime="20171013 17:54:40.774"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.870">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:40.870">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.870" starttime="20171013 17:54:40.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.872">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:40.872" starttime="20171013 17:54:40.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.873">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:40.873" starttime="20171013 17:54:40.873"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.873" starttime="20171013 17:54:40.872"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.873" starttime="20171013 17:54:40.871"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.873" starttime="20171013 17:54:40.870"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:40.874">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:40.874" starttime="20171013 17:54:40.874"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:40.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.874" starttime="20171013 17:54:39.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:40.875" starttime="20171013 17:54:40.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.875">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:40.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:40.876">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:40.876" starttime="20171013 17:54:40.875"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:40.876">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:54:40.876" starttime="20171013 17:54:39.919"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:40.876">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:54:40.876" starttime="20171013 17:54:39.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:40.877" starttime="20171013 17:54:40.876"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:40.877" starttime="20171013 17:54:39.918"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:40.880">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:40.881" starttime="20171013 17:54:40.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:40.881" starttime="20171013 17:54:40.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.882">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:40.882" starttime="20171013 17:54:40.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:40.883">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:40.883" starttime="20171013 17:54:40.882"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:41.061" starttime="20171013 17:54:40.883"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:41.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:41.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.061" starttime="20171013 17:54:40.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.062" starttime="20171013 17:54:41.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.063" starttime="20171013 17:54:41.062"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.063" starttime="20171013 17:54:40.880"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.063" starttime="20171013 17:54:40.879"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.063" starttime="20171013 17:54:40.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.064">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:54:41.064" starttime="20171013 17:54:41.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.066">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:41.066" starttime="20171013 17:54:41.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.067">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:41.067" starttime="20171013 17:54:41.067"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.067" starttime="20171013 17:54:41.066"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.067" starttime="20171013 17:54:41.064"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.068" starttime="20171013 17:54:41.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.867">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:41.868">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.868" starttime="20171013 17:54:41.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.869">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:41.870" starttime="20171013 17:54:41.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.870">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:41.871" starttime="20171013 17:54:41.870"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.871" starttime="20171013 17:54:41.870"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.871" starttime="20171013 17:54:41.868"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:41.871" starttime="20171013 17:54:41.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:41.872">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:41.872" starttime="20171013 17:54:41.871"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:41.872">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.872" starttime="20171013 17:54:40.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:41.873" starttime="20171013 17:54:41.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.874">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:41.874">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:41.874">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:41.874" starttime="20171013 17:54:41.873"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:41.874">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:54:41.874" starttime="20171013 17:54:40.877"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:41.874">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:54:41.875" starttime="20171013 17:54:40.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:41.875" starttime="20171013 17:54:41.875"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:41.879">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:41.880" starttime="20171013 17:54:41.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.880">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:41.880" starttime="20171013 17:54:41.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.881">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:41.881" starttime="20171013 17:54:41.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:41.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:41.881" starttime="20171013 17:54:41.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.141">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:42.141" starttime="20171013 17:54:41.883"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:42.141">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:42.141">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.141" starttime="20171013 17:54:41.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.142">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.142" starttime="20171013 17:54:42.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.142" starttime="20171013 17:54:42.142"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.143" starttime="20171013 17:54:41.878"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.143" starttime="20171013 17:54:41.878"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.143" starttime="20171013 17:54:41.877"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:42.143">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:54:42.143" starttime="20171013 17:54:42.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:42.145">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:42.145" starttime="20171013 17:54:42.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.146">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:42.146" starttime="20171013 17:54:42.146"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.147" starttime="20171013 17:54:42.146"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.147" starttime="20171013 17:54:42.144"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.147" starttime="20171013 17:54:42.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:42.714">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:42.715">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.715" starttime="20171013 17:54:42.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:42.716">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:42.717" starttime="20171013 17:54:42.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.717">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:42.718" starttime="20171013 17:54:42.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.718" starttime="20171013 17:54:42.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.718" starttime="20171013 17:54:42.715"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:42.718" starttime="20171013 17:54:42.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:42.718">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:42.718" starttime="20171013 17:54:42.718"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:42.718">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.719" starttime="20171013 17:54:41.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:42.719" starttime="20171013 17:54:42.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:42.720">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:42.720">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:42.720">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:42.720" starttime="20171013 17:54:42.719"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:42.721">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:42.721" starttime="20171013 17:54:41.876"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:42.721">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:54:42.721" starttime="20171013 17:54:41.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:42.721">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:54:42.722">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:54:42.722" starttime="20171013 17:54:42.721"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:42.722" starttime="20171013 17:54:41.875"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:42.722" starttime="20171013 17:54:39.918"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:52.733" starttime="20171013 17:54:52.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:52.734" starttime="20171013 17:54:52.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.735">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:52.735" starttime="20171013 17:54:52.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:52.736" starttime="20171013 17:54:52.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.927">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:52.927" starttime="20171013 17:54:52.737"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:52.927">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:52.927">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:52.927" starttime="20171013 17:54:52.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.928">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:52.928" starttime="20171013 17:54:52.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:52.929" starttime="20171013 17:54:52.928"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.929" starttime="20171013 17:54:52.731"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.929" starttime="20171013 17:54:52.731"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.929" starttime="20171013 17:54:52.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.930">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:54:52.930" starttime="20171013 17:54:52.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.932">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:52.932" starttime="20171013 17:54:52.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.933">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:52.933" starttime="20171013 17:54:52.932"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.933" starttime="20171013 17:54:52.932"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.933" starttime="20171013 17:54:52.930"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:52.933" starttime="20171013 17:54:52.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.996">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:52.996">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:52.996" starttime="20171013 17:54:52.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:52.998">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:52.998" starttime="20171013 17:54:52.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:52.999">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:52.999" starttime="20171013 17:54:52.999"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.000" starttime="20171013 17:54:52.999"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.000" starttime="20171013 17:54:52.997"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.000" starttime="20171013 17:54:52.997"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:53.000">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:53.000" starttime="20171013 17:54:53.000"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:53.001">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:53.001" starttime="20171013 17:54:52.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:53.001" starttime="20171013 17:54:53.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.002">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:53.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:53.002">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:53.002" starttime="20171013 17:54:53.001"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:53.002">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:54:53.002" starttime="20171013 17:54:52.724"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:53.003">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:54:53.003" starttime="20171013 17:54:52.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:53.003" starttime="20171013 17:54:53.003"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.003" starttime="20171013 17:54:52.723"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.007">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:53.007" starttime="20171013 17:54:53.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.008">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:53.008" starttime="20171013 17:54:53.008"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.009">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:53.009" starttime="20171013 17:54:53.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.009">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:53.009" starttime="20171013 17:54:53.009"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:53.703" starttime="20171013 17:54:53.010"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:53.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:53.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:53.703" starttime="20171013 17:54:53.010"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:53.703" starttime="20171013 17:54:53.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:53.704" starttime="20171013 17:54:53.704"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.704" starttime="20171013 17:54:53.006"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.704" starttime="20171013 17:54:53.006"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.704" starttime="20171013 17:54:53.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.705">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:54:53.705" starttime="20171013 17:54:53.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:53.708">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:53.708" starttime="20171013 17:54:53.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:53.709">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:53.709" starttime="20171013 17:54:53.708"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.709" starttime="20171013 17:54:53.708"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.709" starttime="20171013 17:54:53.706"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:53.709" starttime="20171013 17:54:53.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.321">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:54.321">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.321" starttime="20171013 17:54:53.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.323">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:54.323" starttime="20171013 17:54:54.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.324">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:54.324" starttime="20171013 17:54:54.324"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.324" starttime="20171013 17:54:54.323"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.324" starttime="20171013 17:54:54.322"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.324" starttime="20171013 17:54:54.322"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:54.325">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:54.325" starttime="20171013 17:54:54.325"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.325">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.325" starttime="20171013 17:54:53.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.326" starttime="20171013 17:54:54.325"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.326">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:54.326">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:54.327">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:54.327" starttime="20171013 17:54:54.326"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.327">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:54:54.327" starttime="20171013 17:54:53.004"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.327">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:54:54.327" starttime="20171013 17:54:53.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:54:54.328" starttime="20171013 17:54:54.327"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.332">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:54.332" starttime="20171013 17:54:54.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.333">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:54.333" starttime="20171013 17:54:54.332"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.333">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:54.334" starttime="20171013 17:54:54.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.334">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:54.334" starttime="20171013 17:54:54.334"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:54.528" starttime="20171013 17:54:54.335"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.528">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:54.528">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.528" starttime="20171013 17:54:54.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.529">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.529" starttime="20171013 17:54:54.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.530" starttime="20171013 17:54:54.529"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.530" starttime="20171013 17:54:54.331"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.530" starttime="20171013 17:54:54.330"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.530" starttime="20171013 17:54:54.330"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.531">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:54:54.531" starttime="20171013 17:54:54.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.533">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:54.533" starttime="20171013 17:54:54.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.534">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:54.534" starttime="20171013 17:54:54.534"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.534" starttime="20171013 17:54:54.533"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.534" starttime="20171013 17:54:54.532"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.534" starttime="20171013 17:54:54.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.842">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:54.842">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.842" starttime="20171013 17:54:54.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.844">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:54.844" starttime="20171013 17:54:54.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.845">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:54.845" starttime="20171013 17:54:54.844"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.845" starttime="20171013 17:54:54.844"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.845" starttime="20171013 17:54:54.843"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:54.845" starttime="20171013 17:54:54.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:54.845">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:54.845" starttime="20171013 17:54:54.845"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.846">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.846" starttime="20171013 17:54:54.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.846" starttime="20171013 17:54:54.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.847">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:54.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:54.847">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:54.847" starttime="20171013 17:54:54.847"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.847">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:54:54.848" starttime="20171013 17:54:54.329"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:54.848">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:54:54.848" starttime="20171013 17:54:54.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.848">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:54.848" starttime="20171013 17:54:54.848"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:54.852">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:54:54.853" starttime="20171013 17:54:54.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:54:54.853" starttime="20171013 17:54:54.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.854">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:54:54.854" starttime="20171013 17:54:54.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:54.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:54:54.855" starttime="20171013 17:54:54.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:54:55.115" starttime="20171013 17:54:54.855"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:55.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:54:55.115">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.115" starttime="20171013 17:54:54.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.116" starttime="20171013 17:54:55.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.116" starttime="20171013 17:54:55.116"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.116" starttime="20171013 17:54:54.851"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.116" starttime="20171013 17:54:54.851"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.117" starttime="20171013 17:54:54.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:55.117">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:54:55.117" starttime="20171013 17:54:55.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:55.120">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:55.120" starttime="20171013 17:54:55.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.121">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:54:55.121" starttime="20171013 17:54:55.120"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.121" starttime="20171013 17:54:55.120"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.121" starttime="20171013 17:54:55.118"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.121" starttime="20171013 17:54:55.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:55.729">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:54:55.729">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.729" starttime="20171013 17:54:55.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:55.731">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:55.731" starttime="20171013 17:54:55.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.732">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:54:55.732" starttime="20171013 17:54:55.732"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.733" starttime="20171013 17:54:55.731"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.733" starttime="20171013 17:54:55.730"></status>
</kw>
<status status="PASS" endtime="20171013 17:54:55.733" starttime="20171013 17:54:55.729"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:54:55.733">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:54:55.733" starttime="20171013 17:54:55.733"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:55.733">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.733" starttime="20171013 17:54:54.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:54:55.734" starttime="20171013 17:54:55.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:54:55.735">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:54:55.735">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:54:55.735">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:54:55.735" starttime="20171013 17:54:55.734"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:55.735">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:54:55.735" starttime="20171013 17:54:54.849"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:54:55.735">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:54:55.735" starttime="20171013 17:54:54.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:54:55.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:54:55.736">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:54:55.736" starttime="20171013 17:54:55.736"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:55.736" starttime="20171013 17:54:54.328"></status>
</kw>
<status status="FAIL" endtime="20171013 17:54:55.736" starttime="20171013 17:54:52.723"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:05.742">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:05.742" starttime="20171013 17:55:05.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:05.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:05.743" starttime="20171013 17:55:05.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:05.744">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:05.744" starttime="20171013 17:55:05.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:05.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:05.744" starttime="20171013 17:55:05.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.268">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:06.268" starttime="20171013 17:55:05.745"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:06.268">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:06.268">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.268" starttime="20171013 17:55:05.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.269">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.269" starttime="20171013 17:55:06.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.270" starttime="20171013 17:55:06.269"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.270" starttime="20171013 17:55:05.741"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.270" starttime="20171013 17:55:05.740"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.270" starttime="20171013 17:55:05.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.270">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:55:06.270" starttime="20171013 17:55:06.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.273">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:06.273" starttime="20171013 17:55:06.272"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.274">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:06.274" starttime="20171013 17:55:06.273"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.274" starttime="20171013 17:55:06.273"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.274" starttime="20171013 17:55:06.271"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.274" starttime="20171013 17:55:06.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:06.406">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.406" starttime="20171013 17:55:06.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.408">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:06.408" starttime="20171013 17:55:06.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.409">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:06.409" starttime="20171013 17:55:06.409"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.409" starttime="20171013 17:55:06.408"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.409" starttime="20171013 17:55:06.407"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.409" starttime="20171013 17:55:06.406"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:06.410">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:06.410" starttime="20171013 17:55:06.410"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:06.410">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.410" starttime="20171013 17:55:05.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.411" starttime="20171013 17:55:06.410"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.411">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:06.411">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:06.411">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:06.411" starttime="20171013 17:55:06.411"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:06.412">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:55:06.412" starttime="20171013 17:55:05.738"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:06.412">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:55:06.412" starttime="20171013 17:55:05.738"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:06.413" starttime="20171013 17:55:06.412"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.413" starttime="20171013 17:55:05.737"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.416">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:06.417" starttime="20171013 17:55:06.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.418">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:06.418" starttime="20171013 17:55:06.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.418">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:06.418" starttime="20171013 17:55:06.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.419">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:06.419" starttime="20171013 17:55:06.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.599">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:06.599" starttime="20171013 17:55:06.420"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:06.599">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:06.599">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.599" starttime="20171013 17:55:06.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.600">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.600" starttime="20171013 17:55:06.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:06.601" starttime="20171013 17:55:06.600"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.601" starttime="20171013 17:55:06.416"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.601" starttime="20171013 17:55:06.415"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.601" starttime="20171013 17:55:06.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.602">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:55:06.602" starttime="20171013 17:55:06.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:06.604">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:06.604" starttime="20171013 17:55:06.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:06.605">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:06.605" starttime="20171013 17:55:06.604"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.605" starttime="20171013 17:55:06.604"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.605" starttime="20171013 17:55:06.602"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:06.605" starttime="20171013 17:55:06.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.007">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:07.007">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.007" starttime="20171013 17:55:06.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.009">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:07.009" starttime="20171013 17:55:07.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.010">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:07.010" starttime="20171013 17:55:07.010"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.010" starttime="20171013 17:55:07.009"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.010" starttime="20171013 17:55:07.008"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.011" starttime="20171013 17:55:07.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:07.011">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:07.011" starttime="20171013 17:55:07.011"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.011">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.011" starttime="20171013 17:55:06.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.012" starttime="20171013 17:55:07.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.012">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:07.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:07.013">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:07.013" starttime="20171013 17:55:07.012"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.013">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:55:07.013" starttime="20171013 17:55:06.413"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.013">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:55:07.013" starttime="20171013 17:55:06.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:07.014" starttime="20171013 17:55:07.014"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.019">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:07.019" starttime="20171013 17:55:07.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:07.020" starttime="20171013 17:55:07.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.021">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:07.021" starttime="20171013 17:55:07.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.021">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:07.021" starttime="20171013 17:55:07.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:07.425" starttime="20171013 17:55:07.022"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:07.426">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.426" starttime="20171013 17:55:07.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.426">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.426" starttime="20171013 17:55:07.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.427" starttime="20171013 17:55:07.427"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.427" starttime="20171013 17:55:07.018"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.427" starttime="20171013 17:55:07.017"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.427" starttime="20171013 17:55:07.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.428">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:55:07.428" starttime="20171013 17:55:07.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.430">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:07.430" starttime="20171013 17:55:07.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.431">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:07.431" starttime="20171013 17:55:07.431"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.431" starttime="20171013 17:55:07.430"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.431" starttime="20171013 17:55:07.429"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.431" starttime="20171013 17:55:07.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.834">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:07.834">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.835" starttime="20171013 17:55:07.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.836">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:07.836" starttime="20171013 17:55:07.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.837">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:07.837" starttime="20171013 17:55:07.837"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.837" starttime="20171013 17:55:07.836"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.838" starttime="20171013 17:55:07.835"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:07.838" starttime="20171013 17:55:07.835"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:07.838">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:07.838" starttime="20171013 17:55:07.838"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.838">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.838" starttime="20171013 17:55:07.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.839" starttime="20171013 17:55:07.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.840">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:07.840">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:07.840">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:07.840" starttime="20171013 17:55:07.839"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.840">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:07.840" starttime="20171013 17:55:07.015"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:07.840">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:07.840" starttime="20171013 17:55:07.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:07.841" starttime="20171013 17:55:07.841"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:07.845">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:07.845" starttime="20171013 17:55:07.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.846">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:07.846" starttime="20171013 17:55:07.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.846">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:07.846" starttime="20171013 17:55:07.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:07.847">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:07.847" starttime="20171013 17:55:07.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:08.393">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:08.394" starttime="20171013 17:55:07.848"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:08.394">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:08.394">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:08.394" starttime="20171013 17:55:07.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:08.394">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:08.395" starttime="20171013 17:55:08.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:08.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:08.395" starttime="20171013 17:55:08.395"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.396" starttime="20171013 17:55:07.844"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.396" starttime="20171013 17:55:07.843"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.396" starttime="20171013 17:55:07.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:08.396">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:55:08.396" starttime="20171013 17:55:08.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:08.399">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:08.399" starttime="20171013 17:55:08.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:08.400">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:08.400" starttime="20171013 17:55:08.399"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.400" starttime="20171013 17:55:08.399"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.400" starttime="20171013 17:55:08.397"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:08.400" starttime="20171013 17:55:08.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:09.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:09.132">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:09.132" starttime="20171013 17:55:08.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:09.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:09.134" starttime="20171013 17:55:09.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:09.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:09.135" starttime="20171013 17:55:09.135"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:09.135" starttime="20171013 17:55:09.134"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:09.135" starttime="20171013 17:55:09.133"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:09.136" starttime="20171013 17:55:09.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:09.136">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:09.136" starttime="20171013 17:55:09.136"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:09.136">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:09.136" starttime="20171013 17:55:07.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:09.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:09.137" starttime="20171013 17:55:09.137"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:09.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:09.138">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:09.138">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:09.138" starttime="20171013 17:55:09.137"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:09.138">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:09.138" starttime="20171013 17:55:07.842"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:09.138">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:09.138" starttime="20171013 17:55:07.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:09.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:55:09.139">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:55:09.139" starttime="20171013 17:55:09.139"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:09.139" starttime="20171013 17:55:07.014"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:09.139" starttime="20171013 17:55:05.737"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:19.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:19.146" starttime="20171013 17:55:19.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:19.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:19.146" starttime="20171013 17:55:19.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:19.147">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:19.147" starttime="20171013 17:55:19.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:19.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:19.147" starttime="20171013 17:55:19.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:19.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:19.699" starttime="20171013 17:55:19.148"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:19.699">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:19.699">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:19.699" starttime="20171013 17:55:19.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:19.700">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:19.700" starttime="20171013 17:55:19.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:19.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:19.701" starttime="20171013 17:55:19.701"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.702" starttime="20171013 17:55:19.144"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.702" starttime="20171013 17:55:19.143"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.702" starttime="20171013 17:55:19.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:19.703">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:55:19.703" starttime="20171013 17:55:19.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:19.706">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:19.706" starttime="20171013 17:55:19.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:19.707">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:19.707" starttime="20171013 17:55:19.706"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.707" starttime="20171013 17:55:19.706"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.707" starttime="20171013 17:55:19.704"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:19.707" starttime="20171013 17:55:19.703"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.171">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:20.171">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.171" starttime="20171013 17:55:19.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.173">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:20.173" starttime="20171013 17:55:20.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.176">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:20.177" starttime="20171013 17:55:20.174"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.177" starttime="20171013 17:55:20.173"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.177" starttime="20171013 17:55:20.172"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.177" starttime="20171013 17:55:20.171"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:20.177">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:20.177" starttime="20171013 17:55:20.177"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.178" starttime="20171013 17:55:19.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.179" starttime="20171013 17:55:20.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.179">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:20.179">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:20.179">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:20.179" starttime="20171013 17:55:20.179"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.180">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:55:20.180" starttime="20171013 17:55:19.141"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.180">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:55:20.180" starttime="20171013 17:55:19.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:20.180" starttime="20171013 17:55:20.180"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.181" starttime="20171013 17:55:19.140"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.185">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:20.185" starttime="20171013 17:55:20.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:20.186" starttime="20171013 17:55:20.185"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.186">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:20.187" starttime="20171013 17:55:20.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.187">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:20.187" starttime="20171013 17:55:20.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:20.578" starttime="20171013 17:55:20.188"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:20.578">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.578" starttime="20171013 17:55:20.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.579" starttime="20171013 17:55:20.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.580" starttime="20171013 17:55:20.579"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.580" starttime="20171013 17:55:20.184"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.580" starttime="20171013 17:55:20.183"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.580" starttime="20171013 17:55:20.183"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.581">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:55:20.581" starttime="20171013 17:55:20.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.583">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:20.583" starttime="20171013 17:55:20.582"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.584">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:20.584" starttime="20171013 17:55:20.584"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.584" starttime="20171013 17:55:20.583"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.584" starttime="20171013 17:55:20.581"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.584" starttime="20171013 17:55:20.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:20.922">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.922" starttime="20171013 17:55:20.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:20.925" starttime="20171013 17:55:20.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:20.926" starttime="20171013 17:55:20.925"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.926" starttime="20171013 17:55:20.925"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.926" starttime="20171013 17:55:20.923"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:20.926" starttime="20171013 17:55:20.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:20.926">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:20.927" starttime="20171013 17:55:20.926"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.927">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.927" starttime="20171013 17:55:20.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:20.928" starttime="20171013 17:55:20.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.928">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:20.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:20.928">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:20.928" starttime="20171013 17:55:20.928"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.929">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:55:20.929" starttime="20171013 17:55:20.181"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:20.929">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:55:20.929" starttime="20171013 17:55:20.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:20.930" starttime="20171013 17:55:20.929"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:20.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:20.935" starttime="20171013 17:55:20.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:20.936" starttime="20171013 17:55:20.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.936">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:20.937" starttime="20171013 17:55:20.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:20.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:20.937" starttime="20171013 17:55:20.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:21.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:21.674" starttime="20171013 17:55:20.938"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:21.674">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:21.674">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:21.674" starttime="20171013 17:55:20.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:21.675">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:21.675" starttime="20171013 17:55:21.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:21.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:21.675" starttime="20171013 17:55:21.675"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.675" starttime="20171013 17:55:20.933"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.676" starttime="20171013 17:55:20.932"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.676" starttime="20171013 17:55:20.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:21.676">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:55:21.676" starttime="20171013 17:55:21.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:21.678">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:21.678" starttime="20171013 17:55:21.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:21.679">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:21.679" starttime="20171013 17:55:21.679"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.680" starttime="20171013 17:55:21.679"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.680" starttime="20171013 17:55:21.677"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:21.680" starttime="20171013 17:55:21.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:22.900">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:22.900" starttime="20171013 17:55:21.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:22.902" starttime="20171013 17:55:22.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:22.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:22.903" starttime="20171013 17:55:22.903"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:22.903" starttime="20171013 17:55:22.902"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:22.903" starttime="20171013 17:55:22.901"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:22.903" starttime="20171013 17:55:22.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:22.904">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:22.904" starttime="20171013 17:55:22.904"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:22.904">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:22.905" starttime="20171013 17:55:20.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:22.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:22.906" starttime="20171013 17:55:22.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.906">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:22.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:22.907">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:22.907" starttime="20171013 17:55:22.906"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:22.907">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:22.907" starttime="20171013 17:55:20.931"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:22.907">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:22.908" starttime="20171013 17:55:20.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:22.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:22.908" starttime="20171013 17:55:22.908"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:22.915">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:22.915" starttime="20171013 17:55:22.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:22.916" starttime="20171013 17:55:22.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.916">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:22.916" starttime="20171013 17:55:22.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:22.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:22.917" starttime="20171013 17:55:22.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:23.377" starttime="20171013 17:55:22.918"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:23.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:23.377">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.377" starttime="20171013 17:55:22.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.378" starttime="20171013 17:55:23.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.378" starttime="20171013 17:55:23.378"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.379" starttime="20171013 17:55:22.913"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.379" starttime="20171013 17:55:22.912"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.379" starttime="20171013 17:55:22.911"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:23.379">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:55:23.379" starttime="20171013 17:55:23.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:23.381">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:23.381" starttime="20171013 17:55:23.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.383">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:23.383" starttime="20171013 17:55:23.383"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.383" starttime="20171013 17:55:23.382"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.383" starttime="20171013 17:55:23.380"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.383" starttime="20171013 17:55:23.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:23.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:23.634">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.634" starttime="20171013 17:55:23.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:23.636">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:23.636" starttime="20171013 17:55:23.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.637">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:23.637" starttime="20171013 17:55:23.637"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.637" starttime="20171013 17:55:23.636"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.637" starttime="20171013 17:55:23.635"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:23.637" starttime="20171013 17:55:23.634"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:23.638">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:23.638" starttime="20171013 17:55:23.638"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:23.638">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.638" starttime="20171013 17:55:22.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:23.639" starttime="20171013 17:55:23.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:23.639">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:23.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:23.640">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:23.640" starttime="20171013 17:55:23.639"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:23.640">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:23.640" starttime="20171013 17:55:22.909"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:23.640">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:23.640" starttime="20171013 17:55:22.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:23.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:55:23.641">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:55:23.641" starttime="20171013 17:55:23.640"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:23.641" starttime="20171013 17:55:20.930"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:23.641" starttime="20171013 17:55:19.140"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:33.649">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:33.649" starttime="20171013 17:55:33.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:33.650">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:33.650" starttime="20171013 17:55:33.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:33.650">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:33.650" starttime="20171013 17:55:33.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:33.651">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:33.651" starttime="20171013 17:55:33.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:35.751">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:35.751" starttime="20171013 17:55:33.652"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:35.751">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:35.751">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:35.751" starttime="20171013 17:55:33.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:35.752">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:35.752" starttime="20171013 17:55:35.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:35.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:35.753" starttime="20171013 17:55:35.752"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.753" starttime="20171013 17:55:33.647"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.753" starttime="20171013 17:55:33.647"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.753" starttime="20171013 17:55:33.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:35.754">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:55:35.754" starttime="20171013 17:55:35.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:35.756">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:35.756" starttime="20171013 17:55:35.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:35.757">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:35.757" starttime="20171013 17:55:35.756"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.757" starttime="20171013 17:55:35.756"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.757" starttime="20171013 17:55:35.754"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:35.757" starttime="20171013 17:55:35.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.393">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:40.395">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:40.395" starttime="20171013 17:55:35.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.397">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:40.397" starttime="20171013 17:55:40.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:40.398">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:40.398" starttime="20171013 17:55:40.397"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:40.398" starttime="20171013 17:55:40.397"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:40.398" starttime="20171013 17:55:40.396"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:40.398" starttime="20171013 17:55:40.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:40.398">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:40.399" starttime="20171013 17:55:40.398"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:40.399">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:40.399" starttime="20171013 17:55:33.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:40.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:40.400" starttime="20171013 17:55:40.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.400">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:40.400">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:40.400">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:40.401" starttime="20171013 17:55:40.400"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:40.401">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:55:40.401" starttime="20171013 17:55:33.644"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:40.401">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:55:40.401" starttime="20171013 17:55:33.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:40.402" starttime="20171013 17:55:40.401"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:40.402" starttime="20171013 17:55:33.643"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:40.406">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:40.407" starttime="20171013 17:55:40.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.407">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:40.407" starttime="20171013 17:55:40.407"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.408">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:40.408" starttime="20171013 17:55:40.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:40.408">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:40.408" starttime="20171013 17:55:40.408"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:41.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:41.153" starttime="20171013 17:55:40.409"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:41.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:41.153">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:41.153" starttime="20171013 17:55:40.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:41.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:41.154" starttime="20171013 17:55:41.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:41.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:41.154" starttime="20171013 17:55:41.154"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.154" starttime="20171013 17:55:40.405"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.155" starttime="20171013 17:55:40.405"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.155" starttime="20171013 17:55:40.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:41.155">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:55:41.155" starttime="20171013 17:55:41.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:41.157">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:41.157" starttime="20171013 17:55:41.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:41.160">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:41.160" starttime="20171013 17:55:41.158"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.160" starttime="20171013 17:55:41.158"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.160" starttime="20171013 17:55:41.156"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:41.160" starttime="20171013 17:55:41.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.098">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:45.098">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:45.098" starttime="20171013 17:55:41.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.100">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:45.100" starttime="20171013 17:55:45.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:45.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:45.101" starttime="20171013 17:55:45.101"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:45.101" starttime="20171013 17:55:45.100"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:45.101" starttime="20171013 17:55:45.099"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:45.102" starttime="20171013 17:55:45.099"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:45.102">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:45.102" starttime="20171013 17:55:45.102"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:45.102">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:45.102" starttime="20171013 17:55:40.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:45.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:45.103" starttime="20171013 17:55:45.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.104">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:45.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:45.104">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:45.104" starttime="20171013 17:55:45.103"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:45.104">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:55:45.104" starttime="20171013 17:55:40.403"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:45.104">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:55:45.104" starttime="20171013 17:55:40.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:55:45.105" starttime="20171013 17:55:45.105"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:45.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:45.110" starttime="20171013 17:55:45.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:45.110" starttime="20171013 17:55:45.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.111">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:45.111" starttime="20171013 17:55:45.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:45.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:45.112" starttime="20171013 17:55:45.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:46.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:46.552" starttime="20171013 17:55:45.112"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:46.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:46.552">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:46.553" starttime="20171013 17:55:45.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:46.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:46.553" starttime="20171013 17:55:46.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:46.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:46.554" starttime="20171013 17:55:46.554"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.554" starttime="20171013 17:55:45.108"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.554" starttime="20171013 17:55:45.108"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.554" starttime="20171013 17:55:45.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:46.555">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:55:46.555" starttime="20171013 17:55:46.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:46.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:46.558" starttime="20171013 17:55:46.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:46.558">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:46.559" starttime="20171013 17:55:46.558"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.559" starttime="20171013 17:55:46.558"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.559" starttime="20171013 17:55:46.556"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:46.559" starttime="20171013 17:55:46.555"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.907">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:48.907">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:48.907" starttime="20171013 17:55:46.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.909">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:48.909" starttime="20171013 17:55:48.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:48.910">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:48.910" starttime="20171013 17:55:48.910"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:48.910" starttime="20171013 17:55:48.909"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:48.910" starttime="20171013 17:55:48.908"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:48.910" starttime="20171013 17:55:48.907"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:48.911">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:48.911" starttime="20171013 17:55:48.911"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:48.911">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:48.911" starttime="20171013 17:55:45.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:48.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:48.912" starttime="20171013 17:55:48.911"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.913">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:48.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:48.913">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:48.913" starttime="20171013 17:55:48.912"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:48.913">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:48.913" starttime="20171013 17:55:45.106"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:48.913">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:55:48.914" starttime="20171013 17:55:45.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:48.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:48.914" starttime="20171013 17:55:48.914"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:48.918">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:55:48.918" starttime="20171013 17:55:48.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.919">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:55:48.919" starttime="20171013 17:55:48.919"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.920">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:55:48.920" starttime="20171013 17:55:48.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:48.920">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:55:48.920" starttime="20171013 17:55:48.920"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:50.012">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:55:50.012" starttime="20171013 17:55:48.921"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:50.012">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:55:50.012">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:50.013" starttime="20171013 17:55:48.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:50.013">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:50.013" starttime="20171013 17:55:50.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:50.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:50.014" starttime="20171013 17:55:50.014"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.014" starttime="20171013 17:55:48.917"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.014" starttime="20171013 17:55:48.917"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.014" starttime="20171013 17:55:48.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:50.015">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:55:50.015" starttime="20171013 17:55:50.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:50.017">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:50.017" starttime="20171013 17:55:50.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:50.018">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:55:50.018" starttime="20171013 17:55:50.018"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.018" starttime="20171013 17:55:50.017"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.018" starttime="20171013 17:55:50.016"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:50.018" starttime="20171013 17:55:50.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:51.494">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:55:51.494">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:51.494" starttime="20171013 17:55:50.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:51.496">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:51.496" starttime="20171013 17:55:51.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:51.497">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:55:51.497" starttime="20171013 17:55:51.497"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:51.497" starttime="20171013 17:55:51.496"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:51.498" starttime="20171013 17:55:51.495"></status>
</kw>
<status status="PASS" endtime="20171013 17:55:51.498" starttime="20171013 17:55:51.495"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:55:51.498">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:55:51.498" starttime="20171013 17:55:51.498"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:51.498">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:55:51.498" starttime="20171013 17:55:48.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:51.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:55:51.499" starttime="20171013 17:55:51.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:55:51.500">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:55:51.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:55:51.500">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:55:51.500" starttime="20171013 17:55:51.499"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:51.500">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:51.500" starttime="20171013 17:55:48.915"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:55:51.500">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:55:51.500" starttime="20171013 17:55:48.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:55:51.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:55:51.501">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:55:51.501" starttime="20171013 17:55:51.501"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:51.501" starttime="20171013 17:55:45.105"></status>
</kw>
<status status="FAIL" endtime="20171013 17:55:51.501" starttime="20171013 17:55:33.642"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:01.513">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:01.514" starttime="20171013 17:56:01.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:01.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:01.514" starttime="20171013 17:56:01.514"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:01.515">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:01.515" starttime="20171013 17:56:01.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:01.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:01.516" starttime="20171013 17:56:01.516"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:02.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:02.712" starttime="20171013 17:56:01.517"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:02.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:02.712">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:02.712" starttime="20171013 17:56:01.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:02.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:02.713" starttime="20171013 17:56:02.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:02.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:02.713" starttime="20171013 17:56:02.713"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.714" starttime="20171013 17:56:01.512"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.714" starttime="20171013 17:56:01.512"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.714" starttime="20171013 17:56:01.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:02.714">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:56:02.714" starttime="20171013 17:56:02.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:02.716">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:02.717" starttime="20171013 17:56:02.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:02.717">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:02.718" starttime="20171013 17:56:02.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.718" starttime="20171013 17:56:02.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.718" starttime="20171013 17:56:02.715"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:02.718" starttime="20171013 17:56:02.715"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.716">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:06.716">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:06.716" starttime="20171013 17:56:02.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:06.718" starttime="20171013 17:56:06.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:06.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:06.719" starttime="20171013 17:56:06.719"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:06.720" starttime="20171013 17:56:06.718"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:06.720" starttime="20171013 17:56:06.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:06.720" starttime="20171013 17:56:06.717"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:06.720">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:06.720" starttime="20171013 17:56:06.720"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:06.721">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:06.721" starttime="20171013 17:56:01.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:06.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:06.721" starttime="20171013 17:56:06.721"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.722">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:06.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:06.722">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:06.722" starttime="20171013 17:56:06.721"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:06.722">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:56:06.722" starttime="20171013 17:56:01.507"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:06.723">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:56:06.723" starttime="20171013 17:56:01.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:06.723" starttime="20171013 17:56:06.723"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:06.723" starttime="20171013 17:56:01.506"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:06.727">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:06.727" starttime="20171013 17:56:06.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:06.728" starttime="20171013 17:56:06.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.729">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:06.729" starttime="20171013 17:56:06.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:06.729">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:06.729" starttime="20171013 17:56:06.729"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:07.329">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:07.329" starttime="20171013 17:56:06.730"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:07.329">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:07.329">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:07.329" starttime="20171013 17:56:06.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:07.330">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:07.330" starttime="20171013 17:56:07.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:07.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:07.331" starttime="20171013 17:56:07.330"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.331" starttime="20171013 17:56:06.726"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.331" starttime="20171013 17:56:06.726"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.331" starttime="20171013 17:56:06.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:07.332">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:56:07.332" starttime="20171013 17:56:07.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:07.337">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:07.337" starttime="20171013 17:56:07.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:07.338">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:07.338" starttime="20171013 17:56:07.338"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.338" starttime="20171013 17:56:07.337"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.338" starttime="20171013 17:56:07.332"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:07.339" starttime="20171013 17:56:07.332"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.052">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:10.052">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:10.053" starttime="20171013 17:56:07.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.054">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:10.055" starttime="20171013 17:56:10.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:10.055">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:10.056" starttime="20171013 17:56:10.055"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:10.056" starttime="20171013 17:56:10.055"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:10.056" starttime="20171013 17:56:10.053"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:10.056" starttime="20171013 17:56:10.053"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:10.056">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:10.057" starttime="20171013 17:56:10.056"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:10.057">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:10.057" starttime="20171013 17:56:06.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:10.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:10.058" starttime="20171013 17:56:10.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:10.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:10.058">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:10.058" starttime="20171013 17:56:10.058"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:10.059">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:56:10.059" starttime="20171013 17:56:06.724"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:10.059">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:56:10.059" starttime="20171013 17:56:06.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:10.060" starttime="20171013 17:56:10.059"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:10.064">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:10.064" starttime="20171013 17:56:10.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:10.065" starttime="20171013 17:56:10.064"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.065">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:10.065" starttime="20171013 17:56:10.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:10.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:10.066" starttime="20171013 17:56:10.065"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.019">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:11.019" starttime="20171013 17:56:10.067"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:11.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:11.020">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.020" starttime="20171013 17:56:10.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.020" starttime="20171013 17:56:11.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.021" starttime="20171013 17:56:11.021"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.021" starttime="20171013 17:56:10.063"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.021" starttime="20171013 17:56:10.062"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.022" starttime="20171013 17:56:10.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:11.022">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:56:11.022" starttime="20171013 17:56:11.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:11.024">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:11.024" starttime="20171013 17:56:11.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.025">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:11.025" starttime="20171013 17:56:11.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.025" starttime="20171013 17:56:11.024"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.026" starttime="20171013 17:56:11.023"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.026" starttime="20171013 17:56:11.022"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:11.550">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:11.551">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.551" starttime="20171013 17:56:11.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:11.552">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:11.553" starttime="20171013 17:56:11.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.554">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:11.554" starttime="20171013 17:56:11.553"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.554" starttime="20171013 17:56:11.553"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.554" starttime="20171013 17:56:11.551"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:11.554" starttime="20171013 17:56:11.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:11.554">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:11.555" starttime="20171013 17:56:11.554"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:11.555">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.555" starttime="20171013 17:56:10.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:11.555" starttime="20171013 17:56:11.555"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:11.556">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:11.556">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:11.556">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:11.556" starttime="20171013 17:56:11.556"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:11.556">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:56:11.556" starttime="20171013 17:56:10.060"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:11.557">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 17:56:11.557" starttime="20171013 17:56:10.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:11.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:56:11.557">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 17:56:11.558" starttime="20171013 17:56:11.557"></status>
</kw>
<status status="FAIL" endtime="20171013 17:56:11.558" starttime="20171013 17:56:10.060"></status>
</kw>
<status status="FAIL" endtime="20171013 17:56:11.558" starttime="20171013 17:56:01.503"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:21.570">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:21.570" starttime="20171013 17:56:21.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:21.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:21.571" starttime="20171013 17:56:21.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:21.571">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:21.571" starttime="20171013 17:56:21.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:21.573">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:21.573" starttime="20171013 17:56:21.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:23.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:23.176" starttime="20171013 17:56:21.573"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:23.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:23.176">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:23.176" starttime="20171013 17:56:21.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:23.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:23.177" starttime="20171013 17:56:23.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:23.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:23.178" starttime="20171013 17:56:23.177"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.178" starttime="20171013 17:56:21.569"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.178" starttime="20171013 17:56:21.568"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.178" starttime="20171013 17:56:21.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:23.179">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:56:23.179" starttime="20171013 17:56:23.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:23.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:23.181" starttime="20171013 17:56:23.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:23.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:23.182" starttime="20171013 17:56:23.182"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.182" starttime="20171013 17:56:23.181"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.182" starttime="20171013 17:56:23.180"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:23.182" starttime="20171013 17:56:23.179"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:27.464">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.464" starttime="20171013 17:56:23.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.467">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:27.467" starttime="20171013 17:56:27.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.467">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:27.468" starttime="20171013 17:56:27.467"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.468" starttime="20171013 17:56:27.467"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.468" starttime="20171013 17:56:27.465"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.468" starttime="20171013 17:56:27.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:27.469">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:27.469" starttime="20171013 17:56:27.469"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:27.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.469" starttime="20171013 17:56:21.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.470" starttime="20171013 17:56:27.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.471">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:27.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:27.471">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:27.471" starttime="20171013 17:56:27.470"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:27.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:56:27.471" starttime="20171013 17:56:21.565"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:27.471">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:56:27.472" starttime="20171013 17:56:21.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:27.472" starttime="20171013 17:56:27.472"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.472" starttime="20171013 17:56:21.562"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.476">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:27.477" starttime="20171013 17:56:27.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:27.477" starttime="20171013 17:56:27.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.478">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:27.478" starttime="20171013 17:56:27.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:27.479" starttime="20171013 17:56:27.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:27.875" starttime="20171013 17:56:27.479"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:27.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:27.875">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.875" starttime="20171013 17:56:27.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.876" starttime="20171013 17:56:27.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:27.876" starttime="20171013 17:56:27.876"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.877" starttime="20171013 17:56:27.475"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.877" starttime="20171013 17:56:27.475"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.877" starttime="20171013 17:56:27.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.877">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:56:27.877" starttime="20171013 17:56:27.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:27.880">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:27.880" starttime="20171013 17:56:27.879"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:27.881">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:27.881" starttime="20171013 17:56:27.881"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.881" starttime="20171013 17:56:27.880"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.881" starttime="20171013 17:56:27.878"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:27.881" starttime="20171013 17:56:27.878"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:35.815">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:35.815" starttime="20171013 17:56:27.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.817">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:35.817" starttime="20171013 17:56:35.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:35.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:35.818" starttime="20171013 17:56:35.817"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:35.818" starttime="20171013 17:56:35.817"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:35.818" starttime="20171013 17:56:35.816"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:35.818" starttime="20171013 17:56:35.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:35.821">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:35.821" starttime="20171013 17:56:35.821"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:35.821">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:35.821" starttime="20171013 17:56:27.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:35.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:35.822" starttime="20171013 17:56:35.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:35.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:35.823">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:35.823" starttime="20171013 17:56:35.822"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:35.823">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:56:35.823" starttime="20171013 17:56:27.473"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:35.823">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:56:35.823" starttime="20171013 17:56:27.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:35.824" starttime="20171013 17:56:35.824"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:35.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:35.828" starttime="20171013 17:56:35.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:35.829" starttime="20171013 17:56:35.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.829">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:35.830" starttime="20171013 17:56:35.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:35.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:35.830" starttime="20171013 17:56:35.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:36.688">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:36.688" starttime="20171013 17:56:35.831"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:36.688">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:36.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:36.688" starttime="20171013 17:56:35.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:36.689">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:36.689" starttime="20171013 17:56:36.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:36.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:36.690" starttime="20171013 17:56:36.689"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.690" starttime="20171013 17:56:35.827"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.690" starttime="20171013 17:56:35.827"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.690" starttime="20171013 17:56:35.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:36.691">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:56:36.691" starttime="20171013 17:56:36.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:36.693">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:36.693" starttime="20171013 17:56:36.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:36.694">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:36.694" starttime="20171013 17:56:36.693"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.694" starttime="20171013 17:56:36.693"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.694" starttime="20171013 17:56:36.691"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:36.694" starttime="20171013 17:56:36.691"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.021">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:41.022">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:41.022" starttime="20171013 17:56:36.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.025">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:41.025" starttime="20171013 17:56:41.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:41.026">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:41.027" starttime="20171013 17:56:41.026"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:41.027" starttime="20171013 17:56:41.025"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:41.027" starttime="20171013 17:56:41.023"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:41.027" starttime="20171013 17:56:41.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:41.027">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:41.027" starttime="20171013 17:56:41.027"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:41.028">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:41.028" starttime="20171013 17:56:35.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:41.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:41.028" starttime="20171013 17:56:41.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.029">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:41.029">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:41.029">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:41.029" starttime="20171013 17:56:41.029"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:41.030">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:56:41.030" starttime="20171013 17:56:35.825"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:41.030">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:56:41.030" starttime="20171013 17:56:35.824"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:41.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:41.031" starttime="20171013 17:56:41.030"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:41.035">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:41.035" starttime="20171013 17:56:41.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.036">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:41.036" starttime="20171013 17:56:41.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.036">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:41.036" starttime="20171013 17:56:41.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:41.037">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:41.037" starttime="20171013 17:56:41.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:42.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:42.158" starttime="20171013 17:56:41.038"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:42.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:42.159">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:42.159" starttime="20171013 17:56:41.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:42.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:42.159" starttime="20171013 17:56:42.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:42.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:42.160" starttime="20171013 17:56:42.160"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.160" starttime="20171013 17:56:41.033"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.160" starttime="20171013 17:56:41.033"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.160" starttime="20171013 17:56:41.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:42.161">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:56:42.161" starttime="20171013 17:56:42.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:42.163">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:42.163" starttime="20171013 17:56:42.163"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:42.164">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:42.165" starttime="20171013 17:56:42.164"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.165" starttime="20171013 17:56:42.164"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.165" starttime="20171013 17:56:42.162"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:42.165" starttime="20171013 17:56:42.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:43.211">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:43.211">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:43.211" starttime="20171013 17:56:42.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:43.213">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:43.213" starttime="20171013 17:56:43.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:43.214">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:43.214" starttime="20171013 17:56:43.214"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:43.215" starttime="20171013 17:56:43.213"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:43.215" starttime="20171013 17:56:43.212"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:43.215" starttime="20171013 17:56:43.211"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:43.215">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:43.215" starttime="20171013 17:56:43.215"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:43.215">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:43.215" starttime="20171013 17:56:41.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:43.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:43.216" starttime="20171013 17:56:43.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:43.217">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:43.217">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:43.217">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:43.217" starttime="20171013 17:56:43.216"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:43.217">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:56:43.217" starttime="20171013 17:56:41.031"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:43.217">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:56:43.217" starttime="20171013 17:56:41.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:43.218">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:56:43.218">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:56:43.218" starttime="20171013 17:56:43.218"></status>
</kw>
<status status="FAIL" endtime="20171013 17:56:43.218" starttime="20171013 17:56:35.824"></status>
</kw>
<status status="FAIL" endtime="20171013 17:56:43.219" starttime="20171013 17:56:21.560"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:53.224">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:53.224" starttime="20171013 17:56:53.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:53.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:53.225" starttime="20171013 17:56:53.224"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:53.225">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:53.225" starttime="20171013 17:56:53.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:53.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:53.226" starttime="20171013 17:56:53.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.121">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:54.121" starttime="20171013 17:56:53.227"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:54.121">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:54.121">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.121" starttime="20171013 17:56:53.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.122">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.122" starttime="20171013 17:56:54.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.122" starttime="20171013 17:56:54.122"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.122" starttime="20171013 17:56:53.223"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.123" starttime="20171013 17:56:53.222"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.123" starttime="20171013 17:56:53.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.123">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:56:54.123" starttime="20171013 17:56:54.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.125">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:54.125" starttime="20171013 17:56:54.125"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.126">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:54.126" starttime="20171013 17:56:54.126"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.127" starttime="20171013 17:56:54.126"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.127" starttime="20171013 17:56:54.124"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.127" starttime="20171013 17:56:54.124"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.653">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:54.653">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.653" starttime="20171013 17:56:54.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.655">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:54.655" starttime="20171013 17:56:54.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.656">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:54.656" starttime="20171013 17:56:54.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.656" starttime="20171013 17:56:54.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.656" starttime="20171013 17:56:54.654"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.656" starttime="20171013 17:56:54.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:54.657">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:54.657" starttime="20171013 17:56:54.656"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:54.657">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.657" starttime="20171013 17:56:53.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:54.658" starttime="20171013 17:56:54.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:54.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:54.658">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:54.658" starttime="20171013 17:56:54.658"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:54.659">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:56:54.659" starttime="20171013 17:56:53.221"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:54.659">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:56:54.659" starttime="20171013 17:56:53.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:54.660" starttime="20171013 17:56:54.660"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:54.660" starttime="20171013 17:56:53.220"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:54.664">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:54.664" starttime="20171013 17:56:54.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:54.665" starttime="20171013 17:56:54.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.666">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:54.666" starttime="20171013 17:56:54.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:54.666">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:54.666" starttime="20171013 17:56:54.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:55.784">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:55.784" starttime="20171013 17:56:54.667"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:55.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:55.784">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:55.784" starttime="20171013 17:56:54.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:55.785">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:55.785" starttime="20171013 17:56:55.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:55.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:55.786" starttime="20171013 17:56:55.785"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.786" starttime="20171013 17:56:54.663"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.786" starttime="20171013 17:56:54.662"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.786" starttime="20171013 17:56:54.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:55.787">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:56:55.787" starttime="20171013 17:56:55.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:55.789">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:55.789" starttime="20171013 17:56:55.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:55.790">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:55.790" starttime="20171013 17:56:55.790"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.790" starttime="20171013 17:56:55.789"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.790" starttime="20171013 17:56:55.788"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:55.790" starttime="20171013 17:56:55.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.727">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:56:56.728">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:56.728" starttime="20171013 17:56:55.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.729">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:56.729" starttime="20171013 17:56:56.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:56.730">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:56:56.731" starttime="20171013 17:56:56.730"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:56.731" starttime="20171013 17:56:56.730"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:56.731" starttime="20171013 17:56:56.728"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:56.731" starttime="20171013 17:56:56.728"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:56:56.731">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:56:56.731" starttime="20171013 17:56:56.731"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:56.732">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:56.732" starttime="20171013 17:56:54.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:56.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:56.732" starttime="20171013 17:56:56.732"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.733">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:56:56.733">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:56:56.733">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:56:56.733" starttime="20171013 17:56:56.733"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:56.733">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:56:56.733" starttime="20171013 17:56:54.661"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:56.734">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:56:56.734" starttime="20171013 17:56:54.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:56:56.734" starttime="20171013 17:56:56.734"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:56.739">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:56:56.739" starttime="20171013 17:56:56.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:56:56.740" starttime="20171013 17:56:56.740"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.741">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:56:56.741" starttime="20171013 17:56:56.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:56.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:56:56.741" starttime="20171013 17:56:56.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:58.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:56:58.154" starttime="20171013 17:56:56.742"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:56:58.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:56:58.154">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:56:58.154" starttime="20171013 17:56:56.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:58.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:58.155" starttime="20171013 17:56:58.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:58.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:56:58.156" starttime="20171013 17:56:58.155"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.156" starttime="20171013 17:56:56.738"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.156" starttime="20171013 17:56:56.738"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.156" starttime="20171013 17:56:56.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:58.157">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:56:58.157" starttime="20171013 17:56:58.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:56:58.159">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:58.159" starttime="20171013 17:56:58.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:56:58.160">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:56:58.160" starttime="20171013 17:56:58.160"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.160" starttime="20171013 17:56:58.159"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.160" starttime="20171013 17:56:58.157"></status>
</kw>
<status status="PASS" endtime="20171013 17:56:58.160" starttime="20171013 17:56:58.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.002">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:01.003">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:01.003" starttime="20171013 17:56:58.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.004">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:01.005" starttime="20171013 17:57:01.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:01.006">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:01.006" starttime="20171013 17:57:01.005"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:01.006" starttime="20171013 17:57:01.005"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:01.006" starttime="20171013 17:57:01.003"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:01.006" starttime="20171013 17:57:01.003"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:01.006">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:01.006" starttime="20171013 17:57:01.006"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:01.007">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:01.007" starttime="20171013 17:56:56.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:01.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:01.007" starttime="20171013 17:57:01.007"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.008">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:01.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:01.008">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:01.008" starttime="20171013 17:57:01.008"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:01.008">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:57:01.008" starttime="20171013 17:56:56.735"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:01.009">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:57:01.009" starttime="20171013 17:56:56.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:01.009">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:01.009" starttime="20171013 17:57:01.009"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:01.013">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:01.013" starttime="20171013 17:57:01.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:01.014" starttime="20171013 17:57:01.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.015">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:01.015" starttime="20171013 17:57:01.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:01.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:01.015" starttime="20171013 17:57:01.015"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:02.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:02.516" starttime="20171013 17:57:01.016"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:02.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:02.516">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:02.516" starttime="20171013 17:57:01.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:02.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:02.516" starttime="20171013 17:57:02.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:02.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:02.517" starttime="20171013 17:57:02.517"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.517" starttime="20171013 17:57:01.012"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.517" starttime="20171013 17:57:01.012"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.518" starttime="20171013 17:57:01.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:02.518">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:57:02.518" starttime="20171013 17:57:02.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:02.520">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:02.520" starttime="20171013 17:57:02.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:02.521">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:02.521" starttime="20171013 17:57:02.521"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.521" starttime="20171013 17:57:02.520"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.522" starttime="20171013 17:57:02.519"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:02.522" starttime="20171013 17:57:02.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:05.033">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:05.033">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:05.033" starttime="20171013 17:57:02.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:05.035">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:05.035" starttime="20171013 17:57:05.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:05.036">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:05.036" starttime="20171013 17:57:05.036"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:05.037" starttime="20171013 17:57:05.036"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:05.037" starttime="20171013 17:57:05.034"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:05.037" starttime="20171013 17:57:05.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:05.037">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:05.037" starttime="20171013 17:57:05.037"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:05.037">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:05.037" starttime="20171013 17:57:01.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:05.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:05.038" starttime="20171013 17:57:05.038"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:05.039">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:05.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:05.039">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:05.039" starttime="20171013 17:57:05.038"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:05.039">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:57:05.039" starttime="20171013 17:57:01.010"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:05.039">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:57:05.039" starttime="20171013 17:57:01.010"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:05.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:57:05.040">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:57:05.040" starttime="20171013 17:57:05.040"></status>
</kw>
<status status="FAIL" endtime="20171013 17:57:05.040" starttime="20171013 17:56:56.734"></status>
</kw>
<status status="FAIL" endtime="20171013 17:57:05.041" starttime="20171013 17:56:53.219"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:15.046">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:15.046" starttime="20171013 17:57:15.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:15.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:15.047" starttime="20171013 17:57:15.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:15.048">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:15.048" starttime="20171013 17:57:15.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:15.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:15.048" starttime="20171013 17:57:15.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:17.070">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:17.070" starttime="20171013 17:57:15.049"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:17.070">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:17.070">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:17.070" starttime="20171013 17:57:15.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:17.071">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:17.071" starttime="20171013 17:57:17.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:17.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:17.072" starttime="20171013 17:57:17.072"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.072" starttime="20171013 17:57:15.045"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.073" starttime="20171013 17:57:15.044"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.073" starttime="20171013 17:57:15.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:17.074">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:57:17.074" starttime="20171013 17:57:17.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:17.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:17.077" starttime="20171013 17:57:17.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:17.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:17.079" starttime="20171013 17:57:17.078"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.079" starttime="20171013 17:57:17.077"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.079" starttime="20171013 17:57:17.075"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:17.079" starttime="20171013 17:57:17.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.117">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:20.118">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:20.118" starttime="20171013 17:57:17.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.119">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:20.119" starttime="20171013 17:57:20.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:20.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:20.121" starttime="20171013 17:57:20.120"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:20.121" starttime="20171013 17:57:20.120"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:20.121" starttime="20171013 17:57:20.118"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:20.121" starttime="20171013 17:57:20.118"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:20.122">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:20.122" starttime="20171013 17:57:20.121"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:20.122">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:20.122" starttime="20171013 17:57:15.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:20.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:20.123" starttime="20171013 17:57:20.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:20.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:20.123">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:20.123" starttime="20171013 17:57:20.123"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:20.124">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:57:20.124" starttime="20171013 17:57:15.042"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:20.124">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:57:20.124" starttime="20171013 17:57:15.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:57:20.124" starttime="20171013 17:57:20.124"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:20.125" starttime="20171013 17:57:15.042"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:20.129">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:20.129" starttime="20171013 17:57:20.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:20.130" starttime="20171013 17:57:20.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.130">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:20.130" starttime="20171013 17:57:20.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:20.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:20.131" starttime="20171013 17:57:20.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:21.508">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:21.508" starttime="20171013 17:57:20.132"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:21.508">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:21.509">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:21.509" starttime="20171013 17:57:20.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:21.509">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:21.509" starttime="20171013 17:57:21.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:21.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:21.510" starttime="20171013 17:57:21.510"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.510" starttime="20171013 17:57:20.128"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.510" starttime="20171013 17:57:20.127"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.510" starttime="20171013 17:57:20.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:21.511">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:57:21.511" starttime="20171013 17:57:21.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:21.513">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:21.513" starttime="20171013 17:57:21.512"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:21.514">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:21.514" starttime="20171013 17:57:21.514"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.515" starttime="20171013 17:57:21.514"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.515" starttime="20171013 17:57:21.512"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:21.515" starttime="20171013 17:57:21.511"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:24.539">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:24.539" starttime="20171013 17:57:21.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.541">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:24.541" starttime="20171013 17:57:24.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:24.542">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:24.542" starttime="20171013 17:57:24.541"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:24.542" starttime="20171013 17:57:24.541"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:24.542" starttime="20171013 17:57:24.540"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:24.542" starttime="20171013 17:57:24.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:24.542">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:24.543" starttime="20171013 17:57:24.542"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:24.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:24.543" starttime="20171013 17:57:20.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:24.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:24.543" starttime="20171013 17:57:24.543"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.544">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:24.544">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:24.544">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:24.544" starttime="20171013 17:57:24.544"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:24.545">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:57:24.545" starttime="20171013 17:57:20.126"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:24.545">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:57:24.545" starttime="20171013 17:57:20.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:57:24.546" starttime="20171013 17:57:24.545"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:24.549">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:24.550" starttime="20171013 17:57:24.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:24.551" starttime="20171013 17:57:24.550"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.551">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:24.551" starttime="20171013 17:57:24.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:24.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:24.552" starttime="20171013 17:57:24.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:26.232" starttime="20171013 17:57:24.553"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:26.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:26.232">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.232" starttime="20171013 17:57:24.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.233">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.233" starttime="20171013 17:57:26.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.234" starttime="20171013 17:57:26.233"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.234" starttime="20171013 17:57:24.549"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.234" starttime="20171013 17:57:24.548"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.234" starttime="20171013 17:57:24.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.235">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:57:26.235" starttime="20171013 17:57:26.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.237">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:26.237" starttime="20171013 17:57:26.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.238">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:26.238" starttime="20171013 17:57:26.238"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.238" starttime="20171013 17:57:26.237"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.238" starttime="20171013 17:57:26.235"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.238" starttime="20171013 17:57:26.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.455">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:26.455">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.455" starttime="20171013 17:57:26.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.457">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:26.457" starttime="20171013 17:57:26.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.458">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:26.458" starttime="20171013 17:57:26.458"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.458" starttime="20171013 17:57:26.457"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.458" starttime="20171013 17:57:26.456"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:26.458" starttime="20171013 17:57:26.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:26.459">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:26.459" starttime="20171013 17:57:26.459"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:26.459">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.459" starttime="20171013 17:57:24.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.460" starttime="20171013 17:57:26.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.460">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:26.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:26.460">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:26.461" starttime="20171013 17:57:26.460"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:26.461">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:57:26.461" starttime="20171013 17:57:24.546"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:26.461">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:57:26.461" starttime="20171013 17:57:24.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.462">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:26.462" starttime="20171013 17:57:26.461"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:26.466">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:26.466" starttime="20171013 17:57:26.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:26.467" starttime="20171013 17:57:26.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.468">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:26.468" starttime="20171013 17:57:26.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:26.468">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:26.468" starttime="20171013 17:57:26.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:27.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:27.328" starttime="20171013 17:57:26.469"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:27.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:27.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:27.328" starttime="20171013 17:57:26.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:27.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:27.329" starttime="20171013 17:57:27.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:27.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:27.330" starttime="20171013 17:57:27.329"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.330" starttime="20171013 17:57:26.464"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.330" starttime="20171013 17:57:26.464"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.330" starttime="20171013 17:57:26.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:27.331">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:57:27.331" starttime="20171013 17:57:27.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:27.333">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:27.333" starttime="20171013 17:57:27.332"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:27.334">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:27.334" starttime="20171013 17:57:27.333"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.334" starttime="20171013 17:57:27.333"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.334" starttime="20171013 17:57:27.331"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:27.334" starttime="20171013 17:57:27.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:28.675">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:28.675">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:28.675" starttime="20171013 17:57:27.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:28.677">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:28.677" starttime="20171013 17:57:28.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:28.678">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:28.679" starttime="20171013 17:57:28.678"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:28.679" starttime="20171013 17:57:28.677"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:28.679" starttime="20171013 17:57:28.676"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:28.679" starttime="20171013 17:57:28.676"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:28.679">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:28.680" starttime="20171013 17:57:28.679"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:28.680">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:28.680" starttime="20171013 17:57:26.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:28.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:28.681" starttime="20171013 17:57:28.681"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:28.682">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:28.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:28.682">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:28.682" starttime="20171013 17:57:28.682"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:28.682">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:57:28.682" starttime="20171013 17:57:26.462"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:28.683">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171013 17:57:28.683" starttime="20171013 17:57:26.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:28.683">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 17:57:28.683">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171013 17:57:28.683" starttime="20171013 17:57:28.683"></status>
</kw>
<status status="FAIL" endtime="20171013 17:57:28.684" starttime="20171013 17:57:24.546"></status>
</kw>
<status status="FAIL" endtime="20171013 17:57:28.684" starttime="20171013 17:57:15.041"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:38.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:38.690" starttime="20171013 17:57:38.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:38.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:38.691" starttime="20171013 17:57:38.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:38.692">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:38.692" starttime="20171013 17:57:38.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:38.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:38.692" starttime="20171013 17:57:38.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:40.753">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:40.753" starttime="20171013 17:57:38.693"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:40.754">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:40.754">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:40.754" starttime="20171013 17:57:38.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:40.754">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:40.754" starttime="20171013 17:57:40.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:40.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:40.755" starttime="20171013 17:57:40.755"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.755" starttime="20171013 17:57:38.689"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.755" starttime="20171013 17:57:38.689"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.756" starttime="20171013 17:57:38.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:40.756">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:57:40.756" starttime="20171013 17:57:40.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:40.758">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:40.758" starttime="20171013 17:57:40.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:40.759">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:40.759" starttime="20171013 17:57:40.759"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.760" starttime="20171013 17:57:40.759"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.760" starttime="20171013 17:57:40.757"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:40.760" starttime="20171013 17:57:40.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.194">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:45.195">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:45.195" starttime="20171013 17:57:40.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:45.197" starttime="20171013 17:57:45.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:45.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:45.198" starttime="20171013 17:57:45.197"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:45.198" starttime="20171013 17:57:45.197"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:45.198" starttime="20171013 17:57:45.196"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:45.198" starttime="20171013 17:57:45.195"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:45.198">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:45.198" starttime="20171013 17:57:45.198"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:45.199">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:45.199" starttime="20171013 17:57:38.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:45.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:45.199" starttime="20171013 17:57:45.199"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:45.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:45.200">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:45.200" starttime="20171013 17:57:45.200"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:45.200">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:57:45.200" starttime="20171013 17:57:38.686"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:45.201">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:57:45.201" starttime="20171013 17:57:38.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:57:45.201" starttime="20171013 17:57:45.201"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:45.201" starttime="20171013 17:57:38.685"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:45.205">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:45.206" starttime="20171013 17:57:45.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:45.206" starttime="20171013 17:57:45.206"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.207">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:45.207" starttime="20171013 17:57:45.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:45.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:45.208" starttime="20171013 17:57:45.207"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:47.414">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:47.414" starttime="20171013 17:57:45.208"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:47.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:47.414">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:47.414" starttime="20171013 17:57:45.208"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:47.415">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:47.415" starttime="20171013 17:57:47.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:47.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:47.416" starttime="20171013 17:57:47.415"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.416" starttime="20171013 17:57:45.204"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.416" starttime="20171013 17:57:45.204"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.416" starttime="20171013 17:57:45.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:47.417">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:57:47.417" starttime="20171013 17:57:47.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:47.420">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:47.420" starttime="20171013 17:57:47.419"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:47.421">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:47.422" starttime="20171013 17:57:47.421"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.422" starttime="20171013 17:57:47.420"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.422" starttime="20171013 17:57:47.418"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:47.422" starttime="20171013 17:57:47.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.571">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:57:50.572">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:50.572" starttime="20171013 17:57:47.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.574">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:50.574" starttime="20171013 17:57:50.573"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:50.574">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:57:50.575" starttime="20171013 17:57:50.574"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:50.575" starttime="20171013 17:57:50.574"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:50.575" starttime="20171013 17:57:50.572"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:50.575" starttime="20171013 17:57:50.572"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:57:50.575">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:57:50.575" starttime="20171013 17:57:50.575"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:50.576">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:50.576" starttime="20171013 17:57:45.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:50.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:50.576" starttime="20171013 17:57:50.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.577">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:57:50.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:57:50.577">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:57:50.577" starttime="20171013 17:57:50.577"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:50.577">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 17:57:50.577" starttime="20171013 17:57:45.202"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:50.578">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 17:57:50.578" starttime="20171013 17:57:45.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:57:50.578" starttime="20171013 17:57:50.578"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:50.583">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:57:50.583" starttime="20171013 17:57:50.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:57:50.584" starttime="20171013 17:57:50.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:57:50.584" starttime="20171013 17:57:50.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:50.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:57:50.585" starttime="20171013 17:57:50.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:52.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:57:52.065" starttime="20171013 17:57:50.586"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:57:52.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:57:52.065">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:57:52.065" starttime="20171013 17:57:50.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:52.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:52.066" starttime="20171013 17:57:52.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:52.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:57:52.067" starttime="20171013 17:57:52.067"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.067" starttime="20171013 17:57:50.582"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.067" starttime="20171013 17:57:50.581"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.067" starttime="20171013 17:57:50.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:52.068">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 17:57:52.068" starttime="20171013 17:57:52.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:57:52.070">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:52.070" starttime="20171013 17:57:52.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:57:52.071">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:57:52.071" starttime="20171013 17:57:52.071"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.071" starttime="20171013 17:57:52.070"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.071" starttime="20171013 17:57:52.069"></status>
</kw>
<status status="PASS" endtime="20171013 17:57:52.071" starttime="20171013 17:57:52.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.334">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:58:01.334">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:01.334" starttime="20171013 17:57:52.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.336">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:01.336" starttime="20171013 17:58:01.336"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:01.338">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:01.338" starttime="20171013 17:58:01.337"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:01.338" starttime="20171013 17:58:01.336"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:01.338" starttime="20171013 17:58:01.335"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:01.338" starttime="20171013 17:58:01.335"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:58:01.338">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:58:01.339" starttime="20171013 17:58:01.338"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:01.339">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:01.339" starttime="20171013 17:57:50.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:01.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:01.340" starttime="20171013 17:58:01.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.341">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:58:01.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:58:01.341">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:58:01.341" starttime="20171013 17:58:01.340"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:01.341">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:58:01.341" starttime="20171013 17:57:50.579"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:01.342">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171013 17:58:01.342" starttime="20171013 17:57:50.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:01.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:01.343" starttime="20171013 17:58:01.342"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:01.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:58:01.348" starttime="20171013 17:58:01.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:58:01.348" starttime="20171013 17:58:01.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.349">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:58:01.349" starttime="20171013 17:58:01.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:01.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:58:01.350" starttime="20171013 17:58:01.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:03.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:58:03.783" starttime="20171013 17:58:01.351"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:03.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:58:03.783">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:03.783" starttime="20171013 17:58:01.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:03.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:03.784" starttime="20171013 17:58:03.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:03.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:03.785" starttime="20171013 17:58:03.785"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.785" starttime="20171013 17:58:01.346"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.785" starttime="20171013 17:58:01.346"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.785" starttime="20171013 17:58:01.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:03.786">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171013 17:58:03.786" starttime="20171013 17:58:03.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:03.788">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:58:03.788" starttime="20171013 17:58:03.787"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:03.789">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:58:03.789" starttime="20171013 17:58:03.789"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.789" starttime="20171013 17:58:03.788"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.790" starttime="20171013 17:58:03.787"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:03.790" starttime="20171013 17:58:03.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:10.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:58:10.225">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:10.225" starttime="20171013 17:58:03.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:10.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:10.227" starttime="20171013 17:58:10.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:10.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:10.228" starttime="20171013 17:58:10.228"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.228" starttime="20171013 17:58:10.227"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.229" starttime="20171013 17:58:10.226"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.229" starttime="20171013 17:58:10.226"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:58:10.229">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:58:10.229" starttime="20171013 17:58:10.229"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:10.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:10.229" starttime="20171013 17:58:01.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:10.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:10.230" starttime="20171013 17:58:10.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:10.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:58:10.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:58:10.231">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:58:10.231" starttime="20171013 17:58:10.230"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:10.231">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status status="PASS" endtime="20171013 17:58:10.231" starttime="20171013 17:58:01.344"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:10.231">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status status="PASS" endtime="20171013 17:58:10.231" starttime="20171013 17:58:01.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:10.232">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:10.232" starttime="20171013 17:58:10.232"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.232" starttime="20171013 17:57:50.578"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.232" starttime="20171013 17:57:38.684"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.232" starttime="20171013 17:53:01.717"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:10.232" starttime="20171013 17:52:56.335"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.233">Slept 30 seconds</msg>
<status status="PASS" endtime="20171013 17:58:40.235" starttime="20171013 17:58:10.233"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.235" starttime="20171013 17:52:53.064"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:40.235">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.237">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20171013 17:58:40.237" starttime="20171013 17:58:40.237"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.238">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171013 17:58:40.239" starttime="20171013 17:58:40.238"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.250">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:58:40.252" starttime="20171013 17:58:40.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:58:40.253" starttime="20171013 17:58:40.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.254">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:58:40.254" starttime="20171013 17:58:40.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:58:40.255" starttime="20171013 17:58:40.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:58:40.678" starttime="20171013 17:58:40.255"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:40.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:58:40.679">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:40.679" starttime="20171013 17:58:40.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.679">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:40.679" starttime="20171013 17:58:40.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:40.680" starttime="20171013 17:58:40.680"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.680" starttime="20171013 17:58:40.241"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.680" starttime="20171013 17:58:40.241"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.681" starttime="20171013 17:58:40.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.681">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171013 17:58:40.681" starttime="20171013 17:58:40.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:58:40.682" starttime="20171013 17:58:40.681"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:58:40.682" starttime="20171013 17:58:40.682"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:40.684">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20171013 17:58:40.684" starttime="20171013 17:58:40.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:40.686">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171013 17:58:40.686" starttime="20171013 17:58:40.685"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.686" starttime="20171013 17:58:40.684"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:40.686" starttime="20171013 17:58:40.682"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.298">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 17:58:50.298">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:50.298" starttime="20171013 17:58:40.686"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.300">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:50.300" starttime="20171013 17:58:50.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:50.301">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:58:50.302" starttime="20171013 17:58:50.301"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:50.302" starttime="20171013 17:58:50.300"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:50.302" starttime="20171013 17:58:50.299"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:58:50.302">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:58:50.302" starttime="20171013 17:58:50.302"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:50.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:50.303" starttime="20171013 17:58:40.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:50.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:50.303" starttime="20171013 17:58:50.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.304">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:58:50.304">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:58:50.305">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:58:50.305" starttime="20171013 17:58:50.304"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:50.305" starttime="20171013 17:58:40.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 17:58:50.306" starttime="20171013 17:58:50.305"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:50.315">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:58:50.316" starttime="20171013 17:58:50.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:58:50.317" starttime="20171013 17:58:50.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.318">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:58:50.318" starttime="20171013 17:58:50.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:50.319">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:58:50.319" starttime="20171013 17:58:50.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:51.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:58:51.337" starttime="20171013 17:58:50.321"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:58:51.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:58:51.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:58:51.337" starttime="20171013 17:58:50.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:51.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:51.338" starttime="20171013 17:58:51.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:51.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:58:51.339" starttime="20171013 17:58:51.338"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.339" starttime="20171013 17:58:50.314"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.339" starttime="20171013 17:58:50.313"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.339" starttime="20171013 17:58:50.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:51.340">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:58:51.340" starttime="20171013 17:58:51.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:58:51.342">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:58:51.342" starttime="20171013 17:58:51.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:58:51.343">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:58:51.343" starttime="20171013 17:58:51.343"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.343" starttime="20171013 17:58:51.342"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.343" starttime="20171013 17:58:51.341"></status>
</kw>
<status status="PASS" endtime="20171013 17:58:51.343" starttime="20171013 17:58:51.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171013 17:59:01.353">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171013 17:59:12.888">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171013 17:59:18.886">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:59:18.886">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:18.886" starttime="20171013 17:58:51.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:18.888">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:18.888" starttime="20171013 17:59:18.888"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:18.889">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:18.889" starttime="20171013 17:59:18.889"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:18.889" starttime="20171013 17:59:18.888"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:18.889" starttime="20171013 17:59:18.887"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:18.889" starttime="20171013 17:59:18.886"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:59:18.890">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:59:18.890" starttime="20171013 17:59:18.890"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:18.890">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:18.890" starttime="20171013 17:58:50.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:18.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:18.891" starttime="20171013 17:59:18.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:18.891">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:59:18.891">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:59:18.892">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:59:18.892" starttime="20171013 17:59:18.891"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:18.892">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:59:18.892" starttime="20171013 17:58:50.310"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:18.892">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:59:18.893" starttime="20171013 17:58:50.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:59:18.893">Off != On</msg>
<status status="FAIL" endtime="20171013 17:59:18.894" starttime="20171013 17:59:18.893"></status>
</kw>
<status status="FAIL" endtime="20171013 17:59:18.894" starttime="20171013 17:58:50.309"></status>
</kw>
<status status="FAIL" endtime="20171013 17:59:18.894" starttime="20171013 17:58:50.309"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:28.901">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:59:28.901" starttime="20171013 17:59:28.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:28.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:28.902" starttime="20171013 17:59:28.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:28.902">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:59:28.903" starttime="20171013 17:59:28.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:28.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:59:28.903" starttime="20171013 17:59:28.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:29.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:59:29.524" starttime="20171013 17:59:28.904"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:29.524">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:59:29.525">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:29.525" starttime="20171013 17:59:28.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:29.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:29.525" starttime="20171013 17:59:29.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:29.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:29.526" starttime="20171013 17:59:29.526"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.526" starttime="20171013 17:59:28.899"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.526" starttime="20171013 17:59:28.898"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.526" starttime="20171013 17:59:28.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:29.527">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:59:29.527" starttime="20171013 17:59:29.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:29.529">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:29.529" starttime="20171013 17:59:29.528"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:29.530">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:29.530" starttime="20171013 17:59:29.530"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.530" starttime="20171013 17:59:29.529"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.530" starttime="20171013 17:59:29.528"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:29.531" starttime="20171013 17:59:29.527"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:31.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:59:31.097">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:31.097" starttime="20171013 17:59:29.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:31.099">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:31.099" starttime="20171013 17:59:31.098"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:31.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:31.101" starttime="20171013 17:59:31.100"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:31.101" starttime="20171013 17:59:31.099"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:31.101" starttime="20171013 17:59:31.098"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:31.101" starttime="20171013 17:59:31.097"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:59:31.101">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:59:31.102" starttime="20171013 17:59:31.101"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:31.102">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:31.102" starttime="20171013 17:59:28.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:31.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:31.103" starttime="20171013 17:59:31.102"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:31.103">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:59:31.103">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:59:31.104">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:59:31.104" starttime="20171013 17:59:31.103"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:31.104">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 17:59:31.104" starttime="20171013 17:59:28.896"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:31.104">${power_state} = On</msg>
<status status="PASS" endtime="20171013 17:59:31.104" starttime="20171013 17:59:28.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 17:59:31.105">Off != On</msg>
<status status="FAIL" endtime="20171013 17:59:31.105" starttime="20171013 17:59:31.104"></status>
</kw>
<status status="FAIL" endtime="20171013 17:59:31.105" starttime="20171013 17:59:28.895"></status>
</kw>
<status status="FAIL" endtime="20171013 17:59:31.105" starttime="20171013 17:59:28.895"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.110">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:59:41.111" starttime="20171013 17:59:41.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:41.111" starttime="20171013 17:59:41.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.112">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:59:41.112" starttime="20171013 17:59:41.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:59:41.113" starttime="20171013 17:59:41.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:59:41.289" starttime="20171013 17:59:41.114"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:59:41.289">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.289" starttime="20171013 17:59:41.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.289">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.289" starttime="20171013 17:59:41.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.290" starttime="20171013 17:59:41.290"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.290" starttime="20171013 17:59:41.109"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.291" starttime="20171013 17:59:41.109"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.291" starttime="20171013 17:59:41.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.291">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:59:41.292" starttime="20171013 17:59:41.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.295">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:41.295" starttime="20171013 17:59:41.294"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.297">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:41.298" starttime="20171013 17:59:41.297"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.298" starttime="20171013 17:59:41.295"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.298" starttime="20171013 17:59:41.293"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.298" starttime="20171013 17:59:41.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.361">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:59:41.361">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.361" starttime="20171013 17:59:41.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:41.363" starttime="20171013 17:59:41.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.364">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:41.364" starttime="20171013 17:59:41.364"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.365" starttime="20171013 17:59:41.364"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.365" starttime="20171013 17:59:41.362"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.365" starttime="20171013 17:59:41.362"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:59:41.365">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:59:41.365" starttime="20171013 17:59:41.365"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.366">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.366" starttime="20171013 17:59:41.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.366" starttime="20171013 17:59:41.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.367">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:59:41.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:59:41.367">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:59:41.367" starttime="20171013 17:59:41.367"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.368">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 17:59:41.368" starttime="20171013 17:59:41.107"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.368">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 17:59:41.368" starttime="20171013 17:59:41.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:59:41.369" starttime="20171013 17:59:41.368"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.369" starttime="20171013 17:59:41.106"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.373">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:59:41.374" starttime="20171013 17:59:41.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:41.374" starttime="20171013 17:59:41.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.375">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:59:41.375" starttime="20171013 17:59:41.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:59:41.376" starttime="20171013 17:59:41.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:59:41.553" starttime="20171013 17:59:41.377"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:59:41.553">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.553" starttime="20171013 17:59:41.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.554" starttime="20171013 17:59:41.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.554" starttime="20171013 17:59:41.554"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.554" starttime="20171013 17:59:41.372"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.555" starttime="20171013 17:59:41.371"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.555" starttime="20171013 17:59:41.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.555">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 17:59:41.555" starttime="20171013 17:59:41.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:41.557" starttime="20171013 17:59:41.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.558">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:41.558" starttime="20171013 17:59:41.558"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.559" starttime="20171013 17:59:41.558"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.559" starttime="20171013 17:59:41.556"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.559" starttime="20171013 17:59:41.556"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.648">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 17:59:41.648">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.648" starttime="20171013 17:59:41.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.649">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:41.649" starttime="20171013 17:59:41.649"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.651">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:41.651" starttime="20171013 17:59:41.650"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.651" starttime="20171013 17:59:41.650"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.651" starttime="20171013 17:59:41.648"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.651" starttime="20171013 17:59:41.648"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:59:41.651">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:59:41.652" starttime="20171013 17:59:41.651"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.652">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.652" starttime="20171013 17:59:41.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:41.652" starttime="20171013 17:59:41.652"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.653">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:59:41.653">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:59:41.653">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:59:41.653" starttime="20171013 17:59:41.653"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.653">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171013 17:59:41.653" starttime="20171013 17:59:41.369"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.654">${host_state} = Off</msg>
<status status="PASS" endtime="20171013 17:59:41.654" starttime="20171013 17:59:41.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:59:41.654" starttime="20171013 17:59:41.654"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.654" starttime="20171013 17:59:41.106"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.655" starttime="20171013 17:58:50.307"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.655" starttime="20171013 17:58:50.306"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:41.655">${status} = True</msg>
<status status="PASS" endtime="20171013 17:59:41.655" starttime="20171013 17:58:50.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20171013 17:59:41.655" starttime="20171013 17:59:41.655"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:41.655" starttime="20171013 17:58:40.236"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.657">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20171013 17:59:41.657" starttime="20171013 17:59:41.656"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.658">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171013 17:59:41.658" starttime="20171013 17:59:41.657"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:41.661">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:59:41.661" starttime="20171013 17:59:41.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:41.662" starttime="20171013 17:59:41.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.662">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:59:41.662" starttime="20171013 17:59:41.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:41.663">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:59:41.663" starttime="20171013 17:59:41.663"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:42.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:59:42.708" starttime="20171013 17:59:41.664"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:42.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:59:42.708">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:42.708" starttime="20171013 17:59:41.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:42.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:42.709" starttime="20171013 17:59:42.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:42.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:42.709" starttime="20171013 17:59:42.709"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:42.709" starttime="20171013 17:59:41.660"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:42.710" starttime="20171013 17:59:41.659"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:42.710" starttime="20171013 17:59:41.659"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:42.710">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171013 17:59:42.710" starttime="20171013 17:59:42.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:42.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:42.711" starttime="20171013 17:59:42.711"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171013 17:59:42.712" starttime="20171013 17:59:42.711"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:42.713">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20171013 17:59:42.713" starttime="20171013 17:59:42.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:42.714">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171013 17:59:42.714" starttime="20171013 17:59:42.714"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:42.714" starttime="20171013 17:59:42.713"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:42.714" starttime="20171013 17:59:42.712"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.474">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 17:59:49.474">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:49.474" starttime="20171013 17:59:42.715"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.477">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:49.477" starttime="20171013 17:59:49.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:49.478">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 17:59:49.478" starttime="20171013 17:59:49.478"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:49.478" starttime="20171013 17:59:49.477"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:49.479" starttime="20171013 17:59:49.474"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 17:59:49.479">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 17:59:49.479" starttime="20171013 17:59:49.479"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:49.479">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:49.479" starttime="20171013 17:59:41.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:49.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:49.480" starttime="20171013 17:59:49.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.481">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 17:59:49.481">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 17:59:49.481">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 17:59:49.481" starttime="20171013 17:59:49.480"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:49.481" starttime="20171013 17:59:41.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 17:59:49.482" starttime="20171013 17:59:49.481"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:49.488">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 17:59:49.489" starttime="20171013 17:59:49.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 17:59:49.490" starttime="20171013 17:59:49.489"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.490">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 17:59:49.490" starttime="20171013 17:59:49.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:49.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 17:59:49.491" starttime="20171013 17:59:49.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:50.287">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 17:59:50.287" starttime="20171013 17:59:49.492"></status>
</kw>
<msg level="INFO" timestamp="20171013 17:59:50.287">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 17:59:50.287">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 17:59:50.287" starttime="20171013 17:59:49.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:50.288">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:50.288" starttime="20171013 17:59:50.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:50.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 17:59:50.289" starttime="20171013 17:59:50.289"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.289" starttime="20171013 17:59:49.486"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.289" starttime="20171013 17:59:49.486"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.289" starttime="20171013 17:59:49.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:50.290">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 17:59:50.290" starttime="20171013 17:59:50.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 17:59:50.292">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:50.292" starttime="20171013 17:59:50.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 17:59:50.293">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 17:59:50.293" starttime="20171013 17:59:50.293"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.293" starttime="20171013 17:59:50.292"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.293" starttime="20171013 17:59:50.291"></status>
</kw>
<status status="PASS" endtime="20171013 17:59:50.293" starttime="20171013 17:59:50.290"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171013 18:00:00.296">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171013 18:00:07.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:07.893">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:07.893" starttime="20171013 17:59:50.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:07.895">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:07.895" starttime="20171013 18:00:07.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:07.896">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:07.896" starttime="20171013 18:00:07.896"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:07.896" starttime="20171013 18:00:07.895"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:07.896" starttime="20171013 18:00:07.894"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:07.897" starttime="20171013 18:00:07.894"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:07.897">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:07.897" starttime="20171013 18:00:07.897"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:07.897">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:07.897" starttime="20171013 17:59:49.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:07.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:07.898" starttime="20171013 18:00:07.898"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:07.899">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:07.899">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:07.899">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:07.899" starttime="20171013 18:00:07.898"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:07.899">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:00:07.899" starttime="20171013 17:59:49.484"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:07.899">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:00:07.899" starttime="20171013 17:59:49.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:00:07.900">On != Off</msg>
<status status="FAIL" endtime="20171013 18:00:07.900" starttime="20171013 18:00:07.900"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:07.900" starttime="20171013 17:59:49.483"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:07.900" starttime="20171013 17:59:49.483"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:17.906">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:17.906" starttime="20171013 18:00:17.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:17.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:17.907" starttime="20171013 18:00:17.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:17.907">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:17.908" starttime="20171013 18:00:17.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:17.908">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:17.908" starttime="20171013 18:00:17.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.381">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:18.381" starttime="20171013 18:00:17.909"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:18.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:18.382">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.382" starttime="20171013 18:00:17.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.383" starttime="20171013 18:00:18.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.384" starttime="20171013 18:00:18.383"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.384" starttime="20171013 18:00:17.905"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.384" starttime="20171013 18:00:17.904"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.384" starttime="20171013 18:00:17.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.385">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:00:18.385" starttime="20171013 18:00:18.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.388">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:18.388" starttime="20171013 18:00:18.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.390">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:18.390" starttime="20171013 18:00:18.389"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.390" starttime="20171013 18:00:18.388"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.390" starttime="20171013 18:00:18.386"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.390" starttime="20171013 18:00:18.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.803">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:18.803">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.803" starttime="20171013 18:00:18.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:18.805" starttime="20171013 18:00:18.804"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.806">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:18.806" starttime="20171013 18:00:18.806"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.806" starttime="20171013 18:00:18.805"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.806" starttime="20171013 18:00:18.804"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.807" starttime="20171013 18:00:18.803"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:18.807">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:18.807" starttime="20171013 18:00:18.807"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:18.807">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.807" starttime="20171013 18:00:17.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:18.808" starttime="20171013 18:00:18.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.809">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:18.809">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:18.809">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:18.809" starttime="20171013 18:00:18.808"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:18.809">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:00:18.809" starttime="20171013 18:00:17.902"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:18.809">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:00:18.809" starttime="20171013 18:00:17.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:18.810" starttime="20171013 18:00:18.810"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:18.810" starttime="20171013 18:00:17.901"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:18.814">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:18.814" starttime="20171013 18:00:18.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:18.815" starttime="20171013 18:00:18.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.815">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:18.815" starttime="20171013 18:00:18.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:18.816">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:18.816" starttime="20171013 18:00:18.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:19.611" starttime="20171013 18:00:18.817"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:19.611">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:19.611">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.611" starttime="20171013 18:00:18.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.612" starttime="20171013 18:00:19.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.613" starttime="20171013 18:00:19.612"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.613" starttime="20171013 18:00:18.813"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.613" starttime="20171013 18:00:18.812"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.613" starttime="20171013 18:00:18.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.613">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:00:19.614" starttime="20171013 18:00:19.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.619">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:19.619" starttime="20171013 18:00:19.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.620">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:19.620" starttime="20171013 18:00:19.620"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.620" starttime="20171013 18:00:19.619"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.620" starttime="20171013 18:00:19.614"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.620" starttime="20171013 18:00:19.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.709">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:19.709">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.709" starttime="20171013 18:00:19.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.711">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:19.711" starttime="20171013 18:00:19.710"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.711">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:19.712" starttime="20171013 18:00:19.711"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.712" starttime="20171013 18:00:19.711"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.712" starttime="20171013 18:00:19.710"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:19.712" starttime="20171013 18:00:19.709"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:19.712">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:19.712" starttime="20171013 18:00:19.712"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:19.713">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.713" starttime="20171013 18:00:18.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:19.713" starttime="20171013 18:00:19.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.714">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:19.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:19.714">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:19.714" starttime="20171013 18:00:19.714"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:19.715">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:00:19.715" starttime="20171013 18:00:18.811"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:19.715">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:00:19.715" starttime="20171013 18:00:18.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:19.715" starttime="20171013 18:00:19.715"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:19.720">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:19.720" starttime="20171013 18:00:19.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:19.721" starttime="20171013 18:00:19.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.721">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:19.721" starttime="20171013 18:00:19.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:19.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:19.722" starttime="20171013 18:00:19.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.253">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:20.253" starttime="20171013 18:00:19.723"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:20.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:20.253">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.253" starttime="20171013 18:00:19.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.254">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.254" starttime="20171013 18:00:20.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.254">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.255" starttime="20171013 18:00:20.254"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.255" starttime="20171013 18:00:19.719"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.255" starttime="20171013 18:00:19.718"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.255" starttime="20171013 18:00:19.718"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:20.255">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:00:20.255" starttime="20171013 18:00:20.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:20.258">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:20.258" starttime="20171013 18:00:20.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.259">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:20.259" starttime="20171013 18:00:20.258"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.259" starttime="20171013 18:00:20.258"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.259" starttime="20171013 18:00:20.256"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.259" starttime="20171013 18:00:20.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:20.592">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:20.592">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.592" starttime="20171013 18:00:20.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:20.594">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:20.594" starttime="20171013 18:00:20.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.595">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:20.595" starttime="20171013 18:00:20.595"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.595" starttime="20171013 18:00:20.594"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.595" starttime="20171013 18:00:20.593"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:20.595" starttime="20171013 18:00:20.592"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:20.596">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:20.596" starttime="20171013 18:00:20.596"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:20.596">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.596" starttime="20171013 18:00:19.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:20.597" starttime="20171013 18:00:20.596"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:20.597">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:20.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:20.597">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:20.597" starttime="20171013 18:00:20.597"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:20.598">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171013 18:00:20.598" starttime="20171013 18:00:19.716"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:20.598">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171013 18:00:20.598" starttime="20171013 18:00:19.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:20.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:00:20.599">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20171013 18:00:20.599" starttime="20171013 18:00:20.598"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:20.599" starttime="20171013 18:00:19.716"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:20.599" starttime="20171013 18:00:17.901"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:30.605">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:30.605" starttime="20171013 18:00:30.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:30.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:30.606" starttime="20171013 18:00:30.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:30.606">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:30.606" starttime="20171013 18:00:30.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:30.607">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:30.607" starttime="20171013 18:00:30.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:30.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:30.953" starttime="20171013 18:00:30.608"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:30.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:30.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:30.953" starttime="20171013 18:00:30.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:30.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:30.954" starttime="20171013 18:00:30.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:30.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:30.955" starttime="20171013 18:00:30.954"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.955" starttime="20171013 18:00:30.604"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.955" starttime="20171013 18:00:30.603"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.955" starttime="20171013 18:00:30.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:30.956">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:00:30.956" starttime="20171013 18:00:30.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:30.959">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:30.959" starttime="20171013 18:00:30.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:30.961">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:30.961" starttime="20171013 18:00:30.960"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.961" starttime="20171013 18:00:30.960"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.961" starttime="20171013 18:00:30.957"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:30.961" starttime="20171013 18:00:30.957"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.166">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:31.167">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.167" starttime="20171013 18:00:30.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.169">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:31.169" starttime="20171013 18:00:31.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.170">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:31.170" starttime="20171013 18:00:31.170"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.170" starttime="20171013 18:00:31.169"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.171" starttime="20171013 18:00:31.167"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.171" starttime="20171013 18:00:31.167"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:31.171">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:31.171" starttime="20171013 18:00:31.171"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:31.171">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.171" starttime="20171013 18:00:30.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.172" starttime="20171013 18:00:31.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.173">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:31.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:31.173">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:31.173" starttime="20171013 18:00:31.172"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:31.173">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:00:31.173" starttime="20171013 18:00:30.601"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:31.173">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:00:31.174" starttime="20171013 18:00:30.601"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:31.174" starttime="20171013 18:00:31.174"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.174" starttime="20171013 18:00:30.600"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.178">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:31.178" starttime="20171013 18:00:31.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:31.179" starttime="20171013 18:00:31.178"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.179">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:31.179" starttime="20171013 18:00:31.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:31.180" starttime="20171013 18:00:31.180"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:31.802" starttime="20171013 18:00:31.181"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:31.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:31.803">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.803" starttime="20171013 18:00:31.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.803" starttime="20171013 18:00:31.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:31.804" starttime="20171013 18:00:31.804"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.804" starttime="20171013 18:00:31.177"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.804" starttime="20171013 18:00:31.176"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.805" starttime="20171013 18:00:31.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.805">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:00:31.805" starttime="20171013 18:00:31.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:31.808">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:31.808" starttime="20171013 18:00:31.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:31.809">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:31.809" starttime="20171013 18:00:31.808"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.809" starttime="20171013 18:00:31.808"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.809" starttime="20171013 18:00:31.806"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:31.809" starttime="20171013 18:00:31.805"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.209">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:32.209">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.209" starttime="20171013 18:00:31.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.211">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:32.211" starttime="20171013 18:00:32.211"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.212">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:32.212" starttime="20171013 18:00:32.212"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.212" starttime="20171013 18:00:32.211"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.213" starttime="20171013 18:00:32.210"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.213" starttime="20171013 18:00:32.210"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:32.213">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:32.213" starttime="20171013 18:00:32.213"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.213">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.213" starttime="20171013 18:00:31.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.214" starttime="20171013 18:00:32.214"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.215">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:32.215">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:32.215">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:32.215" starttime="20171013 18:00:32.214"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.215">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:00:32.215" starttime="20171013 18:00:31.175"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.215">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:00:32.215" starttime="20171013 18:00:31.174"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:32.216" starttime="20171013 18:00:32.216"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.220">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:32.221" starttime="20171013 18:00:32.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:32.221" starttime="20171013 18:00:32.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.222">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:32.222" starttime="20171013 18:00:32.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:32.223" starttime="20171013 18:00:32.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:32.597" starttime="20171013 18:00:32.223"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:32.598">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.598" starttime="20171013 18:00:32.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.598">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.598" starttime="20171013 18:00:32.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.599" starttime="20171013 18:00:32.599"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.599" starttime="20171013 18:00:32.219"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.599" starttime="20171013 18:00:32.219"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.599" starttime="20171013 18:00:32.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.600">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:00:32.600" starttime="20171013 18:00:32.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.602">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:32.602" starttime="20171013 18:00:32.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.603">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:32.603" starttime="20171013 18:00:32.603"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.603" starttime="20171013 18:00:32.602"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.603" starttime="20171013 18:00:32.601"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.603" starttime="20171013 18:00:32.600"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.784">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:32.784">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.784" starttime="20171013 18:00:32.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.786">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:32.786" starttime="20171013 18:00:32.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.787">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:32.788" starttime="20171013 18:00:32.787"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.788" starttime="20171013 18:00:32.787"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.788" starttime="20171013 18:00:32.785"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:32.788" starttime="20171013 18:00:32.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:32.788">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:32.788" starttime="20171013 18:00:32.788"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.789">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.789" starttime="20171013 18:00:32.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:32.789" starttime="20171013 18:00:32.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:32.790">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:32.790">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:32.790">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:32.790" starttime="20171013 18:00:32.790"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.790">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:32.790" starttime="20171013 18:00:32.217"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:32.791">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:32.791" starttime="20171013 18:00:32.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:32.791">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:00:32.791">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:00:32.791" starttime="20171013 18:00:32.791"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:32.792" starttime="20171013 18:00:32.216"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:32.792" starttime="20171013 18:00:30.600"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:42.797">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:42.798" starttime="20171013 18:00:42.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:42.798">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:42.798" starttime="20171013 18:00:42.798"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:42.799">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:42.799" starttime="20171013 18:00:42.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:42.800">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:42.800" starttime="20171013 18:00:42.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:43.433" starttime="20171013 18:00:42.801"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:43.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:43.434">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.434" starttime="20171013 18:00:42.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.434" starttime="20171013 18:00:43.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.435" starttime="20171013 18:00:43.435"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.435" starttime="20171013 18:00:42.797"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.435" starttime="20171013 18:00:42.796"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.435" starttime="20171013 18:00:42.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.436">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:00:43.436" starttime="20171013 18:00:43.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.438">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:43.438" starttime="20171013 18:00:43.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.439">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:43.439" starttime="20171013 18:00:43.439"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.439" starttime="20171013 18:00:43.438"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.440" starttime="20171013 18:00:43.437"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.440" starttime="20171013 18:00:43.436"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.612">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:43.612">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.612" starttime="20171013 18:00:43.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.614">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:43.614" starttime="20171013 18:00:43.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.615">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:43.615" starttime="20171013 18:00:43.615"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.615" starttime="20171013 18:00:43.614"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.615" starttime="20171013 18:00:43.613"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.615" starttime="20171013 18:00:43.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:43.616">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:43.616" starttime="20171013 18:00:43.616"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:43.616">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.616" starttime="20171013 18:00:42.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:43.617" starttime="20171013 18:00:43.616"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:43.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:43.618">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:43.618" starttime="20171013 18:00:43.617"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:43.618">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:00:43.618" starttime="20171013 18:00:42.794"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:43.618">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:00:43.618" starttime="20171013 18:00:42.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:43.619" starttime="20171013 18:00:43.619"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:43.619" starttime="20171013 18:00:42.793"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:43.623">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:43.623" starttime="20171013 18:00:43.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:43.624" starttime="20171013 18:00:43.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.624">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:43.624" starttime="20171013 18:00:43.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:43.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:43.625" starttime="20171013 18:00:43.625"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.164">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:44.165" starttime="20171013 18:00:43.626"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.165">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:44.165">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.165" starttime="20171013 18:00:43.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.165">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.166" starttime="20171013 18:00:44.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.166" starttime="20171013 18:00:44.166"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.166" starttime="20171013 18:00:43.622"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.166" starttime="20171013 18:00:43.622"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.167" starttime="20171013 18:00:43.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.167">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:00:44.167" starttime="20171013 18:00:44.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.170">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:44.170" starttime="20171013 18:00:44.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.171">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:44.171" starttime="20171013 18:00:44.171"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.171" starttime="20171013 18:00:44.170"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.171" starttime="20171013 18:00:44.168"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.171" starttime="20171013 18:00:44.168"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:44.297">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.297" starttime="20171013 18:00:44.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.299">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:44.299" starttime="20171013 18:00:44.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:44.300" starttime="20171013 18:00:44.300"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.300" starttime="20171013 18:00:44.299"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.300" starttime="20171013 18:00:44.298"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.301" starttime="20171013 18:00:44.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:44.301">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:44.301" starttime="20171013 18:00:44.301"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.301">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.301" starttime="20171013 18:00:43.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.302" starttime="20171013 18:00:44.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:44.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:44.303">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:44.303" starttime="20171013 18:00:44.302"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.303">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:00:44.303" starttime="20171013 18:00:43.620"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.303">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:00:44.303" starttime="20171013 18:00:43.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:44.304" starttime="20171013 18:00:44.304"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.308">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:44.308" starttime="20171013 18:00:44.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.309">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:44.309" starttime="20171013 18:00:44.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.309">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:44.309" starttime="20171013 18:00:44.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:44.310" starttime="20171013 18:00:44.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.687">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:44.687" starttime="20171013 18:00:44.311"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.687">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:44.687">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.687" starttime="20171013 18:00:44.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.688">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.688" starttime="20171013 18:00:44.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.689" starttime="20171013 18:00:44.688"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.689" starttime="20171013 18:00:44.307"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.689" starttime="20171013 18:00:44.307"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.689" starttime="20171013 18:00:44.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.690">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:00:44.690" starttime="20171013 18:00:44.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.692">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:44.692" starttime="20171013 18:00:44.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.693">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:44.693" starttime="20171013 18:00:44.692"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.693" starttime="20171013 18:00:44.692"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.693" starttime="20171013 18:00:44.690"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.693" starttime="20171013 18:00:44.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.781">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:44.781">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.781" starttime="20171013 18:00:44.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.783">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:44.783" starttime="20171013 18:00:44.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.784">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:44.784" starttime="20171013 18:00:44.783"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.784" starttime="20171013 18:00:44.783"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.784" starttime="20171013 18:00:44.782"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:44.784" starttime="20171013 18:00:44.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:44.784">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:44.785" starttime="20171013 18:00:44.784"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.785">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.785" starttime="20171013 18:00:44.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:44.786" starttime="20171013 18:00:44.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:44.786">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:44.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:44.786">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:44.786" starttime="20171013 18:00:44.786"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.787">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:44.787" starttime="20171013 18:00:44.305"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:44.787">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:44.787" starttime="20171013 18:00:44.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:44.788">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:00:44.788">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:00:44.788" starttime="20171013 18:00:44.788"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:44.788" starttime="20171013 18:00:44.304"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:44.788" starttime="20171013 18:00:42.792"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:54.795">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:54.795" starttime="20171013 18:00:54.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:54.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:54.796" starttime="20171013 18:00:54.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:54.797">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:54.797" starttime="20171013 18:00:54.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:54.798">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:54.798" starttime="20171013 18:00:54.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:55.226" starttime="20171013 18:00:54.799"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:55.226">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.226" starttime="20171013 18:00:54.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.227" starttime="20171013 18:00:55.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.228" starttime="20171013 18:00:55.227"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.228" starttime="20171013 18:00:54.793"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.228" starttime="20171013 18:00:54.792"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.228" starttime="20171013 18:00:54.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.229">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:00:55.229" starttime="20171013 18:00:55.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.231">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:55.231" starttime="20171013 18:00:55.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.232">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:55.232" starttime="20171013 18:00:55.232"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.232" starttime="20171013 18:00:55.231"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.232" starttime="20171013 18:00:55.230"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.232" starttime="20171013 18:00:55.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.607">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:55.607">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.607" starttime="20171013 18:00:55.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.610">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:55.610" starttime="20171013 18:00:55.609"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.611">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:55.611" starttime="20171013 18:00:55.611"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.611" starttime="20171013 18:00:55.610"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.611" starttime="20171013 18:00:55.608"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.611" starttime="20171013 18:00:55.608"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:55.612">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:55.612" starttime="20171013 18:00:55.612"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.612">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.612" starttime="20171013 18:00:54.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.613" starttime="20171013 18:00:55.612"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.613">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:55.613">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:55.613">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:55.613" starttime="20171013 18:00:55.613"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.614">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:00:55.614" starttime="20171013 18:00:54.790"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.614">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:00:55.614" starttime="20171013 18:00:54.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:55.615" starttime="20171013 18:00:55.614"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.615" starttime="20171013 18:00:54.789"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.618">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:55.619" starttime="20171013 18:00:55.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:55.619" starttime="20171013 18:00:55.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.620">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:55.620" starttime="20171013 18:00:55.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.621">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:55.621" starttime="20171013 18:00:55.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:55.801" starttime="20171013 18:00:55.622"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:55.801">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.801" starttime="20171013 18:00:55.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.802" starttime="20171013 18:00:55.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.803" starttime="20171013 18:00:55.802"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.803" starttime="20171013 18:00:55.617"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.803" starttime="20171013 18:00:55.617"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.803" starttime="20171013 18:00:55.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.804">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:00:55.804" starttime="20171013 18:00:55.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.809">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:55.809" starttime="20171013 18:00:55.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.810">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:55.810" starttime="20171013 18:00:55.809"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.810" starttime="20171013 18:00:55.809"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.810" starttime="20171013 18:00:55.804"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.810" starttime="20171013 18:00:55.804"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:55.982">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.982" starttime="20171013 18:00:55.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:55.984" starttime="20171013 18:00:55.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:55.985" starttime="20171013 18:00:55.985"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.985" starttime="20171013 18:00:55.984"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.986" starttime="20171013 18:00:55.983"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:55.986" starttime="20171013 18:00:55.983"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:55.986">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:55.986" starttime="20171013 18:00:55.986"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.986">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.986" starttime="20171013 18:00:55.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:55.987" starttime="20171013 18:00:55.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:55.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:55.988">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:55.988" starttime="20171013 18:00:55.988"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.988">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:00:55.989" starttime="20171013 18:00:55.615"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:55.989">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:00:55.989" starttime="20171013 18:00:55.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:00:55.990" starttime="20171013 18:00:55.989"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:55.994">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:00:55.994" starttime="20171013 18:00:55.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.995">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:00:55.995" starttime="20171013 18:00:55.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.996">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:00:55.996" starttime="20171013 18:00:55.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:55.997">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:00:55.997" starttime="20171013 18:00:55.997"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:00:56.382" starttime="20171013 18:00:55.999"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:56.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:00:56.382">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.382" starttime="20171013 18:00:55.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.383" starttime="20171013 18:00:56.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.384" starttime="20171013 18:00:56.383"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.384" starttime="20171013 18:00:55.993"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.384" starttime="20171013 18:00:55.992"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.384" starttime="20171013 18:00:55.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:56.385">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:00:56.385" starttime="20171013 18:00:56.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:56.387">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:56.387" starttime="20171013 18:00:56.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.388">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:00:56.388" starttime="20171013 18:00:56.388"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.388" starttime="20171013 18:00:56.387"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.388" starttime="20171013 18:00:56.385"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.388" starttime="20171013 18:00:56.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:56.686">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:00:56.686">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.686" starttime="20171013 18:00:56.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:56.688">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:56.688" starttime="20171013 18:00:56.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.689">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:00:56.689" starttime="20171013 18:00:56.688"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.689" starttime="20171013 18:00:56.688"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.689" starttime="20171013 18:00:56.687"></status>
</kw>
<status status="PASS" endtime="20171013 18:00:56.689" starttime="20171013 18:00:56.686"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:00:56.689">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:00:56.690" starttime="20171013 18:00:56.689"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:56.690">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.690" starttime="20171013 18:00:55.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:00:56.690" starttime="20171013 18:00:56.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:00:56.691">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:00:56.691">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:00:56.691">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:00:56.691" starttime="20171013 18:00:56.691"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:56.691">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:56.692" starttime="20171013 18:00:55.991"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:00:56.692">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:00:56.692" starttime="20171013 18:00:55.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:00:56.692">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:00:56.692">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:00:56.693" starttime="20171013 18:00:56.692"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:56.693" starttime="20171013 18:00:55.990"></status>
</kw>
<status status="FAIL" endtime="20171013 18:00:56.693" starttime="20171013 18:00:54.789"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:06.699">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:06.699" starttime="20171013 18:01:06.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:06.700">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:06.700" starttime="20171013 18:01:06.699"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:06.700">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:06.700" starttime="20171013 18:01:06.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:06.701">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:06.701" starttime="20171013 18:01:06.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:07.041" starttime="20171013 18:01:06.702"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:07.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.041" starttime="20171013 18:01:06.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.042" starttime="20171013 18:01:07.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.042" starttime="20171013 18:01:07.042"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.043" starttime="20171013 18:01:06.698"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.043" starttime="20171013 18:01:06.697"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.043" starttime="20171013 18:01:06.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.043">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:01:07.043" starttime="20171013 18:01:07.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.045">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:07.046" starttime="20171013 18:01:07.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.046">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:07.047" starttime="20171013 18:01:07.046"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.047" starttime="20171013 18:01:07.046"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.047" starttime="20171013 18:01:07.044"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.047" starttime="20171013 18:01:07.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.299">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:07.299">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.299" starttime="20171013 18:01:07.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.301">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:07.301" starttime="20171013 18:01:07.300"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.302">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:07.302" starttime="20171013 18:01:07.302"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.302" starttime="20171013 18:01:07.301"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.303" starttime="20171013 18:01:07.300"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.303" starttime="20171013 18:01:07.299"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:07.303">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:07.303" starttime="20171013 18:01:07.303"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.303" starttime="20171013 18:01:06.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.304" starttime="20171013 18:01:07.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.305">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:07.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:07.305">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:07.305" starttime="20171013 18:01:07.304"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.305">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:01:07.305" starttime="20171013 18:01:06.695"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.305">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:01:07.305" starttime="20171013 18:01:06.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:07.306" starttime="20171013 18:01:07.306"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.306" starttime="20171013 18:01:06.694"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.310">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:07.310" starttime="20171013 18:01:07.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:07.311" starttime="20171013 18:01:07.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.311">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:07.312" starttime="20171013 18:01:07.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.312">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:07.312" starttime="20171013 18:01:07.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.766">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:07.766" starttime="20171013 18:01:07.313"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:07.767">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.767" starttime="20171013 18:01:07.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.767">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.767" starttime="20171013 18:01:07.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.768" starttime="20171013 18:01:07.768"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.768" starttime="20171013 18:01:07.309"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.768" starttime="20171013 18:01:07.309"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.768" starttime="20171013 18:01:07.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.769">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:01:07.769" starttime="20171013 18:01:07.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.772">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:07.772" starttime="20171013 18:01:07.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.772">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:07.773" starttime="20171013 18:01:07.772"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.773" starttime="20171013 18:01:07.772"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.773" starttime="20171013 18:01:07.770"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.773" starttime="20171013 18:01:07.769"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.952">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:07.952">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.952" starttime="20171013 18:01:07.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.954">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:07.954" starttime="20171013 18:01:07.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.955">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:07.955" starttime="20171013 18:01:07.955"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.955" starttime="20171013 18:01:07.954"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.955" starttime="20171013 18:01:07.953"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:07.955" starttime="20171013 18:01:07.953"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:07.956">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:07.956" starttime="20171013 18:01:07.956"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.956">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.956" starttime="20171013 18:01:07.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:07.957" starttime="20171013 18:01:07.956"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.957">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:07.957">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:07.958">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:07.958" starttime="20171013 18:01:07.957"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.958">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:01:07.958" starttime="20171013 18:01:07.307"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:07.958">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:01:07.958" starttime="20171013 18:01:07.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:07.959" starttime="20171013 18:01:07.959"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:07.963">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:07.963" starttime="20171013 18:01:07.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.964">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:07.964" starttime="20171013 18:01:07.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.965">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:07.965" starttime="20171013 18:01:07.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:07.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:07.965" starttime="20171013 18:01:07.965"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:08.707" starttime="20171013 18:01:07.966"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:08.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:08.708">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.708" starttime="20171013 18:01:07.966"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.708" starttime="20171013 18:01:08.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.709" starttime="20171013 18:01:08.709"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.709" starttime="20171013 18:01:07.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.709" starttime="20171013 18:01:07.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.710" starttime="20171013 18:01:07.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:08.710">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:01:08.710" starttime="20171013 18:01:08.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:08.712">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:08.712" starttime="20171013 18:01:08.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.713">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:08.713" starttime="20171013 18:01:08.713"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.714" starttime="20171013 18:01:08.712"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.714" starttime="20171013 18:01:08.711"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.714" starttime="20171013 18:01:08.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:08.974">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:08.974">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.974" starttime="20171013 18:01:08.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:08.976">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:08.976" starttime="20171013 18:01:08.975"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.977">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:08.977" starttime="20171013 18:01:08.977"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.977" starttime="20171013 18:01:08.976"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.977" starttime="20171013 18:01:08.975"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:08.977" starttime="20171013 18:01:08.974"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:08.978">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:08.978" starttime="20171013 18:01:08.977"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:08.978">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.978" starttime="20171013 18:01:07.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:08.979" starttime="20171013 18:01:08.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:08.979">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:08.979">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:08.979">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:08.979" starttime="20171013 18:01:08.979"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:08.980">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:08.980" starttime="20171013 18:01:07.960"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:08.980">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:08.980" starttime="20171013 18:01:07.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:08.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:01:08.981">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:01:08.981" starttime="20171013 18:01:08.980"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:08.981" starttime="20171013 18:01:07.959"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:08.981" starttime="20171013 18:01:06.693"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:18.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:18.987" starttime="20171013 18:01:18.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:18.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:18.988" starttime="20171013 18:01:18.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:18.989">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:18.989" starttime="20171013 18:01:18.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:18.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:18.989" starttime="20171013 18:01:18.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.268">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:20.268" starttime="20171013 18:01:18.990"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.268">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:20.268">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.268" starttime="20171013 18:01:18.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.269">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.269" starttime="20171013 18:01:20.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.270" starttime="20171013 18:01:20.269"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.270" starttime="20171013 18:01:18.986"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.270" starttime="20171013 18:01:18.985"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.270" starttime="20171013 18:01:18.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.270">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:01:20.271" starttime="20171013 18:01:20.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.273">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:20.273" starttime="20171013 18:01:20.272"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.274">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:20.274" starttime="20171013 18:01:20.273"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.274" starttime="20171013 18:01:20.273"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.274" starttime="20171013 18:01:20.271"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.274" starttime="20171013 18:01:20.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.336">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:20.336">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.336" starttime="20171013 18:01:20.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.338">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:20.338" starttime="20171013 18:01:20.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.339">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:20.339" starttime="20171013 18:01:20.339"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.339" starttime="20171013 18:01:20.338"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.340" starttime="20171013 18:01:20.337"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.340" starttime="20171013 18:01:20.336"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:20.340">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:20.340" starttime="20171013 18:01:20.340"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.340">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.340" starttime="20171013 18:01:18.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.341" starttime="20171013 18:01:20.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.342">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:20.342">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:20.342">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:20.342" starttime="20171013 18:01:20.341"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.342">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:01:20.342" starttime="20171013 18:01:18.983"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.342">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:01:20.342" starttime="20171013 18:01:18.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:20.343" starttime="20171013 18:01:20.343"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.343" starttime="20171013 18:01:18.982"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:20.347" starttime="20171013 18:01:20.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:20.348" starttime="20171013 18:01:20.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.348">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:20.348" starttime="20171013 18:01:20.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.349">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:20.349" starttime="20171013 18:01:20.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:20.772" starttime="20171013 18:01:20.350"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:20.772">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.772" starttime="20171013 18:01:20.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.772">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.773" starttime="20171013 18:01:20.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.773" starttime="20171013 18:01:20.773"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.773" starttime="20171013 18:01:20.346"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.773" starttime="20171013 18:01:20.345"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.774" starttime="20171013 18:01:20.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.774">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:01:20.774" starttime="20171013 18:01:20.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.777">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:20.777" starttime="20171013 18:01:20.776"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.778">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:20.778" starttime="20171013 18:01:20.778"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.778" starttime="20171013 18:01:20.777"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.778" starttime="20171013 18:01:20.775"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.778" starttime="20171013 18:01:20.775"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.865">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:20.865">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.865" starttime="20171013 18:01:20.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.867">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:20.867" starttime="20171013 18:01:20.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.868">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:20.868" starttime="20171013 18:01:20.868"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.868" starttime="20171013 18:01:20.867"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.868" starttime="20171013 18:01:20.866"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:20.868" starttime="20171013 18:01:20.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:20.869">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:20.869" starttime="20171013 18:01:20.869"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.869">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.869" starttime="20171013 18:01:20.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:20.870" starttime="20171013 18:01:20.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.870">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:20.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:20.871">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:20.871" starttime="20171013 18:01:20.870"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.871">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:01:20.871" starttime="20171013 18:01:20.344"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:20.871">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:01:20.871" starttime="20171013 18:01:20.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:20.872" starttime="20171013 18:01:20.872"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:20.876">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:20.876" starttime="20171013 18:01:20.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:20.877" starttime="20171013 18:01:20.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.878">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:20.878" starttime="20171013 18:01:20.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:20.878">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:20.878" starttime="20171013 18:01:20.878"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:21.578" starttime="20171013 18:01:20.879"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:21.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:21.578">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.578" starttime="20171013 18:01:20.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.579" starttime="20171013 18:01:21.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.580" starttime="20171013 18:01:21.579"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.580" starttime="20171013 18:01:20.875"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.580" starttime="20171013 18:01:20.875"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.580" starttime="20171013 18:01:20.874"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:21.581">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:01:21.581" starttime="20171013 18:01:21.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:21.583">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:21.583" starttime="20171013 18:01:21.582"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.584">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:21.584" starttime="20171013 18:01:21.583"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.584" starttime="20171013 18:01:21.583"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.584" starttime="20171013 18:01:21.581"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.584" starttime="20171013 18:01:21.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:21.671">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:21.671">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.671" starttime="20171013 18:01:21.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:21.673">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:21.673" starttime="20171013 18:01:21.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.674">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:21.674" starttime="20171013 18:01:21.674"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.674" starttime="20171013 18:01:21.673"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.675" starttime="20171013 18:01:21.672"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:21.675" starttime="20171013 18:01:21.672"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:21.675">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:21.675" starttime="20171013 18:01:21.675"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:21.675">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.675" starttime="20171013 18:01:20.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:21.676" starttime="20171013 18:01:21.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:21.677">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:21.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:21.677">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:21.677" starttime="20171013 18:01:21.676"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:21.677">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:21.677" starttime="20171013 18:01:20.873"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:21.677">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:21.677" starttime="20171013 18:01:20.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:21.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:01:21.678">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:01:21.678" starttime="20171013 18:01:21.678"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:21.678" starttime="20171013 18:01:20.872"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:21.678" starttime="20171013 18:01:18.981"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:31.684">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:31.685" starttime="20171013 18:01:31.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:31.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:31.685" starttime="20171013 18:01:31.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:31.686">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:31.686" starttime="20171013 18:01:31.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:31.686">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:31.687" starttime="20171013 18:01:31.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:32.222">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:32.223" starttime="20171013 18:01:31.687"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:32.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:32.223">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:32.223" starttime="20171013 18:01:31.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:32.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:32.224" starttime="20171013 18:01:32.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:32.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:32.224" starttime="20171013 18:01:32.224"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.225" starttime="20171013 18:01:31.683"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.225" starttime="20171013 18:01:31.682"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.225" starttime="20171013 18:01:31.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:32.225">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:01:32.225" starttime="20171013 18:01:32.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:32.227">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:32.228" starttime="20171013 18:01:32.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:32.228">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:32.229" starttime="20171013 18:01:32.228"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.229" starttime="20171013 18:01:32.228"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.229" starttime="20171013 18:01:32.226"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:32.229" starttime="20171013 18:01:32.226"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.279">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:34.279">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.279" starttime="20171013 18:01:32.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.281">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:34.281" starttime="20171013 18:01:34.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.283">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:34.283" starttime="20171013 18:01:34.282"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.283" starttime="20171013 18:01:34.282"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.283" starttime="20171013 18:01:34.280"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.283" starttime="20171013 18:01:34.279"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:34.284">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:34.284" starttime="20171013 18:01:34.283"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:34.284">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.284" starttime="20171013 18:01:31.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.285" starttime="20171013 18:01:34.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.285">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:34.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:34.286">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:34.286" starttime="20171013 18:01:34.285"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:34.286">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:01:34.286" starttime="20171013 18:01:31.680"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:34.286">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:01:34.286" starttime="20171013 18:01:31.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:34.287" starttime="20171013 18:01:34.286"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.287" starttime="20171013 18:01:31.679"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.291">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:34.291" starttime="20171013 18:01:34.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:34.292" starttime="20171013 18:01:34.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.292">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:34.292" starttime="20171013 18:01:34.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:34.293" starttime="20171013 18:01:34.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.937">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:34.937" starttime="20171013 18:01:34.294"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:34.937">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:34.937">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.937" starttime="20171013 18:01:34.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.938">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.938" starttime="20171013 18:01:34.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:34.939" starttime="20171013 18:01:34.938"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.939" starttime="20171013 18:01:34.290"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.939" starttime="20171013 18:01:34.289"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.939" starttime="20171013 18:01:34.289"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.940">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:01:34.940" starttime="20171013 18:01:34.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:34.945">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:34.945" starttime="20171013 18:01:34.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:34.946">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:34.946" starttime="20171013 18:01:34.946"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.946" starttime="20171013 18:01:34.945"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.946" starttime="20171013 18:01:34.941"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:34.946" starttime="20171013 18:01:34.940"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:35.406">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:35.406" starttime="20171013 18:01:34.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.408">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:35.408" starttime="20171013 18:01:35.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:35.409">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:35.409" starttime="20171013 18:01:35.409"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:35.409" starttime="20171013 18:01:35.408"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:35.409" starttime="20171013 18:01:35.407"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:35.410" starttime="20171013 18:01:35.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:35.410">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:35.410" starttime="20171013 18:01:35.410"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:35.410">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:35.410" starttime="20171013 18:01:34.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:35.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:35.411" starttime="20171013 18:01:35.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.412">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:35.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:35.412">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:35.412" starttime="20171013 18:01:35.411"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:35.412">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:01:35.412" starttime="20171013 18:01:34.288"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:35.413">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:01:35.413" starttime="20171013 18:01:34.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:35.413" starttime="20171013 18:01:35.413"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:35.417">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:35.418" starttime="20171013 18:01:35.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:35.419" starttime="20171013 18:01:35.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.419">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:35.419" starttime="20171013 18:01:35.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:35.420">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:35.420" starttime="20171013 18:01:35.420"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:36.114" starttime="20171013 18:01:35.421"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:36.114">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:36.114">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.114" starttime="20171013 18:01:35.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.115" starttime="20171013 18:01:36.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.116" starttime="20171013 18:01:36.115"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.116" starttime="20171013 18:01:35.417"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.116" starttime="20171013 18:01:35.416"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.116" starttime="20171013 18:01:35.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:36.117">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:01:36.117" starttime="20171013 18:01:36.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:36.119">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:36.119" starttime="20171013 18:01:36.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.120">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:36.120" starttime="20171013 18:01:36.120"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.120" starttime="20171013 18:01:36.119"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.120" starttime="20171013 18:01:36.117"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.120" starttime="20171013 18:01:36.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:36.240">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:36.240">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.240" starttime="20171013 18:01:36.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:36.242">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:36.242" starttime="20171013 18:01:36.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.243">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:36.243" starttime="20171013 18:01:36.243"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.243" starttime="20171013 18:01:36.242"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.243" starttime="20171013 18:01:36.241"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:36.243" starttime="20171013 18:01:36.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:36.244">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:36.244" starttime="20171013 18:01:36.244"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:36.244">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.244" starttime="20171013 18:01:35.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:36.245" starttime="20171013 18:01:36.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:36.245">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:36.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:36.246">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:36.246" starttime="20171013 18:01:36.245"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:36.246">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:36.246" starttime="20171013 18:01:35.414"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:36.246">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:36.246" starttime="20171013 18:01:35.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:36.247">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:01:36.247">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:01:36.247" starttime="20171013 18:01:36.246"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:36.247" starttime="20171013 18:01:35.413"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:36.247" starttime="20171013 18:01:31.679"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.253">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:46.253" starttime="20171013 18:01:46.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:46.254" starttime="20171013 18:01:46.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.254">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:46.254" starttime="20171013 18:01:46.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:46.255" starttime="20171013 18:01:46.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:46.603" starttime="20171013 18:01:46.256"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:46.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:46.603">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.603" starttime="20171013 18:01:46.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.604" starttime="20171013 18:01:46.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.605" starttime="20171013 18:01:46.604"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.605" starttime="20171013 18:01:46.252"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.605" starttime="20171013 18:01:46.251"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.605" starttime="20171013 18:01:46.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.606">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:01:46.606" starttime="20171013 18:01:46.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.608">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:46.608" starttime="20171013 18:01:46.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.609">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:46.609" starttime="20171013 18:01:46.609"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.609" starttime="20171013 18:01:46.608"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.609" starttime="20171013 18:01:46.606"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.609" starttime="20171013 18:01:46.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.679">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:46.679">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.679" starttime="20171013 18:01:46.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.682">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:46.682" starttime="20171013 18:01:46.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.683">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:46.683" starttime="20171013 18:01:46.682"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.683" starttime="20171013 18:01:46.682"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.683" starttime="20171013 18:01:46.680"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.683" starttime="20171013 18:01:46.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:46.683">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:46.683" starttime="20171013 18:01:46.683"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:46.684">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.684" starttime="20171013 18:01:46.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:46.685" starttime="20171013 18:01:46.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.685">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:46.685">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:46.685">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:46.685" starttime="20171013 18:01:46.685"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:46.686">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:01:46.686" starttime="20171013 18:01:46.249"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:46.686">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:01:46.686" starttime="20171013 18:01:46.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:46.687" starttime="20171013 18:01:46.686"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:46.687" starttime="20171013 18:01:46.248"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:46.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:46.691" starttime="20171013 18:01:46.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:46.691" starttime="20171013 18:01:46.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.692">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:46.692" starttime="20171013 18:01:46.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:46.693">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:46.693" starttime="20171013 18:01:46.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.097">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:47.097" starttime="20171013 18:01:46.693"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:47.097">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:47.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.097" starttime="20171013 18:01:46.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.098">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.098" starttime="20171013 18:01:47.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.099" starttime="20171013 18:01:47.098"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.099" starttime="20171013 18:01:46.689"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.099" starttime="20171013 18:01:46.689"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.099" starttime="20171013 18:01:46.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.100">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:01:47.100" starttime="20171013 18:01:47.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.102">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:47.102" starttime="20171013 18:01:47.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.103">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:47.103" starttime="20171013 18:01:47.103"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.103" starttime="20171013 18:01:47.102"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.104" starttime="20171013 18:01:47.100"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.104" starttime="20171013 18:01:47.100"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.432">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:47.432">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.432" starttime="20171013 18:01:47.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.434">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:47.434" starttime="20171013 18:01:47.433"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.435">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:47.435" starttime="20171013 18:01:47.435"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.435" starttime="20171013 18:01:47.434"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.435" starttime="20171013 18:01:47.433"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.435" starttime="20171013 18:01:47.432"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:47.436">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:47.436" starttime="20171013 18:01:47.436"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:47.436">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.436" starttime="20171013 18:01:46.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.437" starttime="20171013 18:01:47.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.437">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:47.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:47.437">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:47.437" starttime="20171013 18:01:47.437"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:47.438">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:01:47.438" starttime="20171013 18:01:46.687"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:47.438">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:01:47.438" starttime="20171013 18:01:46.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:47.439" starttime="20171013 18:01:47.438"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.443">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:47.443" starttime="20171013 18:01:47.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.444">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:47.444" starttime="20171013 18:01:47.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.444">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:47.444" starttime="20171013 18:01:47.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.445">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:47.445" starttime="20171013 18:01:47.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:47.945" starttime="20171013 18:01:47.446"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:47.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:47.945">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.945" starttime="20171013 18:01:47.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.946" starttime="20171013 18:01:47.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:47.947" starttime="20171013 18:01:47.946"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.947" starttime="20171013 18:01:47.442"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.947" starttime="20171013 18:01:47.441"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.947" starttime="20171013 18:01:47.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.947">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:01:47.947" starttime="20171013 18:01:47.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:47.950">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:47.950" starttime="20171013 18:01:47.949"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:47.951">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:47.951" starttime="20171013 18:01:47.950"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.951" starttime="20171013 18:01:47.950"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.951" starttime="20171013 18:01:47.948"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:47.951" starttime="20171013 18:01:47.948"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:48.207">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:48.207">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:48.207" starttime="20171013 18:01:47.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:48.209">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:48.209" starttime="20171013 18:01:48.209"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:48.210">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:48.210" starttime="20171013 18:01:48.210"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:48.210" starttime="20171013 18:01:48.209"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:48.210" starttime="20171013 18:01:48.208"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:48.211" starttime="20171013 18:01:48.208"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:48.211">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:48.211" starttime="20171013 18:01:48.211"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:48.211">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:48.211" starttime="20171013 18:01:47.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:48.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:48.212" starttime="20171013 18:01:48.212"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:48.213">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:48.213">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:48.213">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:48.213" starttime="20171013 18:01:48.212"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:48.213">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:48.213" starttime="20171013 18:01:47.440"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:48.213">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:01:48.213" starttime="20171013 18:01:47.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:48.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:01:48.214">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:01:48.214" starttime="20171013 18:01:48.214"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:48.214" starttime="20171013 18:01:47.439"></status>
</kw>
<status status="FAIL" endtime="20171013 18:01:48.214" starttime="20171013 18:01:46.248"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:58.220">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:58.221" starttime="20171013 18:01:58.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:58.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:58.221" starttime="20171013 18:01:58.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:58.222">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:58.222" starttime="20171013 18:01:58.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:58.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:58.223" starttime="20171013 18:01:58.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:58.921">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:58.921" starttime="20171013 18:01:58.223"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:58.921">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:58.921">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:58.921" starttime="20171013 18:01:58.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:58.922">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:58.922" starttime="20171013 18:01:58.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:58.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:58.923" starttime="20171013 18:01:58.922"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.923" starttime="20171013 18:01:58.219"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.923" starttime="20171013 18:01:58.218"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.923" starttime="20171013 18:01:58.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:58.924">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:01:58.924" starttime="20171013 18:01:58.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:58.926">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:58.926" starttime="20171013 18:01:58.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:58.927">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:58.927" starttime="20171013 18:01:58.927"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.927" starttime="20171013 18:01:58.926"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.927" starttime="20171013 18:01:58.925"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:58.927" starttime="20171013 18:01:58.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.136">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:59.136">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.136" starttime="20171013 18:01:58.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.138">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:59.138" starttime="20171013 18:01:59.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.139">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:59.139" starttime="20171013 18:01:59.139"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.139" starttime="20171013 18:01:59.139"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.140" starttime="20171013 18:01:59.137"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.140" starttime="20171013 18:01:59.136"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:59.140">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:59.140" starttime="20171013 18:01:59.140"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.140" starttime="20171013 18:01:58.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.141" starttime="20171013 18:01:59.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.142">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:59.142">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:59.142">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:59.142" starttime="20171013 18:01:59.141"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.142">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:01:59.142" starttime="20171013 18:01:58.216"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.142">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:01:59.143" starttime="20171013 18:01:58.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:59.143" starttime="20171013 18:01:59.143"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.143" starttime="20171013 18:01:58.215"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.147">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:59.147" starttime="20171013 18:01:59.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:59.148" starttime="20171013 18:01:59.147"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.148">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:59.148" starttime="20171013 18:01:59.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:59.149" starttime="20171013 18:01:59.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.426">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:59.426" starttime="20171013 18:01:59.150"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:59.426">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.426" starttime="20171013 18:01:59.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.427" starttime="20171013 18:01:59.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.428" starttime="20171013 18:01:59.427"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.428" starttime="20171013 18:01:59.146"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.428" starttime="20171013 18:01:59.145"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.428" starttime="20171013 18:01:59.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.428">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:01:59.429" starttime="20171013 18:01:59.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.431">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:59.431" starttime="20171013 18:01:59.430"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.432">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:59.432" starttime="20171013 18:01:59.432"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.432" starttime="20171013 18:01:59.431"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.432" starttime="20171013 18:01:59.429"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.432" starttime="20171013 18:01:59.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:01:59.569">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.569" starttime="20171013 18:01:59.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.571">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:59.571" starttime="20171013 18:01:59.570"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.571">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:01:59.572" starttime="20171013 18:01:59.571"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.572" starttime="20171013 18:01:59.571"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.572" starttime="20171013 18:01:59.570"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.572" starttime="20171013 18:01:59.569"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:01:59.572">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:01:59.572" starttime="20171013 18:01:59.572"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.573">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.573" starttime="20171013 18:01:59.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.573" starttime="20171013 18:01:59.573"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.574">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:01:59.574">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:01:59.574">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:01:59.574" starttime="20171013 18:01:59.574"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.574">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:01:59.574" starttime="20171013 18:01:59.144"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.575">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:01:59.575" starttime="20171013 18:01:59.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:01:59.575" starttime="20171013 18:01:59.575"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:01:59.580" starttime="20171013 18:01:59.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:01:59.580" starttime="20171013 18:01:59.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.581">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:01:59.581" starttime="20171013 18:01:59.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:01:59.582" starttime="20171013 18:01:59.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.986">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:01:59.986" starttime="20171013 18:01:59.582"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:01:59.986">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:01:59.986">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.987" starttime="20171013 18:01:59.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.987">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.988" starttime="20171013 18:01:59.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:01:59.989" starttime="20171013 18:01:59.988"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.989" starttime="20171013 18:01:59.578"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.989" starttime="20171013 18:01:59.578"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.989" starttime="20171013 18:01:59.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.990">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:01:59.990" starttime="20171013 18:01:59.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:01:59.993">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:59.993" starttime="20171013 18:01:59.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:01:59.995">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:01:59.995" starttime="20171013 18:01:59.994"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.995" starttime="20171013 18:01:59.993"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.995" starttime="20171013 18:01:59.991"></status>
</kw>
<status status="PASS" endtime="20171013 18:01:59.995" starttime="20171013 18:01:59.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:00.083">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:00.084">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:00.084" starttime="20171013 18:01:59.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:00.086">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:00.086" starttime="20171013 18:02:00.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:00.087">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:00.087" starttime="20171013 18:02:00.087"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:00.088" starttime="20171013 18:02:00.086"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:00.088" starttime="20171013 18:02:00.084"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:00.088" starttime="20171013 18:02:00.084"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:00.088">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:00.088" starttime="20171013 18:02:00.088"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:00.088">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:00.088" starttime="20171013 18:01:59.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:00.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:00.089" starttime="20171013 18:02:00.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:00.090">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:00.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:00.090">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:00.090" starttime="20171013 18:02:00.089"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:00.090">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:00.090" starttime="20171013 18:01:59.576"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:00.090">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:00.090" starttime="20171013 18:01:59.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:00.091">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:02:00.091">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:02:00.091" starttime="20171013 18:02:00.091"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:00.091" starttime="20171013 18:01:59.575"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:00.092" starttime="20171013 18:01:58.215"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:10.097">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:10.098" starttime="20171013 18:02:10.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:10.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:10.098" starttime="20171013 18:02:10.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:10.099">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:10.099" starttime="20171013 18:02:10.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:10.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:10.100" starttime="20171013 18:02:10.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:11.336" starttime="20171013 18:02:10.100"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:11.336">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:11.336">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.336" starttime="20171013 18:02:10.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.337" starttime="20171013 18:02:11.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.338" starttime="20171013 18:02:11.337"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.338" starttime="20171013 18:02:10.096"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.338" starttime="20171013 18:02:10.095"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.338" starttime="20171013 18:02:10.095"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.339">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:02:11.339" starttime="20171013 18:02:11.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:11.341" starttime="20171013 18:02:11.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.342">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:11.342" starttime="20171013 18:02:11.342"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.342" starttime="20171013 18:02:11.341"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.342" starttime="20171013 18:02:11.340"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.342" starttime="20171013 18:02:11.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.678">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:11.679">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.679" starttime="20171013 18:02:11.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.681">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:11.681" starttime="20171013 18:02:11.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.682">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:11.682" starttime="20171013 18:02:11.682"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.682" starttime="20171013 18:02:11.681"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.682" starttime="20171013 18:02:11.679"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.682" starttime="20171013 18:02:11.679"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:11.683">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:11.683" starttime="20171013 18:02:11.682"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:11.683">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.683" starttime="20171013 18:02:10.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:11.684" starttime="20171013 18:02:11.683"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.684">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:11.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:11.684">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:11.684" starttime="20171013 18:02:11.684"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:11.685">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:02:11.685" starttime="20171013 18:02:10.093"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:11.685">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:02:11.685" starttime="20171013 18:02:10.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:11.686" starttime="20171013 18:02:11.686"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:11.686" starttime="20171013 18:02:10.093"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:11.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:11.691" starttime="20171013 18:02:11.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:11.691" starttime="20171013 18:02:11.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.692">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:11.692" starttime="20171013 18:02:11.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:11.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:11.692" starttime="20171013 18:02:11.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:12.143" starttime="20171013 18:02:11.693"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:12.143">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.143" starttime="20171013 18:02:11.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.144" starttime="20171013 18:02:12.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.144" starttime="20171013 18:02:12.144"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.145" starttime="20171013 18:02:11.689"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.145" starttime="20171013 18:02:11.689"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.145" starttime="20171013 18:02:11.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.145">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:02:12.145" starttime="20171013 18:02:12.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.151">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:12.151" starttime="20171013 18:02:12.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.152">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:12.152" starttime="20171013 18:02:12.151"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.152" starttime="20171013 18:02:12.151"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.152" starttime="20171013 18:02:12.146"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.152" starttime="20171013 18:02:12.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.278">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:12.278">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.278" starttime="20171013 18:02:12.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.280">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:12.280" starttime="20171013 18:02:12.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.282">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:12.282" starttime="20171013 18:02:12.282"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.282" starttime="20171013 18:02:12.280"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.282" starttime="20171013 18:02:12.279"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.282" starttime="20171013 18:02:12.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:12.283">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:12.283" starttime="20171013 18:02:12.283"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.283">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.283" starttime="20171013 18:02:11.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.284" starttime="20171013 18:02:12.283"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.284">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:12.284">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:12.285">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:12.285" starttime="20171013 18:02:12.284"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.285">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:02:12.285" starttime="20171013 18:02:11.687"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.285">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:02:12.285" starttime="20171013 18:02:11.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:12.286" starttime="20171013 18:02:12.286"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.290">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:12.291" starttime="20171013 18:02:12.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:12.292" starttime="20171013 18:02:12.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.292">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:12.292" starttime="20171013 18:02:12.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:12.293" starttime="20171013 18:02:12.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:12.628" starttime="20171013 18:02:12.294"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:12.629">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.629" starttime="20171013 18:02:12.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.629" starttime="20171013 18:02:12.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.630" starttime="20171013 18:02:12.630"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.630" starttime="20171013 18:02:12.289"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.630" starttime="20171013 18:02:12.289"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.630" starttime="20171013 18:02:12.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.631">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:02:12.631" starttime="20171013 18:02:12.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.633">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:12.633" starttime="20171013 18:02:12.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.634">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:12.634" starttime="20171013 18:02:12.634"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.634" starttime="20171013 18:02:12.633"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.634" starttime="20171013 18:02:12.632"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.635" starttime="20171013 18:02:12.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.789">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:12.789">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.789" starttime="20171013 18:02:12.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.791">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:12.791" starttime="20171013 18:02:12.790"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.792">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:12.792" starttime="20171013 18:02:12.791"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.792" starttime="20171013 18:02:12.791"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.792" starttime="20171013 18:02:12.790"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:12.792" starttime="20171013 18:02:12.789"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:12.792">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:12.793" starttime="20171013 18:02:12.792"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.793">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.793" starttime="20171013 18:02:12.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:12.794" starttime="20171013 18:02:12.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:12.794">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:12.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:12.794">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:12.794" starttime="20171013 18:02:12.794"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.795">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:12.795" starttime="20171013 18:02:12.287"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:12.795">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:12.795" starttime="20171013 18:02:12.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:12.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:02:12.796">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:02:12.796" starttime="20171013 18:02:12.795"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:12.796" starttime="20171013 18:02:12.286"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:12.796" starttime="20171013 18:02:10.092"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:22.802">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:22.802" starttime="20171013 18:02:22.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:22.803">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:22.803" starttime="20171013 18:02:22.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:22.803">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:22.803" starttime="20171013 18:02:22.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:22.804">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:22.804" starttime="20171013 18:02:22.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:23.213" starttime="20171013 18:02:22.805"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.213">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:23.213">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.213" starttime="20171013 18:02:22.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.214" starttime="20171013 18:02:23.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.215" starttime="20171013 18:02:23.214"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.215" starttime="20171013 18:02:22.801"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.215" starttime="20171013 18:02:22.800"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.215" starttime="20171013 18:02:22.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.216">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:02:23.216" starttime="20171013 18:02:23.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.218">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:23.218" starttime="20171013 18:02:23.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.219">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:23.219" starttime="20171013 18:02:23.219"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.219" starttime="20171013 18:02:23.218"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.219" starttime="20171013 18:02:23.217"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.219" starttime="20171013 18:02:23.216"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:23.288">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.288" starttime="20171013 18:02:23.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:23.290" starttime="20171013 18:02:23.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:23.291" starttime="20171013 18:02:23.291"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.291" starttime="20171013 18:02:23.290"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.292" starttime="20171013 18:02:23.289"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.292" starttime="20171013 18:02:23.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:23.292">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:23.292" starttime="20171013 18:02:23.292"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.292">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.292" starttime="20171013 18:02:22.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.293" starttime="20171013 18:02:23.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:23.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:23.294">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:23.294" starttime="20171013 18:02:23.293"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.294">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:02:23.294" starttime="20171013 18:02:22.798"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.294">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:02:23.294" starttime="20171013 18:02:22.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:23.295" starttime="20171013 18:02:23.295"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.295" starttime="20171013 18:02:22.797"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.299">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:23.299" starttime="20171013 18:02:23.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:23.300" starttime="20171013 18:02:23.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.300">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:23.300" starttime="20171013 18:02:23.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.301">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:23.301" starttime="20171013 18:02:23.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:23.798" starttime="20171013 18:02:23.302"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:23.798">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.798" starttime="20171013 18:02:23.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.799" starttime="20171013 18:02:23.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.799" starttime="20171013 18:02:23.799"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.800" starttime="20171013 18:02:23.298"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.800" starttime="20171013 18:02:23.297"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.800" starttime="20171013 18:02:23.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.800">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:02:23.800" starttime="20171013 18:02:23.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.803">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:23.803" starttime="20171013 18:02:23.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.804">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:23.804" starttime="20171013 18:02:23.804"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.804" starttime="20171013 18:02:23.803"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.804" starttime="20171013 18:02:23.801"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.804" starttime="20171013 18:02:23.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.980">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:23.980">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.980" starttime="20171013 18:02:23.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.982">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:23.982" starttime="20171013 18:02:23.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.983">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:23.983" starttime="20171013 18:02:23.983"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.984" starttime="20171013 18:02:23.982"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.984" starttime="20171013 18:02:23.981"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:23.984" starttime="20171013 18:02:23.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:23.984">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:23.984" starttime="20171013 18:02:23.984"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.985">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.985" starttime="20171013 18:02:23.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:23.985" starttime="20171013 18:02:23.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.986">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:23.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:23.986">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:23.986" starttime="20171013 18:02:23.986"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.986">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:02:23.987" starttime="20171013 18:02:23.296"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:23.987">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:02:23.987" starttime="20171013 18:02:23.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:23.987" starttime="20171013 18:02:23.987"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:23.992">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:23.992" starttime="20171013 18:02:23.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:23.993" starttime="20171013 18:02:23.992"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.993">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:23.993" starttime="20171013 18:02:23.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:23.994">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:23.994" starttime="20171013 18:02:23.994"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:24.349" starttime="20171013 18:02:23.995"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:24.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:24.349">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.350" starttime="20171013 18:02:23.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.350" starttime="20171013 18:02:24.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.351" starttime="20171013 18:02:24.351"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.351" starttime="20171013 18:02:23.991"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.351" starttime="20171013 18:02:23.990"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.351" starttime="20171013 18:02:23.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:24.352">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:02:24.352" starttime="20171013 18:02:24.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:24.354">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:24.354" starttime="20171013 18:02:24.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.355">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:24.355" starttime="20171013 18:02:24.355"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.355" starttime="20171013 18:02:24.354"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.355" starttime="20171013 18:02:24.353"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.356" starttime="20171013 18:02:24.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:24.503">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:24.503">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.503" starttime="20171013 18:02:24.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:24.505">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:24.505" starttime="20171013 18:02:24.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.506">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:24.506" starttime="20171013 18:02:24.506"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.506" starttime="20171013 18:02:24.505"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.506" starttime="20171013 18:02:24.504"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:24.506" starttime="20171013 18:02:24.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:24.507">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:24.507" starttime="20171013 18:02:24.507"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:24.507">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.507" starttime="20171013 18:02:23.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:24.508" starttime="20171013 18:02:24.507"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:24.508">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:24.508">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:24.508">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:24.508" starttime="20171013 18:02:24.508"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:24.509">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:24.509" starttime="20171013 18:02:23.988"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:24.509">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:24.509" starttime="20171013 18:02:23.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:24.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:02:24.510">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:02:24.510" starttime="20171013 18:02:24.509"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:24.510" starttime="20171013 18:02:23.988"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:24.510" starttime="20171013 18:02:22.797"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:34.516">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:34.516" starttime="20171013 18:02:34.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:34.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:34.517" starttime="20171013 18:02:34.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:34.517">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:34.517" starttime="20171013 18:02:34.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:34.518">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:34.518" starttime="20171013 18:02:34.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:34.896">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:34.896" starttime="20171013 18:02:34.519"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:34.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:34.897">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:34.897" starttime="20171013 18:02:34.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:34.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:34.897" starttime="20171013 18:02:34.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:34.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:34.898" starttime="20171013 18:02:34.898"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.898" starttime="20171013 18:02:34.515"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.898" starttime="20171013 18:02:34.514"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.898" starttime="20171013 18:02:34.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:34.899">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:02:34.899" starttime="20171013 18:02:34.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:34.901">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:34.901" starttime="20171013 18:02:34.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:34.902">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:34.902" starttime="20171013 18:02:34.902"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.902" starttime="20171013 18:02:34.901"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.903" starttime="20171013 18:02:34.900"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:34.903" starttime="20171013 18:02:34.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.010">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:35.010">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.010" starttime="20171013 18:02:34.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.012">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:35.012" starttime="20171013 18:02:35.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:35.013" starttime="20171013 18:02:35.013"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.014" starttime="20171013 18:02:35.013"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.014" starttime="20171013 18:02:35.011"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.014" starttime="20171013 18:02:35.010"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:35.014">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:35.014" starttime="20171013 18:02:35.014"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.014">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.014" starttime="20171013 18:02:34.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.015" starttime="20171013 18:02:35.015"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.016">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:35.016">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:35.016">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:35.016" starttime="20171013 18:02:35.015"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.016">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:02:35.016" starttime="20171013 18:02:34.512"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.017">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:02:35.017" starttime="20171013 18:02:34.512"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:35.017" starttime="20171013 18:02:35.017"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.017" starttime="20171013 18:02:34.511"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.021">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:35.022" starttime="20171013 18:02:35.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:35.022" starttime="20171013 18:02:35.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.023">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:35.023" starttime="20171013 18:02:35.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.024">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:35.024" starttime="20171013 18:02:35.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:35.275" starttime="20171013 18:02:35.024"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.275">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:35.275">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.275" starttime="20171013 18:02:35.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.276" starttime="20171013 18:02:35.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.276" starttime="20171013 18:02:35.276"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.277" starttime="20171013 18:02:35.020"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.277" starttime="20171013 18:02:35.020"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.277" starttime="20171013 18:02:35.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.277">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:02:35.277" starttime="20171013 18:02:35.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.280">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:35.280" starttime="20171013 18:02:35.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.281">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:35.281" starttime="20171013 18:02:35.281"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.281" starttime="20171013 18:02:35.280"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.281" starttime="20171013 18:02:35.278"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.281" starttime="20171013 18:02:35.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.474">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:35.474">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.474" starttime="20171013 18:02:35.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.476">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:35.476" starttime="20171013 18:02:35.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.477">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:35.477" starttime="20171013 18:02:35.476"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.477" starttime="20171013 18:02:35.476"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.477" starttime="20171013 18:02:35.475"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:35.477" starttime="20171013 18:02:35.474"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:35.477">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:35.477" starttime="20171013 18:02:35.477"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.478">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.478" starttime="20171013 18:02:35.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:35.478" starttime="20171013 18:02:35.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.479">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:35.479">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:35.479">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:35.479" starttime="20171013 18:02:35.479"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.479">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:02:35.480" starttime="20171013 18:02:35.018"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:35.480">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:02:35.480" starttime="20171013 18:02:35.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:35.480" starttime="20171013 18:02:35.480"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:35.484">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:35.485" starttime="20171013 18:02:35.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:35.485" starttime="20171013 18:02:35.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.486">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:35.486" starttime="20171013 18:02:35.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:35.487">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:35.487" starttime="20171013 18:02:35.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.044">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:36.044" starttime="20171013 18:02:35.488"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:36.044">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:36.044">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.044" starttime="20171013 18:02:35.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.045">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.045" starttime="20171013 18:02:36.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.046" starttime="20171013 18:02:36.045"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.046" starttime="20171013 18:02:35.484"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.046" starttime="20171013 18:02:35.483"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.046" starttime="20171013 18:02:35.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:36.046">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:02:36.047" starttime="20171013 18:02:36.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:36.049">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:36.049" starttime="20171013 18:02:36.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.050">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:36.050" starttime="20171013 18:02:36.049"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.050" starttime="20171013 18:02:36.049"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.050" starttime="20171013 18:02:36.047"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.050" starttime="20171013 18:02:36.047"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:36.138">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:36.138">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.138" starttime="20171013 18:02:36.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:36.140">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:36.140" starttime="20171013 18:02:36.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.141">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:36.141" starttime="20171013 18:02:36.141"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.141" starttime="20171013 18:02:36.140"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.141" starttime="20171013 18:02:36.139"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:36.141" starttime="20171013 18:02:36.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:36.142">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:36.142" starttime="20171013 18:02:36.142"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:36.142">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.142" starttime="20171013 18:02:35.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:36.143" starttime="20171013 18:02:36.142"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:36.143">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:36.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:36.144">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:36.144" starttime="20171013 18:02:36.143"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:36.144">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:36.144" starttime="20171013 18:02:35.481"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:36.144">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:36.144" starttime="20171013 18:02:35.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:36.145">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:02:36.145">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:02:36.145" starttime="20171013 18:02:36.144"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:36.145" starttime="20171013 18:02:35.481"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:36.145" starttime="20171013 18:02:34.511"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:46.152">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:46.152" starttime="20171013 18:02:46.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:46.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:46.153" starttime="20171013 18:02:46.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:46.154">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:46.154" starttime="20171013 18:02:46.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:46.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:46.155" starttime="20171013 18:02:46.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:46.967">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:46.967" starttime="20171013 18:02:46.156"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:46.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:46.968">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:46.968" starttime="20171013 18:02:46.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:46.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:46.968" starttime="20171013 18:02:46.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:46.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:46.969" starttime="20171013 18:02:46.969"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.969" starttime="20171013 18:02:46.151"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.969" starttime="20171013 18:02:46.150"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.969" starttime="20171013 18:02:46.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:46.970">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:02:46.970" starttime="20171013 18:02:46.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:46.972">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:46.972" starttime="20171013 18:02:46.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:46.973">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:46.973" starttime="20171013 18:02:46.973"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.973" starttime="20171013 18:02:46.972"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.974" starttime="20171013 18:02:46.971"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:46.974" starttime="20171013 18:02:46.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.292">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:47.292">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.292" starttime="20171013 18:02:46.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.294">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:47.294" starttime="20171013 18:02:47.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.295">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:47.296" starttime="20171013 18:02:47.295"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.296" starttime="20171013 18:02:47.295"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.296" starttime="20171013 18:02:47.293"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.296" starttime="20171013 18:02:47.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:47.296">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:47.296" starttime="20171013 18:02:47.296"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.296">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.297" starttime="20171013 18:02:46.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.297" starttime="20171013 18:02:47.297"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:47.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:47.298">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:47.298" starttime="20171013 18:02:47.297"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.298">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:02:47.298" starttime="20171013 18:02:46.147"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.299">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:02:47.299" starttime="20171013 18:02:46.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:47.299" starttime="20171013 18:02:47.299"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.299" starttime="20171013 18:02:46.146"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:47.303" starttime="20171013 18:02:47.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:47.304" starttime="20171013 18:02:47.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.305">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:47.305" starttime="20171013 18:02:47.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:47.305" starttime="20171013 18:02:47.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.785">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:47.785" starttime="20171013 18:02:47.306"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.785">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:47.785">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.785" starttime="20171013 18:02:47.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.786">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.786" starttime="20171013 18:02:47.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.787" starttime="20171013 18:02:47.787"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.787" starttime="20171013 18:02:47.302"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.787" starttime="20171013 18:02:47.302"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.787" starttime="20171013 18:02:47.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.788">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:02:47.788" starttime="20171013 18:02:47.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.793">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:47.793" starttime="20171013 18:02:47.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.794">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:47.794" starttime="20171013 18:02:47.794"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.794" starttime="20171013 18:02:47.793"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.795" starttime="20171013 18:02:47.789"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.795" starttime="20171013 18:02:47.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:47.896">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.896" starttime="20171013 18:02:47.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:47.898" starttime="20171013 18:02:47.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:47.899" starttime="20171013 18:02:47.899"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.899" starttime="20171013 18:02:47.898"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.899" starttime="20171013 18:02:47.897"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:47.900" starttime="20171013 18:02:47.897"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:47.900">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:47.900" starttime="20171013 18:02:47.900"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.900">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.900" starttime="20171013 18:02:47.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:47.901" starttime="20171013 18:02:47.901"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:47.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:47.902">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:47.902" starttime="20171013 18:02:47.901"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.902">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:02:47.902" starttime="20171013 18:02:47.300"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:47.903">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:02:47.903" starttime="20171013 18:02:47.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:02:47.903" starttime="20171013 18:02:47.903"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:47.908">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:47.908" starttime="20171013 18:02:47.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:47.909" starttime="20171013 18:02:47.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.909">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:47.909" starttime="20171013 18:02:47.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:47.910">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:47.910" starttime="20171013 18:02:47.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:02:48.422" starttime="20171013 18:02:47.911"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:48.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:02:48.422">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.422" starttime="20171013 18:02:47.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.423" starttime="20171013 18:02:48.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.424" starttime="20171013 18:02:48.423"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.424" starttime="20171013 18:02:47.906"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.424" starttime="20171013 18:02:47.906"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.424" starttime="20171013 18:02:47.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:48.425">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:02:48.425" starttime="20171013 18:02:48.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:48.427">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:48.427" starttime="20171013 18:02:48.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.428">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:02:48.428" starttime="20171013 18:02:48.428"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.428" starttime="20171013 18:02:48.427"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.428" starttime="20171013 18:02:48.426"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.428" starttime="20171013 18:02:48.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:48.733">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:02:48.733">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.733" starttime="20171013 18:02:48.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:48.735">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:48.735" starttime="20171013 18:02:48.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.736">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:02:48.736" starttime="20171013 18:02:48.735"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.736" starttime="20171013 18:02:48.735"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.736" starttime="20171013 18:02:48.734"></status>
</kw>
<status status="PASS" endtime="20171013 18:02:48.736" starttime="20171013 18:02:48.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:02:48.737">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:02:48.737" starttime="20171013 18:02:48.736"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:48.737">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.737" starttime="20171013 18:02:47.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:02:48.738" starttime="20171013 18:02:48.737"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:48.738">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:02:48.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:02:48.738">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:02:48.738" starttime="20171013 18:02:48.738"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:48.739">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:48.739" starttime="20171013 18:02:47.904"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:02:48.739">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:02:48.739" starttime="20171013 18:02:47.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:48.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:02:48.740">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:02:48.740" starttime="20171013 18:02:48.739"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:48.740" starttime="20171013 18:02:47.903"></status>
</kw>
<status status="FAIL" endtime="20171013 18:02:48.740" starttime="20171013 18:02:46.146"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:02:58.746">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:02:58.746" starttime="20171013 18:02:58.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:58.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:02:58.747" starttime="20171013 18:02:58.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:58.747">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:02:58.747" starttime="20171013 18:02:58.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:02:58.748">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:02:58.748" starttime="20171013 18:02:58.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:00.397">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:00.397" starttime="20171013 18:02:58.749"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:00.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:00.398">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:00.398" starttime="20171013 18:02:58.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:00.398">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:00.398" starttime="20171013 18:03:00.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:00.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:00.399" starttime="20171013 18:03:00.399"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.399" starttime="20171013 18:02:58.745"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.399" starttime="20171013 18:02:58.744"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.400" starttime="20171013 18:02:58.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:00.400">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:03:00.400" starttime="20171013 18:03:00.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:00.402">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:00.402" starttime="20171013 18:03:00.402"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:00.403">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:00.403" starttime="20171013 18:03:00.403"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.404" starttime="20171013 18:03:00.403"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.404" starttime="20171013 18:03:00.401"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:00.404" starttime="20171013 18:03:00.400"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.479">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:04.479">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:04.479" starttime="20171013 18:03:00.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:04.482" starttime="20171013 18:03:04.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:04.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:04.485" starttime="20171013 18:03:04.484"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:04.485" starttime="20171013 18:03:04.483"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:04.485" starttime="20171013 18:03:04.480"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:04.485" starttime="20171013 18:03:04.479"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:04.486">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:04.486" starttime="20171013 18:03:04.485"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:04.486">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:04.486" starttime="20171013 18:02:58.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:04.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:04.487" starttime="20171013 18:03:04.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:04.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:04.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:04.488" starttime="20171013 18:03:04.487"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:04.489">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:03:04.489" starttime="20171013 18:02:58.742"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:04.489">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:03:04.489" starttime="20171013 18:02:58.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:04.490" starttime="20171013 18:03:04.490"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:04.490" starttime="20171013 18:02:58.741"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:04.494">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:04.494" starttime="20171013 18:03:04.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:04.495" starttime="20171013 18:03:04.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.496">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:04.496" starttime="20171013 18:03:04.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:04.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:04.496" starttime="20171013 18:03:04.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:05.173">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:05.173" starttime="20171013 18:03:04.497"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:05.173">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:05.173">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:05.173" starttime="20171013 18:03:04.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:05.174">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:05.174" starttime="20171013 18:03:05.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:05.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:05.175" starttime="20171013 18:03:05.174"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.175" starttime="20171013 18:03:04.493"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.175" starttime="20171013 18:03:04.493"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.175" starttime="20171013 18:03:04.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:05.176">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:03:05.176" starttime="20171013 18:03:05.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:05.179">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:05.179" starttime="20171013 18:03:05.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:05.181">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:05.181" starttime="20171013 18:03:05.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.181" starttime="20171013 18:03:05.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.181" starttime="20171013 18:03:05.177"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:05.181" starttime="20171013 18:03:05.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.645">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:14.645">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:14.645" starttime="20171013 18:03:05.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.647">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:14.647" starttime="20171013 18:03:14.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:14.648">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:14.649" starttime="20171013 18:03:14.648"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:14.649" starttime="20171013 18:03:14.648"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:14.649" starttime="20171013 18:03:14.646"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:14.649" starttime="20171013 18:03:14.646"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:14.649">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:14.649" starttime="20171013 18:03:14.649"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:14.650">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:14.650" starttime="20171013 18:03:04.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:14.650">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:14.650" starttime="20171013 18:03:14.650"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.651">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:14.651">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:14.651">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:14.651" starttime="20171013 18:03:14.651"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:14.651">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:03:14.651" starttime="20171013 18:03:04.491"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:14.652">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:03:14.652" starttime="20171013 18:03:04.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:14.652" starttime="20171013 18:03:14.652"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:14.656">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:14.657" starttime="20171013 18:03:14.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:14.657" starttime="20171013 18:03:14.657"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.658">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:14.658" starttime="20171013 18:03:14.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:14.658">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:14.659" starttime="20171013 18:03:14.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:15.616" starttime="20171013 18:03:14.659"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:15.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:15.616">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.616" starttime="20171013 18:03:14.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.617" starttime="20171013 18:03:15.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.618" starttime="20171013 18:03:15.617"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.618" starttime="20171013 18:03:14.655"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.618" starttime="20171013 18:03:14.655"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.618" starttime="20171013 18:03:14.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:15.618">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:03:15.618" starttime="20171013 18:03:15.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:15.620">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:15.621" starttime="20171013 18:03:15.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.622">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:15.622" starttime="20171013 18:03:15.621"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.622" starttime="20171013 18:03:15.621"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.622" starttime="20171013 18:03:15.619"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.622" starttime="20171013 18:03:15.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:15.967">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:15.967">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.967" starttime="20171013 18:03:15.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:15.969">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:15.969" starttime="20171013 18:03:15.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.970">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:15.970" starttime="20171013 18:03:15.969"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.970" starttime="20171013 18:03:15.969"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.970" starttime="20171013 18:03:15.968"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:15.970" starttime="20171013 18:03:15.967"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:15.971">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:15.971" starttime="20171013 18:03:15.970"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:15.971">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.971" starttime="20171013 18:03:14.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:15.972" starttime="20171013 18:03:15.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:15.972">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:15.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:15.972">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:15.972" starttime="20171013 18:03:15.972"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:15.973">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:15.973" starttime="20171013 18:03:14.653"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:15.973">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:15.973" starttime="20171013 18:03:14.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:15.973">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:03:15.974">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:03:15.974" starttime="20171013 18:03:15.973"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:15.974" starttime="20171013 18:03:14.652"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:15.974" starttime="20171013 18:02:58.741"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:25.979">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:25.980" starttime="20171013 18:03:25.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:25.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:25.980" starttime="20171013 18:03:25.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:25.981">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:25.981" starttime="20171013 18:03:25.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:25.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:25.982" starttime="20171013 18:03:25.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:26.175" starttime="20171013 18:03:25.982"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:26.175">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.175" starttime="20171013 18:03:25.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.175">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.176" starttime="20171013 18:03:26.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.176" starttime="20171013 18:03:26.176"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.176" starttime="20171013 18:03:25.978"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.176" starttime="20171013 18:03:25.978"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.177" starttime="20171013 18:03:25.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.177">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:03:26.177" starttime="20171013 18:03:26.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.179">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:26.179" starttime="20171013 18:03:26.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.180">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:26.180" starttime="20171013 18:03:26.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.181" starttime="20171013 18:03:26.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.181" starttime="20171013 18:03:26.178"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.181" starttime="20171013 18:03:26.178"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.244">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:26.244">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.244" starttime="20171013 18:03:26.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.246">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:26.246" starttime="20171013 18:03:26.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.247">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:26.247" starttime="20171013 18:03:26.247"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.247" starttime="20171013 18:03:26.246"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.247" starttime="20171013 18:03:26.245"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.247" starttime="20171013 18:03:26.244"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:26.248">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:26.248" starttime="20171013 18:03:26.248"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.248">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.248" starttime="20171013 18:03:25.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.249" starttime="20171013 18:03:26.248"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.249">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:26.249">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:26.249">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:26.249" starttime="20171013 18:03:26.249"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.250">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:03:26.250" starttime="20171013 18:03:25.976"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.250">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:03:26.250" starttime="20171013 18:03:25.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:26.251" starttime="20171013 18:03:26.250"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.251" starttime="20171013 18:03:25.975"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.254">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:26.255" starttime="20171013 18:03:26.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.255">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:26.255" starttime="20171013 18:03:26.255"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.256">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:26.256" starttime="20171013 18:03:26.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:26.257" starttime="20171013 18:03:26.256"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:26.695" starttime="20171013 18:03:26.257"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.695">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:26.695">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.695" starttime="20171013 18:03:26.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.696">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.696" starttime="20171013 18:03:26.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.696" starttime="20171013 18:03:26.696"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.697" starttime="20171013 18:03:26.253"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.697" starttime="20171013 18:03:26.253"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.697" starttime="20171013 18:03:26.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.697">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:03:26.697" starttime="20171013 18:03:26.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.700">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:26.700" starttime="20171013 18:03:26.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.701">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:26.701" starttime="20171013 18:03:26.701"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.701" starttime="20171013 18:03:26.700"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.701" starttime="20171013 18:03:26.698"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.701" starttime="20171013 18:03:26.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.819">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:26.819">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.819" starttime="20171013 18:03:26.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.821">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:26.821" starttime="20171013 18:03:26.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:26.823" starttime="20171013 18:03:26.822"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.823" starttime="20171013 18:03:26.822"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.823" starttime="20171013 18:03:26.820"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:26.823" starttime="20171013 18:03:26.820"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:26.823">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:26.823" starttime="20171013 18:03:26.823"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.824">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.824" starttime="20171013 18:03:26.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:26.824" starttime="20171013 18:03:26.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:26.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:26.825">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:26.825" starttime="20171013 18:03:26.825"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.825">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:03:26.825" starttime="20171013 18:03:26.251"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:26.826">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:03:26.826" starttime="20171013 18:03:26.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:26.826" starttime="20171013 18:03:26.826"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:26.830">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:26.831" starttime="20171013 18:03:26.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:26.831" starttime="20171013 18:03:26.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.832">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:26.832" starttime="20171013 18:03:26.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:26.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:26.833" starttime="20171013 18:03:26.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:27.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:27.987" starttime="20171013 18:03:26.833"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:27.987">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:27.987">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:27.987" starttime="20171013 18:03:26.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:27.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:27.988" starttime="20171013 18:03:27.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:27.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:27.988" starttime="20171013 18:03:27.988"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.989" starttime="20171013 18:03:26.829"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.989" starttime="20171013 18:03:26.829"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.989" starttime="20171013 18:03:26.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:27.989">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:03:27.989" starttime="20171013 18:03:27.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:27.992">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:27.992" starttime="20171013 18:03:27.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:27.993">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:27.993" starttime="20171013 18:03:27.992"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.993" starttime="20171013 18:03:27.992"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.993" starttime="20171013 18:03:27.990"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:27.993" starttime="20171013 18:03:27.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:28.176">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:28.177">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:28.177" starttime="20171013 18:03:27.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:28.179">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:28.179" starttime="20171013 18:03:28.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:28.179">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:28.180" starttime="20171013 18:03:28.179"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:28.180" starttime="20171013 18:03:28.179"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:28.180" starttime="20171013 18:03:28.178"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:28.180" starttime="20171013 18:03:28.177"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:28.180">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:28.180" starttime="20171013 18:03:28.180"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:28.181">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:28.181" starttime="20171013 18:03:26.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:28.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:28.181" starttime="20171013 18:03:28.181"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:28.182">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:28.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:28.182">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:28.182" starttime="20171013 18:03:28.182"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:28.182">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:28.182" starttime="20171013 18:03:26.827"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:28.183">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:28.183" starttime="20171013 18:03:26.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:28.183">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:03:28.183">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:03:28.183" starttime="20171013 18:03:28.183"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:28.184" starttime="20171013 18:03:26.826"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:28.184" starttime="20171013 18:03:25.974"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:38.189">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:38.190" starttime="20171013 18:03:38.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:38.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:38.190" starttime="20171013 18:03:38.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:38.191">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:38.191" starttime="20171013 18:03:38.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:38.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:38.192" starttime="20171013 18:03:38.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:38.375">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:38.376" starttime="20171013 18:03:38.192"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:38.376">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:38.376">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:38.376" starttime="20171013 18:03:38.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:38.376">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:38.376" starttime="20171013 18:03:38.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:38.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:38.377" starttime="20171013 18:03:38.377"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.377" starttime="20171013 18:03:38.188"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.377" starttime="20171013 18:03:38.187"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.378" starttime="20171013 18:03:38.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:38.378">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:03:38.378" starttime="20171013 18:03:38.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:38.380">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:38.380" starttime="20171013 18:03:38.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:38.381">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:38.381" starttime="20171013 18:03:38.381"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.381" starttime="20171013 18:03:38.380"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.382" starttime="20171013 18:03:38.379"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:38.382" starttime="20171013 18:03:38.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171013 18:03:48.394">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171013 18:03:54.589">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:54.589">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:54.589" starttime="20171013 18:03:38.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:54.591">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:54.591" starttime="20171013 18:03:54.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:54.592">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:54.592" starttime="20171013 18:03:54.592"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:54.593" starttime="20171013 18:03:54.592"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:54.593" starttime="20171013 18:03:54.590"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:54.593" starttime="20171013 18:03:54.589"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:54.593">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:54.593" starttime="20171013 18:03:54.593"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:54.593">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:54.593" starttime="20171013 18:03:38.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:54.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:54.594" starttime="20171013 18:03:54.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:54.595">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:54.595">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:54.595">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:54.595" starttime="20171013 18:03:54.594"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:54.595">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171013 18:03:54.595" starttime="20171013 18:03:38.186"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:54.595">${power_state} = On</msg>
<status status="PASS" endtime="20171013 18:03:54.596" starttime="20171013 18:03:38.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:54.596" starttime="20171013 18:03:54.596"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:54.596" starttime="20171013 18:03:38.185"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:54.600">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:54.600" starttime="20171013 18:03:54.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:54.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:54.601" starttime="20171013 18:03:54.600"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:54.601">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:54.601" starttime="20171013 18:03:54.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:54.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:54.602" starttime="20171013 18:03:54.602"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:55.034" starttime="20171013 18:03:54.603"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:55.034">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:55.034">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.034" starttime="20171013 18:03:54.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.035" starttime="20171013 18:03:55.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.035" starttime="20171013 18:03:55.035"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.036" starttime="20171013 18:03:54.599"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.036" starttime="20171013 18:03:54.598"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.036" starttime="20171013 18:03:54.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.036">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171013 18:03:55.036" starttime="20171013 18:03:55.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.041">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:55.041" starttime="20171013 18:03:55.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.043">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:55.043" starttime="20171013 18:03:55.043"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.043" starttime="20171013 18:03:55.042"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.043" starttime="20171013 18:03:55.037"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.043" starttime="20171013 18:03:55.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:55.132">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.132" starttime="20171013 18:03:55.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:55.134" starttime="20171013 18:03:55.133"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.134">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:55.135" starttime="20171013 18:03:55.134"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.135" starttime="20171013 18:03:55.134"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.135" starttime="20171013 18:03:55.133"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.135" starttime="20171013 18:03:55.132"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:55.135">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:55.135" starttime="20171013 18:03:55.135"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:55.135">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.136" starttime="20171013 18:03:54.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.136" starttime="20171013 18:03:55.136"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:55.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:55.137">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:55.137" starttime="20171013 18:03:55.136"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:55.137">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171013 18:03:55.137" starttime="20171013 18:03:54.597"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:55.138">${host_state} = Running</msg>
<status status="PASS" endtime="20171013 18:03:55.138" starttime="20171013 18:03:54.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:03:55.138" starttime="20171013 18:03:55.138"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.143">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:03:55.143" starttime="20171013 18:03:55.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:03:55.144" starttime="20171013 18:03:55.143"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.145">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:03:55.145" starttime="20171013 18:03:55.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.145">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:03:55.146" starttime="20171013 18:03:55.145"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:03:55.800" starttime="20171013 18:03:55.147"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:55.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:03:55.800">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.800" starttime="20171013 18:03:55.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.801" starttime="20171013 18:03:55.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:55.802" starttime="20171013 18:03:55.801"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.802" starttime="20171013 18:03:55.142"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.802" starttime="20171013 18:03:55.141"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.802" starttime="20171013 18:03:55.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.802">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171013 18:03:55.802" starttime="20171013 18:03:55.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:55.805">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:55.805" starttime="20171013 18:03:55.804"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:55.805">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:03:55.806" starttime="20171013 18:03:55.805"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.806" starttime="20171013 18:03:55.805"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.806" starttime="20171013 18:03:55.803"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:55.806" starttime="20171013 18:03:55.803"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:56.304">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:03:56.304">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:56.304" starttime="20171013 18:03:55.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:56.305">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:56.306" starttime="20171013 18:03:56.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:56.306">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:03:56.307" starttime="20171013 18:03:56.306"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:56.307" starttime="20171013 18:03:56.306"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:56.307" starttime="20171013 18:03:56.305"></status>
</kw>
<status status="PASS" endtime="20171013 18:03:56.307" starttime="20171013 18:03:56.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:03:56.307">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:03:56.307" starttime="20171013 18:03:56.307"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:56.307">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:03:56.308" starttime="20171013 18:03:55.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:56.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:03:56.308" starttime="20171013 18:03:56.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:03:56.309">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:03:56.309">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:03:56.309">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:03:56.309" starttime="20171013 18:03:56.308"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:56.309">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:56.309" starttime="20171013 18:03:55.139"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:03:56.309">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171013 18:03:56.309" starttime="20171013 18:03:55.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:03:56.310">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171013 18:03:56.310">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171013 18:03:56.310" starttime="20171013 18:03:56.310"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:56.310" starttime="20171013 18:03:55.138"></status>
</kw>
<status status="FAIL" endtime="20171013 18:03:56.311" starttime="20171013 18:03:38.184"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:06.316">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:04:06.316" starttime="20171013 18:04:06.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:06.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:04:06.317" starttime="20171013 18:04:06.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:06.317">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:04:06.317" starttime="20171013 18:04:06.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:06.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:04:06.318" starttime="20171013 18:04:06.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:08.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:04:08.390" starttime="20171013 18:04:06.319"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:08.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:04:08.390">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:08.390" starttime="20171013 18:04:06.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:08.391">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:08.391" starttime="20171013 18:04:08.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:08.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:08.391" starttime="20171013 18:04:08.391"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.391" starttime="20171013 18:04:06.315"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.392" starttime="20171013 18:04:06.314"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.392" starttime="20171013 18:04:06.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:08.392">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:04:08.392" starttime="20171013 18:04:08.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:08.394">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:08.394" starttime="20171013 18:04:08.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:08.395">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:08.395" starttime="20171013 18:04:08.395"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.396" starttime="20171013 18:04:08.395"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.396" starttime="20171013 18:04:08.393"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:08.396" starttime="20171013 18:04:08.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:09.244">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:04:09.245">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:09.245" starttime="20171013 18:04:08.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:09.247">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:09.247" starttime="20171013 18:04:09.246"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:09.248">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:09.248" starttime="20171013 18:04:09.248"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:09.248" starttime="20171013 18:04:09.247"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:09.249" starttime="20171013 18:04:09.246"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:09.249" starttime="20171013 18:04:09.245"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:04:09.249">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:04:09.249" starttime="20171013 18:04:09.249"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:09.249">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:09.250" starttime="20171013 18:04:06.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:09.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:09.250" starttime="20171013 18:04:09.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:09.251">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:04:09.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:04:09.251">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:04:09.251" starttime="20171013 18:04:09.251"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:09.251">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:04:09.251" starttime="20171013 18:04:06.312"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:09.252">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:04:09.252" starttime="20171013 18:04:06.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:04:09.252">On != Off</msg>
<status status="FAIL" endtime="20171013 18:04:09.252" starttime="20171013 18:04:09.252"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:09.253" starttime="20171013 18:04:06.311"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:09.253" starttime="20171013 18:04:06.311"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.258">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:04:19.258" starttime="20171013 18:04:19.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:04:19.259" starttime="20171013 18:04:19.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.260">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:04:19.260" starttime="20171013 18:04:19.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:04:19.260" starttime="20171013 18:04:19.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:04:19.685" starttime="20171013 18:04:19.261"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:19.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:04:19.685">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.686" starttime="20171013 18:04:19.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.686" starttime="20171013 18:04:19.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.687" starttime="20171013 18:04:19.687"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.687" starttime="20171013 18:04:19.257"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.687" starttime="20171013 18:04:19.257"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.687" starttime="20171013 18:04:19.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.688">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:04:19.688" starttime="20171013 18:04:19.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.690">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:19.690" starttime="20171013 18:04:19.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.691">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:19.691" starttime="20171013 18:04:19.691"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.691" starttime="20171013 18:04:19.690"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.691" starttime="20171013 18:04:19.689"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.691" starttime="20171013 18:04:19.688"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.778">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:04:19.779">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.779" starttime="20171013 18:04:19.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.781">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:19.781" starttime="20171013 18:04:19.780"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.783">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:19.783" starttime="20171013 18:04:19.782"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.783" starttime="20171013 18:04:19.781"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.783" starttime="20171013 18:04:19.779"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:19.783" starttime="20171013 18:04:19.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:04:19.783">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:04:19.784" starttime="20171013 18:04:19.783"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:19.784">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.784" starttime="20171013 18:04:19.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:19.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:19.784" starttime="20171013 18:04:19.784"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:19.785">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:04:19.785">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:04:19.785">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:04:19.785" starttime="20171013 18:04:19.785"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:19.786">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:04:19.786" starttime="20171013 18:04:19.255"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:19.786">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:04:19.786" starttime="20171013 18:04:19.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:04:19.786">On != Off</msg>
<status status="FAIL" endtime="20171013 18:04:19.787" starttime="20171013 18:04:19.786"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:19.787" starttime="20171013 18:04:19.254"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:19.787" starttime="20171013 18:04:19.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:29.794">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:04:29.794" starttime="20171013 18:04:29.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:29.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:04:29.795" starttime="20171013 18:04:29.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:29.796">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:04:29.796" starttime="20171013 18:04:29.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:29.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:04:29.797" starttime="20171013 18:04:29.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.229">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:04:30.229" starttime="20171013 18:04:29.798"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:30.229">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:04:30.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.229" starttime="20171013 18:04:29.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.230">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.230" starttime="20171013 18:04:30.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.230" starttime="20171013 18:04:30.230"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.231" starttime="20171013 18:04:29.792"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.231" starttime="20171013 18:04:29.791"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.231" starttime="20171013 18:04:29.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:30.231">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:04:30.231" starttime="20171013 18:04:30.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:30.233">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:30.234" starttime="20171013 18:04:30.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.234">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:30.235" starttime="20171013 18:04:30.234"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.235" starttime="20171013 18:04:30.234"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.235" starttime="20171013 18:04:30.232"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.235" starttime="20171013 18:04:30.232"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:30.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:04:30.297">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.297" starttime="20171013 18:04:30.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:30.299">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:30.299" starttime="20171013 18:04:30.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.301">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:30.301" starttime="20171013 18:04:30.300"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.301" starttime="20171013 18:04:30.299"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.301" starttime="20171013 18:04:30.298"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:30.301" starttime="20171013 18:04:30.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:04:30.301">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:04:30.302" starttime="20171013 18:04:30.301"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:30.302">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.302" starttime="20171013 18:04:29.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:30.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:30.302" starttime="20171013 18:04:30.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:30.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:04:30.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:04:30.303">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:04:30.303" starttime="20171013 18:04:30.303"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:30.304">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:04:30.304" starttime="20171013 18:04:29.789"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:30.304">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:04:30.304" starttime="20171013 18:04:29.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:04:30.305">On != Off</msg>
<status status="FAIL" endtime="20171013 18:04:30.305" starttime="20171013 18:04:30.304"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:30.305" starttime="20171013 18:04:29.788"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:30.305" starttime="20171013 18:04:29.787"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:40.310">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:04:40.310" starttime="20171013 18:04:40.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:40.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:04:40.311" starttime="20171013 18:04:40.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:40.312">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:04:40.312" starttime="20171013 18:04:40.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:40.312">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:04:40.312" starttime="20171013 18:04:40.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.006">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:04:41.006" starttime="20171013 18:04:40.313"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:41.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:04:41.006">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.006" starttime="20171013 18:04:40.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.007">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.007" starttime="20171013 18:04:41.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.008" starttime="20171013 18:04:41.007"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.008" starttime="20171013 18:04:40.309"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.008" starttime="20171013 18:04:40.309"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.008" starttime="20171013 18:04:40.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:41.009">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:04:41.009" starttime="20171013 18:04:41.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:41.011">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:41.011" starttime="20171013 18:04:41.010"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.012">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:41.012" starttime="20171013 18:04:41.012"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.012" starttime="20171013 18:04:41.011"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.012" starttime="20171013 18:04:41.010"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.012" starttime="20171013 18:04:41.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:41.074">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:04:41.074">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.074" starttime="20171013 18:04:41.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:41.076">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:41.076" starttime="20171013 18:04:41.075"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.077">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:41.077" starttime="20171013 18:04:41.076"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.077" starttime="20171013 18:04:41.076"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.077" starttime="20171013 18:04:41.075"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:41.077" starttime="20171013 18:04:41.074"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:04:41.077">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:04:41.078" starttime="20171013 18:04:41.077"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:41.078">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.078" starttime="20171013 18:04:40.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:41.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:41.078" starttime="20171013 18:04:41.078"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:41.079">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:04:41.079">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:04:41.079">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:04:41.080" starttime="20171013 18:04:41.079"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:41.080">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:04:41.080" starttime="20171013 18:04:40.307"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:41.080">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:04:41.080" starttime="20171013 18:04:40.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:04:41.081">On != Off</msg>
<status status="FAIL" endtime="20171013 18:04:41.081" starttime="20171013 18:04:41.080"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:41.081" starttime="20171013 18:04:40.306"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:41.081" starttime="20171013 18:04:40.305"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.087">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:04:51.087" starttime="20171013 18:04:51.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:04:51.088" starttime="20171013 18:04:51.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.088">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:04:51.088" starttime="20171013 18:04:51.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:04:51.089" starttime="20171013 18:04:51.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:04:51.737" starttime="20171013 18:04:51.090"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:51.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:04:51.737">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.737" starttime="20171013 18:04:51.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.738">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.738" starttime="20171013 18:04:51.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.738" starttime="20171013 18:04:51.738"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.739" starttime="20171013 18:04:51.085"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.739" starttime="20171013 18:04:51.085"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.739" starttime="20171013 18:04:51.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.739">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:04:51.739" starttime="20171013 18:04:51.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:51.741" starttime="20171013 18:04:51.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.742">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:04:51.743" starttime="20171013 18:04:51.742"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.743" starttime="20171013 18:04:51.742"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.743" starttime="20171013 18:04:51.740"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.743" starttime="20171013 18:04:51.740"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.836">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:04:51.836">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.836" starttime="20171013 18:04:51.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.838">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:51.838" starttime="20171013 18:04:51.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.840">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:04:51.840" starttime="20171013 18:04:51.839"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.840" starttime="20171013 18:04:51.838"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.840" starttime="20171013 18:04:51.837"></status>
</kw>
<status status="PASS" endtime="20171013 18:04:51.840" starttime="20171013 18:04:51.837"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:04:51.840">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:04:51.840" starttime="20171013 18:04:51.840"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:51.841">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.841" starttime="20171013 18:04:51.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:04:51.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:04:51.842" starttime="20171013 18:04:51.841"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:04:51.842">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:04:51.842">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:04:51.842">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:04:51.842" starttime="20171013 18:04:51.842"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:51.843">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:04:51.843" starttime="20171013 18:04:51.083"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:04:51.843">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:04:51.843" starttime="20171013 18:04:51.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:04:51.844">On != Off</msg>
<status status="FAIL" endtime="20171013 18:04:51.844" starttime="20171013 18:04:51.843"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:51.844" starttime="20171013 18:04:51.082"></status>
</kw>
<status status="FAIL" endtime="20171013 18:04:51.844" starttime="20171013 18:04:51.082"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:01.849">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:01.850" starttime="20171013 18:05:01.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:01.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:01.850" starttime="20171013 18:05:01.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:01.851">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:01.851" starttime="20171013 18:05:01.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:01.852">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:01.852" starttime="20171013 18:05:01.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.202">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:02.202" starttime="20171013 18:05:01.852"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:02.202">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:02.202">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.202" starttime="20171013 18:05:01.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.203">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.203" starttime="20171013 18:05:02.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.204" starttime="20171013 18:05:02.204"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.204" starttime="20171013 18:05:01.848"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.204" starttime="20171013 18:05:01.848"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.204" starttime="20171013 18:05:01.847"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:02.205">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:02.205" starttime="20171013 18:05:02.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:02.207">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:02.207" starttime="20171013 18:05:02.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.208">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:02.208" starttime="20171013 18:05:02.208"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.208" starttime="20171013 18:05:02.207"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.208" starttime="20171013 18:05:02.206"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.209" starttime="20171013 18:05:02.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:02.351">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:02.351">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.351" starttime="20171013 18:05:02.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:02.353">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:02.353" starttime="20171013 18:05:02.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.354">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:02.354" starttime="20171013 18:05:02.354"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.354" starttime="20171013 18:05:02.353"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.354" starttime="20171013 18:05:02.352"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:02.355" starttime="20171013 18:05:02.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:02.355">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:02.355" starttime="20171013 18:05:02.355"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:02.355">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.355" starttime="20171013 18:05:01.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:02.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:02.356" starttime="20171013 18:05:02.356"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:02.357">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:02.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:02.357">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:02.357" starttime="20171013 18:05:02.356"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:02.357">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:02.357" starttime="20171013 18:05:01.846"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:02.357">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:02.357" starttime="20171013 18:05:01.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:02.358">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:02.358" starttime="20171013 18:05:02.358"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:02.358" starttime="20171013 18:05:01.845"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:02.358" starttime="20171013 18:05:01.845"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:12.364" starttime="20171013 18:05:12.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:12.365" starttime="20171013 18:05:12.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.365">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:12.366" starttime="20171013 18:05:12.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:12.366" starttime="20171013 18:05:12.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:12.791" starttime="20171013 18:05:12.367"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:12.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:12.791">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.791" starttime="20171013 18:05:12.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.792" starttime="20171013 18:05:12.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.793" starttime="20171013 18:05:12.792"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.793" starttime="20171013 18:05:12.362"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.793" starttime="20171013 18:05:12.362"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.793" starttime="20171013 18:05:12.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.794">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:12.794" starttime="20171013 18:05:12.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.796">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:12.796" starttime="20171013 18:05:12.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.797">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:12.797" starttime="20171013 18:05:12.797"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.797" starttime="20171013 18:05:12.796"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.797" starttime="20171013 18:05:12.795"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.797" starttime="20171013 18:05:12.794"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.866">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:12.867">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.867" starttime="20171013 18:05:12.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.869">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:12.869" starttime="20171013 18:05:12.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.873">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:12.873" starttime="20171013 18:05:12.873"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.873" starttime="20171013 18:05:12.869"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.873" starttime="20171013 18:05:12.867"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:12.873" starttime="20171013 18:05:12.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:12.874">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:12.874" starttime="20171013 18:05:12.874"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:12.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.875" starttime="20171013 18:05:12.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:12.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:12.875" starttime="20171013 18:05:12.875"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:12.876">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:12.876">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:12.876">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:12.876" starttime="20171013 18:05:12.876"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:12.877">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:12.877" starttime="20171013 18:05:12.360"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:12.877">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:12.877" starttime="20171013 18:05:12.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:12.878">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:12.878" starttime="20171013 18:05:12.877"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:12.878" starttime="20171013 18:05:12.359"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:12.878" starttime="20171013 18:05:12.359"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:22.884">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:22.884" starttime="20171013 18:05:22.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:22.885">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:22.885" starttime="20171013 18:05:22.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:22.885">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:22.886" starttime="20171013 18:05:22.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:22.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:22.886" starttime="20171013 18:05:22.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:23.453" starttime="20171013 18:05:22.887"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:23.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:23.453">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.453" starttime="20171013 18:05:22.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.454" starttime="20171013 18:05:23.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.455" starttime="20171013 18:05:23.454"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.455" starttime="20171013 18:05:22.883"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.455" starttime="20171013 18:05:22.882"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.455" starttime="20171013 18:05:22.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:23.456">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:23.456" starttime="20171013 18:05:23.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:23.458">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:23.458" starttime="20171013 18:05:23.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.459">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:23.459" starttime="20171013 18:05:23.459"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.459" starttime="20171013 18:05:23.458"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.459" starttime="20171013 18:05:23.456"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.459" starttime="20171013 18:05:23.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:23.609">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:23.609">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.609" starttime="20171013 18:05:23.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:23.611">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:23.611" starttime="20171013 18:05:23.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.612">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:23.612" starttime="20171013 18:05:23.611"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.612" starttime="20171013 18:05:23.611"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.612" starttime="20171013 18:05:23.610"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:23.612" starttime="20171013 18:05:23.609"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:23.613">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:23.613" starttime="20171013 18:05:23.612"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:23.613">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.613" starttime="20171013 18:05:22.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:23.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:23.614" starttime="20171013 18:05:23.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:23.614">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:23.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:23.614">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:23.614" starttime="20171013 18:05:23.614"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:23.615">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:23.615" starttime="20171013 18:05:22.880"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:23.615">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:23.615" starttime="20171013 18:05:22.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:23.616">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:23.616" starttime="20171013 18:05:23.615"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:23.616" starttime="20171013 18:05:22.879"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:23.616" starttime="20171013 18:05:22.878"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:33.622">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:33.622" starttime="20171013 18:05:33.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:33.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:33.623" starttime="20171013 18:05:33.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:33.624">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:33.624" starttime="20171013 18:05:33.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:33.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:33.624" starttime="20171013 18:05:33.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.485">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:34.485" starttime="20171013 18:05:33.625"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:34.485">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:34.485">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.485" starttime="20171013 18:05:33.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.486">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.486" starttime="20171013 18:05:34.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.487" starttime="20171013 18:05:34.486"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.487" starttime="20171013 18:05:33.620"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.487" starttime="20171013 18:05:33.620"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.487" starttime="20171013 18:05:33.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:34.488">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:34.488" starttime="20171013 18:05:34.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:34.490">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:34.490" starttime="20171013 18:05:34.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.491">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:34.491" starttime="20171013 18:05:34.491"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.491" starttime="20171013 18:05:34.490"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.491" starttime="20171013 18:05:34.488"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.491" starttime="20171013 18:05:34.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:34.649">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:34.649">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.649" starttime="20171013 18:05:34.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:34.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:34.651" starttime="20171013 18:05:34.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.653">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:34.653" starttime="20171013 18:05:34.652"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.653" starttime="20171013 18:05:34.652"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.653" starttime="20171013 18:05:34.650"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:34.653" starttime="20171013 18:05:34.650"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:34.654">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:34.654" starttime="20171013 18:05:34.653"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:34.654">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.654" starttime="20171013 18:05:33.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:34.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:34.655" starttime="20171013 18:05:34.654"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:34.655">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:34.655">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:34.655">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:34.655" starttime="20171013 18:05:34.655"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:34.656">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:34.656" starttime="20171013 18:05:33.618"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:34.656">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:34.656" starttime="20171013 18:05:33.618"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:34.657">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:34.657" starttime="20171013 18:05:34.656"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:34.657" starttime="20171013 18:05:33.617"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:34.657" starttime="20171013 18:05:33.617"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:44.662">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:44.663" starttime="20171013 18:05:44.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:44.663">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:44.663" starttime="20171013 18:05:44.663"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:44.664">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:44.664" starttime="20171013 18:05:44.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:44.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:44.665" starttime="20171013 18:05:44.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.010">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:45.010" starttime="20171013 18:05:44.665"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:45.011">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:45.011">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.011" starttime="20171013 18:05:44.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.011">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.012" starttime="20171013 18:05:45.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.012" starttime="20171013 18:05:45.012"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.012" starttime="20171013 18:05:44.661"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.012" starttime="20171013 18:05:44.661"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.013" starttime="20171013 18:05:44.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:45.013">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:45.013" starttime="20171013 18:05:45.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:45.016">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:45.016" starttime="20171013 18:05:45.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.017">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:45.017" starttime="20171013 18:05:45.017"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.017" starttime="20171013 18:05:45.016"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.017" starttime="20171013 18:05:45.014"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.017" starttime="20171013 18:05:45.013"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:45.168">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:45.169">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.169" starttime="20171013 18:05:45.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:45.171">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:45.171" starttime="20171013 18:05:45.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.171">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:45.172" starttime="20171013 18:05:45.171"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.172" starttime="20171013 18:05:45.171"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.172" starttime="20171013 18:05:45.170"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:45.172" starttime="20171013 18:05:45.169"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:45.172">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:45.172" starttime="20171013 18:05:45.172"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:45.173">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.173" starttime="20171013 18:05:44.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:45.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:45.173" starttime="20171013 18:05:45.173"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:45.174">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:45.174">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:45.174">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:45.174" starttime="20171013 18:05:45.174"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:45.174">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:45.174" starttime="20171013 18:05:44.659"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:45.175">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:45.175" starttime="20171013 18:05:44.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:45.175">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:45.176" starttime="20171013 18:05:45.175"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:45.176" starttime="20171013 18:05:44.658"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:45.176" starttime="20171013 18:05:44.658"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.182">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:05:55.182" starttime="20171013 18:05:55.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:05:55.183" starttime="20171013 18:05:55.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.183">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:05:55.183" starttime="20171013 18:05:55.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.184">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:05:55.184" starttime="20171013 18:05:55.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:05:55.366" starttime="20171013 18:05:55.185"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:55.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:05:55.367">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.367" starttime="20171013 18:05:55.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.367" starttime="20171013 18:05:55.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.368" starttime="20171013 18:05:55.368"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.368" starttime="20171013 18:05:55.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.368" starttime="20171013 18:05:55.180"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.368" starttime="20171013 18:05:55.179"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.369">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:05:55.369" starttime="20171013 18:05:55.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.371">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:55.371" starttime="20171013 18:05:55.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.372">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:05:55.372" starttime="20171013 18:05:55.372"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.372" starttime="20171013 18:05:55.371"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.372" starttime="20171013 18:05:55.370"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.372" starttime="20171013 18:05:55.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.656">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:05:55.656">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.656" starttime="20171013 18:05:55.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.658">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:55.658" starttime="20171013 18:05:55.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.659">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:05:55.659" starttime="20171013 18:05:55.658"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.659" starttime="20171013 18:05:55.658"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.659" starttime="20171013 18:05:55.657"></status>
</kw>
<status status="PASS" endtime="20171013 18:05:55.659" starttime="20171013 18:05:55.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:05:55.660">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:05:55.660" starttime="20171013 18:05:55.660"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:55.660">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.660" starttime="20171013 18:05:55.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:05:55.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:05:55.661" starttime="20171013 18:05:55.660"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:05:55.661">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:05:55.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:05:55.662">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:05:55.662" starttime="20171013 18:05:55.661"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:55.662">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:05:55.662" starttime="20171013 18:05:55.178"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:05:55.662">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:05:55.662" starttime="20171013 18:05:55.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:05:55.663">On != Off</msg>
<status status="FAIL" endtime="20171013 18:05:55.663" starttime="20171013 18:05:55.663"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:55.663" starttime="20171013 18:05:55.177"></status>
</kw>
<status status="FAIL" endtime="20171013 18:05:55.663" starttime="20171013 18:05:55.176"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:05.668">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:06:05.669" starttime="20171013 18:06:05.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:05.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:06:05.669" starttime="20171013 18:06:05.669"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:05.670">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:06:05.670" starttime="20171013 18:06:05.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:05.671">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:06:05.671" starttime="20171013 18:06:05.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:06:06.032" starttime="20171013 18:06:05.671"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:06.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:06:06.032">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.032" starttime="20171013 18:06:05.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.032">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.033" starttime="20171013 18:06:06.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.033" starttime="20171013 18:06:06.033"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.033" starttime="20171013 18:06:05.667"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.033" starttime="20171013 18:06:05.667"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.034" starttime="20171013 18:06:05.666"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:06.034">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:06:06.034" starttime="20171013 18:06:06.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:06.036">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:06.036" starttime="20171013 18:06:06.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.037">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:06.037" starttime="20171013 18:06:06.037"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.038" starttime="20171013 18:06:06.037"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.038" starttime="20171013 18:06:06.035"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.038" starttime="20171013 18:06:06.035"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:06.238">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:06:06.239">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.239" starttime="20171013 18:06:06.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:06.241">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:06.241" starttime="20171013 18:06:06.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.241">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:06.242" starttime="20171013 18:06:06.241"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.242" starttime="20171013 18:06:06.241"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.242" starttime="20171013 18:06:06.240"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:06.242" starttime="20171013 18:06:06.239"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:06:06.242">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:06:06.242" starttime="20171013 18:06:06.242"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:06.243">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.243" starttime="20171013 18:06:05.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:06.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:06.243" starttime="20171013 18:06:06.243"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:06.244">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:06:06.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:06:06.244">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:06:06.244" starttime="20171013 18:06:06.244"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:06.244">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:06:06.244" starttime="20171013 18:06:05.665"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:06.245">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:06:06.245" starttime="20171013 18:06:05.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:06:06.245">On != Off</msg>
<status status="FAIL" endtime="20171013 18:06:06.245" starttime="20171013 18:06:06.245"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:06.246" starttime="20171013 18:06:05.664"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:06.246" starttime="20171013 18:06:05.664"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.252">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:06:16.253" starttime="20171013 18:06:16.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:06:16.254" starttime="20171013 18:06:16.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.254">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:06:16.254" starttime="20171013 18:06:16.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:06:16.255" starttime="20171013 18:06:16.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:06:16.507" starttime="20171013 18:06:16.256"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:16.507">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:06:16.507">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.507" starttime="20171013 18:06:16.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.508" starttime="20171013 18:06:16.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.508" starttime="20171013 18:06:16.508"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.508" starttime="20171013 18:06:16.250"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.509" starttime="20171013 18:06:16.250"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.509" starttime="20171013 18:06:16.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.509">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:06:16.509" starttime="20171013 18:06:16.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.511">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:16.511" starttime="20171013 18:06:16.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.512">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:16.512" starttime="20171013 18:06:16.512"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.513" starttime="20171013 18:06:16.512"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.513" starttime="20171013 18:06:16.510"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.513" starttime="20171013 18:06:16.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.824">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:06:16.824">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.824" starttime="20171013 18:06:16.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.826">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:16.826" starttime="20171013 18:06:16.826"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.828">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:16.828" starttime="20171013 18:06:16.827"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.828" starttime="20171013 18:06:16.827"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.828" starttime="20171013 18:06:16.825"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:16.828" starttime="20171013 18:06:16.825"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:06:16.829">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:06:16.829" starttime="20171013 18:06:16.828"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:16.829">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.829" starttime="20171013 18:06:16.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:16.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:16.830" starttime="20171013 18:06:16.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:16.830">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:06:16.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:06:16.830">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:06:16.830" starttime="20171013 18:06:16.830"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:16.831">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:06:16.831" starttime="20171013 18:06:16.248"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:16.831">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:06:16.831" starttime="20171013 18:06:16.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:06:16.832">On != Off</msg>
<status status="FAIL" endtime="20171013 18:06:16.832" starttime="20171013 18:06:16.831"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:16.832" starttime="20171013 18:06:16.247"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:16.832" starttime="20171013 18:06:16.246"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:26.837">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:06:26.838" starttime="20171013 18:06:26.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:26.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:06:26.838" starttime="20171013 18:06:26.838"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:26.839">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:06:26.839" starttime="20171013 18:06:26.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:26.839">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:06:26.839" starttime="20171013 18:06:26.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:27.512">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:06:27.512" starttime="20171013 18:06:26.840"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:27.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:06:27.512">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:27.512" starttime="20171013 18:06:26.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:27.513">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:27.513" starttime="20171013 18:06:27.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:27.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:27.513" starttime="20171013 18:06:27.513"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.514" starttime="20171013 18:06:26.836"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.514" starttime="20171013 18:06:26.836"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.514" starttime="20171013 18:06:26.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:27.514">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:06:27.514" starttime="20171013 18:06:27.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:27.517">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:27.517" starttime="20171013 18:06:27.516"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:27.518">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:27.518" starttime="20171013 18:06:27.517"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.518" starttime="20171013 18:06:27.517"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.518" starttime="20171013 18:06:27.515"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:27.518" starttime="20171013 18:06:27.515"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:29.287">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:06:29.287">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:29.287" starttime="20171013 18:06:27.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:29.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:29.290" starttime="20171013 18:06:29.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:29.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:29.291" starttime="20171013 18:06:29.290"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:29.291" starttime="20171013 18:06:29.290"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:29.291" starttime="20171013 18:06:29.289"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:29.291" starttime="20171013 18:06:29.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:06:29.292">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:06:29.292" starttime="20171013 18:06:29.291"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:29.292">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:29.292" starttime="20171013 18:06:26.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:29.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:29.293" starttime="20171013 18:06:29.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:29.293">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:06:29.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:06:29.294">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:06:29.294" starttime="20171013 18:06:29.293"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:29.294">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:06:29.294" starttime="20171013 18:06:26.834"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:29.294">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:06:29.294" starttime="20171013 18:06:26.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:06:29.295">On != Off</msg>
<status status="FAIL" endtime="20171013 18:06:29.295" starttime="20171013 18:06:29.294"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:29.295" starttime="20171013 18:06:26.833"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:29.295" starttime="20171013 18:06:26.832"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:06:39.301" starttime="20171013 18:06:39.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:06:39.302" starttime="20171013 18:06:39.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:06:39.303" starttime="20171013 18:06:39.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:06:39.303" starttime="20171013 18:06:39.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:06:39.487" starttime="20171013 18:06:39.304"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:39.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:06:39.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.488" starttime="20171013 18:06:39.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.488">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.488" starttime="20171013 18:06:39.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.489" starttime="20171013 18:06:39.489"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.489" starttime="20171013 18:06:39.300"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.489" starttime="20171013 18:06:39.299"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.489" starttime="20171013 18:06:39.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.490">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:06:39.490" starttime="20171013 18:06:39.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.493">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:39.493" starttime="20171013 18:06:39.491"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.494">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:39.494" starttime="20171013 18:06:39.494"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.494" starttime="20171013 18:06:39.493"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.494" starttime="20171013 18:06:39.491"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.494" starttime="20171013 18:06:39.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.795">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:06:39.795">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.795" starttime="20171013 18:06:39.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.797">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:39.797" starttime="20171013 18:06:39.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.803">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:39.803" starttime="20171013 18:06:39.802"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.803" starttime="20171013 18:06:39.798"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.803" starttime="20171013 18:06:39.796"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:39.803" starttime="20171013 18:06:39.796"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:06:39.804">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:06:39.804" starttime="20171013 18:06:39.804"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:39.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.804" starttime="20171013 18:06:39.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:39.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:39.805" starttime="20171013 18:06:39.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:39.805">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:06:39.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:06:39.806">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:06:39.806" starttime="20171013 18:06:39.805"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:39.806">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:06:39.806" starttime="20171013 18:06:39.297"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:39.806">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:06:39.806" starttime="20171013 18:06:39.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:06:39.807">On != Off</msg>
<status status="FAIL" endtime="20171013 18:06:39.807" starttime="20171013 18:06:39.807"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:39.807" starttime="20171013 18:06:39.296"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:39.808" starttime="20171013 18:06:39.296"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:49.813">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:06:49.813" starttime="20171013 18:06:49.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:49.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:06:49.814" starttime="20171013 18:06:49.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:49.815">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:06:49.815" starttime="20171013 18:06:49.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:49.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:06:49.815" starttime="20171013 18:06:49.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:49.999">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:06:49.999" starttime="20171013 18:06:49.816"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:49.999">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:06:49.999">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:49.999" starttime="20171013 18:06:49.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:50.000">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:50.000" starttime="20171013 18:06:49.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:50.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:50.001" starttime="20171013 18:06:50.000"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.001" starttime="20171013 18:06:49.812"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.001" starttime="20171013 18:06:49.812"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.001" starttime="20171013 18:06:49.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:50.001">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:06:50.001" starttime="20171013 18:06:50.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:50.004">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:50.004" starttime="20171013 18:06:50.003"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:50.005">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:06:50.005" starttime="20171013 18:06:50.004"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.005" starttime="20171013 18:06:50.004"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.005" starttime="20171013 18:06:50.002"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.005" starttime="20171013 18:06:50.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:50.068">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:06:50.068">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:50.068" starttime="20171013 18:06:50.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:50.070">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:50.070" starttime="20171013 18:06:50.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:50.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:06:50.071" starttime="20171013 18:06:50.071"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.071" starttime="20171013 18:06:50.070"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.071" starttime="20171013 18:06:50.069"></status>
</kw>
<status status="PASS" endtime="20171013 18:06:50.071" starttime="20171013 18:06:50.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:06:50.072">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:06:50.072" starttime="20171013 18:06:50.072"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:50.072">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:06:50.072" starttime="20171013 18:06:49.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:06:50.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:06:50.073" starttime="20171013 18:06:50.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:06:50.073">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:06:50.073">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:06:50.074">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:06:50.074" starttime="20171013 18:06:50.073"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:50.074">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:06:50.074" starttime="20171013 18:06:49.810"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:06:50.074">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:06:50.074" starttime="20171013 18:06:49.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:06:50.075">On != Off</msg>
<status status="FAIL" endtime="20171013 18:06:50.075" starttime="20171013 18:06:50.075"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:50.075" starttime="20171013 18:06:49.809"></status>
</kw>
<status status="FAIL" endtime="20171013 18:06:50.075" starttime="20171013 18:06:49.808"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.081">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:00.082" starttime="20171013 18:07:00.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:00.082" starttime="20171013 18:07:00.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.083">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:00.083" starttime="20171013 18:07:00.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:00.084" starttime="20171013 18:07:00.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.481">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:00.481" starttime="20171013 18:07:00.085"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:00.481">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:00.481">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.481" starttime="20171013 18:07:00.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.482">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.482" starttime="20171013 18:07:00.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.483" starttime="20171013 18:07:00.482"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.483" starttime="20171013 18:07:00.080"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.483" starttime="20171013 18:07:00.079"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.483" starttime="20171013 18:07:00.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.484">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:00.484" starttime="20171013 18:07:00.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.486">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:00.486" starttime="20171013 18:07:00.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.487">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:00.488" starttime="20171013 18:07:00.487"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.488" starttime="20171013 18:07:00.487"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.488" starttime="20171013 18:07:00.484"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.488" starttime="20171013 18:07:00.484"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.549">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:00.550">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.550" starttime="20171013 18:07:00.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.552">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:00.552" starttime="20171013 18:07:00.551"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.553">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:00.553" starttime="20171013 18:07:00.552"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.553" starttime="20171013 18:07:00.552"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.553" starttime="20171013 18:07:00.551"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:00.553" starttime="20171013 18:07:00.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:00.554">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:00.554" starttime="20171013 18:07:00.554"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:00.554">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.554" starttime="20171013 18:07:00.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:00.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:00.555" starttime="20171013 18:07:00.554"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:00.555">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:00.555">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:00.556">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:00.556" starttime="20171013 18:07:00.555"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:00.556">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:00.556" starttime="20171013 18:07:00.077"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:00.556">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:00.556" starttime="20171013 18:07:00.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:00.557">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:00.557" starttime="20171013 18:07:00.556"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:00.557" starttime="20171013 18:07:00.077"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:00.557" starttime="20171013 18:07:00.076"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.563">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:10.563" starttime="20171013 18:07:10.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.564">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:10.564" starttime="20171013 18:07:10.563"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.564">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:10.564" starttime="20171013 18:07:10.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.565">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:10.565" starttime="20171013 18:07:10.565"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.748">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:10.748" starttime="20171013 18:07:10.566"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:10.748">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:10.748">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.748" starttime="20171013 18:07:10.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.749">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.749" starttime="20171013 18:07:10.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.750" starttime="20171013 18:07:10.749"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.750" starttime="20171013 18:07:10.562"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.750" starttime="20171013 18:07:10.561"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.750" starttime="20171013 18:07:10.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.751">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:10.751" starttime="20171013 18:07:10.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.753">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:10.753" starttime="20171013 18:07:10.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.754">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:10.754" starttime="20171013 18:07:10.754"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.754" starttime="20171013 18:07:10.753"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.754" starttime="20171013 18:07:10.752"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.754" starttime="20171013 18:07:10.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.824">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:10.824">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.824" starttime="20171013 18:07:10.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.827">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:10.827" starttime="20171013 18:07:10.826"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.827">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:10.828" starttime="20171013 18:07:10.827"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.828" starttime="20171013 18:07:10.827"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.828" starttime="20171013 18:07:10.825"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:10.828" starttime="20171013 18:07:10.825"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:10.828">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:10.828" starttime="20171013 18:07:10.828"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:10.829">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.829" starttime="20171013 18:07:10.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:10.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:10.829" starttime="20171013 18:07:10.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:10.830">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:10.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:10.830">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:10.830" starttime="20171013 18:07:10.830"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:10.830">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:10.830" starttime="20171013 18:07:10.559"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:10.831">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:10.831" starttime="20171013 18:07:10.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:10.832">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:10.832" starttime="20171013 18:07:10.831"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:10.832" starttime="20171013 18:07:10.558"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:10.832" starttime="20171013 18:07:10.558"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:20.839">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:20.839" starttime="20171013 18:07:20.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:20.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:20.841" starttime="20171013 18:07:20.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:20.842">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:20.842" starttime="20171013 18:07:20.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:20.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:20.843" starttime="20171013 18:07:20.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:21.036" starttime="20171013 18:07:20.844"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:21.036">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:21.036">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.036" starttime="20171013 18:07:20.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.037">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.037" starttime="20171013 18:07:21.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.038" starttime="20171013 18:07:21.037"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.038" starttime="20171013 18:07:20.837"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.038" starttime="20171013 18:07:20.836"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.038" starttime="20171013 18:07:20.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:21.039">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:21.039" starttime="20171013 18:07:21.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:21.041">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:21.041" starttime="20171013 18:07:21.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.042">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:21.042" starttime="20171013 18:07:21.042"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.042" starttime="20171013 18:07:21.041"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.042" starttime="20171013 18:07:21.040"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.042" starttime="20171013 18:07:21.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:21.670">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:21.670">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.670" starttime="20171013 18:07:21.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:21.672">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:21.672" starttime="20171013 18:07:21.672"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.674">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:21.674" starttime="20171013 18:07:21.673"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.674" starttime="20171013 18:07:21.672"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.674" starttime="20171013 18:07:21.671"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:21.674" starttime="20171013 18:07:21.671"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:21.675">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:21.675" starttime="20171013 18:07:21.675"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:21.675">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.675" starttime="20171013 18:07:20.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:21.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:21.676" starttime="20171013 18:07:21.675"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:21.677">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:21.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:21.677">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:21.677" starttime="20171013 18:07:21.676"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:21.677">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:21.677" starttime="20171013 18:07:20.834"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:21.677">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:21.677" starttime="20171013 18:07:20.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:21.678">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:21.678" starttime="20171013 18:07:21.678"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:21.678" starttime="20171013 18:07:20.833"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:21.678" starttime="20171013 18:07:20.833"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:31.684">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:31.684" starttime="20171013 18:07:31.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:31.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:31.685" starttime="20171013 18:07:31.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:31.686">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:31.686" starttime="20171013 18:07:31.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:31.687">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:31.687" starttime="20171013 18:07:31.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:31.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:31.870" starttime="20171013 18:07:31.688"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:31.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:31.870">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:31.870" starttime="20171013 18:07:31.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:31.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:31.871" starttime="20171013 18:07:31.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:31.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:31.872" starttime="20171013 18:07:31.871"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.872" starttime="20171013 18:07:31.683"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.872" starttime="20171013 18:07:31.683"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.872" starttime="20171013 18:07:31.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:31.873">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:31.873" starttime="20171013 18:07:31.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:31.875">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:31.875" starttime="20171013 18:07:31.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:31.876">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:31.876" starttime="20171013 18:07:31.876"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.876" starttime="20171013 18:07:31.875"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.876" starttime="20171013 18:07:31.873"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:31.876" starttime="20171013 18:07:31.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:32.284">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:32.284">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:32.284" starttime="20171013 18:07:31.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:32.287">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:32.287" starttime="20171013 18:07:32.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:32.288">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:32.288" starttime="20171013 18:07:32.288"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:32.288" starttime="20171013 18:07:32.287"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:32.288" starttime="20171013 18:07:32.285"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:32.288" starttime="20171013 18:07:32.285"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:32.289">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:32.289" starttime="20171013 18:07:32.289"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:32.289">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:32.289" starttime="20171013 18:07:31.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:32.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:32.290" starttime="20171013 18:07:32.289"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:32.290">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:32.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:32.291">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:32.291" starttime="20171013 18:07:32.290"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:32.291">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:32.291" starttime="20171013 18:07:31.680"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:32.291">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:32.291" starttime="20171013 18:07:31.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:32.292">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:32.292" starttime="20171013 18:07:32.291"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:32.292" starttime="20171013 18:07:31.680"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:32.292" starttime="20171013 18:07:31.679"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.298">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:42.299" starttime="20171013 18:07:42.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.299">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:42.299" starttime="20171013 18:07:42.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.300">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:42.300" starttime="20171013 18:07:42.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.301">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:42.301" starttime="20171013 18:07:42.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:42.885" starttime="20171013 18:07:42.301"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:42.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:42.885">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.886" starttime="20171013 18:07:42.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.886" starttime="20171013 18:07:42.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.887" starttime="20171013 18:07:42.887"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.887" starttime="20171013 18:07:42.297"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.887" starttime="20171013 18:07:42.296"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.888" starttime="20171013 18:07:42.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.888">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:42.888" starttime="20171013 18:07:42.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.890">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:42.890" starttime="20171013 18:07:42.890"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.891">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:42.891" starttime="20171013 18:07:42.891"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.892" starttime="20171013 18:07:42.891"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.892" starttime="20171013 18:07:42.889"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.892" starttime="20171013 18:07:42.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:42.960">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.960" starttime="20171013 18:07:42.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.961">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:42.961" starttime="20171013 18:07:42.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.963">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:42.963" starttime="20171013 18:07:42.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.963" starttime="20171013 18:07:42.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.963" starttime="20171013 18:07:42.960"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:42.963" starttime="20171013 18:07:42.960"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:42.964">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:42.964" starttime="20171013 18:07:42.963"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:42.964">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.964" starttime="20171013 18:07:42.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:42.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:42.965" starttime="20171013 18:07:42.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:42.965">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:42.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:42.965">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:42.965" starttime="20171013 18:07:42.965"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:42.966">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:42.966" starttime="20171013 18:07:42.294"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:42.966">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:42.966" starttime="20171013 18:07:42.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:42.967">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:42.967" starttime="20171013 18:07:42.966"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:42.967" starttime="20171013 18:07:42.293"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:42.967" starttime="20171013 18:07:42.293"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:52.973">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:07:52.973" starttime="20171013 18:07:52.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:52.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:07:52.974" starttime="20171013 18:07:52.973"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:52.974">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:07:52.974" starttime="20171013 18:07:52.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:52.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:07:52.975" starttime="20171013 18:07:52.975"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:07:53.169" starttime="20171013 18:07:52.976"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:53.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:07:53.169">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.169" starttime="20171013 18:07:52.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.170" starttime="20171013 18:07:53.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.171" starttime="20171013 18:07:53.170"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.171" starttime="20171013 18:07:52.972"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.171" starttime="20171013 18:07:52.971"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.171" starttime="20171013 18:07:52.971"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:53.171">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:07:53.172" starttime="20171013 18:07:53.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:53.174">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:53.174" starttime="20171013 18:07:53.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.175">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:07:53.175" starttime="20171013 18:07:53.174"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.175" starttime="20171013 18:07:53.174"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.175" starttime="20171013 18:07:53.172"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.175" starttime="20171013 18:07:53.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:53.246">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:07:53.246">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.246" starttime="20171013 18:07:53.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:53.248">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:53.248" starttime="20171013 18:07:53.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.249">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:07:53.249" starttime="20171013 18:07:53.249"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.249" starttime="20171013 18:07:53.248"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.249" starttime="20171013 18:07:53.247"></status>
</kw>
<status status="PASS" endtime="20171013 18:07:53.249" starttime="20171013 18:07:53.247"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:07:53.250">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:07:53.250" starttime="20171013 18:07:53.250"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:53.250">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.250" starttime="20171013 18:07:52.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:07:53.251">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:07:53.251" starttime="20171013 18:07:53.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:07:53.251">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:07:53.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:07:53.252">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:07:53.252" starttime="20171013 18:07:53.251"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:53.252">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:07:53.252" starttime="20171013 18:07:52.969"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:07:53.252">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:07:53.252" starttime="20171013 18:07:52.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:07:53.253">On != Off</msg>
<status status="FAIL" endtime="20171013 18:07:53.253" starttime="20171013 18:07:53.252"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:53.253" starttime="20171013 18:07:52.969"></status>
</kw>
<status status="FAIL" endtime="20171013 18:07:53.253" starttime="20171013 18:07:52.968"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.259">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:03.260" starttime="20171013 18:08:03.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.260">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:03.260" starttime="20171013 18:08:03.260"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.261">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:03.261" starttime="20171013 18:08:03.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.262">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:03.262" starttime="20171013 18:08:03.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:03.453" starttime="20171013 18:08:03.263"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:03.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:03.454">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.454" starttime="20171013 18:08:03.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.455" starttime="20171013 18:08:03.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.455" starttime="20171013 18:08:03.455"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.455" starttime="20171013 18:08:03.258"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.455" starttime="20171013 18:08:03.258"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.456" starttime="20171013 18:08:03.257"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.456">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:03.456" starttime="20171013 18:08:03.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.458">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:03.458" starttime="20171013 18:08:03.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.459">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:03.459" starttime="20171013 18:08:03.459"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.460" starttime="20171013 18:08:03.459"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.460" starttime="20171013 18:08:03.457"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.460" starttime="20171013 18:08:03.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:03.530">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.530" starttime="20171013 18:08:03.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.532">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:03.532" starttime="20171013 18:08:03.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.536">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:03.537" starttime="20171013 18:08:03.536"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.537" starttime="20171013 18:08:03.532"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.537" starttime="20171013 18:08:03.531"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:03.537" starttime="20171013 18:08:03.530"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:03.538">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:03.538" starttime="20171013 18:08:03.537"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:03.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.538" starttime="20171013 18:08:03.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:03.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:03.539" starttime="20171013 18:08:03.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:03.539">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:03.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:03.540">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:03.540" starttime="20171013 18:08:03.539"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:03.540">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:03.540" starttime="20171013 18:08:03.255"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:03.540">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:03.540" starttime="20171013 18:08:03.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:03.541">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:03.541" starttime="20171013 18:08:03.541"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:03.541" starttime="20171013 18:08:03.254"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:03.541" starttime="20171013 18:08:03.254"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:13.548">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:13.548" starttime="20171013 18:08:13.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:13.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:13.549" starttime="20171013 18:08:13.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:13.549">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:13.549" starttime="20171013 18:08:13.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:13.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:13.550" starttime="20171013 18:08:13.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:14.430">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:14.430" starttime="20171013 18:08:13.551"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:14.431">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:14.431">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:14.431" starttime="20171013 18:08:13.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:14.431">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:14.431" starttime="20171013 18:08:14.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:14.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:14.432" starttime="20171013 18:08:14.432"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.433" starttime="20171013 18:08:13.547"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.433" starttime="20171013 18:08:13.546"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.433" starttime="20171013 18:08:13.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:14.433">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:14.433" starttime="20171013 18:08:14.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:14.436">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:14.436" starttime="20171013 18:08:14.435"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:14.437">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:14.437" starttime="20171013 18:08:14.436"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.437" starttime="20171013 18:08:14.436"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.437" starttime="20171013 18:08:14.434"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:14.437" starttime="20171013 18:08:14.434"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:15.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:15.193">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:15.193" starttime="20171013 18:08:14.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:15.195">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:15.195" starttime="20171013 18:08:15.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:15.196">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:15.196" starttime="20171013 18:08:15.195"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:15.196" starttime="20171013 18:08:15.195"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:15.196" starttime="20171013 18:08:15.194"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:15.196" starttime="20171013 18:08:15.193"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:15.196">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:15.197" starttime="20171013 18:08:15.196"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:15.197">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:15.197" starttime="20171013 18:08:13.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:15.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:15.198" starttime="20171013 18:08:15.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:15.198">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:15.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:15.198">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:15.198" starttime="20171013 18:08:15.198"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:15.199">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:15.199" starttime="20171013 18:08:13.544"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:15.199">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:15.199" starttime="20171013 18:08:13.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:15.200">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:15.200" starttime="20171013 18:08:15.199"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:15.200" starttime="20171013 18:08:13.543"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:15.200" starttime="20171013 18:08:13.542"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.206">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:25.207" starttime="20171013 18:08:25.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:25.208" starttime="20171013 18:08:25.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.208">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:25.208" starttime="20171013 18:08:25.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.209">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:25.209" starttime="20171013 18:08:25.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:25.396" starttime="20171013 18:08:25.210"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:25.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:25.396">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.396" starttime="20171013 18:08:25.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.397" starttime="20171013 18:08:25.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.398" starttime="20171013 18:08:25.398"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.398" starttime="20171013 18:08:25.205"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.398" starttime="20171013 18:08:25.204"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.398" starttime="20171013 18:08:25.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.399">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:25.399" starttime="20171013 18:08:25.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.401">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:25.401" starttime="20171013 18:08:25.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.402">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:25.402" starttime="20171013 18:08:25.402"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.403" starttime="20171013 18:08:25.402"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.403" starttime="20171013 18:08:25.400"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.403" starttime="20171013 18:08:25.400"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.596">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:25.596">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.596" starttime="20171013 18:08:25.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.598">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:25.598" starttime="20171013 18:08:25.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.599">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:25.599" starttime="20171013 18:08:25.599"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.599" starttime="20171013 18:08:25.598"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.600" starttime="20171013 18:08:25.597"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:25.600" starttime="20171013 18:08:25.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:25.600">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:25.600" starttime="20171013 18:08:25.600"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:25.600">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.600" starttime="20171013 18:08:25.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:25.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:25.601" starttime="20171013 18:08:25.601"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:25.602">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:25.602">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:25.602">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:25.602" starttime="20171013 18:08:25.601"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:25.602">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:25.602" starttime="20171013 18:08:25.202"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:25.602">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:25.602" starttime="20171013 18:08:25.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:25.603">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:25.603" starttime="20171013 18:08:25.603"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:25.603" starttime="20171013 18:08:25.201"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:25.603" starttime="20171013 18:08:25.201"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.610">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:35.610" starttime="20171013 18:08:35.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:35.611" starttime="20171013 18:08:35.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.611">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:35.612" starttime="20171013 18:08:35.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:35.612" starttime="20171013 18:08:35.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:35.794" starttime="20171013 18:08:35.613"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:35.794">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:35.794">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.794" starttime="20171013 18:08:35.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.795" starttime="20171013 18:08:35.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.796" starttime="20171013 18:08:35.795"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.796" starttime="20171013 18:08:35.609"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.796" starttime="20171013 18:08:35.608"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.796" starttime="20171013 18:08:35.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.797">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:35.797" starttime="20171013 18:08:35.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.799">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:35.799" starttime="20171013 18:08:35.798"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.800">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:35.800" starttime="20171013 18:08:35.800"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.800" starttime="20171013 18:08:35.799"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.800" starttime="20171013 18:08:35.798"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.800" starttime="20171013 18:08:35.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.975">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:35.975">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.975" starttime="20171013 18:08:35.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.977">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:35.977" starttime="20171013 18:08:35.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.978">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:35.978" starttime="20171013 18:08:35.978"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.978" starttime="20171013 18:08:35.977"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.978" starttime="20171013 18:08:35.976"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:35.979" starttime="20171013 18:08:35.976"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:35.979">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:35.979" starttime="20171013 18:08:35.979"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:35.979">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.979" starttime="20171013 18:08:35.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:35.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:35.980" starttime="20171013 18:08:35.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:35.980">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:35.981">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:35.981">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:35.981" starttime="20171013 18:08:35.980"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:35.981">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:35.981" starttime="20171013 18:08:35.606"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:35.981">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:35.981" starttime="20171013 18:08:35.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:35.982">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:35.982" starttime="20171013 18:08:35.982"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:35.982" starttime="20171013 18:08:35.605"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:35.982" starttime="20171013 18:08:35.604"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:45.990">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:45.990" starttime="20171013 18:08:45.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:45.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:45.991" starttime="20171013 18:08:45.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:45.991">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:45.991" starttime="20171013 18:08:45.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:45.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:45.992" starttime="20171013 18:08:45.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:46.172" starttime="20171013 18:08:45.993"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:46.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:46.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.172" starttime="20171013 18:08:45.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.173" starttime="20171013 18:08:46.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.174" starttime="20171013 18:08:46.173"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.174" starttime="20171013 18:08:45.988"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.174" starttime="20171013 18:08:45.988"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.174" starttime="20171013 18:08:45.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:46.174">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:46.175" starttime="20171013 18:08:46.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:46.177">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:46.177" starttime="20171013 18:08:46.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.178">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:46.179" starttime="20171013 18:08:46.178"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.179" starttime="20171013 18:08:46.177"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.179" starttime="20171013 18:08:46.175"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.179" starttime="20171013 18:08:46.175"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:46.341">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:46.341">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.341" starttime="20171013 18:08:46.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:46.343">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:46.343" starttime="20171013 18:08:46.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.344">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:46.344" starttime="20171013 18:08:46.344"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.344" starttime="20171013 18:08:46.343"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.345" starttime="20171013 18:08:46.342"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:46.345" starttime="20171013 18:08:46.341"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:46.345">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:46.345" starttime="20171013 18:08:46.345"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:46.345">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.345" starttime="20171013 18:08:45.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:46.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:46.346" starttime="20171013 18:08:46.346"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:46.347">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:46.347">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:46.347">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:46.347" starttime="20171013 18:08:46.346"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:46.347">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:46.347" starttime="20171013 18:08:45.986"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:46.348">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:46.348" starttime="20171013 18:08:45.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:46.348">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:46.348" starttime="20171013 18:08:46.348"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:46.348" starttime="20171013 18:08:45.984"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:46.349" starttime="20171013 18:08:45.983"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.354">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:08:56.355" starttime="20171013 18:08:56.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:08:56.355" starttime="20171013 18:08:56.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.356">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:08:56.356" starttime="20171013 18:08:56.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:08:56.357" starttime="20171013 18:08:56.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.547">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:08:56.547" starttime="20171013 18:08:56.357"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:56.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:08:56.547">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.547" starttime="20171013 18:08:56.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.548">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.548" starttime="20171013 18:08:56.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.549" starttime="20171013 18:08:56.548"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.549" starttime="20171013 18:08:56.353"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.549" starttime="20171013 18:08:56.353"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.549" starttime="20171013 18:08:56.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.550">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:08:56.550" starttime="20171013 18:08:56.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.552">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:56.552" starttime="20171013 18:08:56.551"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.553">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:08:56.553" starttime="20171013 18:08:56.553"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.553" starttime="20171013 18:08:56.552"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.553" starttime="20171013 18:08:56.551"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.553" starttime="20171013 18:08:56.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:08:56.741">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.741" starttime="20171013 18:08:56.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:56.743" starttime="20171013 18:08:56.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:08:56.744" starttime="20171013 18:08:56.744"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.744" starttime="20171013 18:08:56.743"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.744" starttime="20171013 18:08:56.742"></status>
</kw>
<status status="PASS" endtime="20171013 18:08:56.744" starttime="20171013 18:08:56.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:08:56.745">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:08:56.745" starttime="20171013 18:08:56.744"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:56.745">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.745" starttime="20171013 18:08:56.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:08:56.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:08:56.746" starttime="20171013 18:08:56.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:08:56.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:08:56.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:08:56.746">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:08:56.746" starttime="20171013 18:08:56.746"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:56.747">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:08:56.747" starttime="20171013 18:08:56.351"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:08:56.747">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:08:56.747" starttime="20171013 18:08:56.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:08:56.748">On != Off</msg>
<status status="FAIL" endtime="20171013 18:08:56.748" starttime="20171013 18:08:56.747"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:56.748" starttime="20171013 18:08:56.350"></status>
</kw>
<status status="FAIL" endtime="20171013 18:08:56.748" starttime="20171013 18:08:56.349"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:06.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:06.755" starttime="20171013 18:09:06.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:06.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:06.755" starttime="20171013 18:09:06.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:06.756">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:06.756" starttime="20171013 18:09:06.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:06.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:06.757" starttime="20171013 18:09:06.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:06.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:06.961" starttime="20171013 18:09:06.757"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:06.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:06.961">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:06.961" starttime="20171013 18:09:06.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:06.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:06.962" starttime="20171013 18:09:06.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:06.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:06.962" starttime="20171013 18:09:06.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.962" starttime="20171013 18:09:06.753"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.963" starttime="20171013 18:09:06.752"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.963" starttime="20171013 18:09:06.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:06.963">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:06.963" starttime="20171013 18:09:06.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:06.965">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:06.966" starttime="20171013 18:09:06.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:06.967">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:06.967" starttime="20171013 18:09:06.966"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.967" starttime="20171013 18:09:06.966"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.967" starttime="20171013 18:09:06.964"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:06.967" starttime="20171013 18:09:06.964"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:07.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:07.209">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:07.209" starttime="20171013 18:09:06.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:07.211">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:07.211" starttime="20171013 18:09:07.210"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:07.212">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:07.212" starttime="20171013 18:09:07.211"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:07.212" starttime="20171013 18:09:07.211"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:07.212" starttime="20171013 18:09:07.210"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:07.212" starttime="20171013 18:09:07.209"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:07.213">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:07.213" starttime="20171013 18:09:07.212"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:07.213">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:07.213" starttime="20171013 18:09:06.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:07.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:07.214" starttime="20171013 18:09:07.213"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:07.214">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:07.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:07.214">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:07.214" starttime="20171013 18:09:07.214"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:07.215">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:07.215" starttime="20171013 18:09:06.750"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:07.215">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:07.215" starttime="20171013 18:09:06.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:07.216">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:07.216" starttime="20171013 18:09:07.215"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:07.216" starttime="20171013 18:09:06.749"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:07.216" starttime="20171013 18:09:06.749"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.222">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:17.223" starttime="20171013 18:09:17.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.224">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:17.224" starttime="20171013 18:09:17.223"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.224">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:17.224" starttime="20171013 18:09:17.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.225">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:17.225" starttime="20171013 18:09:17.225"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:17.413" starttime="20171013 18:09:17.226"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:17.413">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:17.413">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.413" starttime="20171013 18:09:17.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.413">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.414" starttime="20171013 18:09:17.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.414" starttime="20171013 18:09:17.414"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.415" starttime="20171013 18:09:17.221"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.415" starttime="20171013 18:09:17.220"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.415" starttime="20171013 18:09:17.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.415">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:17.415" starttime="20171013 18:09:17.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.418">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:17.418" starttime="20171013 18:09:17.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.419">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:17.419" starttime="20171013 18:09:17.418"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.419" starttime="20171013 18:09:17.418"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.419" starttime="20171013 18:09:17.416"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.419" starttime="20171013 18:09:17.416"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.558">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:17.559">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.559" starttime="20171013 18:09:17.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.561">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:17.561" starttime="20171013 18:09:17.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.561">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:17.562" starttime="20171013 18:09:17.561"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.562" starttime="20171013 18:09:17.561"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.562" starttime="20171013 18:09:17.559"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:17.562" starttime="20171013 18:09:17.559"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:17.562">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:17.562" starttime="20171013 18:09:17.562"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:17.563">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.563" starttime="20171013 18:09:17.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:17.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:17.563" starttime="20171013 18:09:17.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:17.564">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:17.564">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:17.564">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:17.564" starttime="20171013 18:09:17.564"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:17.564">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:17.564" starttime="20171013 18:09:17.218"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:17.565">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:17.565" starttime="20171013 18:09:17.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:17.565">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:17.565" starttime="20171013 18:09:17.565"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:17.566" starttime="20171013 18:09:17.217"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:17.566" starttime="20171013 18:09:17.216"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.572">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:27.572" starttime="20171013 18:09:27.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:27.573" starttime="20171013 18:09:27.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.573">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:27.573" starttime="20171013 18:09:27.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:27.574" starttime="20171013 18:09:27.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.754">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:27.754" starttime="20171013 18:09:27.575"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:27.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:27.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.755" starttime="20171013 18:09:27.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.755">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.755" starttime="20171013 18:09:27.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.756" starttime="20171013 18:09:27.756"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.756" starttime="20171013 18:09:27.570"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.756" starttime="20171013 18:09:27.570"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.757" starttime="20171013 18:09:27.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.757">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:27.757" starttime="20171013 18:09:27.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.759">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:27.759" starttime="20171013 18:09:27.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.760">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:27.760" starttime="20171013 18:09:27.760"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.761" starttime="20171013 18:09:27.760"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.761" starttime="20171013 18:09:27.758"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.761" starttime="20171013 18:09:27.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:27.966">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.966" starttime="20171013 18:09:27.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.968">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:27.968" starttime="20171013 18:09:27.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:27.974" starttime="20171013 18:09:27.968"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.974" starttime="20171013 18:09:27.968"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.974" starttime="20171013 18:09:27.966"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:27.974" starttime="20171013 18:09:27.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:27.975">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:27.975" starttime="20171013 18:09:27.975"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:27.975">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.975" starttime="20171013 18:09:27.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:27.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:27.976" starttime="20171013 18:09:27.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:27.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:27.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:27.977">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:27.977" starttime="20171013 18:09:27.976"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:27.977">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:27.977" starttime="20171013 18:09:27.568"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:27.977">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:27.977" starttime="20171013 18:09:27.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:27.978">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:27.978" starttime="20171013 18:09:27.978"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:27.978" starttime="20171013 18:09:27.567"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:27.979" starttime="20171013 18:09:27.566"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:37.984">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:37.984" starttime="20171013 18:09:37.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:37.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:37.985" starttime="20171013 18:09:37.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:37.985">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:37.985" starttime="20171013 18:09:37.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:37.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:37.986" starttime="20171013 18:09:37.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:38.197" starttime="20171013 18:09:37.987"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:38.197">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:38.197">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.197" starttime="20171013 18:09:37.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.198">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.198" starttime="20171013 18:09:38.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.198" starttime="20171013 18:09:38.198"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.199" starttime="20171013 18:09:37.983"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.199" starttime="20171013 18:09:37.982"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.199" starttime="20171013 18:09:37.982"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:38.199">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:38.199" starttime="20171013 18:09:38.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:38.201">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:38.201" starttime="20171013 18:09:38.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.202">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:38.202" starttime="20171013 18:09:38.202"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.203" starttime="20171013 18:09:38.202"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.203" starttime="20171013 18:09:38.200"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.203" starttime="20171013 18:09:38.200"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:38.433">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:38.434">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.434" starttime="20171013 18:09:38.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:38.437">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:38.437" starttime="20171013 18:09:38.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.438">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:38.438" starttime="20171013 18:09:38.438"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.438" starttime="20171013 18:09:38.437"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.438" starttime="20171013 18:09:38.436"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:38.438" starttime="20171013 18:09:38.434"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:38.439">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:38.439" starttime="20171013 18:09:38.439"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:38.439">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.439" starttime="20171013 18:09:37.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:38.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:38.440" starttime="20171013 18:09:38.439"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:38.440">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:38.440">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:38.440">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:38.441" starttime="20171013 18:09:38.440"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:38.441">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:38.441" starttime="20171013 18:09:37.980"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:38.441">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:38.441" starttime="20171013 18:09:37.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:38.442">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:38.442" starttime="20171013 18:09:38.441"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:38.442" starttime="20171013 18:09:37.980"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:38.442" starttime="20171013 18:09:37.979"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.447">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:48.448" starttime="20171013 18:09:48.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:48.448" starttime="20171013 18:09:48.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.449">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:48.449" starttime="20171013 18:09:48.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:48.450" starttime="20171013 18:09:48.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:48.651" starttime="20171013 18:09:48.450"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:48.652">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:48.652">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.652" starttime="20171013 18:09:48.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.652" starttime="20171013 18:09:48.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.653" starttime="20171013 18:09:48.653"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.653" starttime="20171013 18:09:48.446"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.653" starttime="20171013 18:09:48.446"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.653" starttime="20171013 18:09:48.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.654">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:48.654" starttime="20171013 18:09:48.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.656">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:48.656" starttime="20171013 18:09:48.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.657">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:48.657" starttime="20171013 18:09:48.657"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.657" starttime="20171013 18:09:48.656"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.657" starttime="20171013 18:09:48.655"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.657" starttime="20171013 18:09:48.654"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.874">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:48.874">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.874" starttime="20171013 18:09:48.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.876">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:48.876" starttime="20171013 18:09:48.876"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.879">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:48.879" starttime="20171013 18:09:48.878"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.879" starttime="20171013 18:09:48.877"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.879" starttime="20171013 18:09:48.875"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:48.879" starttime="20171013 18:09:48.875"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:48.880">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:48.880" starttime="20171013 18:09:48.879"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:48.880">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.880" starttime="20171013 18:09:48.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:48.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:48.881" starttime="20171013 18:09:48.880"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:48.881">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:48.881">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:48.881">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:48.881" starttime="20171013 18:09:48.881"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:48.882">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:48.882" starttime="20171013 18:09:48.444"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:48.882">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:48.882" starttime="20171013 18:09:48.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:48.883">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:48.884" starttime="20171013 18:09:48.882"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:48.884" starttime="20171013 18:09:48.443"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:48.884" starttime="20171013 18:09:48.443"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:58.889">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:09:58.890" starttime="20171013 18:09:58.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:58.890">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:09:58.890" starttime="20171013 18:09:58.890"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:58.891">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:09:58.891" starttime="20171013 18:09:58.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:58.892">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:09:58.892" starttime="20171013 18:09:58.891"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:09:59.075" starttime="20171013 18:09:58.892"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:59.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:09:59.075">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.075" starttime="20171013 18:09:58.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.076" starttime="20171013 18:09:59.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.077" starttime="20171013 18:09:59.076"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.077" starttime="20171013 18:09:58.888"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.077" starttime="20171013 18:09:58.888"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.077" starttime="20171013 18:09:58.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.078">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171013 18:09:59.078" starttime="20171013 18:09:59.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.081">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:59.081" starttime="20171013 18:09:59.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.083">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171013 18:09:59.083" starttime="20171013 18:09:59.082"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.083" starttime="20171013 18:09:59.082"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.083" starttime="20171013 18:09:59.079"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.083" starttime="20171013 18:09:59.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:09:59.255">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.255" starttime="20171013 18:09:59.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.257">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:59.257" starttime="20171013 18:09:59.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.258">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:09:59.258" starttime="20171013 18:09:59.258"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.258" starttime="20171013 18:09:59.257"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.258" starttime="20171013 18:09:59.256"></status>
</kw>
<status status="PASS" endtime="20171013 18:09:59.258" starttime="20171013 18:09:59.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:09:59.259">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:09:59.259" starttime="20171013 18:09:59.259"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:59.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.259" starttime="20171013 18:09:58.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:09:59.260" starttime="20171013 18:09:59.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.260">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:09:59.260">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:09:59.260">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:09:59.260" starttime="20171013 18:09:59.260"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:59.261">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171013 18:09:59.261" starttime="20171013 18:09:58.886"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:09:59.261">${power_state} = Off</msg>
<status status="PASS" endtime="20171013 18:09:59.261" starttime="20171013 18:09:58.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:09:59.262">On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:59.262" starttime="20171013 18:09:59.261"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:59.262" starttime="20171013 18:09:58.885"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:59.262" starttime="20171013 18:09:58.884"></status>
</kw>
<msg level="FAIL" timestamp="20171013 18:09:59.262">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" endtime="20171013 18:09:59.262" starttime="20171013 17:59:49.482"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:59.263" starttime="20171013 17:59:41.656"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:59.263" starttime="20171013 17:58:40.236"></status>
</kw>
<status status="FAIL" endtime="20171013 18:09:59.263" starttime="20171013 17:52:53.062"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:09:59.292">Length is 10</msg>
<status status="PASS" endtime="20171013 18:09:59.292" starttime="20171013 18:09:59.292"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:09:59.299">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 18:10:02.317">${RC} = 0</msg>
<msg level="INFO" timestamp="20171013 18:10:02.318">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.818 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.718 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171013 18:10:02.319" starttime="20171013 18:09:59.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.335">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.818 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.718 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.690 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.547 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.547/0.693/0.818/0.098 ms</msg>
<status status="PASS" endtime="20171013 18:10:02.335" starttime="20171013 18:10:02.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.336" starttime="20171013 18:10:02.336"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.337" starttime="20171013 18:09:59.291"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.402">${cur_time} = 2017-10-13 18:10:02:401481</msg>
<status status="PASS" endtime="20171013 18:10:02.402" starttime="20171013 18:10:02.401"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.402">${cur_time} = 20171013181002401481</msg>
<status status="PASS" endtime="20171013 18:10:02.402" starttime="20171013 18:10:02.402"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.403" starttime="20171013 18:10:02.401"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.403">${FFDC_TIME} = 20171013181002401481</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.415">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20171013 18:10:02.415" starttime="20171013 18:10:02.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.415">${suite_name} = 20171013181002401481_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20171013 18:10:02.415" starttime="20171013 18:10:02.415"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.416">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20171013 18:10:02.416" starttime="20171013 18:10:02.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.416">${test_name} = 20171013181002401481_PowerOnTest</msg>
<status status="PASS" endtime="20171013 18:10:02.416" starttime="20171013 18:10:02.416"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.417" starttime="20171013 18:10:02.414"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.417">${FFDC_DIR_PATH} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/</msg>
<msg level="INFO" timestamp="20171013 18:10:02.417">${FFDC_PREFIX} = 20171013181002401481_</msg>
<msg level="INFO" timestamp="20171013 18:10:02.438">${LOG_PREFIX} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.441" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.441" starttime="20171013 18:10:02.438"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.446">${FFDC_FILE_PATH} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.469" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.469" starttime="20171013 18:10:02.467"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.469" starttime="20171013 18:10:02.467"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.470" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.471" starttime="20171013 18:10:02.470"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.471" starttime="20171013 18:10:02.470"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.472" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.472" starttime="20171013 18:10:02.471"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.472" starttime="20171013 18:10:02.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.473" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.473" starttime="20171013 18:10:02.473"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.473" starttime="20171013 18:10:02.472"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.475" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.475" starttime="20171013 18:10:02.474"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.475" starttime="20171013 18:10:02.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.476" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.476" starttime="20171013 18:10:02.476"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.476" starttime="20171013 18:10:02.475"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.478" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.478" starttime="20171013 18:10:02.477"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.478" starttime="20171013 18:10:02.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.479" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.479" starttime="20171013 18:10:02.479"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.479" starttime="20171013 18:10:02.478"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.480" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.480" starttime="20171013 18:10:02.480"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.481" starttime="20171013 18:10:02.479"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.482" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.482" starttime="20171013 18:10:02.482"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.482" starttime="20171013 18:10:02.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.483" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.483" starttime="20171013 18:10:02.483"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.483" starttime="20171013 18:10:02.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.485" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.485" starttime="20171013 18:10:02.484"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.485" starttime="20171013 18:10:02.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.486" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.486" starttime="20171013 18:10:02.486"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.486" starttime="20171013 18:10:02.485"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.516">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:02.517">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171013 18:10:02.588">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171013 18:10:02.598">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171013 18:10:02.599">${stderr} = </msg>
<msg level="INFO" timestamp="20171013 18:10:02.599">${rc} = 0</msg>
<status status="PASS" endtime="20171013 18:10:02.599" starttime="20171013 18:10:02.487"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.599">Length is 0</msg>
<status status="PASS" endtime="20171013 18:10:02.599" starttime="20171013 18:10:02.599"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.600">Length is 11</msg>
<status status="PASS" endtime="20171013 18:10:02.601" starttime="20171013 18:10:02.600"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.602">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171013 18:10:02.602" starttime="20171013 18:10:02.486"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.603" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.603" starttime="20171013 18:10:02.602"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.603" starttime="20171013 18:10:02.602"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.603" starttime="20171013 18:10:02.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.604" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.604" starttime="20171013 18:10:02.604"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.605" starttime="20171013 18:10:02.603"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.605">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20171013 18:10:02.605" starttime="20171013 18:10:02.605"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.607" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.607" starttime="20171013 18:10:02.606"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.607" starttime="20171013 18:10:02.606"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.608" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.608" starttime="20171013 18:10:02.608"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.608" starttime="20171013 18:10:02.607"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.608" starttime="20171013 18:10:02.605"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.610" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.610" starttime="20171013 18:10:02.609"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.610" starttime="20171013 18:10:02.608"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.611" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.611" starttime="20171013 18:10:02.611"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.611" starttime="20171013 18:10:02.610"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.611" starttime="20171013 18:10:02.608"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.612" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.613" starttime="20171013 18:10:02.612"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.613" starttime="20171013 18:10:02.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.614" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.614" starttime="20171013 18:10:02.613"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.614" starttime="20171013 18:10:02.613"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.614" starttime="20171013 18:10:02.611"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.614" starttime="20171013 18:10:02.605"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.615" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:02.616" starttime="20171013 18:10:02.615"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.616" starttime="20171013 18:10:02.614"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.616" starttime="20171013 18:10:02.466"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.623">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171013 18:10:02.623" starttime="20171013 18:10:02.622"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.624">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Sys Inventory Files', 'System Inventory Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC...</msg>
<status status="PASS" endtime="20171013 18:10:02.624" starttime="20171013 18:10:02.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.626" starttime="20171013 18:10:02.625"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.626">@{ffdc_function_list} = [ OS FFDC | Sys Inventory Files | BMC Specific Files | FFDC Generic Report | Get Request FFDC | SEL Log | Core Files ]</msg>
<status status="PASS" endtime="20171013 18:10:02.626" starttime="20171013 18:10:02.625"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.628" starttime="20171013 18:10:02.628"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:02.628">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:02.628" starttime="20171013 18:10:02.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.629" starttime="20171013 18:10:02.629"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.658">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171013 18:10:02.658" starttime="20171013 18:10:02.658"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.658" starttime="20171013 18:10:02.657"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.658" starttime="20171013 18:10:02.630"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.658" starttime="20171013 18:10:02.626"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.658" starttime="20171013 18:10:02.626"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.660" starttime="20171013 18:10:02.660"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.661">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:02.661">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:02.661" starttime="20171013 18:10:02.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.661" starttime="20171013 18:10:02.661"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.691" starttime="20171013 18:10:02.688"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.691" html="yes">File '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/3931/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171013 18:10:02.691" starttime="20171013 18:10:02.691"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.692" starttime="20171013 18:10:02.687"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.692" starttime="20171013 18:10:02.661"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.692" starttime="20171013 18:10:02.659"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:02.692" starttime="20171013 18:10:02.659"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.694" starttime="20171013 18:10:02.693"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:02.694">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:02.694">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:02.694" starttime="20171013 18:10:02.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.694" starttime="20171013 18:10:02.694"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.722">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171013 18:10:02.722" starttime="20171013 18:10:02.722"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.724">@{cmd_list} = [ ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/'...</msg>
<status status="PASS" endtime="20171013 18:10:02.724" starttime="20171013 18:10:02.723"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.725">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171013 18:10:02.725" starttime="20171013 18:10:02.724"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:02.726" starttime="20171013 18:10:02.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:02.727">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:02.727" starttime="20171013 18:10:02.726"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:02.804">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:02.804">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20171013 18:10:18.689">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:18.699" starttime="20171013 18:10:02.760"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:18.699">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:18.798">${ret_values} = (u'{\n\t"__CURSOR" : "s=3ca020ec7ce54d3cbac0564e7bdb2d69;i=b;b=f77095a4915449d8b09ba7fcace14ca8;m=1bad4306d;t=55b6f84a8fcb7;x=f3c5648b796712cc",\n\t"__REALTIME_TIMESTAMP" : "1507909408718007",\n\t"__M...</msg>
<status status="PASS" endtime="20171013 18:10:18.798" starttime="20171013 18:10:02.727"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.817">${stdout} = {
	"__CURSOR" : "s=3ca020ec7ce54d3cbac0564e7bdb2d69;i=b;b=f77095a4915449d8b09ba7fcace14ca8;m=1bad4306d;t=55b6f84a8fcb7;x=f3c5648b796712cc",
	"__REALTIME_TIMESTAMP" : "1507909408718007",
	"__MONOTONIC_...</msg>
<status status="PASS" endtime="20171013 18:10:18.817" starttime="20171013 18:10:18.799"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.818">${stderr} = Journal file /var/log/journal/23f4ba7753244af89c98e7d3cc867c37/system.journal is truncated, ignoring file.</msg>
<status status="PASS" endtime="20171013 18:10:18.818" starttime="20171013 18:10:18.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:18.870" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:18.870" starttime="20171013 18:10:18.849"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:18.870" starttime="20171013 18:10:18.826"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:18.870" starttime="20171013 18:10:18.819"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:18.870" starttime="20171013 18:10:02.725"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:18.870" starttime="20171013 18:10:02.724"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.871">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171013 18:10:18.871" starttime="20171013 18:10:18.871"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:18.873" starttime="20171013 18:10:18.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.873">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:18.873" starttime="20171013 18:10:18.873"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:18.944">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:18.944">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20171013 18:10:18.992">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:18.992" starttime="20171013 18:10:18.907"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:18.992">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:18.992">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          201736 kB\nMemAvailable:     307100 kB\nBuffers:           31896 kB\nCached:            95924 kB\nSwapCached:            0 kB\nActive:           14794...</msg>
<status status="PASS" endtime="20171013 18:10:18.992" starttime="20171013 18:10:18.874"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.993">${stdout} = MemTotal:         432252 kB
MemFree:          201736 kB
MemAvailable:     307100 kB
Buffers:           31896 kB
Cached:            95924 kB
SwapCached:            0 kB
Active:           147944 kB
Inac...</msg>
<status status="PASS" endtime="20171013 18:10:18.993" starttime="20171013 18:10:18.993"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:18.994">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:18.994" starttime="20171013 18:10:18.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:19.003" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_meminfo.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:19.003" starttime="20171013 18:10:19.001"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:19.003" starttime="20171013 18:10:19.000"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:19.003" starttime="20171013 18:10:18.994"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:19.003" starttime="20171013 18:10:18.871"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:19.003" starttime="20171013 18:10:18.870"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:19.004">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171013 18:10:19.004" starttime="20171013 18:10:19.003"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:19.005" starttime="20171013 18:10:19.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:19.006">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:19.006" starttime="20171013 18:10:19.005"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:19.085">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:19.085">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20171013 18:10:25.114">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:25.114" starttime="20171013 18:10:19.048"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:25.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:25.124">${ret_values} = (u'-- Logs begin at Fri 2017-10-13 15:43:28 UTC, end at Fri 2017-10-13 18:10:15 UTC. --\nOct 13 15:43:28 witherspoon systemd[1]: Started SSH Per-Connection Server (9.41.165.103:52804).\nOct 13 15:43:2...</msg>
<status status="PASS" endtime="20171013 18:10:25.124" starttime="20171013 18:10:19.006"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.127">${stdout} = -- Logs begin at Fri 2017-10-13 15:43:28 UTC, end at Fri 2017-10-13 18:10:15 UTC. --
Oct 13 15:43:28 witherspoon systemd[1]: Started SSH Per-Connection Server (9.41.165.103:52804).
Oct 13 15:43:28 wit...</msg>
<status status="PASS" endtime="20171013 18:10:25.128" starttime="20171013 18:10:25.125"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.128">${stderr} = Journal file /var/log/journal/23f4ba7753244af89c98e7d3cc867c37/system.journal is truncated, ignoring file.</msg>
<status status="PASS" endtime="20171013 18:10:25.128" starttime="20171013 18:10:25.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:25.144" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:25.144" starttime="20171013 18:10:25.141"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.144" starttime="20171013 18:10:25.137"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.144" starttime="20171013 18:10:25.128"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.145" starttime="20171013 18:10:19.004"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.145" starttime="20171013 18:10:19.003"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.146">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171013 18:10:25.146" starttime="20171013 18:10:25.145"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:25.147" starttime="20171013 18:10:25.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.148">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:25.148" starttime="20171013 18:10:25.147"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:25.217">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:25.217">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20171013 18:10:25.729">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:25.729" starttime="20171013 18:10:25.180"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:25.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:25.730">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 13 17:51 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 13 17:51 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171013 18:10:25.730" starttime="20171013 18:10:25.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.731">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 13 17:51 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 13 17:51 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171013 18:10:25.731" starttime="20171013 18:10:25.731"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.732">${stderr} = ls: /proc/2703/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171013 18:10:25.732" starttime="20171013 18:10:25.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:25.741" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:25.742" starttime="20171013 18:10:25.739"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.742" starttime="20171013 18:10:25.738"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.742" starttime="20171013 18:10:25.732"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.742" starttime="20171013 18:10:25.146"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.742" starttime="20171013 18:10:25.145"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.743">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171013 18:10:25.743" starttime="20171013 18:10:25.742"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:25.745" starttime="20171013 18:10:25.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.746">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:25.746" starttime="20171013 18:10:25.746"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:25.883">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:25.883">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20171013 18:10:25.961">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:25.961" starttime="20171013 18:10:25.843"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:25.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:25.961">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171013 18:10:25.961" starttime="20171013 18:10:25.747"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.962">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171013 18:10:25.962" starttime="20171013 18:10:25.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.962">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:25.962" starttime="20171013 18:10:25.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:25.970" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_procinfo.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:25.970" starttime="20171013 18:10:25.969"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.971" starttime="20171013 18:10:25.968"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.971" starttime="20171013 18:10:25.962"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.971" starttime="20171013 18:10:25.743"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:25.971" starttime="20171013 18:10:25.742"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.972">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171013 18:10:25.972" starttime="20171013 18:10:25.971"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:25.973" starttime="20171013 18:10:25.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:25.974">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:25.974" starttime="20171013 18:10:25.973"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.047">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:26.047">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20171013 18:10:26.145">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:26.145" starttime="20171013 18:10:26.007"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:26.145">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:26.145">${ret_values} = (u'[ 1270.150000] UBIFS warning (ubi0:2 pid 2593): ubifs_vm_page_mkwrite: out of space for mmapped file (inode number 9271)\n[ 1270.150000] UBIFS warning (ubi0:2 pid 2593): ubifs_vm_page_mkwrite: out ...</msg>
<status status="PASS" endtime="20171013 18:10:26.145" starttime="20171013 18:10:25.974"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.146">${stdout} = [ 1270.150000] UBIFS warning (ubi0:2 pid 2593): ubifs_vm_page_mkwrite: out of space for mmapped file (inode number 9271)
[ 1270.150000] UBIFS warning (ubi0:2 pid 2593): ubifs_vm_page_mkwrite: out of s...</msg>
<status status="PASS" endtime="20171013 18:10:26.146" starttime="20171013 18:10:26.146"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.146">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:26.146" starttime="20171013 18:10:26.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.157" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_dmesg.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.157" starttime="20171013 18:10:26.156"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.157" starttime="20171013 18:10:26.155"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.157" starttime="20171013 18:10:26.147"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.157" starttime="20171013 18:10:25.972"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.157" starttime="20171013 18:10:25.971"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.158">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171013 18:10:26.158" starttime="20171013 18:10:26.158"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:26.159" starttime="20171013 18:10:26.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.160">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:26.160" starttime="20171013 18:10:26.160"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.229">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:26.229">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20171013 18:10:26.551">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:26.551" starttime="20171013 18:10:26.192"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:26.551">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:26.552">${ret_values} = (u'Mem: 230516K used, 201736K free, 21444K shrd, 31896K buff, 95924K cached\nCPU:   0% usr  20% sys   0% nic  80% idle   0% io   0% irq   0% sirq\nLoad average: 1.14 3.22 3.76 1/160 2706\n  PID  PPID ...</msg>
<status status="PASS" endtime="20171013 18:10:26.552" starttime="20171013 18:10:26.160"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.552">${stdout} = Mem: 230516K used, 201736K free, 21444K shrd, 31896K buff, 95924K cached
CPU:   0% usr  20% sys   0% nic  80% idle   0% io   0% irq   0% sirq
Load average: 1.14 3.22 3.76 1/160 2706
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20171013 18:10:26.552" starttime="20171013 18:10:26.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.553">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:26.553" starttime="20171013 18:10:26.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.562" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_list.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:26.561"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:26.560"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:26.553"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:26.158"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:26.157"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.562" starttime="20171013 18:10:02.724"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.723"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.723"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.722"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.721"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.695"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.692"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.563" starttime="20171013 18:10:02.692"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:26.565" starttime="20171013 18:10:26.564"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:26.565">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:26.565">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:26.565" starttime="20171013 18:10:26.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:26.566" starttime="20171013 18:10:26.565"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.593">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20171013 18:10:26.593" starttime="20171013 18:10:26.592"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.594">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20171013 18:10:26.594" starttime="20171013 18:10:26.594"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.600">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171013 18:10:26.600" starttime="20171013 18:10:26.594"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.603" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.603" starttime="20171013 18:10:26.603"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.603" starttime="20171013 18:10:26.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.604" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.605" starttime="20171013 18:10:26.604"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.605" starttime="20171013 18:10:26.603"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.606" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.606" starttime="20171013 18:10:26.605"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.606" starttime="20171013 18:10:26.605"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.607" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.607" starttime="20171013 18:10:26.607"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.607" starttime="20171013 18:10:26.606"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.607" starttime="20171013 18:10:26.601"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.607" starttime="20171013 18:10:26.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.608">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:26.608" starttime="20171013 18:10:26.608"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.677">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:26.677">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20171013 18:10:26.744">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:26.744" starttime="20171013 18:10:26.640"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:26.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:26.744">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171013 18:10:26.744" starttime="20171013 18:10:26.608"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.745">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171013 18:10:26.745" starttime="20171013 18:10:26.744"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.745">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:26.745" starttime="20171013 18:10:26.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.752" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.752" starttime="20171013 18:10:26.752"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.753" starttime="20171013 18:10:26.751"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.753" starttime="20171013 18:10:26.746"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.753" starttime="20171013 18:10:26.600"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.753" starttime="20171013 18:10:26.600"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.756" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.756" starttime="20171013 18:10:26.755"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.756" starttime="20171013 18:10:26.755"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.757" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.757" starttime="20171013 18:10:26.757"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.757" starttime="20171013 18:10:26.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.758" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.758" starttime="20171013 18:10:26.758"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.759" starttime="20171013 18:10:26.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.760" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.760" starttime="20171013 18:10:26.759"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.760" starttime="20171013 18:10:26.759"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.760" starttime="20171013 18:10:26.754"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.760" starttime="20171013 18:10:26.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.761">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:26.761" starttime="20171013 18:10:26.760"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.830">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:26.830">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20171013 18:10:26.876">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:26.877" starttime="20171013 18:10:26.793"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:26.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:26.877">${ret_values} = (u'Linux witherspoon 4.10.17-97988a39b46d73304a5697b8d3a5cf08da287350 #1 Tue Oct 10 05:30:30 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171013 18:10:26.877" starttime="20171013 18:10:26.761"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.877">${stdout} = Linux witherspoon 4.10.17-97988a39b46d73304a5697b8d3a5cf08da287350 #1 Tue Oct 10 05:30:30 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171013 18:10:26.877" starttime="20171013 18:10:26.877"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.878">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:26.878" starttime="20171013 18:10:26.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.885" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.885" starttime="20171013 18:10:26.885"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.885" starttime="20171013 18:10:26.884"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.885" starttime="20171013 18:10:26.878"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.885" starttime="20171013 18:10:26.753"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.885" starttime="20171013 18:10:26.753"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.888" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.888" starttime="20171013 18:10:26.888"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.889" starttime="20171013 18:10:26.887"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.890" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.890" starttime="20171013 18:10:26.889"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.890" starttime="20171013 18:10:26.889"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.891" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.891" starttime="20171013 18:10:26.891"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.891" starttime="20171013 18:10:26.890"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.892" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:26.892" starttime="20171013 18:10:26.892"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.893" starttime="20171013 18:10:26.891"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.893" starttime="20171013 18:10:26.887"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:26.893" starttime="20171013 18:10:26.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:26.893">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:26.894" starttime="20171013 18:10:26.893"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:26.963">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:26.963">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20171013 18:10:27.040">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:27.040" starttime="20171013 18:10:26.926"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:27.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:27.040">${ret_values} = (u' 18:10:43 up 23 min,  load average: 1.13, 3.21, 3.76', u'', 0)</msg>
<status status="PASS" endtime="20171013 18:10:27.040" starttime="20171013 18:10:26.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.041">${stdout} =  18:10:43 up 23 min,  load average: 1.13, 3.21, 3.76</msg>
<status status="PASS" endtime="20171013 18:10:27.041" starttime="20171013 18:10:27.040"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.041">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:27.041" starttime="20171013 18:10:27.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.048" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.048" starttime="20171013 18:10:27.048"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.048" starttime="20171013 18:10:27.047"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.048" starttime="20171013 18:10:27.041"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.048" starttime="20171013 18:10:26.886"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.049" starttime="20171013 18:10:26.886"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.049" starttime="20171013 18:10:26.600"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.049" starttime="20171013 18:10:26.593"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.049" starttime="20171013 18:10:26.593"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.050">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171013 18:10:27.050" starttime="20171013 18:10:27.049"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.051">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171013 18:10:27.051" starttime="20171013 18:10:27.050"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.054" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.054" starttime="20171013 18:10:27.053"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.054" starttime="20171013 18:10:27.053"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.055" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.055" starttime="20171013 18:10:27.055"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.055" starttime="20171013 18:10:27.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.056" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.056" starttime="20171013 18:10:27.056"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.057" starttime="20171013 18:10:27.055"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.058" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.058" starttime="20171013 18:10:27.057"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.058" starttime="20171013 18:10:27.057"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.058" starttime="20171013 18:10:27.052"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.058" starttime="20171013 18:10:27.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.059">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:27.059" starttime="20171013 18:10:27.058"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.128">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:27.128">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20171013 18:10:27.175">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:27.175" starttime="20171013 18:10:27.091"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:27.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:27.175">${ret_values} = (u'20171013165849', u'', 0)</msg>
<status status="PASS" endtime="20171013 18:10:27.175" starttime="20171013 18:10:27.059"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.175">${stdout} = 20171013165849</msg>
<status status="PASS" endtime="20171013 18:10:27.176" starttime="20171013 18:10:27.175"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.176">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:27.176" starttime="20171013 18:10:27.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.183" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.183" starttime="20171013 18:10:27.183"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.183" starttime="20171013 18:10:27.182"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.183" starttime="20171013 18:10:27.176"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.183" starttime="20171013 18:10:27.051"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.183" starttime="20171013 18:10:27.051"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.186" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.186" starttime="20171013 18:10:27.186"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.186" starttime="20171013 18:10:27.185"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.188" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.188" starttime="20171013 18:10:27.187"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.188" starttime="20171013 18:10:27.187"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.189" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.189" starttime="20171013 18:10:27.189"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.189" starttime="20171013 18:10:27.188"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.190" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.190" starttime="20171013 18:10:27.190"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.190" starttime="20171013 18:10:27.189"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.191" starttime="20171013 18:10:27.185"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.191" starttime="20171013 18:10:27.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.191">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:27.191" starttime="20171013 18:10:27.191"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.265">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:27.265">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20171013 18:10:27.312">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:27.312" starttime="20171013 18:10:27.224"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:27.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:27.312">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-153"\nVERSION_ID="v1.99.10-153-g1f4b94c"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171013 18:10:27.312" starttime="20171013 18:10:27.192"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.313">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-153"
VERSION_ID="v1.99.10-153-g1f4b94c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171013 18:10:27.313" starttime="20171013 18:10:27.312"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.313">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:27.313" starttime="20171013 18:10:27.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.320" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.320" starttime="20171013 18:10:27.320"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.320" starttime="20171013 18:10:27.319"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.314"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.184"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.183"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.051"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.049"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.321" starttime="20171013 18:10:27.049"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.322">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171013 18:10:27.322" starttime="20171013 18:10:27.322"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.323">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171013 18:10:27.323" starttime="20171013 18:10:27.322"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.326" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.326" starttime="20171013 18:10:27.325"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.326" starttime="20171013 18:10:27.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.327" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.327" starttime="20171013 18:10:27.327"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.327" starttime="20171013 18:10:27.326"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.328" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.329" starttime="20171013 18:10:27.328"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.329" starttime="20171013 18:10:27.328"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.330" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:27.330" starttime="20171013 18:10:27.329"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.330" starttime="20171013 18:10:27.329"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.330" starttime="20171013 18:10:27.324"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:27.330" starttime="20171013 18:10:27.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:27.331">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171013 18:10:27.331" starttime="20171013 18:10:27.330"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:27.400">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:27.400">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20171013 18:10:28.756">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:28.757" starttime="20171013 18:10:27.363"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:28.757">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:28.757">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171013 18:10:28.757" starttime="20171013 18:10:27.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.758">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171013 18:10:28.758" starttime="20171013 18:10:28.757"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.758">${stderr} = </msg>
<status status="PASS" endtime="20171013 18:10:28.758" starttime="20171013 18:10:28.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:28.765" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:28.765" starttime="20171013 18:10:28.765"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.765" starttime="20171013 18:10:28.764"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:28.758"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:27.323"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:27.323"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:27.323"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:27.321"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:27.321"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:26.593"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:26.592"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:26.566"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:26.563"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:28.766" starttime="20171013 18:10:26.563"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:28.768" starttime="20171013 18:10:28.768"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:28.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:28.769">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:28.769" starttime="20171013 18:10:28.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:28.769" starttime="20171013 18:10:28.769"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.796">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171013 18:10:28.796" starttime="20171013 18:10:28.796"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.798">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_control_list...</msg>
<status status="PASS" endtime="20171013 18:10:28.798" starttime="20171013 18:10:28.797"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.798">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171013 18:10:28.799" starttime="20171013 18:10:28.798"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:28.801">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:28.802" starttime="20171013 18:10:28.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:28.803" starttime="20171013 18:10:28.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.803">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:28.803" starttime="20171013 18:10:28.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:28.804">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:28.804" starttime="20171013 18:10:28.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:29.008">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:29.008" starttime="20171013 18:10:28.805"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:29.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:29.009">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:29.009" starttime="20171013 18:10:28.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:29.009">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:29.009" starttime="20171013 18:10:29.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:29.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:29.010" starttime="20171013 18:10:29.010"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:29.010" starttime="20171013 18:10:28.800"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:29.010" starttime="20171013 18:10:28.800"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:29.010" starttime="20171013 18:10:28.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:29.011">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:29.011" starttime="20171013 18:10:29.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:29.012" starttime="20171013 18:10:29.011"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.343">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:30.344">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.344" starttime="20171013 18:10:29.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:30.345" starttime="20171013 18:10:30.344"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:30.346">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:30.346" starttime="20171013 18:10:30.345"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:30.346">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.346" starttime="20171013 18:10:28.799"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.347" starttime="20171013 18:10:30.347"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:30.347">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:30.347" starttime="20171013 18:10:30.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:30.348" starttime="20171013 18:10:30.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.350">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23340, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 281
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:30.350">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:30.350">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171013 18:10:30.350" starttime="20171013 18:10:30.348"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.352" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_sensor_list.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:30.352" starttime="20171013 18:10:30.351"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:30.352" starttime="20171013 18:10:30.350"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:30.352" starttime="20171013 18:10:28.798"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.353">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171013 18:10:30.353" starttime="20171013 18:10:30.352"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.356">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:30.356" starttime="20171013 18:10:30.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:30.357" starttime="20171013 18:10:30.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.357">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:30.357" starttime="20171013 18:10:30.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:30.358" starttime="20171013 18:10:30.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.607">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:30.607" starttime="20171013 18:10:30.359"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:30.607">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:30.607">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.607" starttime="20171013 18:10:30.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.608">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.608" starttime="20171013 18:10:30.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:30.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:30.609" starttime="20171013 18:10:30.608"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:30.609" starttime="20171013 18:10:30.354"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:30.609" starttime="20171013 18:10:30.354"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:30.609" starttime="20171013 18:10:30.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:30.610">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:30.610" starttime="20171013 18:10:30.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:30.610" starttime="20171013 18:10:30.610"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.932">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:32.932">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:32.933" starttime="20171013 18:10:30.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:32.933" starttime="20171013 18:10:32.933"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:32.934">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:32.934" starttime="20171013 18:10:32.934"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:32.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:32.934" starttime="20171013 18:10:30.353"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:32.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:32.935" starttime="20171013 18:10:32.935"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:32.935">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:32.935" starttime="20171013 18:10:32.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:32.936" starttime="20171013 18:10:32.936"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.939">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/ea65c77f", 
        "/xyz/openbmc_project/software/050d0894"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:32.940">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:32.940">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171013 18:10:32.940" starttime="20171013 18:10:32.936"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:32.942" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_inventory.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:32.942" starttime="20171013 18:10:32.941"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:32.942" starttime="20171013 18:10:32.940"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:32.942" starttime="20171013 18:10:30.352"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.943">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_led.txt</msg>
<status status="PASS" endtime="20171013 18:10:32.943" starttime="20171013 18:10:32.943"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:32.946">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:32.947" starttime="20171013 18:10:32.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:32.947" starttime="20171013 18:10:32.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.948">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:32.948" starttime="20171013 18:10:32.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:32.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:32.948" starttime="20171013 18:10:32.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:33.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:33.154" starttime="20171013 18:10:32.949"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:33.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:33.155">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:33.155" starttime="20171013 18:10:32.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:33.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:33.155" starttime="20171013 18:10:33.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:33.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:33.156" starttime="20171013 18:10:33.156"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:33.156" starttime="20171013 18:10:32.945"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:33.156" starttime="20171013 18:10:32.944"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:33.157" starttime="20171013 18:10:32.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:33.157">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:33.157" starttime="20171013 18:10:33.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:33.158" starttime="20171013 18:10:33.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.866">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:34.867">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:34.867" starttime="20171013 18:10:33.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:34.868" starttime="20171013 18:10:34.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:34.868">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:34.869" starttime="20171013 18:10:34.868"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:34.869">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:34.869" starttime="20171013 18:10:32.943"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:34.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:34.871" starttime="20171013 18:10:34.870"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:34.871">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:34.871" starttime="20171013 18:10:34.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:34.872" starttime="20171013 18:10:34.871"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.875">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:34.875">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:34.875">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171013 18:10:34.875" starttime="20171013 18:10:34.872"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:34.878" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_led.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:34.878" starttime="20171013 18:10:34.877"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:34.878" starttime="20171013 18:10:34.876"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:34.878" starttime="20171013 18:10:32.942"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.879">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171013 18:10:34.879" starttime="20171013 18:10:34.878"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:34.883">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:34.883" starttime="20171013 18:10:34.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:34.884" starttime="20171013 18:10:34.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.885">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:34.885" starttime="20171013 18:10:34.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:34.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:34.885" starttime="20171013 18:10:34.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:35.235" starttime="20171013 18:10:34.886"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:35.236">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.236" starttime="20171013 18:10:34.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.236" starttime="20171013 18:10:35.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.237" starttime="20171013 18:10:35.237"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.237" starttime="20171013 18:10:34.881"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.237" starttime="20171013 18:10:34.880"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.237" starttime="20171013 18:10:34.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.238">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:35.238" starttime="20171013 18:10:35.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.239" starttime="20171013 18:10:35.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.468">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:35.469">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.469" starttime="20171013 18:10:35.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.469" starttime="20171013 18:10:35.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:35.470">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:35.470" starttime="20171013 18:10:35.470"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.470">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.471" starttime="20171013 18:10:34.879"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.472" starttime="20171013 18:10:35.471"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.472">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:35.472" starttime="20171013 18:10:35.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.473" starttime="20171013 18:10:35.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.473">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:35.473">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:35.474">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171013 18:10:35.474" starttime="20171013 18:10:35.473"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.475" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_control_list.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:35.475" starttime="20171013 18:10:35.474"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.475" starttime="20171013 18:10:35.474"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.475" starttime="20171013 18:10:34.878"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.476">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_elog.txt</msg>
<status status="PASS" endtime="20171013 18:10:35.477" starttime="20171013 18:10:35.476"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.481">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:35.482" starttime="20171013 18:10:35.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:35.483" starttime="20171013 18:10:35.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.484">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:35.484" starttime="20171013 18:10:35.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.485">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:35.485" starttime="20171013 18:10:35.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.673">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:35.673" starttime="20171013 18:10:35.485"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.673">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:35.673">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.673" starttime="20171013 18:10:35.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.674">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.674" starttime="20171013 18:10:35.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.675" starttime="20171013 18:10:35.674"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.675" starttime="20171013 18:10:35.480"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.675" starttime="20171013 18:10:35.479"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.675" starttime="20171013 18:10:35.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.675">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:35.676" starttime="20171013 18:10:35.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.676" starttime="20171013 18:10:35.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.911">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:35.911">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.911" starttime="20171013 18:10:35.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.912" starttime="20171013 18:10:35.912"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:35.912">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:35.912" starttime="20171013 18:10:35.912"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.913">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.913" starttime="20171013 18:10:35.477"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:35.914" starttime="20171013 18:10:35.913"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:35.914">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:35.914" starttime="20171013 18:10:35.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:35.914" starttime="20171013 18:10:35.914"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.915">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917247202, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917272915, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917644733, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:35.915">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:35.915">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputF...</msg>
<status status="PASS" endtime="20171013 18:10:35.916" starttime="20171013 18:10:35.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.917" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_elog.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:35.917" starttime="20171013 18:10:35.916"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.917" starttime="20171013 18:10:35.916"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:35.917" starttime="20171013 18:10:35.475"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.918">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171013 18:10:35.918" starttime="20171013 18:10:35.918"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:35.921">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:35.922" starttime="20171013 18:10:35.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:35.922" starttime="20171013 18:10:35.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.923">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:35.923" starttime="20171013 18:10:35.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:35.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:35.923" starttime="20171013 18:10:35.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.145">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:36.146" starttime="20171013 18:10:35.924"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.146">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:36.146">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.146" starttime="20171013 18:10:35.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.146">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.146" starttime="20171013 18:10:36.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.147" starttime="20171013 18:10:36.147"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.147" starttime="20171013 18:10:35.920"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.147" starttime="20171013 18:10:35.920"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.148" starttime="20171013 18:10:35.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.148">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:36.148" starttime="20171013 18:10:36.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.149" starttime="20171013 18:10:36.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.492">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:36.492">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.492" starttime="20171013 18:10:36.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.493" starttime="20171013 18:10:36.492"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:36.493">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:36.493" starttime="20171013 18:10:36.493"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.493">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.493" starttime="20171013 18:10:35.918"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.494" starttime="20171013 18:10:36.494"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.494">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:36.495" starttime="20171013 18:10:36.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.495" starttime="20171013 18:10:36.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.496">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/050d0894": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-152-gb8e472b", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/050d0894/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/050d0894/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/ea65c77f", 
        "/xyz/openbmc_project/software/050d0894", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/software/ea65c77f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-153-g1f4b94c", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/ea65c77f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/ea65c77f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/ea65c77f", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:36.496">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:36.497">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/050d0894": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171013 18:10:36.497" starttime="20171013 18:10:36.495"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.498" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_FIRMWARE_list.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:36.499" starttime="20171013 18:10:36.498"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.499" starttime="20171013 18:10:36.497"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.499" starttime="20171013 18:10:35.917"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.500">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_OCC_state.txt</msg>
<status status="PASS" endtime="20171013 18:10:36.500" starttime="20171013 18:10:36.499"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.503">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:36.503" starttime="20171013 18:10:36.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:36.504" starttime="20171013 18:10:36.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.504">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:36.504" starttime="20171013 18:10:36.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:36.505" starttime="20171013 18:10:36.505"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:36.702" starttime="20171013 18:10:36.506"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:36.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.703" starttime="20171013 18:10:36.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.703" starttime="20171013 18:10:36.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.704" starttime="20171013 18:10:36.704"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.704" starttime="20171013 18:10:36.501"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.704" starttime="20171013 18:10:36.501"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.704" starttime="20171013 18:10:36.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.705">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171013 18:10:36.705" starttime="20171013 18:10:36.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.706" starttime="20171013 18:10:36.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.854">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:36.854">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.854" starttime="20171013 18:10:36.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.855" starttime="20171013 18:10:36.854"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:36.855">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:36.855" starttime="20171013 18:10:36.855"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.856">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.856" starttime="20171013 18:10:36.500"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:36.857" starttime="20171013 18:10:36.856"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.857">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:36.857" starttime="20171013 18:10:36.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.857" starttime="20171013 18:10:36.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.858">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:36.858">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171013 18:10:36.858">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20171013 18:10:36.858" starttime="20171013 18:10:36.858"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.860" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_OCC_state.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:36.859"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:36.859"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:36.499"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:28.798"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:28.797"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:28.796"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:28.796"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.860" starttime="20171013 18:10:28.795"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.861" starttime="20171013 18:10:28.769"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.861" starttime="20171013 18:10:28.767"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:36.861" starttime="20171013 18:10:28.766"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.863" starttime="20171013 18:10:36.862"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:36.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:36.863">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:36.863" starttime="20171013 18:10:36.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:36.863" starttime="20171013 18:10:36.863"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:36.897">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:36.897" starttime="20171013 18:10:36.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.898">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:36.898" starttime="20171013 18:10:36.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.899">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:36.899" starttime="20171013 18:10:36.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:36.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:36.899" starttime="20171013 18:10:36.899"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:37.178" starttime="20171013 18:10:36.900"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:37.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.178" starttime="20171013 18:10:36.900"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.179" starttime="20171013 18:10:37.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.180" starttime="20171013 18:10:37.179"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.180" starttime="20171013 18:10:36.896"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.180" starttime="20171013 18:10:36.895"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.180" starttime="20171013 18:10:36.895"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.180">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171013 18:10:37.181" starttime="20171013 18:10:37.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.181" starttime="20171013 18:10:37.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.340">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:37.340">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.340" starttime="20171013 18:10:37.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.341" starttime="20171013 18:10:37.340"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:37.341">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:37.341" starttime="20171013 18:10:37.341"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.342">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.342" starttime="20171013 18:10:36.894"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.343" starttime="20171013 18:10:37.342"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.343">${status} = True</msg>
<status status="PASS" endtime="20171013 18:10:37.343" starttime="20171013 18:10:37.342"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.343" starttime="20171013 18:10:37.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.346">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917247202, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917272915, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507917644733, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:37.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:10:37.346">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'AdditionalData': [], u'Message': u'xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault', u'Resolved': 0, u'Id': 2, u'associations': [], u...</msg>
<status status="PASS" endtime="20171013 18:10:37.346" starttime="20171013 18:10:37.344"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.347">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" endtime="20171013 18:10:37.347" starttime="20171013 18:10:37.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.347">${logpath} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_esel</msg>
<status status="PASS" endtime="20171013 18:10:37.347" starttime="20171013 18:10:37.347"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.348" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_esel"&gt;/tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/20171013181002401481_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:37.348" starttime="20171013 18:10:37.347"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.349" starttime="20171013 18:10:37.349"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.353">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:37.353" starttime="20171013 18:10:37.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:37.354" starttime="20171013 18:10:37.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.354">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:37.354" starttime="20171013 18:10:37.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:37.355" starttime="20171013 18:10:37.354"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:37.541" starttime="20171013 18:10:37.356"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.541">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:37.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.542" starttime="20171013 18:10:37.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.542">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.543" starttime="20171013 18:10:37.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.543" starttime="20171013 18:10:37.543"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.543" starttime="20171013 18:10:37.352"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.543" starttime="20171013 18:10:37.351"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.544" starttime="20171013 18:10:37.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.544">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20171013 18:10:37.544" starttime="20171013 18:10:37.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.545" starttime="20171013 18:10:37.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:37.635">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.635" starttime="20171013 18:10:37.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.635" starttime="20171013 18:10:37.635"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:37.636">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:37.636" starttime="20171013 18:10:37.636"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.636">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.636" starttime="20171013 18:10:37.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.637" starttime="20171013 18:10:37.636"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.637">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:37.637">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:10:37.637">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:10:37.638" starttime="20171013 18:10:37.637"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.638">${esel_data} = []</msg>
<status status="PASS" endtime="20171013 18:10:37.638" starttime="20171013 18:10:37.349"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:10:37.640">[ ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171013 18:10:37.640" starttime="20171013 18:10:37.639"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.640">${status} = False</msg>
<status status="PASS" endtime="20171013 18:10:37.640" starttime="20171013 18:10:37.638"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.640">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 18:10:37.641" starttime="20171013 18:10:37.640"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.641" starttime="20171013 18:10:37.348"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.641" starttime="20171013 18:10:37.641"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.645">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:37.645" starttime="20171013 18:10:37.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:37.646" starttime="20171013 18:10:37.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.646">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:37.646" starttime="20171013 18:10:37.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:37.647" starttime="20171013 18:10:37.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:37.826" starttime="20171013 18:10:37.648"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:37.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.826" starttime="20171013 18:10:37.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.827" starttime="20171013 18:10:37.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.828" starttime="20171013 18:10:37.827"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.828" starttime="20171013 18:10:37.644"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.828" starttime="20171013 18:10:37.643"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.828" starttime="20171013 18:10:37.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.829">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20171013 18:10:37.829" starttime="20171013 18:10:37.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.830" starttime="20171013 18:10:37.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.912">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:37.912">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.912" starttime="20171013 18:10:37.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.912" starttime="20171013 18:10:37.912"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:37.913">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:37.913" starttime="20171013 18:10:37.913"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.913">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.913" starttime="20171013 18:10:37.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:37.914" starttime="20171013 18:10:37.913"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.914">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:37.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:10:37.914">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:10:37.915" starttime="20171013 18:10:37.914"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.915">${esel_data} = []</msg>
<status status="PASS" endtime="20171013 18:10:37.915" starttime="20171013 18:10:37.642"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:10:37.916">[ ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171013 18:10:37.916" starttime="20171013 18:10:37.916"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:37.916">${status} = False</msg>
<status status="PASS" endtime="20171013 18:10:37.916" starttime="20171013 18:10:37.915"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.917">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 18:10:37.917" starttime="20171013 18:10:37.916"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:37.917" starttime="20171013 18:10:37.641"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:37.918" starttime="20171013 18:10:37.917"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:37.921">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:37.922" starttime="20171013 18:10:37.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:37.922" starttime="20171013 18:10:37.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.923">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:37.923" starttime="20171013 18:10:37.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:37.924">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:37.924" starttime="20171013 18:10:37.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:38.120" starttime="20171013 18:10:37.924"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:38.120">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.121" starttime="20171013 18:10:37.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.121" starttime="20171013 18:10:38.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.122" starttime="20171013 18:10:38.122"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.122" starttime="20171013 18:10:37.920"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.122" starttime="20171013 18:10:37.920"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.122" starttime="20171013 18:10:37.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.123">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" endtime="20171013 18:10:38.123" starttime="20171013 18:10:38.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:38.124" starttime="20171013 18:10:38.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.220">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:38.220">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.220" starttime="20171013 18:10:38.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:38.221" starttime="20171013 18:10:38.221"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:38.221">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:38.221" starttime="20171013 18:10:38.221"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.222">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.222" starttime="20171013 18:10:37.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:38.222" starttime="20171013 18:10:38.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.223">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:38.223">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:10:38.223">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:10:38.223" starttime="20171013 18:10:38.223"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.223">${esel_data} = []</msg>
<status status="PASS" endtime="20171013 18:10:38.223" starttime="20171013 18:10:37.918"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:10:38.225">[ ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171013 18:10:38.225" starttime="20171013 18:10:38.224"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.225">${status} = False</msg>
<status status="PASS" endtime="20171013 18:10:38.225" starttime="20171013 18:10:38.224"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.225">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171013 18:10:38.226" starttime="20171013 18:10:38.225"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.226" starttime="20171013 18:10:37.917"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.226" starttime="20171013 18:10:37.348"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.231">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 18:10:38.237">${out} = </msg>
<status status="PASS" endtime="20171013 18:10:38.237" starttime="20171013 18:10:38.226"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20171013 18:10:38.242">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20171013 18:10:38.242" starttime="20171013 18:10:38.241"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.242">${status} = False</msg>
<status status="PASS" endtime="20171013 18:10:38.242" starttime="20171013 18:10:38.240"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:38.243">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171013 18:10:38.243" starttime="20171013 18:10:38.242"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.243" starttime="20171013 18:10:36.894"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.243" starttime="20171013 18:10:36.864"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.243" starttime="20171013 18:10:36.861"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:38.244" starttime="20171013 18:10:36.861"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:38.246" starttime="20171013 18:10:38.246"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:38.246">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:38.246">${ret_values} = None</msg>
<status status="PASS" endtime="20171013 18:10:38.247" starttime="20171013 18:10:38.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:38.247" starttime="20171013 18:10:38.247"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.311">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:38.311">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20171013 18:10:38.369">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171013 18:10:38.381">${core_files} = /tmp/core_journalctl.1406
/tmp/core_journalctl.1818
/tmp/core_journalctl.2535
/tmp/core_obmc-console-se.1030
/tmp/core_phosphor-log-ma.1014
/tmp/core_phosphor-log-ma.2590
/tmp/core_phosphor-softpo.260...</msg>
<msg level="INFO" timestamp="20171013 18:10:38.381">${stderr} = </msg>
<msg level="INFO" timestamp="20171013 18:10:38.381">${rc} = 0</msg>
<status status="PASS" endtime="20171013 18:10:38.381" starttime="20171013 18:10:38.276"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:38.382">@{core_list} = [ /tmp/core_journalctl.1406 | /tmp/core_journalctl.1818 | /tmp/core_journalctl.2535 | /tmp/core_obmc-console-se.1030 | /tmp/core_phosphor-log-ma.1014 | /tmp/core_phosphor-log-ma.2590 | /tmp/core_phosp...</msg>
<status status="PASS" endtime="20171013 18:10:38.382" starttime="20171013 18:10:38.381"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:38.405" starttime="20171013 18:10:38.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:39.083" starttime="20171013 18:10:38.407"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.084" starttime="20171013 18:10:38.406"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.084" starttime="20171013 18:10:38.405"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.084" starttime="20171013 18:10:38.392"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.084" starttime="20171013 18:10:38.382"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_journalctl.1406">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:39.427" starttime="20171013 18:10:39.084"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:39.463">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:39.463">Executing command 'rm /tmp/core_journalctl.1406'.</msg>
<msg level="INFO" timestamp="20171013 18:10:39.530">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:39.542" starttime="20171013 18:10:39.427"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.542" starttime="20171013 18:10:39.084"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_journalctl.1818">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:39.861" starttime="20171013 18:10:39.542"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:39.899">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:39.899">Executing command 'rm /tmp/core_journalctl.1818'.</msg>
<msg level="INFO" timestamp="20171013 18:10:39.946">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:39.958" starttime="20171013 18:10:39.861"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:39.958" starttime="20171013 18:10:39.542"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_journalctl.2535">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:40.284" starttime="20171013 18:10:39.958"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:40.320">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:40.320">Executing command 'rm /tmp/core_journalctl.2535'.</msg>
<msg level="INFO" timestamp="20171013 18:10:40.367">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:40.379" starttime="20171013 18:10:40.285"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:40.379" starttime="20171013 18:10:39.958"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_obmc-console-se.1030">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:40.620" starttime="20171013 18:10:40.380"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:40.657">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:40.657">Executing command 'rm /tmp/core_obmc-console-se.1030'.</msg>
<msg level="INFO" timestamp="20171013 18:10:40.724">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:40.736" starttime="20171013 18:10:40.621"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:40.736" starttime="20171013 18:10:40.379"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-log-ma.1014">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:41.121" starttime="20171013 18:10:40.737"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:41.155">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:41.156">Executing command 'rm /tmp/core_phosphor-log-ma.1014'.</msg>
<msg level="INFO" timestamp="20171013 18:10:41.202">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:41.214" starttime="20171013 18:10:41.122"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:41.214" starttime="20171013 18:10:40.736"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-log-ma.2590">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:41.496" starttime="20171013 18:10:41.215"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:41.530">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:41.531">Executing command 'rm /tmp/core_phosphor-log-ma.2590'.</msg>
<msg level="INFO" timestamp="20171013 18:10:41.588">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:41.600" starttime="20171013 18:10:41.496"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:41.600" starttime="20171013 18:10:41.214"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-softpo.2605">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:41.845" starttime="20171013 18:10:41.601"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:41.879">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:41.880">Executing command 'rm /tmp/core_phosphor-softpo.2605'.</msg>
<msg level="INFO" timestamp="20171013 18:10:41.931">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:41.943" starttime="20171013 18:10:41.845"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:41.943" starttime="20171013 18:10:41.601"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_systemd-journal.1405">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:43.028" starttime="20171013 18:10:41.943"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:43.064">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:43.065">Executing command 'rm /tmp/core_systemd-journal.1405'.</msg>
<msg level="INFO" timestamp="20171013 18:10:43.111">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:43.123" starttime="20171013 18:10:43.029"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:43.123" starttime="20171013 18:10:41.943"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_systemd-journal.1808">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:43.620" starttime="20171013 18:10:43.124"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:43.654">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:43.655">Executing command 'rm /tmp/core_systemd-journal.1808'.</msg>
<msg level="INFO" timestamp="20171013 18:10:43.701">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:43.713" starttime="20171013 18:10:43.621"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:43.714" starttime="20171013 18:10:43.123"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_systemd-journal.2312">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:44.019" starttime="20171013 18:10:43.714"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:44.055">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:44.055">Executing command 'rm /tmp/core_systemd-journal.2312'.</msg>
<msg level="INFO" timestamp="20171013 18:10:44.102">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:44.114" starttime="20171013 18:10:44.019"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:44.114" starttime="20171013 18:10:43.714"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_systemd-journal.541">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:50.825" starttime="20171013 18:10:44.115"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:50.862">encoding=UTF-8
host=9.3.86.161
index=1
term_type=vt100
newline=

timeout=25 seconds
height=24
width=80
alias=bmc_connection
port=22
prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20171013 18:10:50.863">Executing command 'rm /tmp/core_systemd-journal.541'.</msg>
<msg level="INFO" timestamp="20171013 18:10:50.909">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:50.826"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:44.114"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:39.084"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:38.276"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:38.248"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.921" starttime="20171013 18:10:38.244"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.922" starttime="20171013 18:10:38.244"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.922" starttime="20171013 18:10:02.626"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.922" starttime="20171013 18:10:02.623"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.922" starttime="20171013 18:10:02.623"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.922" starttime="20171013 18:10:02.623"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171013 18:10:50.930" starttime="20171013 18:10:50.930"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.930" starttime="20171013 18:10:50.923"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.930" starttime="20171013 18:10:02.622"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.931" starttime="20171013 18:09:59.264"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.931" starttime="20171013 18:09:59.264"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.943">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20171013 18:10:50.943" starttime="20171013 18:10:50.932"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.943">${FFDC_DIR_PATH} = /tmp/fspcibld/3931/obmc-robot/logs/20171013181002401481_TestsTestBasicPoweron/20171013181002401481_PowerOnTest/</msg>
<status status="PASS" endtime="20171013 18:10:50.943" starttime="20171013 18:10:50.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:50.944" starttime="20171013 18:10:50.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:50.945" starttime="20171013 18:10:50.944"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:50.945" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs"&gt;/tmp/fspcibld/3931/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171013 18:10:50.945" starttime="20171013 18:10:50.945"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:50.946" html="yes">File '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171013 18:10:50.946" starttime="20171013 18:10:50.946"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:50.946">${exist} = True</msg>
<status status="PASS" endtime="20171013 18:10:50.946" starttime="20171013 18:10:50.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:50.947" starttime="20171013 18:10:50.947"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:50.948" starttime="20171013 18:10:50.947"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.949">${cur_time} = 2017-10-13 18:10:50:948427</msg>
<status status="PASS" endtime="20171013 18:10:50.949" starttime="20171013 18:10:50.948"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.949">${cur_time} = 20171013181050948427</msg>
<status status="PASS" endtime="20171013 18:10:50.949" starttime="20171013 18:10:50.949"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:50.950">${cur_time} = 20171013181050948427</msg>
<status status="PASS" endtime="20171013 18:10:50.950" starttime="20171013 18:10:50.948"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:50.951" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:50.951" starttime="20171013 18:10:50.950"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:50.951" starttime="20171013 18:10:50.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:50.965">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:50.966" starttime="20171013 18:10:50.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:50.966" starttime="20171013 18:10:50.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.967">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:50.967" starttime="20171013 18:10:50.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:50.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:50.968" starttime="20171013 18:10:50.967"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.171">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:51.171" starttime="20171013 18:10:50.969"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.171">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:51.171">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.171" starttime="20171013 18:10:50.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.172">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.172" starttime="20171013 18:10:51.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.173" starttime="20171013 18:10:51.172"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.173" starttime="20171013 18:10:50.964"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.173" starttime="20171013 18:10:50.964"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.173" starttime="20171013 18:10:50.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.174">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171013 18:10:51.174" starttime="20171013 18:10:51.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.175" starttime="20171013 18:10:51.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:51.398">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.398" starttime="20171013 18:10:51.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.399" starttime="20171013 18:10:51.399"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:51.399">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:51.400" starttime="20171013 18:10:51.399"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.400">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.400" starttime="20171013 18:10:50.953"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.401" starttime="20171013 18:10:51.400"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.405">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:51.405" starttime="20171013 18:10:51.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:51.406" starttime="20171013 18:10:51.405"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.406">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:51.406" starttime="20171013 18:10:51.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:51.407" starttime="20171013 18:10:51.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:51.642" starttime="20171013 18:10:51.408"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:51.642">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.642" starttime="20171013 18:10:51.407"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.643" starttime="20171013 18:10:51.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.644" starttime="20171013 18:10:51.643"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.644" starttime="20171013 18:10:51.404"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.644" starttime="20171013 18:10:51.403"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.644" starttime="20171013 18:10:51.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.645">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171013 18:10:51.645" starttime="20171013 18:10:51.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.646" starttime="20171013 18:10:51.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.729">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:51.729">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.729" starttime="20171013 18:10:51.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.729" starttime="20171013 18:10:51.729"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:51.730">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:51.730" starttime="20171013 18:10:51.730"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.730">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.730" starttime="20171013 18:10:51.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.731" starttime="20171013 18:10:51.731"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.732">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/4"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171013 18:10:51.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171013 18:10:51.732">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/4'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171013 18:10:51.732" starttime="20171013 18:10:51.731"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.732">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" endtime="20171013 18:10:51.732" starttime="20171013 18:10:51.401"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.733" starttime="20171013 18:10:51.732"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.733">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" endtime="20171013 18:10:51.733" starttime="20171013 18:10:51.401"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:51.734" starttime="20171013 18:10:51.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.735">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171013 18:10:51.735" starttime="20171013 18:10:51.734"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.738">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:51.738" starttime="20171013 18:10:51.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:51.739" starttime="20171013 18:10:51.739"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.740">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:51.740" starttime="20171013 18:10:51.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.740">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:51.740" starttime="20171013 18:10:51.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:51.935" starttime="20171013 18:10:51.741"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:51.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:51.935">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.935" starttime="20171013 18:10:51.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.936" starttime="20171013 18:10:51.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:51.937" starttime="20171013 18:10:51.936"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.937" starttime="20171013 18:10:51.737"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.937" starttime="20171013 18:10:51.736"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.937" starttime="20171013 18:10:51.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.937">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" endtime="20171013 18:10:51.937" starttime="20171013 18:10:51.937"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:51.939">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:51.939" starttime="20171013 18:10:51.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:51.940">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:51.940" starttime="20171013 18:10:51.940"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.940" starttime="20171013 18:10:51.939"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:51.940" starttime="20171013 18:10:51.938"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.071">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 18:10:52.071">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.071" starttime="20171013 18:10:51.941"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.072">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:52.072" starttime="20171013 18:10:52.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.073">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:52.073" starttime="20171013 18:10:52.073"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.074" starttime="20171013 18:10:52.072"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.074" starttime="20171013 18:10:52.071"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:52.074">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:52.074" starttime="20171013 18:10:52.074"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:52.074">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.074" starttime="20171013 18:10:51.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.075" starttime="20171013 18:10:52.075"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.075" starttime="20171013 18:10:51.733"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.075" starttime="20171013 18:10:51.733"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:52.077" starttime="20171013 18:10:52.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.077">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171013 18:10:52.077" starttime="20171013 18:10:52.077"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.080">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:52.080" starttime="20171013 18:10:52.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:52.081" starttime="20171013 18:10:52.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.082">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:52.082" starttime="20171013 18:10:52.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:52.082" starttime="20171013 18:10:52.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:52.451" starttime="20171013 18:10:52.083"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:52.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:52.451">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.451" starttime="20171013 18:10:52.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.452" starttime="20171013 18:10:52.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:52.453" starttime="20171013 18:10:52.452"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.453" starttime="20171013 18:10:52.079"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.453" starttime="20171013 18:10:52.079"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.453" starttime="20171013 18:10:52.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.453">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" endtime="20171013 18:10:52.454" starttime="20171013 18:10:52.453"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:52.455">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:52.455" starttime="20171013 18:10:52.454"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:52.456">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:52.456" starttime="20171013 18:10:52.456"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.456" starttime="20171013 18:10:52.455"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:52.456" starttime="20171013 18:10:52.454"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.050">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 18:10:54.051">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.051" starttime="20171013 18:10:52.457"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.052">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:54.052" starttime="20171013 18:10:54.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.053">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:54.053" starttime="20171013 18:10:54.053"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.053" starttime="20171013 18:10:54.052"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.054" starttime="20171013 18:10:54.051"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:54.054">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:54.054" starttime="20171013 18:10:54.054"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:54.054">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.054" starttime="20171013 18:10:52.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.056" starttime="20171013 18:10:54.055"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.056" starttime="20171013 18:10:52.075"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.057" starttime="20171013 18:10:52.075"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/4">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:54.058" starttime="20171013 18:10:54.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.058">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171013 18:10:54.058" starttime="20171013 18:10:54.058"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.061">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:54.062" starttime="20171013 18:10:54.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:54.062" starttime="20171013 18:10:54.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.063">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:54.063" starttime="20171013 18:10:54.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.064">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:54.064" starttime="20171013 18:10:54.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.426">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:54.426" starttime="20171013 18:10:54.064"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:54.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:54.426">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.426" starttime="20171013 18:10:54.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.427" starttime="20171013 18:10:54.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:54.428" starttime="20171013 18:10:54.427"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.428" starttime="20171013 18:10:54.060"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.428" starttime="20171013 18:10:54.060"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.428" starttime="20171013 18:10:54.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.430">${base_uri} = /xyz/openbmc_project/logging/entry/4</msg>
<status status="PASS" endtime="20171013 18:10:54.430" starttime="20171013 18:10:54.429"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:54.433">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:54.433" starttime="20171013 18:10:54.431"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:54.434">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171013 18:10:54.434" starttime="20171013 18:10:54.434"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.434" starttime="20171013 18:10:54.433"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:54.434" starttime="20171013 18:10:54.430"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.225">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171013 18:10:57.225">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.225" starttime="20171013 18:10:54.435"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.227">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:57.227" starttime="20171013 18:10:57.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.228">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171013 18:10:57.228" starttime="20171013 18:10:57.227"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.228" starttime="20171013 18:10:57.227"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.228" starttime="20171013 18:10:57.225"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:57.229">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:57.229" starttime="20171013 18:10:57.229"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.229" starttime="20171013 18:10:54.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.230" starttime="20171013 18:10:57.229"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.230" starttime="20171013 18:10:54.057"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.230" starttime="20171013 18:10:54.057"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.230" starttime="20171013 18:10:51.733"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.230" starttime="20171013 18:10:50.952"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.234">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171013 18:10:57.234" starttime="20171013 18:10:57.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171013 18:10:57.235" starttime="20171013 18:10:57.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.237">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171013 18:10:57.237" starttime="20171013 18:10:57.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171013 18:10:57.238" starttime="20171013 18:10:57.237"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171013 18:10:57.657" starttime="20171013 18:10:57.239"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20171013 18:10:57.657">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.657" starttime="20171013 18:10:57.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.658">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.658" starttime="20171013 18:10:57.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.659" starttime="20171013 18:10:57.658"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.659" starttime="20171013 18:10:57.233"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.659" starttime="20171013 18:10:57.232"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.659" starttime="20171013 18:10:57.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.660">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171013 18:10:57.660" starttime="20171013 18:10:57.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.661" starttime="20171013 18:10:57.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.704">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171013 18:10:57.705">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.705" starttime="20171013 18:10:57.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.705" starttime="20171013 18:10:57.705"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171013 18:10:57.706">Delete All Sessions</msg>
<status status="PASS" endtime="20171013 18:10:57.706" starttime="20171013 18:10:57.706"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.706">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171013 18:10:57.706" starttime="20171013 18:10:57.231"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.707">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171013 18:10:57.707" starttime="20171013 18:10:57.706"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.707" starttime="20171013 18:10:57.231"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.707" starttime="20171013 18:10:50.952"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.707" starttime="20171013 18:10:50.951"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.707" starttime="20171013 18:09:59.263"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.710">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 18:10:57.710" starttime="20171013 18:10:57.709"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.710">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 18:10:57.711" starttime="20171013 18:10:57.710"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.711">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171013 18:10:57.711" starttime="20171013 18:10:57.708"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.712">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20171013 18:10:57.712" starttime="20171013 18:10:57.712"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.713" starttime="20171013 18:10:57.712"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.717">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 18:10:57.728">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 18:10:57.729">${output} = /tmp/fspcibld/3931/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171013 18:10:57.730" starttime="20171013 18:10:57.713"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.745" starttime="20171013 18:10:57.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.747" starttime="20171013 18:10:57.747"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.747">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20171013 18:10:57.747" starttime="20171013 18:10:57.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.749">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 18:10:57.749" starttime="20171013 18:10:57.748"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.749">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 18:10:57.749" starttime="20171013 18:10:57.711"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.750">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171013 18:10:57.750" starttime="20171013 18:10:57.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.751">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171013 18:10:57.751" starttime="20171013 18:10:57.751"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.752" starttime="20171013 18:10:57.752"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.756">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171013 18:10:57.781">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 18:10:57.781">${os_con_pid} = </msg>
<status status="PASS" endtime="20171013 18:10:57.781" starttime="20171013 18:10:57.753"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.784" starttime="20171013 18:10:57.783"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.785">${os_con_pid} = </msg>
<status status="PASS" endtime="20171013 18:10:57.785" starttime="20171013 18:10:57.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.786">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20171013 18:10:57.786" starttime="20171013 18:10:57.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.787" starttime="20171013 18:10:57.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.788">${rc} = None</msg>
<msg level="INFO" timestamp="20171013 18:10:57.788">${output} = None</msg>
<status status="PASS" endtime="20171013 18:10:57.788" starttime="20171013 18:10:57.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.788" starttime="20171013 18:10:57.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.793" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/3931/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/3931/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171013 18:10:57.793" starttime="20171013 18:10:57.790"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.793" starttime="20171013 18:10:57.790"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:57.793" starttime="20171013 18:10:57.789"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.794">${output} = </msg>
<status status="PASS" endtime="20171013 18:10:57.794" starttime="20171013 18:10:57.794"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171013 18:10:57.795">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20171013 18:10:57.795" starttime="20171013 18:10:57.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20171013 18:10:57.850" starttime="20171013 18:10:57.795"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.851">${rc} = 0</msg>
<msg level="INFO" timestamp="20171013 18:10:57.892">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20171013 18:10:57.892" starttime="20171013 18:10:57.795"></status>
</kw>
<msg level="INFO" timestamp="20171013 18:10:57.933">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20171013 18:10:57.933" starttime="20171013 18:10:57.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171013 18:10:57.996">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.94769|secure|Booting in non-secure mode.
  3.94770|secure|SecureROM valid - enabling functionality
  8.89356|ISTEP  6. 5 - host_init_fsi
  9.01032|ISTEP  6. 6 - host_set_ipl_parms
  9.04043|ISTEP  6. 7 - host_discover_targets
  9.90295|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  9.90295|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  9.92299|ISTEP  6. 8 - host_update_master_tpm
 48.48132|SECURE|Security Access Bit&gt; 0x0000000000000000
 48.48133|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 48.48161|ISTEP  6. 9 - host_gard
 48.52812|ISTEP  6.10 - host_revert_sbe_mcs_setup
 48.53456|ISTEP  6.11 - host_start_occ_xstop_handler
 48.53568|ISTEP  6.12 - host_voltage_config
 48.56981|ISTEP  7. 2 - mss_volt
 49.09980|ISTEP  7. 3 - mss_freq
 49.22267|ISTEP  7. 4 - mss_eff_config
 51.97766|ISTEP  7. 5 - mss_attr_update
 51.98796|ISTEP  8. 1 - host_slave_sbe_config
 52.02813|ISTEP  8. 2 - host_setup_sbe
 52.03329|ISTEP  8. 3 - host_cbs_start
 52.05946|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 59.27651|ISTEP  8. 5 - host_attnlisten_proc
 59.27729|ISTEP  8. 6 - host_p9_fbc_eff_config
 59.28206|ISTEP  8. 7 - host_p9_eff_config_links
 59.29260|ISTEP  8. 8 - proc_attr_update
 59.29372|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 59.32419|ISTEP  8.10 - proc_xbus_scominit
 60.87469|ISTEP  8.11 - proc_xbus_enable_ridi
 60.87866|ISTEP  9. 1 - fabric_erepair
 61.16308|ISTEP  9. 2 - fabric_io_dccal
 61.84070|ISTEP  9. 3 - fabric_pre_trainadv
 61.85017|ISTEP  9. 4 - fabric_io_run_training
 61.97473|ISTEP  9. 5 - fabric_post_trainadv
 61.97936|ISTEP  9. 6 - proc_smp_link_layer
 61.98421|ISTEP  9. 7 - proc_fab_iovalid
 62.01751|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 62.02375|ISTEP 10. 1 - proc_build_smp
 62.14831|ISTEP 10. 2 - host_slave_sbe_update
 62.97644|ISTEP 10. 3 - host_set_voltages
 63.02430|ISTEP 10. 4 - proc_cen_ref_clk_enable
 63.03009|ISTEP 10. 5 - proc_enable_osclite
 63.03145|ISTEP 10. 6 - proc_chiplet_scominit
 63.07375|ISTEP 10. 7 - proc_abus_scominit
 63.08553|ISTEP 10. 8 - proc_obus_scominit
 63.15407|ISTEP 10. 9 - proc_npu_scominit
 63.17983|ISTEP 10.10 - proc_pcie_scominit
 63.22425|ISTEP 10.11 - proc_scomoverride_chiplets
 63.23358|ISTEP 10.12 - proc_chiplet_enable_ridi
 63.23642|ISTEP 10.13 - host_rng_bist
 63.23859|ISTEP 10.14 - host_update_redundant_tpm
 63.33622|ISTEP 11. 1 - host_prd_hwreconfig
 63.50845|ISTEP 11. 2 - cen_tp_chiplet_init1
 63.51074|ISTEP 11. 3 - cen_pll_initf
 63.51186|ISTEP 11. 4 - cen_pll_setup
 63.51344|ISTEP 11. 5 - cen_tp_chiplet_init2
 63.51465|ISTEP 11. 6 - cen_tp_arrayinit
 63.51571|ISTEP 11. 7 - cen_tp_chiplet_init3
 63.51681|ISTEP 11. 8 - cen_chiplet_init
 63.51851|ISTEP 11. 9 - cen_arrayinit
 63.51964|ISTEP 11.10 - cen_initf
 63.52173|ISTEP 11.11 - cen_do_manual_inits
 63.52279|ISTEP 11.12 - cen_startclocks
 63.52446|ISTEP 11.13 - cen_scominits
 63.52572|ISTEP 12. 1 - mss_getecid
 63.53046|ISTEP 12. 2 - dmi_attr_update
 63.53175|ISTEP 12. 3 - proc_dmi_scominit
 63.53275|ISTEP 12. 4 - cen_dmi_scominit
 63.53374|ISTEP 12. 5 - dmi_erepair
 63.53471|ISTEP 12. 6 - dmi_io_dccal
 63.53570|ISTEP 12. 7 - dmi_pre_trainadv
 63.53743|ISTEP 12. 8 - dmi_io_run_training
 63.53867|ISTEP 12. 9 - dmi_post_trainadv
 63.53967|ISTEP 12.10 - proc_cen_framelock
 63.54145|ISTEP 12.11 - host_startprd_dmi
 63.54264|ISTEP 12.12 - host_attnlisten_memb
 63.54375|ISTEP 12.13 - cen_set_inband_addr
 63.54547|ISTEP 13. 1 - host_disable_memvolt
 63.70312|ISTEP 13. 2 - mem_pll_reset
 63.71882|ISTEP 13. 3 - mem_pll_initf
 63.76670|ISTEP 13. 4 - mem_pll_setup
 63.79146|ISTEP 13. 6 - mem_startclocks
 63.80970|ISTEP 13. 7 - host_enable_memvolt
 63.81220|ISTEP 13. 8 - mss_scominit
 64.20567|ISTEP 13. 9 - mss_ddr_phy_reset
 64.27880|ISTEP 13.10 - mss_draminit
 64.52565|ISTEP 13.11 - mss_draminit_training
 64.88409|ISTEP 13.12 - mss_draminit_trainadv
 64.88589|ISTEP 13.13 - mss_draminit_mc
 64.91811|ISTEP 14. 1 - mss_memdiag
 75.40879|ISTEP 14. 2 - mss_thermal_init
 75.42995|ISTEP 14. 3 - proc_pcie_config
 75.44730|ISTEP 14. 4 - mss_power_cleanup
 75.44943|ISTEP 14. 5 - proc_setup_bars
 75.49167|ISTEP 14. 6 - proc_htm_setup
 75.50296|ISTEP 14. 7 - proc_exit_cache_contained
 75.51699|ISTEP 15. 1 - host_build_stop_image
 76.55594|ISTEP 15. 2 - proc_set_pba_homer_bar
 76.56068|ISTEP 15. 3 - host_establish_ex_chiplet
 76.56760|ISTEP 15. 4 - host_start_stop_engine
 76.67459|ISTEP 16. 1 - host_activate_master
 77.86582|ISTEP 16. 2 - host_activate_slave_cores
 78.34887|ISTEP 16. 3 - host_secure_rng
 78.36856|ISTEP 16. 4 - mss_scrub
 78.37925|ISTEP 16. 5 - host_ipl_complete
 78.40480|ISTEP 16. 6 - host_load_io_ppe
 78.45378|ISTEP 18.11 - proc_tod_setup
 78.56387|ISTEP 18.12 - proc_tod_init
 78.55649|ISTEP 20. 1 - host_load_payload
 78.97051|ISTEP 20. 2 - host_load_hdat
 82.80005|ISTEP 21. 1 - host_runtime_setup
 96.21297|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 96.21301|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 96.21305|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 96.67518|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 98.57937|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 98.60844|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 98.60848|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 98.60814|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 98.60818|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 98.61807|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 98.91352|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 98.92848|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 98.93026|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
111.32689|htmgt|OCCs are not active (rc=0x250A). Attempting OCC Reset
123.75464|htmgt|OCCs are now running in ACTIVE state
123.75627|ISTEP 21. 2 - host_verify_hdat
123.76653|ISTEP 21. 3 - host_start_payload
[  143.315819486,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[  143.315823373,7] initial console log level: memory 7, driver 5
[  143.315825476,6] CPU: P9 generation processor (max 4 threads/core)
[  143.315827419,7] CPU: Boot CPU PIR is 0x0028 PVR is 0x004e1200
[  143.315829544,7] CPU: Initial max PIR set to 0x7fff
[  143.316823424,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[  143.316827196,7] Assigning physical memory map table for nimbus
[  143.316829763,7] Parsing HDAT...
[  143.316831205,5] SPIRA-S found.
[  143.316833589,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  143.317037214,4] SENSORS: Duplicate sensor ID : 8
[  143.317197734,4] SENSORS: Duplicate sensor ID : 9
[  143.317199704,6] SP Family is openbmc
[  143.317205091,7] LPC: IOPATH chip id = 0
[  143.317206518,7] LPC: FW BAR       = f0000000
[  143.317208159,7] LPC: MEM BAR      = e0000000
[  143.317209722,7] LPC: IO BAR       = d0010000
[  143.317211306,7] LPC: Internal BAR = c0012000
[  143.317224100,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  143.317227000,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  143.318038564,5] UART: Using UART at 0x60300d00103f8
[  143.320637330,3] I2C: v2 found, but not supported. Parsing as v1
[  143.320989463,3] I2C: v2 found, but not supported. Parsing as v1
[  143.321688998,5] P9 DD2.00 detected
[  143.321768039,5] CHIP: Chip ID 0000 type: P9N DD2.0
[  143.321816050,5] P9 DD2.00 detected
[  143.321859024,5] CHIP: Chip ID 0008 type: P9N DD2.0
[  143.322198343,5] SLW: Enabling: stop0_lite
[  143.322260987,5] SLW: Enabling: stop0
[  143.322419827,5] PLAT: Using virtual UART
[  143.322633856,7] LPC: Routing irq 9, policy: 0 (r=1)
[  143.322635790,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[  143.322886475,5] PLAT: Detected Witherspoon platform
[  143.322958580,5] PLAT: Detected BMC platform OpenBMC
[  143.364018136,5] CPU: All 176 processors called in...
[  143.363040104,7] XIVE[CPU 082b] Initialized TMA (VP: 1/ab W01=0000000000000000)
[  143.363398475,7] XIVE[CPU 0046] Initialized TMA (VP: 0/c6 W01=0000000000000000)
[    2.457404448,5] FLASH: Found system flash:  id:0
[    2.457622651,5] BT: Interface initialized, IO 0x00e4
[    2.460009974,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.460011535,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    5.497170234,3] BT: seq 0x00 netfn 0x06 cmd 0x36: Retry sending message
[   11.159255311,3] BT: seq 0x01 netfn 0x06 cmd 0x24: Retry sending message
[   15.051813463,5] NVRAM: Size is 576 KB
[   15.255787985,5] STB: secure and trusted boot not supported
[   15.256563400,5] OPAL: Using OPAL UART console
[   15.256598193,7] LPC: Routing irq 4, policy: 0 (r=1)
[   15.256599576,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[   15.262628965,5] VAS: Initialized chip 0
[   15.263741633,5] VAS: Initialized chip 8
[   15.266424826,5] Found ibm,power9-nx
[   15.267512377,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[   15.268835084,5] Found ibm,power9-nx
[   15.269982902,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[   17.487801753,3] FLASH: flash subpartition not found.
[   17.487854041,3] FLASH: Failed to parse subpart info for CAPP
[   17.487995673,3] CAPP: Error loading ucode lid. index=200d1
[   18.000158151,5] PCI: Resetting PHBs and training links...
[   19.036094573,5] PCI: Probing slots...
[   19.092478240,3] PCI: built-in device not found:  (loc: 100)
[   19.093364544,3] PCI: built-in device not found: GPU0 down (loc: 250)
[   19.093411696,3] PCI: built-in device not found: GPU0 (loc: 400)
[   19.094645669,3] PCI: built-in device not found: GPU1 down (loc: 258)
[   19.098263231,3] PCI: built-in device not found: GPU1 (loc: 500)
[   19.099492190,3] PCI: built-in device not found: GPU2 down (loc: 260)
[   19.101918721,3] PCI: built-in device not found: GPU2 (loc: 600)
[   19.103160375,3] PCI: built-in device not found:  (loc: 100)
[   19.104385502,3] PCI: built-in device not found: GPU3 down (loc: 220)
[   19.106809259,3] PCI: built-in device not found: GPU3 (loc: 300)
[   19.109234113,3] PCI: built-in device not found: GPU4 down (loc: 228)
[   19.110464338,3] PCI: built-in device not found: GPU4 (loc: 400)
[   19.111698124,3] PCI: built-in device not found: GPU5 down (loc: 268)
[   19.112943350,3] PCI: built-in device not found: GPU5 (loc: 500)
[   19.114191447,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   19.117823482,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   19.120261628,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[   19.122697751,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   19.126321182,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   19.128756072,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   19.131189296,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   19.131245513,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[   19.131322980,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[   19.131393829,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   19.131466942,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   19.131538034,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[   19.131609383,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[   19.131683212,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[   19.131754695,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   19.131817365,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   19.131875094,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   19.131938057,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   19.131995723,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   19.132053856,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   19.132127507,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   19.132189428,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   19.132256667,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   19.132324052,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   19.132394080,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   19.132463872,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   19.132531820,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   19.132598734,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   19.132668121,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   19.132745243,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   19.132815030,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   19.132884860,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   19.132952220,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   19.133029553,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   19.133083466,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   19.133155041,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   19.133213673,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[   19.133268903,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[   19.133333730,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[   19.133402594,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   20.295494382,3] BT: seq 0x07 netfn 0x04 cmd 0x30: Retry sending message
[   25.468765598,3] BT: seq 0x08 netfn 0x04 cmd 0x30: Retry sending message
[   31.036133700,5] IPMI: Resetting boot count on successful boot
[   31.036229270,5] INIT: Waiting for kernel...
[   31.036260903,5] INIT: 64-bit LE kernel discovered
[   31.036304411,5] OCC: All Chip Rdy after 0 ms
[   31.079180561,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c98 349535 bytes)
[   32.039366588,5] OPAL: Switch to little-endian OS
[   34.039982110,3] BT: seq 0x09 netfn 0x06 cmd 0x24: Retry sending message
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.001217] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.002883] clocksource: timebase mult[1f40000] shift[24] registered
[    0.006026] Console: colour dummy device 80x25
[    0.009729] console [tty0] enabled
[    0.010116] console [hvc0] enabled
[    0.010116] console [hvc0] enabled
[    0.013000] bootconsole [udbg0] disabled
[    0.013000] bootconsole [udbg0] disabled
[    0.016361] pid_max: default: 180224 minimum: 1408
[    0.018628] Security Framework initialized
[    0.022015] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.114893] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.180228] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.180464] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.185824] EEH: PowerNV platform initialized
[    0.185960] POWER9 performance monitor hardware support registered
[    0.187316] smp: Bringing up secondary CPUs ...
[    0.661458] smp: Brought up 8 nodes, 176 CPUs
[    0.661648] numa: Node 0 CPUs: 0-87
[    0.661740] numa: Node 8 CPUs: 88-175
[    0.661837] numa: Node 250 CPUs:
[    0.661904] numa: Node 251 CPUs:
[    0.661967] numa: Node 252 CPUs:
[    0.662034] numa: Node 253 CPUs:
[    0.662107] numa: Node 254 CPUs:
[    0.662159] numa: Node 255 CPUs:
[    0.679628] devtmpfs: initialized
[    0.695476] evm: security.capability
[    0.696720] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.699066] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.706132] NET: Registered protocol family 16
[    0.707965] cpuidle: using governor menu
[   35.245372628,3] LPC: Got LPC reset on chip 0x0 !
[   35.245375971,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   35.245385449,6] IPMI: dropping non severe PEL event
[   35.246547312,7] UART: IRQ functional !
[    0.770073] PCI: Probing PCI hardware
[    0.770184] PCI host bridge to bus 0000:00
[    0.770275] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.770426] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.770560] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.770724] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.770849] pci 0000:00:00.0: disabling bridge mem windows
[    0.771069] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.771227] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.771365] PCI host bridge to bus 0001:00
[    0.771431] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.771595] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.771730] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.771888] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.772010] pci 0001:00:00.0: disabling bridge mem windows
[    0.772383] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.772486] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.772777] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.772974] PCI host bridge to bus 0002:00
[    0.773028] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.773194] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.773331] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.773492] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.773605] pci 0002:00:00.0: disabling bridge mem windows
[    0.773985] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.774083] pci 0002:01:00.0: disabling bridge mem windows
[    0.774338] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.774661] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.774885] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.775038] PCI host bridge to bus 0003:00
[    0.775084] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.775227] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.775369] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.775538] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.775636] pci 0003:00:00.0: disabling bridge mem windows
[    0.775841] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.775989] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.776110] PCI host bridge to bus 0004:00
[    0.776180] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.776299] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.776432] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.776605] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.776701] pci 0004:00:00.0: disabling bridge mem windows
[    0.777075] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.777164] pci 0004:01:00.0: disabling bridge mem windows
[    0.777563] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.777650] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.778030] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.778114] random: fast init done
[    0.778119] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.778392] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.778517] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.778887] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.778977] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.779231] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.779650] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.779738] pci 0004:02:02.0: disabling bridge mem windows
[    0.780093] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.780202] pci 0004:02:0a.0: disabling bridge mem windows
[    0.780557] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.780640] pci 0004:02:0b.0: disabling bridge mem windows
[    0.781002] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.781089] pci 0004:02:0c.0: disabling bridge mem windows
[    0.781333] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.782901] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.782985] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.783246] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.783414] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.783561] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.783719] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.783884] PCI host bridge to bus 0005:00
[    0.783936] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.784083] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.784235] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.784376] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.784468] pci 0005:00:00.0: disabling bridge mem windows
[    0.784850] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.785271] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.785544] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.785749] PCI host bridge to bus 0030:00
[    0.785802] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.785947] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.786053] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.786221] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.786353] pci 0030:00:00.0: disabling bridge mem windows
[    0.786565] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.786725] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.786861] PCI host bridge to bus 0033:00
[    0.786912] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.787039] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.787180] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.787364] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.787457] pci 0033:00:00.0: disabling bridge mem windows
[    0.787682] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.787841] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.787974] PCI host bridge to bus 0034:00
[    0.788030] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.788179] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.788295] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.788467] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.788556] pci 0034:00:00.0: disabling bridge mem windows
[    0.788789] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.788955] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.789091] PCI host bridge to bus 0035:00
[    0.789146] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.789289] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.789394] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.789572] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.789698] pci 0035:00:00.0: disabling bridge mem windows
[    0.790120] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.790210] pci 0035:01:00.0: disabling bridge mem windows
[    0.790557] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.790899] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.790988] pci 0035:02:08.0: disabling bridge mem windows
[    0.791415] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.791504] pci 0035:02:0d.0: disabling bridge mem windows
[    0.791786] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.792692] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.792858] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.793041] PCI host bridge to bus 0006:00
[    0.793102] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.793214] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.793373] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.793663] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.793950] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.794227] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.794507] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.794795] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.795181] PCI host bridge to bus 0007:00
[    0.795240] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.795356] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.795511] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.795802] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.796088] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.796375] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.796659] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.796955] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.797294] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.797712] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.797817] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.797938] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.798078] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.798216] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.798620] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.799025] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.805457] IOMMU table initialized, virtual merging enabled
[    0.805525] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.805625] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.805739] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.805821] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.805992] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.806078] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.806209] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.806299] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.806399] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.806524] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.806618] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.806703] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.806787] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.807183] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.807574] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.813964] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.814052] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.814141] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.814212] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.814325] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.814725] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.814785] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.814903] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.815077] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.815485] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.815650] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.815751] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.815864] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.815996] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.816103] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.816234] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.816364] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.816458] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.816591] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.816718] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.816804] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.816896] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.816979] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.817072] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.817206] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.817294] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.817372] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.817486] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.817577] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.817676] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.817769] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.817892] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.817996] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.818068] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.818173] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.818257] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.818347] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.818436] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.818526] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.818610] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.818692] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.818781] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.819194] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.819565] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.825822] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.825911] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.826006] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.826084] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.826216] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.826354] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.826440] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.826528] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.826615] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.827017] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.827069] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.827171] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.827316] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.827723] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.833997] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.834083] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.834176] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.834238] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.834347] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.834495] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.834689] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.834807] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.834963] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.835089] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.835239] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.835382] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.835502] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.835637] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.836049] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.836415] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.842683] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.842767] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.842876] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.842939] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.843099] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.843517] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.843621] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.844041] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.844137] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.844532] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.844676] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.844772] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.844912] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.845305] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.845381] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.845482] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.845892] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.845969] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.846364] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.846428] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.846563] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.846735] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.846896] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.847041] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.847201] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.847351] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.847506] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.847657] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.847815] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.847957] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.848126] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.848267] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.848444] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.848589] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.848749] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.848883] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.849044] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.849181] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.849358] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.849496] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.849648] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.849800] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.849940] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.850107] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.850252] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.850344] pci 0006:00:00.1: Associating to existing PE d
[    0.850415] pci 0006:00:01.0: Associating to existing PE d
[    0.850501] pci 0006:00:01.1: Associating to existing PE d
[    0.850581] pci 0006:00:02.0: Associating to existing PE d
[    0.850662] pci 0006:00:02.1: Associating to existing PE d
[    0.850772] NPU6: Found 1 MMIO ATSD registers
[    0.850778] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.850919] pci 0007:00:00.1: Associating to existing PE d
[    0.851013] pci 0007:00:01.0: Associating to existing PE d
[    0.851084] pci 0007:00:01.1: Associating to existing PE d
[    0.851172] pci 0007:00:02.0: Associating to existing PE d
[    0.851255] pci 0007:00:02.1: Associating to existing PE d
[    0.851342] NPU7: Found 1 MMIO ATSD registers
[    0.855133] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.863750] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.863867] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.863947] vgaarb: loaded
[    0.864098] SCSI subsystem initialized
[    0.864263] usbcore: registered new interface driver usbfs
[    0.864350] usbcore: registered new interface driver hub
[    0.864933] usbcore: registered new device driver usb
[    0.865037] pps_core: LinuxPPS API ver. 1 registered
[    0.865108] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.865256] PTP clock support registered
[    0.865987] clocksource: Switched to clocksource timebase
[    0.869006] NET: Registered protocol family 2
[    0.869323] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.871818] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.872252] TCP: Hash tables configured (established 524288 bind 65536)
[    0.872550] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.873398] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.874695] NET: Registered protocol family 1
[    0.874791] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.874882] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.205295] Initialise system trusted keyrings
[    3.205420] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.210452] Key type asymmetric registered
[    3.210493] Asymmetric key parser 'x509' registered
[    3.210561] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.210632] io scheduler noop registered
[    3.211045] io scheduler cfq registered (default)
[    3.211089] io scheduler mq-deadline registered
[    3.211131] io scheduler kyber registered
[    3.213562] ipmi message handler version 39.2
[    3.213610] ipmi device interface
[    3.213690] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[   38.478429323,3] BT: seq 0x0a netfn 0x04 cmd 0x30: Retry sending message
[   42.007388787,3] BT: seq 0x0b netfn 0x04 cmd 0x30: Retry sending message
[   45.498909326,3] BT: seq 0x0c netfn 0x06 cmd 0x08: Retry sending message
[   12.337596] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[   12.351049] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[   12.351119] hvc0: No interrupts property, using OPAL event
[   12.351467] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[   12.351954] [drm] radeon kernel modesetting enabled.
[   12.361790] brd: module loaded
[   12.381455] loop: module loaded
[   12.381606] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[   12.381662] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[   12.381718] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[   12.381771] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[   12.381950] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[   12.392087] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[   12.392153] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[   12.392760] scsi host0: ahci
[   12.392953] scsi host1: ahci
[   12.393147] scsi host2: ahci
[   12.393336] scsi host3: ahci
[   12.393448] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[   12.393515] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[   12.393580] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[   12.393645] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[   12.393838] libphy: Fixed MDIO Bus: probed
[   12.393896] tg3.c:v3.137 (May 11, 2014)
[   12.393939] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[   12.393992] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[   12.421184] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[   12.421658] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[   12.421739] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.421817] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.421882] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.422007] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[   12.452672] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[   12.453046] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[   12.453184] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.453329] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.453445] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.453715] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[   12.453797] ehci-pci: EHCI PCI platform driver
[   12.453872] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[   12.453959] ohci-pci: OHCI PCI platform driver
[   12.454102] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.454219] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[   12.454406] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[   12.454543] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[   12.455365] hub 1-0:1.0: USB hub found
[   12.455434] hub 1-0:1.0: 4 ports detected
[   12.455639] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.455752] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[   12.455919] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[   12.456215] hub 2-0:1.0: USB hub found
[   12.456278] hub 2-0:1.0: 4 ports detected
[   12.456505] usbcore: registered new interface driver usb-storage
[   12.717104] ata4: SATA link down (SStatus 0 SControl 300)
[   12.717232] ata3: SATA link down (SStatus 0 SControl 300)
[   12.895888] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   12.897055] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   12.897210] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   12.897905] ata1.00: configured for UDMA/133
[   12.898500] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   50.115567788,3] BT: seq 0x0d netfn 0x0a cmd 0x48: Retry sending message
[   16.335931] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[   16.335998] i2c /dev entries driver
[   16.336328] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.336646] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.336962] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.337283] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.337595] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   51.075428190,3] I2C: Request timeout !
[   51.075901328,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   51.077374359,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   51.078137986,3] I2C:  start_time=000000061847831a end_time=0000000618e46fb7 (duration=00000000009cec9d)
[   51.078910462,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   16.525892] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   16.526534] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   16.526617] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   16.527298] ata2.00: configured for UDMA/133
[   16.527751] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   51.169814032,3] I2C: Request timeout !
[   51.169964666,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   51.172854452,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   51.174306616,3] I2C:  start_time=000000061de7bcff end_time=000000061e84a711 (duration=00000000009cea12)
[   51.175777244,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   51.282669347,3] I2C: Request timeout !
[   51.283033111,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   51.285209431,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   51.286659063,3] I2C:  start_time=0000000624a1c6c6 end_time=00000006253eb050 (duration=00000000009ce98a)
[   51.288826122,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   51.405783900,3] I2C: Request timeout !
[   51.405848755,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   51.405929236,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   51.405987263,3] I2C:  start_time=000000062bf85cbf end_time=000000062c95448b (duration=00000000009ce7cc)
[   51.406073467,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   52.025106700,3] I2C: Request timeout !
[   52.025158945,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   52.025239786,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   52.025304830,3] I2C:  start_time=0000000633cc3041 end_time=0000000634691813 (duration=00000000009ce7d2)
[   52.025391047,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   52.140014389,3] I2C: Request timeout !
[   52.140066720,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   52.140165037,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   52.140229948,3] I2C:  start_time=000000063aa58a87 end_time=000000063b427242 (duration=00000000009ce7bb)
[   52.140333563,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   52.273389056,3] I2C: Request timeout !
[   52.273451369,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   52.273547162,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   52.273619725,3] I2C:  start_time=000000064298acff end_time=0000000643359507 (duration=00000000009ce808)
[   52.273718532,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   17.947697] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.948030] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.948353] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.948680] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   52.381060050,3] I2C: Request timeout !
[   52.381238204,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   52.382502903,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   52.384931745,3] I2C:  start_time=0000000649039739 end_time=0000000649a08247 (duration=00000000009ceb0e)
[   52.389772989,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   52.508276592,3] I2C: Request timeout !
[   52.508466835,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   52.510922549,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   53.000185308,3] I2C:  start_time=000000065098c4ff end_time=000000065135ae6e (duration=00000000009ce96f)
[   53.000271967,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   53.129653528,3] I2C: Request timeout !
[   53.129806008,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   53.130575345,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   53.130654550,3] I2C:  start_time=00000006588bf23e end_time=000000065928da1f (duration=00000000009ce7e1)
[   53.130741518,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   53.244560802,3] I2C: Request timeout !
[   53.245060104,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   53.246535672,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   53.248685258,3] I2C:  start_time=000000065f654ac4 end_time=00000006600232ab (duration=00000000009ce7e7)
[   53.250161338,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   53.386140380,3] I2C: Request timeout !
[   53.386353259,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   53.389929480,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   53.392079421,3] I2C:  start_time=0000000667d5a0a5 end_time=00000006687287cc (duration=00000000009ce727)
[   53.393555477,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   19.149181] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[   19.149246] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[   19.158801] usbcore: registered new interface driver usbhid
[   19.158846] usbhid: USB HID core driver
[   19.159206] ipip: IPv4 and MPLS over IPv4 tunneling driver
[   19.159507] NET: Registered protocol family 17
[   19.159573] Key type dns_resolver registered
[   19.159845] registered taskstats version 1
[   19.159890] Loading compiled-in X.509 certificates
[   19.166554] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[   19.171896] Key type encrypted registered
[   19.171965] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[   19.172107] evm: HMAC attrs: 0x1
[   20.575897] rtc-opal opal-rtc: hctosys: unable to read the hardware clock
[   20.578325] Freeing unused kernel memory: 11456K
[   20.578382] This architecture does not have kernel memory protection.
[   20.597753] udevd[2947]: starting version 3.2.2
[   20.602546] udevd[2948]: starting eudev-3.2.2
[   20.654648] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[   20.654744] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[   20.654835] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[   20.655047] [drm] platform has no IO space, trying MMIO
[   20.655102] [drm] VGA not enabled on entry, requesting chip POST
[   20.655175] [drm] Using P2A bridge for configuration
[   20.655229] [drm] AST 2500 detected
[   20.655273] [drm] Analog VGA only
[   20.655356] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[   20.655512] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[   20.655573] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[   20.655633] [TTM] Initializing pool allocator
[   20.655875] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[   20.655997] scsi 1:0:0:0: Attached scsi generic sg1 type 0
[   20.657032] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[   20.659050] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   20.659113] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   20.659116] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[   20.659133] sd 1:0:0:0: [sdb] Write Protect is off
[   20.659162] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   20.659326] sd 0:0:0:0: [sda] 4096-byte physical blocks
[   20.659383] sd 0:0:0:0: [sda] Write Protect is off
[   20.659452] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA

[   58.273632360,3] BT: seq 0x0f netfn 0x00 cmd 0x09: Retry sending message
[   63.416992235,3] BT: seq 0x10 netfn 0x00 cmd 0x09: Retry sending message
[   68.447714586,3] BT: seq 0x11 netfn 0x00 cmd 0x09: Retry sending message
[   73.478434152,3] BT: seq 0x12 netfn 0x00 cmd 0x09: Retry sending message
(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[   78.509155842,3] BT: seq 0x13 netfn 0x00 cmd 0x09: Retry sending message
[   84.027874642,3] BT: seq 0x14 netfn 0x00 cmd 0x09: Retry sending message
[   89.058593966,3] BT: seq 0x15 netfn 0x00 cmd 0x09: Retry sending message
[   94.089314758,3] BT: seq 0x16 netfn 0x00 cmd 0x09: Retry sending message
[   99.232674816,3] BT: seq 0x17 netfn 0x0c cmd 0x02: Retry sending message
[  104.263394317,3] BT: seq 0x18 netfn 0x06 cmd 0x01: Retry sending message
[  109.294114332,3] BT: seq 0x19 netfn 0x3a cmd 0x1a: Retry sending message
[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[  124.166111760,3] BT: seq 0x1b netfn 0x04 cmd 0x30: Retry sending message
[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadreboot[  130.360675592,3] BT: seq 0x1c netfn 0x00 cmd 0x09: Retry sending message
[  135.391395566,3] BT: seq 0x1d netfn 0x00 cmd 0x09: Retry sending message
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[  104.756615] kexec_core: Starting new kernel
[  139.337425013,5] OPAL: Switch to big-endian OS
[  141.459416769,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[  147.332361882,3] BT: seq 0x1e netfn 0x0a cmd 0x48: Retry sending message
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000419] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001194] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001815] Console: colour dummy device 80x25
[    0.002379] console [hvc0] enabled
[    0.002379] console [hvc0] enabled
[    0.002679] bootconsole [udbg0] disabled
[    0.002679] bootconsole [udbg0] disabled
[    0.003301] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003409] pid_max: default: 180224 minimum: 1408
[    0.005484] Security Framework initialized
[    0.005519] Yama: becoming mindful.
[    0.005618] AppArmor: AppArmor initialized
[    0.009090] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098644] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151815] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.151949] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155697] ftrace: allocating 30684 entries in 12 pages
[    0.174131] EEH: PowerNV platform initialized
[    0.174176] POWER9 performance monitor hardware support registered
[    0.176495] smp: Bringing up secondary CPUs ...
[    0.651132] smp: Brought up 8 nodes, 176 CPUs
[    0.651194] numa: Node 0 CPUs: 0-87
[    0.651233] numa: Node 8 CPUs: 88-175
[    0.651290] numa: Node 250 CPUs:
[    0.651345] numa: Node 251 CPUs:
[    0.651381] numa: Node 252 CPUs:
[    0.651446] numa: Node 253 CPUs:
[    0.651491] numa: Node 254 CPUs:
[    0.651555] numa: Node 255 CPUs:
[    0.663675] devtmpfs: initialized
[    0.724757] evm: security.selinux
[    0.724793] evm: security.SMACK64
[    0.724827] evm: security.SMACK64EXEC
[    0.724852] evm: security.SMACK64TRANSMUTE
[    0.724886] evm: security.SMACK64MMAP
[    0.724948] evm: security.ima
[    0.725010] evm: security.capability
[    0.726035] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.726233] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.732316] NET: Registered protocol family 16
[    0.754606] cpuidle: using governor ladder
[    0.778622] cpuidle: using governor menu
[    0.778887] pstore: using zlib compression
[    0.778923] pstore: Registered nvram as persistent store backend
[    0.848804] PCI: Probing PCI hardware
[    0.848930] PCI host bridge to bus 0000:00
[    0.849009] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849109] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.849246] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.849637] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.849768] PCI host bridge to bus 0001:00
[    0.849813] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849940] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.850067] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.850749] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.851051] PCI host bridge to bus 0002:00
[    0.851083] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.851206] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.851316] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.851923] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.852411] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.852586] PCI host bridge to bus 0003:00
[    0.852622] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.852746] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.852850] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.853190] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.853320] PCI host bridge to bus 0004:00
[    0.853360] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.853484] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.853609] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.855367] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.856913] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.858908] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.859080] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.859224] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.859372] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.859544] PCI host bridge to bus 0005:00
[    0.859577] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.859701] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.859835] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.860920] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.861140] PCI host bridge to bus 0030:00
[    0.861186] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.861318] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.861455] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.861853] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.861990] PCI host bridge to bus 0033:00
[    0.862039] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.862101] random: fast init done
[    0.862195] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.862300] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.862686] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.862824] PCI host bridge to bus 0034:00
[    0.862865] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863021] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.863141] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.863518] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.863649] PCI host bridge to bus 0035:00
[    0.863683] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863797] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.863922] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.864741] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.865698] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.866759] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.866919] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.867089] PCI host bridge to bus 0006:00
[    0.867123] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.867214] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.868463] PCI host bridge to bus 0007:00
[    0.868494] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.868564] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.869719] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.870087] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.870172] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.870263] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.870357] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.870458] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.870867] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.871251] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.876025] IOMMU table initialized, virtual merging enabled
[    0.876081] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.876173] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.876238] iommu: Adding device 0001:01:00.0 to group 0
[    0.876310] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.876388] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.876530] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.876639] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.876754] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.876845] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.876938] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.877032] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.877143] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.877241] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.877340] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.877723] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.878099] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.882870] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.882937] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.883024] iommu: Adding device 0002:02:00.0 to group 1
[    0.883078] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.883155] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.883263] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.883669] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.883724] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.883819] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.883940] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.884349] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.884520] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.884621] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.884708] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.884798] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.884897] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.885009] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.885104] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.885224] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.885348] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.885468] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.885565] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.885658] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.885756] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.885856] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885955] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.886063] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.886162] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886248] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.886331] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886410] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.886529] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.886633] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.886716] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.886796] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.886886] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.886974] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.887053] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.887145] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.887224] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.887303] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.887396] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.887492] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.887882] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.888252] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.893012] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.893081] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.893157] iommu: Adding device 0004:03:00.0 to group 2
[    0.893219] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.893269] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.893362] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.893508] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.893593] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.893681] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.893764] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.894151] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.894194] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.894273] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.894388] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.894813] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.899575] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.899632] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.899697] iommu: Adding device 0004:01:00.0 to group 3
[    0.899773] iommu: Adding device 0004:01:00.1 to group 3
[    0.899810] iommu: Adding device 0004:01:00.2 to group 3
[    0.899846] iommu: Adding device 0004:01:00.3 to group 3
[    0.899883] iommu: Adding device 0004:01:00.4 to group 3
[    0.899917] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.899956] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.900008] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.900070] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.900165] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.900224] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.900299] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.900369] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.900440] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.900511] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.900581] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.900652] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.901008] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.901355] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.906104] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.906156] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.906201] iommu: Adding device 0005:01:00.0 to group 4
[    0.906238] iommu: Adding device 0005:01:00.1 to group 4
[    0.906271] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.906313] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.906401] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.906749] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.906822] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.907170] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.907241] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.907588] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.907703] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.907754] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.907808] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.908156] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.908206] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.908260] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.908609] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.908663] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.909010] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.909050] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.909122] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.909214] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.909303] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.909392] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.909488] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.909578] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.909667] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.909756] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.909845] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.909934] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.910024] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.912315] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.913768] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.919319] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.919488] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.919651] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.919818] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.919935] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.920080] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.920249] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.920401] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.920548] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.920700] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.920853] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.921024] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.921102] pci 0006:00:00.1: Associating to existing PE d
[    0.921193] pci 0006:00:01.0: Associating to existing PE d
[    0.921281] pci 0006:00:01.1: Associating to existing PE d
[    0.921357] pci 0006:00:02.0: Associating to existing PE d
[    0.921440] pci 0006:00:02.1: Associating to existing PE d
[    0.921552] NPU6: Found 1 MMIO ATSD registers
[    0.921557] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.921731] pci 0007:00:00.1: Associating to existing PE d
[    0.921791] pci 0007:00:01.0: Associating to existing PE d
[    0.921873] pci 0007:00:01.1: Associating to existing PE d
[    0.921942] pci 0007:00:02.0: Associating to existing PE d
[    0.922029] pci 0007:00:02.1: Associating to existing PE d
[    0.922124] NPU7: Found 1 MMIO ATSD registers
[    0.925815] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.967722] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.967782] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.972010] SCSI subsystem initialized
[    0.972432] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.972531] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.972602] vgaarb: loaded
[    0.972704] usbcore: registered new interface driver usbfs
[    0.972794] usbcore: registered new interface driver hub
[    0.973324] usbcore: registered new device driver usb
[    0.973396] pps_core: LinuxPPS API ver. 1 registered
[    0.973459] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.973560] PTP clock support registered
[    0.974463] NetLabel: Initializing
[    0.974505] NetLabel:  domain hash size = 128
[    0.974556] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.974661] NetLabel:  unlabeled traffic allowed by default
[    0.975576] clocksource: Switched to clocksource timebase
[    0.995133] VFS: Disk quotas dquot_6.6.0
[    0.995421] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.995946] AppArmor: AppArmor Filesystem Enabled
[    0.999556] NET: Registered protocol family 2
[    1.000364] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    1.002160] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    1.002505] TCP: Hash tables configured (established 524288 bind 65536)
[    1.002591] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.003305] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.004559] NET: Registered protocol family 1
[    1.004859] Unpacking initramfs...
[    1.944913] Freeing initrd memory: 38528K
[    1.988795] audit: initializing netlink subsys (disabled)
[    1.988901] audit: type=2000 audit(1.980:1): initialized
[    1.996059] Initialise system trusted keyrings
[    1.996777] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    2.000234] zbud: loaded
[    2.004484] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    2.005312] fuse init (API version 7.26)
[    2.009788] Key type asymmetric registered
[    2.009815] Asymmetric key parser 'x509' registered
[    2.009866] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    2.010191] io scheduler noop registered
[    2.010217] io scheduler deadline registered
[    2.010262] io scheduler cfq registered (default)
[    2.012720] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.098368] Console: switching to colour frame buffer device 128x48
[    2.183838] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.184185] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.184260] hvc0: No interrupts property, using OPAL event
[    2.184709] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.187042] Linux agpgart interface v0.103
[    2.202115] loop: module loaded
[    2.202465] libphy: Fixed MDIO Bus: probed
[    2.202492] tun: Universal TUN/TAP device driver, 1.6
[    2.202535] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.202661] PPP generic driver version 2.4.2
[    2.202827] VFIO - User Level meta-driver version: 0.3
[    2.203807] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.203885] ehci-pci: EHCI PCI platform driver
[    2.203972] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.204043] ohci-pci: OHCI PCI platform driver
[    2.204140] uhci_hcd: USB Universal Host Controller Interface driver
[    2.204333] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.204431] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.204598] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.204709] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.205354] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.205414] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.205481] usb usb1: Product: xHCI Host Controller
[    2.205526] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.205608] usb usb1: SerialNumber: 0001:01:00.0
[    2.205841] hub 1-0:1.0: USB hub found
[    2.205918] hub 1-0:1.0: 4 ports detected
[    2.206269] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.206324] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.206422] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.206545] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.206631] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.206738] usb usb2: Product: xHCI Host Controller
[    2.206801] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.206900] usb usb2: SerialNumber: 0001:01:00.0
[    2.207135] hub 2-0:1.0: USB hub found
[    2.207184] hub 2-0:1.0: 4 ports detected
[    2.207923] mousedev: PS/2 mouse device common for all mice
[  155.019714313,3] BT: seq 0x1f netfn 0x0a cmd 0x48: Retry sending message
[    7.375539] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    7.375626] i2c /dev entries driver
[    7.378675] device-mapper: uevent: version 1.0.3
[    7.379048] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    7.379130] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    7.392266] ledtrig-cpu: registered to indicate activity on CPUs
[    7.393313] NET: Registered protocol family 10
[    7.400702] Segment Routing with IPv6
[    7.400753] NET: Registered protocol family 17
[    7.400804] Key type dns_resolver registered
[    7.401073] registered taskstats version 1
[    7.401126] Loading compiled-in X.509 certificates
[    7.405246] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    7.405521] zswap: loaded using pool lzo/zbud
[    7.408582] Key type big_key registered
[    7.408612] Key type trusted registered
[    7.411375] Key type encrypted registered
[    7.411407] AppArmor: AppArmor sha1 policy hashing enabled
[    7.411452] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    7.411544] evm: HMAC attrs: 0x1
[  160.124381237,3] BT: seq 0x20 netfn 0x0a cmd 0x48: Retry sending message
[   12.551470] rtc-opal opal-rtc: hctosys: unable to read the hardware clock
[   12.552159] Unable to open file: /etc/keys/x509_ima.der (-2)
[   12.552164] Unable to open file: /etc/keys/x509_evm.der (-2)
[   12.552621] Freeing unused kernel memory: 4416K
[   12.552730] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[   12.767439] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[   12.769809] tg3.c:v3.137 (May 11, 2014)
[   12.774330] [drm] Initialized
[   12.777580] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[   12.777634] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[   12.778707] scsi host0: ahci
[   12.778968] scsi host1: ahci
[   12.779204] scsi host2: ahci
[   12.779438] scsi host3: ahci
[   12.779565] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[   12.779614] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[   12.779700] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[   12.779805] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[   12.784768] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[   12.785281] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[   12.785346] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.785407] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.785454] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.796944] [drm] platform has no IO space, trying MMIO
[   12.796994] [drm] Using P2A bridge for configuration
[   12.797035] [drm] AST 2500 detected
[   12.797084] [drm] Analog VGA only
[   12.797125] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[   12.797294] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[   12.797373] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[   12.797469] [TTM] Initializing pool allocator
[   12.797549] [TTM] Initializing DMA pool allocator
[   12.800638] fb: switching to astdrmfb from OFfb vga
[   12.800713] Console: switching to colour dummy device 80x25
[   12.803180] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[   12.804325] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[   12.804328] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.804331] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.804333] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.819129] Console: switching to colour frame buffer device 128x48
[   12.841258] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[   12.875513] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[   12.877134] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[   12.947997] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[   13.093628] ata4: SATA link down (SStatus 0 SControl 300)
[   13.093704] ata3: SATA link down (SStatus 0 SControl 300)
[   13.255473] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   13.255534] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   13.256408] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   13.256472] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   13.256591] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   13.256697] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   13.257203] ata2.00: configured for UDMA/133
[   13.257328] ata1.00: configured for UDMA/133
[   13.258083] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   13.303696] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   13.303745] sd 0:0:0:0: Attached scsi generic sg0 type 0
[   13.303803] sd 0:0:0:0: [sda] 4096-byte physical blocks
[   13.303904] sd 0:0:0:0: [sda] Write Protect is off
[   13.304000] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   13.304479] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   13.351704] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   13.351738] sd 1:0:0:0: Attached scsi generic sg1 type 0
[   13.351812] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[   13.351867] sd 1:0:0:0: [sdb] Write Protect is off
[   13.351955] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   13.353653]  sda: sda1 sda2
[   13.354110] sd 0:0:0:0: [sda] Attached SCSI removable disk
[   13.369842] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 61941/61054976 files, 5041426/244188416 blocks
done.
[   13.800395] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[   14.433061] systemd[1]: System time before build time, advancing clock.
[   14.631855] ip_tables: (C) 2000-2006 Netfilter Core Team
[   14.673128] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[   14.673867] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[   14.686657] systemd[1]: Set hostname to &lt;w54L&gt;.
[   15.263350] random: crng init done
[   15.265423] systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
[   15.265735] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[   15.266005] systemd[1]: Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[   15.266480] systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[   15.266867] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[   15.281367] systemd[1]: Starting Set the console keyboard layout...
         Starting Set the console keyboard layout...
[   15.281646] systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[[0;32m  OK  [0m] Reached target Slices.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
         Mounting POSIX Message Queue File System...
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Started Read required files in advance.
         Starting Load Kernel Modules...
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
         Starting Uncomplicated firewall...
         Mounting Debug File System...
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Listening on Syslog Socket.
         Starting Journal Service...
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
         Mounting FUSE Control File System...
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting Load/Save Random Seed...
         Starting udev Coldplug all Devices...
         Activating swap /swapfile...
         Starting Flush Journal to Persistent Storage...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Set console font and keymap...
         Starting Create Volatile Files and Directories...
         Starting AppArmor initialization...
         Starting Tell Plymouth To Write Out Runtime Data...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Found device NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[  167.131669347,3] I2C: Request timeout !
[  167.131735839,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.131944149,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  167.132008037,3] I2C:  start_time=00000013efab5246 end_time=00000013f048979e (duration=00000000009d4558)
[  167.132118163,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[  167.211662322,3] I2C: Request timeout !
[  167.212381177,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.212478714,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[  167.212549967,3] I2C:  start_time=00000013f47044a0 end_time=00000013f50d33d2 (duration=00000000009cef32)
[  167.212643602,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[  167.301945162,3] I2C: Request timeout !
[  167.301996026,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.302096020,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  167.302162385,3] I2C:  start_time=00000013f9d1e57b end_time=00000013fa6ecea3 (duration=00000000009ce928)
[  167.302246904,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
         Starting Login Service...
         Starting LSB: daemon to balance interrupts for SMP systems...
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[  167.346888508,3] I2C: Request timeout !
[  167.347974089,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.351624507,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[  167.352871878,3] I2C:  start_time=00000013fc7fb142 end_time=00000013fcabfbcb (duration=00000000002c4a89)
[  167.354134607,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting Accounts Service...
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[  167.378836824,3] I2C: Request timeout !
[  167.379906587,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.381181717,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  167.382450271,3] I2C:  start_time=00000013fe672a24 end_time=00000013ff0415d3 (duration=00000000009cebaf)
[  167.384908829,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Login Service.
[  167.438341421,3] I2C: Request timeout !
[  167.438485291,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  167.440963183,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  167.442244982,3] I2C:  start_time=0000001401f326bc end_time=0000001402900e48 (duration=00000000009ce78c)
[  167.443525926,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[  168.008417348,3] I2C: Request timeout !
[  168.009125710,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  168.010597202,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  168.011384278,3] I2C:  start_time=0000001406d7892e end_time=0000001407746f64 (duration=00000000009ce636)
[  168.012167498,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Accounts Service.
[  168.063816225,3] I2C: Request timeout !
[  168.064288841,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  168.065101678,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  168.065859318,3] I2C:  start_time=000000140a24dadd end_time=000000140ac1c132 (duration=00000000009ce655)
[  168.066628909,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[  168.188987068,3] I2C: Request timeout !
[  168.189546975,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  168.191021390,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[  168.192475709,3] I2C:  start_time=00000014119acf6f end_time=000000141237b5d6 (duration=00000000009ce667)
[  168.193997207,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[  170.093132938,3] BT: seq 0x21 netfn 0x06 cmd 0x08: Retry sending message
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Permit User Sessions...
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.

Ubuntu 17.04 w54L hvc0

w54L login: [  223.262598528,5] IPMI: Soft shutdown requested
[[0;32m  OK  [0m] Stopped target Timers.
[[0;32m  OK  [0m] Stopped Message of the Day.
[[0;32m  OK  [0m] Stopped Daily apt activities.
[[0;32m  OK  [0m] Stopped Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Stopped target System Time Synchronized.
[[0;32m  OK  [0m] Stopped Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Stopped target Graphical Interface.
[[0;32m  OK  [0m] Stopped target Multi-User System.
         Stopping System Logging Service...
         Stopping Login Service...
[[0;32m  OK  [0m] Stopped target Login Prompts.
         Stopping Getty on tty1...
         Stopping Serial Getty on hvc0...
         Stopping Network Name Resolution...
         Stopping LSB: daemon to balance interrupts for SMP systems...
         Stopping OpenBSD Secure Shell server...
         Stopping Regular background program processing daemon...
         Stopping D-Bus System Message Bus...
         Stopping Accounts Service...
[[0;32m  OK  [0m] Stopped Login Service.
[[0;32m  OK  [0m] Stopped Regular background program processing daemon.
[[0;32m  OK  [0m] Stopped Accounts Service.
[[0;32m  OK  [0m] Stopped Serial Getty on hvc0.
[[0;32m  OK  [0m] Stopped Getty on tty1.
[[0;32m  OK  [0m] Removed slice system-getty.slice.
[[0;32m  OK  [0m] Removed slice system-serial\x2dgetty.slice.
         Stopping Permit User Sessions...
[[0;32m  OK  [0m] Stopped OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Stopped Network Name Resolution.
[[0;32m  OK  [0m] Stopped Permit User Sessions.
[[0;32m  OK  [0m] Stopped target Network.
         Stopping ifup for enP5p1s0f0...
         Stopping Raise network interfaces...
[[0;32m  OK  [0m] Stopped target User and Group Name Lookups.
[[0;32m  OK  [0m] Stopped LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Stopped target Remote File Systems.
[[0;32m  OK  [0m] Stopped D-Bus System Message Bus.
[[0;32m  OK  [0m] Stopped System Logging Service.
[[0;32m  OK  [0m] Stopped target Basic System.
[[0;32m  OK  [0m] Stopped target Slices.
[[0;32m  OK  [0m] Removed slice User and Session Slice.
[[0;32m  OK  [0m] Stopped target Sockets.
[[0;32m  OK  [0m] Closed UUID daemon activation socket.
[[0;32m  OK  [0m] Closed D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Stopped target Paths.
[[0;32m  OK  [0m] Stopped target System Initialization.
         Stopping Network Time Synchronization...
[[0;32m  OK  [0m] Stopped target Swap.
         Deactivating swap /swapfile...
         Stopping Update UTMP about System Boot/Shutdown...
[[0;32m  OK  [0m] Stopped target Encrypted Volumes.
[[0;32m  OK  [0m] Stopped Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Stopped Dispatch Password Requests to Console Directory Watch.
         Stopping Load/Save Random Seed...
[[0;32m  OK  [0m] Closed Syslog Socket.
[[0;32m  OK  [0m] Stopped Load/Save Random Seed.
[[0;32m  OK  [0m] Stopped Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Deactivated swap /swapfile.
[[0;32m  OK  [0m] Reached target Unmount All Filesystems.
[[0;32m  OK  [0m] Stopped Network Time Synchronization.
[[0;32m  OK  [0m] Stopped Create Volatile Files and Directories.
[[0;32m  OK  [0m] Stopped Raise network interfaces.
[[0;32m  OK  [0m] Stopped ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Stopped target Network (Pre).
[[0;32m  OK  [0m] Stopped Apply Kernel Variables.
[[0;32m  OK  [0m] Stopped Load Kernel Modules.
[[0;32m  OK  [0m] Stopped target Local File Systems.
[[0;32m  OK  [0m] Stopped target Local File Systems (Pre).
[[0;32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
[[0;32m  OK  [0m] Stopped Remount Root and Kernel File Systems.
[[0;32m  OK  [0m] Reached target Shutdown.
[   76.879462] reboot: Power down
[  226.375929337,5] OPAL: Shutdown request type 0x0...

Connection closed
Connection to 9.3.86.161 closed.
</msg>
<status status="PASS" endtime="20171013 18:10:58.000" starttime="20171013 18:10:57.935"></status>
</kw>
<status status="PASS" endtime="20171013 18:10:58.001" starttime="20171013 18:09:59.263"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20171013 18:10:58.001" starttime="20171013 17:52:51.721">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20171013 18:10:58.002" starttime="20171013 17:52:51.659"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20171013 18:10:58.005" starttime="20171013 17:52:38.891"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20171013 17:53:12.986">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171013 17:59:01.353">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171013 17:59:12.888">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171013 18:00:00.296">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171013 18:03:48.394">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
