<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171026 01:11:58.936" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:11:59.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:11:59.908" starttime="20171026 01:11:59.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:11:59.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:11:59.909" starttime="20171026 01:11:59.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:11:59.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:11:59.910" starttime="20171026 01:11:59.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:11:59.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:11:59.910" starttime="20171026 01:11:59.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:00.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:00.227" starttime="20171026 01:11:59.911"></status>
</kw>
<msg timestamp="20171026 01:12:00.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:00.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:00.227" starttime="20171026 01:11:59.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:00.228" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:00.228" starttime="20171026 01:12:00.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:00.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:00.229" starttime="20171026 01:12:00.229"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:00.229" starttime="20171026 01:11:59.907"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:00.229" starttime="20171026 01:11:59.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:00.229" starttime="20171026 01:11:59.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:00.230" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:12:00.230" starttime="20171026 01:12:00.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:00.231" starttime="20171026 01:12:00.230"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:00.308" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:12:00.308" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:00.308" starttime="20171026 01:12:00.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:00.309" starttime="20171026 01:12:00.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:00.310" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:00.310" starttime="20171026 01:12:00.310"></status>
</kw>
<msg timestamp="20171026 01:12:00.310" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:00.310" starttime="20171026 01:11:59.903"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:12:00.311" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:00.311" starttime="20171026 01:12:00.310"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:00.311" starttime="20171026 01:11:59.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171026 01:12:00.313" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:12:00.313" starttime="20171026 01:12:00.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:00.313" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171026 01:12:00.313" starttime="20171026 01:12:00.313"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:00.315" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171026 01:12:00.315" starttime="20171026 01:12:00.315"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:00.325" starttime="20171026 01:12:00.324"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171026 01:12:00.326" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171026 01:12:00.327" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171026 01:12:00.327" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:12:00.422" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:00.423" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 01:12:01.577" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171026 01:12:01.578" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:12:01.758" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:12:01.768" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:12:01.768" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:12:01.768" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:12:01.768" starttime="20171026 01:12:00.410"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:12:01.769" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:12:01.769" starttime="20171026 01:12:01.769"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:12:01.769" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:12:01.770" starttime="20171026 01:12:01.769"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:01.770" starttime="20171026 01:12:00.409"></status>
</kw>
<msg timestamp="20171026 01:12:01.770" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:12:01.977" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171026 01:12:01.988" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:02.018" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:02.019" starttime="20171026 01:12:02.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:02.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:02.020" starttime="20171026 01:12:02.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:02.020" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:02.020" starttime="20171026 01:12:02.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:02.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:02.021" starttime="20171026 01:12:02.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.343" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:02.343" starttime="20171026 01:12:02.022"></status>
</kw>
<msg timestamp="20171026 01:12:02.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:02.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.343" starttime="20171026 01:12:02.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.344" starttime="20171026 01:12:02.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.345" starttime="20171026 01:12:02.345"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.345" starttime="20171026 01:12:02.017"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.345" starttime="20171026 01:12:02.016"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.345" starttime="20171026 01:12:02.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:02.346" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:12:02.346" starttime="20171026 01:12:02.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:02.349" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:02.349" starttime="20171026 01:12:02.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:02.350" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:02.350" starttime="20171026 01:12:02.349"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.350" starttime="20171026 01:12:02.349"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.350" starttime="20171026 01:12:02.347"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.350" starttime="20171026 01:12:02.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:02.447" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:12:02.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.447" starttime="20171026 01:12:02.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:02.449" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:02.449" starttime="20171026 01:12:02.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:02.450" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:02.450" starttime="20171026 01:12:02.450"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.450" starttime="20171026 01:12:02.449"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.450" starttime="20171026 01:12:02.448"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.455" starttime="20171026 01:12:02.447"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:02.457" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:02.457" starttime="20171026 01:12:02.457"></status>
</kw>
<msg timestamp="20171026 01:12:02.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.458" starttime="20171026 01:12:02.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.458" starttime="20171026 01:12:02.458"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:12:02.459" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:02.459" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:12:02.459" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:12:02.459" starttime="20171026 01:12:02.459"></status>
</kw>
<msg timestamp="20171026 01:12:02.459" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:12:02.459" starttime="20171026 01:12:02.014"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.460" starttime="20171026 01:12:02.012"></status>
</kw>
<msg timestamp="20171026 01:12:02.476" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171026 01:12:02.476" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171026 01:12:02.477" starttime="20171026 01:12:02.005"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:02.478" starttime="20171026 01:12:02.478"></status>
</kw>
<msg timestamp="20171026 01:12:02.478" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:12:02.478" starttime="20171026 01:12:02.477"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171026 01:12:02.497" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:12:02.497" starttime="20171026 01:12:02.496"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:02.498" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171026 01:12:02.498" starttime="20171026 01:12:02.498"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:02.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:02.502" starttime="20171026 01:12:02.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:02.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:02.502" starttime="20171026 01:12:02.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:02.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:02.503" starttime="20171026 01:12:02.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:02.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:02.504" starttime="20171026 01:12:02.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:02.828" starttime="20171026 01:12:02.505"></status>
</kw>
<msg timestamp="20171026 01:12:02.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:02.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.828" starttime="20171026 01:12:02.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.829" starttime="20171026 01:12:02.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:02.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:02.830" starttime="20171026 01:12:02.829"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.830" starttime="20171026 01:12:02.500"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.830" starttime="20171026 01:12:02.500"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.830" starttime="20171026 01:12:02.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:02.831" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:12:02.831" starttime="20171026 01:12:02.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:02.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:02.831" starttime="20171026 01:12:02.831"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:02.832" starttime="20171026 01:12:02.832"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:02.834" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171026 01:12:02.834" starttime="20171026 01:12:02.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:02.835" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 01:12:02.835" starttime="20171026 01:12:02.834"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.835" starttime="20171026 01:12:02.834"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:02.835" starttime="20171026 01:12:02.832"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:03.055" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 01:12:03.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.055" starttime="20171026 01:12:02.835"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:03.056" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:03.056" starttime="20171026 01:12:03.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:03.057" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:03.057" starttime="20171026 01:12:03.057"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.057" starttime="20171026 01:12:03.056"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.058" starttime="20171026 01:12:03.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:03.058" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:03.058" starttime="20171026 01:12:03.058"></status>
</kw>
<msg timestamp="20171026 01:12:03.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.059" starttime="20171026 01:12:02.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.060" starttime="20171026 01:12:03.059"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:03.061" starttime="20171026 01:12:03.060"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.061" starttime="20171026 01:12:02.497"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.061" starttime="20171026 01:12:02.496"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.061" starttime="20171026 01:12:02.479"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 01:12:03.063" starttime="20171026 01:12:03.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:03.063" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171026 01:12:03.063" starttime="20171026 01:12:03.063"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:03.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:03.068" starttime="20171026 01:12:03.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:03.068" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:03.068" starttime="20171026 01:12:03.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:03.069" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:03.069" starttime="20171026 01:12:03.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:03.070" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:03.070" starttime="20171026 01:12:03.069"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:03.436" starttime="20171026 01:12:03.071"></status>
</kw>
<msg timestamp="20171026 01:12:03.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:03.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.436" starttime="20171026 01:12:03.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.437" starttime="20171026 01:12:03.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.438" starttime="20171026 01:12:03.438"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.438" starttime="20171026 01:12:03.067"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.438" starttime="20171026 01:12:03.066"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.438" starttime="20171026 01:12:03.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:03.439" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:12:03.439" starttime="20171026 01:12:03.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:03.441" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:03.442" starttime="20171026 01:12:03.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:03.442" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:03.443" starttime="20171026 01:12:03.442"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.443" starttime="20171026 01:12:03.442"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.443" starttime="20171026 01:12:03.440"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.443" starttime="20171026 01:12:03.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:03.545" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:12:03.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.545" starttime="20171026 01:12:03.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:03.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:03.547" starttime="20171026 01:12:03.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:03.548" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:03.548" starttime="20171026 01:12:03.548"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.548" starttime="20171026 01:12:03.547"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.548" starttime="20171026 01:12:03.546"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.548" starttime="20171026 01:12:03.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:03.549" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:03.549" starttime="20171026 01:12:03.549"></status>
</kw>
<msg timestamp="20171026 01:12:03.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.549" starttime="20171026 01:12:03.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.550" starttime="20171026 01:12:03.550"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:12:03.551" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:03.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:12:03.551" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:12:03.551" starttime="20171026 01:12:03.550"></status>
</kw>
<msg timestamp="20171026 01:12:03.551" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:12:03.551" starttime="20171026 01:12:03.064"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.551" starttime="20171026 01:12:03.064"></status>
</kw>
<msg timestamp="20171026 01:12:03.552" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:12:03.552" starttime="20171026 01:12:03.064"></status>
</kw>
<msg timestamp="20171026 01:12:03.552" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:12:03.552" starttime="20171026 01:12:03.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171026 01:12:03.552" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:03.553" starttime="20171026 01:12:03.552"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:03.553" starttime="20171026 01:12:02.003"></status>
</kw>
<msg timestamp="20171026 01:12:03.616" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:12:03.648" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:12:03.654" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171026 01:12:03.654" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:03.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:03.696" starttime="20171026 01:12:03.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:03.697" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:03.697" starttime="20171026 01:12:03.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:03.698" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:03.698" starttime="20171026 01:12:03.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:03.699" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:03.699" starttime="20171026 01:12:03.698"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:04.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:04.040" starttime="20171026 01:12:03.699"></status>
</kw>
<msg timestamp="20171026 01:12:04.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:04.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.041" starttime="20171026 01:12:03.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:04.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.042" starttime="20171026 01:12:04.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:04.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.042" starttime="20171026 01:12:04.042"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.043" starttime="20171026 01:12:03.694"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.043" starttime="20171026 01:12:03.693"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.043" starttime="20171026 01:12:03.692"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:04.043" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:04.043" starttime="20171026 01:12:04.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:04.046" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:04.046" starttime="20171026 01:12:04.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:04.047" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:12:04.047" starttime="20171026 01:12:04.046"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.047" starttime="20171026 01:12:04.046"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.047" starttime="20171026 01:12:04.044"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.047" starttime="20171026 01:12:04.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:04.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:04.279" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.279" starttime="20171026 01:12:04.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:12:04.281" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171026 01:12:04.281" starttime="20171026 01:12:04.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:12:04.282" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:12:04.283" starttime="20171026 01:12:04.282"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.283" starttime="20171026 01:12:04.281"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.283" starttime="20171026 01:12:04.280"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.283" starttime="20171026 01:12:04.279"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:04.284" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:04.284" starttime="20171026 01:12:04.284"></status>
</kw>
<msg timestamp="20171026 01:12:04.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.284" starttime="20171026 01:12:03.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:04.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:04.285" starttime="20171026 01:12:04.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:12:04.286" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:04.286" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:12:04.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 01:12:04.287" starttime="20171026 01:12:04.286"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.287" starttime="20171026 01:12:03.689"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.346" starttime="20171026 01:12:00.325"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171026 01:12:04.353" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:12:04.363" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171026 01:12:04.364" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 01:12:04.364" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:12:04.364" starttime="20171026 01:12:04.347"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.364" starttime="20171026 01:12:00.323"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.364" starttime="20171026 01:12:00.316"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.365" starttime="20171026 01:12:00.314"></status>
</kw>
<msg timestamp="20171026 01:12:04.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:04.365" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:04.365" starttime="20171026 01:12:00.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171026 01:12:04.366" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:04.366" starttime="20171026 01:12:04.366"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.366" starttime="20171026 01:12:04.366"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.367" starttime="20171026 01:12:00.312"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.367" starttime="20171026 01:12:00.311"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:04.367" starttime="20171026 01:11:59.902"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171026 01:12:04.369" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171026 01:12:04.369" starttime="20171026 01:12:04.368"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171026 01:12:04.394" level="INFO">${image_version} = v1.99.10-208-g8557417</msg>
<status status="PASS" endtime="20171026 01:12:04.394" starttime="20171026 01:12:04.369"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171026 01:12:04.395" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171026 01:12:17.630" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171026 01:12:17.630" starttime="20171026 01:12:04.394"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:17.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:17.636" starttime="20171026 01:12:17.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:17.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:17.637" starttime="20171026 01:12:17.636"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:17.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:17.637" starttime="20171026 01:12:17.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:17.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:17.638" starttime="20171026 01:12:17.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:17.952" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:17.952" starttime="20171026 01:12:17.639"></status>
</kw>
<msg timestamp="20171026 01:12:17.952" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:17.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:17.952" starttime="20171026 01:12:17.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:17.953" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:17.953" starttime="20171026 01:12:17.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:17.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:17.954" starttime="20171026 01:12:17.953"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:17.954" starttime="20171026 01:12:17.634"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:17.954" starttime="20171026 01:12:17.633"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:17.954" starttime="20171026 01:12:17.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:17.955" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171026 01:12:17.955" starttime="20171026 01:12:17.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:17.955" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171026 01:12:17.955" starttime="20171026 01:12:17.955"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:17.956" starttime="20171026 01:12:17.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:17.957" starttime="20171026 01:12:17.956"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:27.984" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20171026 01:12:27.984" starttime="20171026 01:12:17.957"></status>
</kw>
<status status="FAIL" endtime="20171026 01:12:27.985" starttime="20171026 01:12:17.631"></status>
</kw>
<status status="FAIL" endtime="20171026 01:12:27.985" starttime="20171026 01:12:04.368"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.5.180.47</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171026 01:12:27.998" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171026 01:12:27.999" starttime="20171026 01:12:27.998"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171026 01:12:28.004" level="INFO">Running command 'ping -c 4 9.5.180.47 2&gt;&amp;1'.</msg>
<msg timestamp="20171026 01:12:31.048" level="INFO">${RC} = 0</msg>
<msg timestamp="20171026 01:12:31.048" level="INFO">${output} = PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.6 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.1 ms
64 bytes from 9.5.180.47: icmp_seq=...</msg>
<status status="PASS" endtime="20171026 01:12:31.048" starttime="20171026 01:12:27.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.052" level="INFO">RC: 0
Output:
PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.6 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.1 ms
64 bytes from 9.5.180.47: icmp_seq=3 ttl=50 time=35.1 ms
64 bytes from 9.5.180.47: icmp_seq=4 ttl=50 time=35.1 ms

--- 9.5.180.47 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 35.149/35.270/35.605/0.269 ms</msg>
<status status="PASS" endtime="20171026 01:12:31.052" starttime="20171026 01:12:31.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:31.053" starttime="20171026 01:12:31.053"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.053" starttime="20171026 01:12:27.997"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:12:31.069" level="INFO">${cur_time} = 2017-10-26 01:12:31:068976</msg>
<status status="PASS" endtime="20171026 01:12:31.069" starttime="20171026 01:12:31.068"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:12:31.070" level="INFO">${cur_time} = 20171026011231068976</msg>
<status status="PASS" endtime="20171026 01:12:31.070" starttime="20171026 01:12:31.070"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.071" starttime="20171026 01:12:31.066"></status>
</kw>
<msg timestamp="20171026 01:12:31.080" level="INFO">${FFDC_TIME} = 20171026011231068976</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:12:31.082" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:12:31.082" starttime="20171026 01:12:31.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:12:31.083" level="INFO">${suite_name} = 20171026011231068976_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:12:31.083" starttime="20171026 01:12:31.082"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:12:31.083" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:12:31.083" starttime="20171026 01:12:31.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:12:31.084" level="INFO">${test_name} = 20171026011231068976_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:12:31.084" starttime="20171026 01:12:31.084"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.084" starttime="20171026 01:12:31.081"></status>
</kw>
<msg timestamp="20171026 01:12:31.085" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171026 01:12:31.085" level="INFO">${FFDC_PREFIX} = 20171026011231068976_</msg>
<msg timestamp="20171026 01:12:31.106" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171026 01:12:31.108" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.108" starttime="20171026 01:12:31.107"></status>
</kw>
<msg timestamp="20171026 01:12:31.114" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.125" starttime="20171026 01:12:31.124"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.125" starttime="20171026 01:12:31.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.126" starttime="20171026 01:12:31.126"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.126" starttime="20171026 01:12:31.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.127" starttime="20171026 01:12:31.127"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.127" starttime="20171026 01:12:31.126"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.129" starttime="20171026 01:12:31.128"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.129" starttime="20171026 01:12:31.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.130" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.130" starttime="20171026 01:12:31.130"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.130" starttime="20171026 01:12:31.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.136" starttime="20171026 01:12:31.131"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.136" starttime="20171026 01:12:31.130"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.138" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.138" starttime="20171026 01:12:31.137"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.138" starttime="20171026 01:12:31.136"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.139" starttime="20171026 01:12:31.139"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.139" starttime="20171026 01:12:31.138"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.140" starttime="20171026 01:12:31.140"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.140" starttime="20171026 01:12:31.139"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.142" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.142" starttime="20171026 01:12:31.142"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.142" starttime="20171026 01:12:31.141"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.143" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.143" starttime="20171026 01:12:31.143"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.144" starttime="20171026 01:12:31.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.145" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.145" starttime="20171026 01:12:31.144"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.145" starttime="20171026 01:12:31.144"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.146" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.146" starttime="20171026 01:12:31.146"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.146" starttime="20171026 01:12:31.145"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:12:31.156" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:31.157" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:12:31.338" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:12:31.347" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:12:31.347" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:12:31.347" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:12:31.347" starttime="20171026 01:12:31.147"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.348" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:12:31.348" starttime="20171026 01:12:31.347"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.348" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:12:31.348" starttime="20171026 01:12:31.348"></status>
</kw>
<msg timestamp="20171026 01:12:31.349" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171026 01:12:31.349" starttime="20171026 01:12:31.147"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.350" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.350" starttime="20171026 01:12:31.350"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.350" starttime="20171026 01:12:31.349"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.350" starttime="20171026 01:12:31.141"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.352" starttime="20171026 01:12:31.351"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.352" starttime="20171026 01:12:31.350"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:12:31.353" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:12:31.353" starttime="20171026 01:12:31.352"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.354" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.355" starttime="20171026 01:12:31.354"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.355" starttime="20171026 01:12:31.353"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.356" starttime="20171026 01:12:31.355"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.356" starttime="20171026 01:12:31.355"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.356" starttime="20171026 01:12:31.353"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.357" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.357" starttime="20171026 01:12:31.357"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.358" starttime="20171026 01:12:31.356"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.359" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.359" starttime="20171026 01:12:31.358"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.359" starttime="20171026 01:12:31.358"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.359" starttime="20171026 01:12:31.356"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.360" starttime="20171026 01:12:31.360"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.360" starttime="20171026 01:12:31.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.362" starttime="20171026 01:12:31.361"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.362" starttime="20171026 01:12:31.361"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.362" starttime="20171026 01:12:31.359"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.362" starttime="20171026 01:12:31.353"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.363" starttime="20171026 01:12:31.363"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.363" starttime="20171026 01:12:31.362"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.364" starttime="20171026 01:12:31.123"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:12:31.369" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171026 01:12:31.369" starttime="20171026 01:12:31.369"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171026 01:12:31.371" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171026 01:12:31.371" starttime="20171026 01:12:31.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:31.372" starttime="20171026 01:12:31.372"></status>
</kw>
<msg timestamp="20171026 01:12:31.373" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171026 01:12:31.373" starttime="20171026 01:12:31.371"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:31.375" starttime="20171026 01:12:31.375"></status>
</kw>
<msg timestamp="20171026 01:12:31.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:31.375" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:31.375" starttime="20171026 01:12:31.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:31.376" starttime="20171026 01:12:31.376"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:12:31.391" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:12:31.391" starttime="20171026 01:12:31.391"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:12:31.393" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171026 01:12:31.393" starttime="20171026 01:12:31.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.399" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171026 01:12:31.399" starttime="20171026 01:12:31.393"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.403" starttime="20171026 01:12:31.402"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.403" starttime="20171026 01:12:31.402"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.404" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.404" starttime="20171026 01:12:31.404"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.405" starttime="20171026 01:12:31.403"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.406" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.406" starttime="20171026 01:12:31.405"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.406" starttime="20171026 01:12:31.405"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:31.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:31.407" starttime="20171026 01:12:31.407"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.407" starttime="20171026 01:12:31.406"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.407" starttime="20171026 01:12:31.401"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:31.407" starttime="20171026 01:12:31.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:31.408" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:31.408" starttime="20171026 01:12:31.408"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:31.449" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:31.450" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171026 01:12:33.526" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:33.526" starttime="20171026 01:12:31.426"></status>
</kw>
<msg timestamp="20171026 01:12:33.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:33.526" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" endtime="20171026 01:12:33.526" starttime="20171026 01:12:31.409"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:33.527" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" endtime="20171026 01:12:33.527" starttime="20171026 01:12:33.527"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:33.527" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:33.527" starttime="20171026 01:12:33.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.535" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:33.535"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:33.534"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:33.528"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:31.400"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:31.399"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:31.399"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:31.392"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.536" starttime="20171026 01:12:31.391"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:12:33.537" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171026 01:12:33.537" starttime="20171026 01:12:33.537"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.538" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171026 01:12:33.538" starttime="20171026 01:12:33.538"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.541" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.541" starttime="20171026 01:12:33.541"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.541" starttime="20171026 01:12:33.540"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.543" starttime="20171026 01:12:33.542"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.543" starttime="20171026 01:12:33.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.545" starttime="20171026 01:12:33.544"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.545" starttime="20171026 01:12:33.543"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.546" starttime="20171026 01:12:33.545"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.546" starttime="20171026 01:12:33.545"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.546" starttime="20171026 01:12:33.540"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.546" starttime="20171026 01:12:33.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:33.547" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:33.547" starttime="20171026 01:12:33.546"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:33.588" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:33.589" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171026 01:12:33.805" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:33.805" starttime="20171026 01:12:33.565"></status>
</kw>
<msg timestamp="20171026 01:12:33.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:33.806" level="INFO">${ret_values} = (u'20171026004218', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:12:33.806" starttime="20171026 01:12:33.547"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:33.806" level="INFO">${stdout} = 20171026004218</msg>
<status status="PASS" endtime="20171026 01:12:33.806" starttime="20171026 01:12:33.806"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:33.807" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:33.807" starttime="20171026 01:12:33.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.815" starttime="20171026 01:12:33.814"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.815" starttime="20171026 01:12:33.814"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.815" starttime="20171026 01:12:33.807"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.815" starttime="20171026 01:12:33.539"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.815" starttime="20171026 01:12:33.538"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.818" starttime="20171026 01:12:33.818"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.819" starttime="20171026 01:12:33.817"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.820" starttime="20171026 01:12:33.819"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.820" starttime="20171026 01:12:33.819"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.821" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.821" starttime="20171026 01:12:33.821"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.821" starttime="20171026 01:12:33.820"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:33.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:33.823" starttime="20171026 01:12:33.822"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.823" starttime="20171026 01:12:33.822"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.823" starttime="20171026 01:12:33.817"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:33.823" starttime="20171026 01:12:33.816"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:33.824" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:33.824" starttime="20171026 01:12:33.824"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:33.864" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:33.865" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171026 01:12:34.045" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:34.045" starttime="20171026 01:12:33.842"></status>
</kw>
<msg timestamp="20171026 01:12:34.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:34.045" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-210"\nVERSION_ID="v1.99.10-210-gbd5b518"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171026 01:12:34.045" starttime="20171026 01:12:33.824"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:34.046" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-210"
VERSION_ID="v1.99.10-210-gbd5b518"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171026 01:12:34.046" starttime="20171026 01:12:34.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:34.046" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:34.046" starttime="20171026 01:12:34.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.054" starttime="20171026 01:12:34.054"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.054" starttime="20171026 01:12:34.053"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.054" starttime="20171026 01:12:34.047"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.055" starttime="20171026 01:12:33.816"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.055" starttime="20171026 01:12:33.815"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.055" starttime="20171026 01:12:33.538"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.055" starttime="20171026 01:12:33.536"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.055" starttime="20171026 01:12:33.536"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:12:34.056" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171026 01:12:34.056" starttime="20171026 01:12:34.056"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.057" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171026 01:12:34.057" starttime="20171026 01:12:34.056"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.060" starttime="20171026 01:12:34.060"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.060" starttime="20171026 01:12:34.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.061" starttime="20171026 01:12:34.061"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.062" starttime="20171026 01:12:34.060"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.063" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.063" starttime="20171026 01:12:34.062"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.063" starttime="20171026 01:12:34.062"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.064" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.065" starttime="20171026 01:12:34.064"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.065" starttime="20171026 01:12:34.063"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.065" starttime="20171026 01:12:34.059"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.065" starttime="20171026 01:12:34.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:34.066" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:34.066" starttime="20171026 01:12:34.065"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:34.107" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:34.108" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171026 01:12:34.288" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:34.288" starttime="20171026 01:12:34.084"></status>
</kw>
<msg timestamp="20171026 01:12:34.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:34.288" level="INFO">${ret_values} = (u' 01:12:44 up 14 min,  load average: 0.52, 1.31, 1.19', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:12:34.288" starttime="20171026 01:12:34.066"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:34.289" level="INFO">${stdout} =  01:12:44 up 14 min,  load average: 0.52, 1.31, 1.19</msg>
<status status="PASS" endtime="20171026 01:12:34.289" starttime="20171026 01:12:34.288"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:34.289" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:34.289" starttime="20171026 01:12:34.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.297" starttime="20171026 01:12:34.297"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.298" starttime="20171026 01:12:34.296"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.298" starttime="20171026 01:12:34.290"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.298" starttime="20171026 01:12:34.057"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.298" starttime="20171026 01:12:34.057"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.301" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.301" starttime="20171026 01:12:34.301"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.301" starttime="20171026 01:12:34.300"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.302" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.302" starttime="20171026 01:12:34.302"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.303" starttime="20171026 01:12:34.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.304" starttime="20171026 01:12:34.303"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.304" starttime="20171026 01:12:34.303"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.305" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.305" starttime="20171026 01:12:34.305"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.305" starttime="20171026 01:12:34.304"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.305" starttime="20171026 01:12:34.299"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.305" starttime="20171026 01:12:34.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:34.306" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:34.306" starttime="20171026 01:12:34.306"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:34.349" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:34.350" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171026 01:12:34.530" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:34.530" starttime="20171026 01:12:34.326"></status>
</kw>
<msg timestamp="20171026 01:12:34.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:34.530" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171026 01:12:34.530" starttime="20171026 01:12:34.307"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:34.531" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171026 01:12:34.531" starttime="20171026 01:12:34.531"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:34.532" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:34.532" starttime="20171026 01:12:34.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.540" starttime="20171026 01:12:34.539"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.540" starttime="20171026 01:12:34.538"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.540" starttime="20171026 01:12:34.532"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.540" starttime="20171026 01:12:34.298"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.540" starttime="20171026 01:12:34.298"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.543" starttime="20171026 01:12:34.543"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.543" starttime="20171026 01:12:34.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.545" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.545" starttime="20171026 01:12:34.544"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.545" starttime="20171026 01:12:34.543"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.546" starttime="20171026 01:12:34.546"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.546" starttime="20171026 01:12:34.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.547" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.547" starttime="20171026 01:12:34.547"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.547" starttime="20171026 01:12:34.546"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.548" starttime="20171026 01:12:34.542"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.548" starttime="20171026 01:12:34.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:34.548" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:34.548" starttime="20171026 01:12:34.548"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:34.589" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:34.590" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171026 01:12:34.770" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:34.770" starttime="20171026 01:12:34.566"></status>
</kw>
<msg timestamp="20171026 01:12:34.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:34.770" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:12:34.771" starttime="20171026 01:12:34.549"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:34.771" level="INFO">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171026 01:12:34.771" starttime="20171026 01:12:34.771"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:34.772" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:34.772" starttime="20171026 01:12:34.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:34.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:34.780" starttime="20171026 01:12:34.780"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.780" starttime="20171026 01:12:34.779"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.780" starttime="20171026 01:12:34.772"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.780" starttime="20171026 01:12:34.540"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.780" starttime="20171026 01:12:34.540"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:34.057"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:34.055"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:34.055"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:31.391"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:31.390"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:31.376"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:31.373"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:34.781" starttime="20171026 01:12:31.373"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:34.783" starttime="20171026 01:12:34.783"></status>
</kw>
<msg timestamp="20171026 01:12:34.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:34.783" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:34.783" starttime="20171026 01:12:34.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:34.784" starttime="20171026 01:12:34.784"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:12:34.798" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171026 01:12:34.798" starttime="20171026 01:12:34.798"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:12:34.800" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171026 01:12:34.800" starttime="20171026 01:12:34.799"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:34.801" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171026 01:12:34.801" starttime="20171026 01:12:34.800"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:34.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:34.805" starttime="20171026 01:12:34.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:34.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:34.805" starttime="20171026 01:12:34.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:34.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:34.806" starttime="20171026 01:12:34.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:34.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:34.807" starttime="20171026 01:12:34.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:35.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:35.146" starttime="20171026 01:12:34.808"></status>
</kw>
<msg timestamp="20171026 01:12:35.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:35.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.146" starttime="20171026 01:12:34.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:35.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.147" starttime="20171026 01:12:35.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:35.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.148" starttime="20171026 01:12:35.147"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:35.148" starttime="20171026 01:12:34.803"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:35.148" starttime="20171026 01:12:34.802"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:35.148" starttime="20171026 01:12:34.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:35.149" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:35.149" starttime="20171026 01:12:35.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:35.149" starttime="20171026 01:12:35.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:35.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:35.899" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.900" starttime="20171026 01:12:35.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:35.900" starttime="20171026 01:12:35.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:35.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:35.901" starttime="20171026 01:12:35.901"></status>
</kw>
<msg timestamp="20171026 01:12:35.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.901" starttime="20171026 01:12:34.801"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:35.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:35.902" starttime="20171026 01:12:35.902"></status>
</kw>
<msg timestamp="20171026 01:12:35.902" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:35.902" starttime="20171026 01:12:35.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:35.903" starttime="20171026 01:12:35.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:35.905" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25101, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:35.905" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:35.905" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" endtime="20171026 01:12:35.905" starttime="20171026 01:12:35.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:35.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:35.907" starttime="20171026 01:12:35.907"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:35.907" starttime="20171026 01:12:35.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:35.907" starttime="20171026 01:12:34.800"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:35.908" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_OCC_state.txt</msg>
<status status="PASS" endtime="20171026 01:12:35.908" starttime="20171026 01:12:35.908"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:35.911" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:35.911" starttime="20171026 01:12:35.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:35.912" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:35.912" starttime="20171026 01:12:35.912"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:35.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:35.913" starttime="20171026 01:12:35.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:35.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:35.914" starttime="20171026 01:12:35.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.225" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:36.225" starttime="20171026 01:12:35.915"></status>
</kw>
<msg timestamp="20171026 01:12:36.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:36.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.225" starttime="20171026 01:12:35.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.226" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.226" starttime="20171026 01:12:36.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.227" starttime="20171026 01:12:36.226"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.227" starttime="20171026 01:12:35.910"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.227" starttime="20171026 01:12:35.910"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.227" starttime="20171026 01:12:35.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:36.228" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:36.228" starttime="20171026 01:12:36.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:36.228" starttime="20171026 01:12:36.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:36.410" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:36.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.410" starttime="20171026 01:12:36.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:36.411" starttime="20171026 01:12:36.411"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:36.412" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:36.412" starttime="20171026 01:12:36.411"></status>
</kw>
<msg timestamp="20171026 01:12:36.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.413" starttime="20171026 01:12:35.908"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.414" starttime="20171026 01:12:36.414"></status>
</kw>
<msg timestamp="20171026 01:12:36.414" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:36.414" starttime="20171026 01:12:36.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:36.415" starttime="20171026 01:12:36.414"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:36.415" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:36.415" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:36.416" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171026 01:12:36.416" starttime="20171026 01:12:36.415"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.417" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_OCC_state.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:36.417" starttime="20171026 01:12:36.417"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.417" starttime="20171026 01:12:36.416"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.417" starttime="20171026 01:12:35.907"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:36.418" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171026 01:12:36.418" starttime="20171026 01:12:36.418"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:36.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:36.422" starttime="20171026 01:12:36.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:36.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:36.422" starttime="20171026 01:12:36.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:36.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:36.423" starttime="20171026 01:12:36.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:36.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:36.424" starttime="20171026 01:12:36.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:36.785" starttime="20171026 01:12:36.425"></status>
</kw>
<msg timestamp="20171026 01:12:36.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:36.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.786" starttime="20171026 01:12:36.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.786" starttime="20171026 01:12:36.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:36.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:36.787" starttime="20171026 01:12:36.787"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.787" starttime="20171026 01:12:36.420"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.787" starttime="20171026 01:12:36.420"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:36.787" starttime="20171026 01:12:36.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:36.788" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:36.788" starttime="20171026 01:12:36.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:36.789" starttime="20171026 01:12:36.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:37.062" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:37.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.063" starttime="20171026 01:12:36.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:37.063" starttime="20171026 01:12:37.063"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:37.064" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:37.064" starttime="20171026 01:12:37.064"></status>
</kw>
<msg timestamp="20171026 01:12:37.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.064" starttime="20171026 01:12:36.418"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:37.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.066" starttime="20171026 01:12:37.065"></status>
</kw>
<msg timestamp="20171026 01:12:37.066" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:37.066" starttime="20171026 01:12:37.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:37.067" starttime="20171026 01:12:37.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:37.068" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:37.068" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:37.068" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171026 01:12:37.068" starttime="20171026 01:12:37.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:37.070" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:37.070" starttime="20171026 01:12:37.070"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:37.070" starttime="20171026 01:12:37.068"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:37.070" starttime="20171026 01:12:36.417"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:37.071" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_led.txt</msg>
<status status="PASS" endtime="20171026 01:12:37.071" starttime="20171026 01:12:37.071"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:37.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:37.076" starttime="20171026 01:12:37.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:37.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:37.077" starttime="20171026 01:12:37.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:37.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:37.078" starttime="20171026 01:12:37.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:37.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:37.078" starttime="20171026 01:12:37.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:37.399" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:37.399" starttime="20171026 01:12:37.079"></status>
</kw>
<msg timestamp="20171026 01:12:37.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:37.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.400" starttime="20171026 01:12:37.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:37.400" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.400" starttime="20171026 01:12:37.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:37.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:37.401" starttime="20171026 01:12:37.401"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:37.401" starttime="20171026 01:12:37.073"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:37.401" starttime="20171026 01:12:37.073"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:37.402" starttime="20171026 01:12:37.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:37.402" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:37.402" starttime="20171026 01:12:37.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:37.403" starttime="20171026 01:12:37.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:39.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:39.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.175" starttime="20171026 01:12:37.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:39.176" starttime="20171026 01:12:39.175"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:39.176" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:39.176" starttime="20171026 01:12:39.176"></status>
</kw>
<msg timestamp="20171026 01:12:39.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.177" starttime="20171026 01:12:37.071"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.178" starttime="20171026 01:12:39.177"></status>
</kw>
<msg timestamp="20171026 01:12:39.178" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:39.178" starttime="20171026 01:12:39.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:39.179" starttime="20171026 01:12:39.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:39.181" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:39.181" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:39.181" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171026 01:12:39.181" starttime="20171026 01:12:39.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_led.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:39.183" starttime="20171026 01:12:39.182"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.183" starttime="20171026 01:12:39.181"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.183" starttime="20171026 01:12:37.071"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:39.184" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171026 01:12:39.184" starttime="20171026 01:12:39.183"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:39.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:39.187" starttime="20171026 01:12:39.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:39.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:39.188" starttime="20171026 01:12:39.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:39.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:39.189" starttime="20171026 01:12:39.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:39.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:39.189" starttime="20171026 01:12:39.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:39.506" starttime="20171026 01:12:39.190"></status>
</kw>
<msg timestamp="20171026 01:12:39.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:39.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.506" starttime="20171026 01:12:39.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.507" starttime="20171026 01:12:39.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.508" starttime="20171026 01:12:39.507"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.508" starttime="20171026 01:12:39.186"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.508" starttime="20171026 01:12:39.185"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.508" starttime="20171026 01:12:39.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:39.509" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:39.509" starttime="20171026 01:12:39.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:39.509" starttime="20171026 01:12:39.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:39.913" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:39.913" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.913" starttime="20171026 01:12:39.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:39.914" starttime="20171026 01:12:39.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:39.914" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:39.914" starttime="20171026 01:12:39.914"></status>
</kw>
<msg timestamp="20171026 01:12:39.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.914" starttime="20171026 01:12:39.184"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:39.916" starttime="20171026 01:12:39.915"></status>
</kw>
<msg timestamp="20171026 01:12:39.916" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:39.916" starttime="20171026 01:12:39.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:39.916" starttime="20171026 01:12:39.916"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:39.917" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/0fab445b": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-210-gbd5b518", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-208-g69b2e34", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/347855ea", 
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:39.918" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:39.918" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/0fab445b": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171026 01:12:39.918" starttime="20171026 01:12:39.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:39.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:39.919" starttime="20171026 01:12:39.919"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.919" starttime="20171026 01:12:39.918"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:39.919" starttime="20171026 01:12:39.183"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:39.920" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_elog.txt</msg>
<status status="PASS" endtime="20171026 01:12:39.920" starttime="20171026 01:12:39.920"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:39.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:39.924" starttime="20171026 01:12:39.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:39.924" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:39.925" starttime="20171026 01:12:39.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:39.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:39.925" starttime="20171026 01:12:39.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:39.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:39.926" starttime="20171026 01:12:39.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:40.254" starttime="20171026 01:12:39.927"></status>
</kw>
<msg timestamp="20171026 01:12:40.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:40.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.254" starttime="20171026 01:12:39.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.255" starttime="20171026 01:12:40.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.255" starttime="20171026 01:12:40.255"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.256" starttime="20171026 01:12:39.922"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.256" starttime="20171026 01:12:39.922"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.256" starttime="20171026 01:12:39.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:40.256" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:40.256" starttime="20171026 01:12:40.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:40.257" starttime="20171026 01:12:40.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:40.336" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:40.336" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.336" starttime="20171026 01:12:40.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:40.337" starttime="20171026 01:12:40.337"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:40.337" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:40.338" starttime="20171026 01:12:40.337"></status>
</kw>
<msg timestamp="20171026 01:12:40.338" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.338" starttime="20171026 01:12:39.920"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:12:40.339" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:12:40.339" starttime="20171026 01:12:40.339"></status>
</kw>
<msg timestamp="20171026 01:12:40.339" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:12:40.339" starttime="20171026 01:12:40.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171026 01:12:40.340" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171026 01:12:40.341" starttime="20171026 01:12:40.340"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.341" starttime="20171026 01:12:40.340"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.341" starttime="20171026 01:12:39.920"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:40.341" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171026 01:12:40.342" starttime="20171026 01:12:40.341"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:40.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:40.345" starttime="20171026 01:12:40.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:40.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:40.346" starttime="20171026 01:12:40.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:40.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:40.346" starttime="20171026 01:12:40.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:40.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:40.347" starttime="20171026 01:12:40.347"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:40.660" starttime="20171026 01:12:40.348"></status>
</kw>
<msg timestamp="20171026 01:12:40.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:40.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.660" starttime="20171026 01:12:40.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.661" starttime="20171026 01:12:40.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:40.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:40.662" starttime="20171026 01:12:40.661"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.662" starttime="20171026 01:12:40.344"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.662" starttime="20171026 01:12:40.343"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:40.662" starttime="20171026 01:12:40.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:40.663" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171026 01:12:40.663" starttime="20171026 01:12:40.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:40.663" starttime="20171026 01:12:40.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:42.653" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:42.653" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:42.653" starttime="20171026 01:12:40.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.654" starttime="20171026 01:12:42.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:42.654" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:42.654" starttime="20171026 01:12:42.654"></status>
</kw>
<msg timestamp="20171026 01:12:42.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:42.655" starttime="20171026 01:12:40.342"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:42.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:42.656" starttime="20171026 01:12:42.655"></status>
</kw>
<msg timestamp="20171026 01:12:42.656" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:12:42.656" starttime="20171026 01:12:42.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.657" starttime="20171026 01:12:42.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:12:42.659" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "'8335-GTW000000'", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "'1318AAA0000000'"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM WS", 
      "Model": "", 
      "PartNumber": "'00VK5250000000'", 
      "Present": 1, 
      "PrettyName": "FRU DESCRIPTION", 
      "SerialNumber": "Y130UF72702N0000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/347855ea"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:2a:08", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095325", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095327", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x34479965", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106206", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106774", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1610632b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067d9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16105459", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106032", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b3cb", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b1ae", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a74db", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447a78b", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab90", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a7465", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067bc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106204", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 0, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:12:42.660" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:12:42.660" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171026 01:12:42.660" starttime="20171026 01:12:42.657"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:42.662" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:42.661"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:42.660"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:40.341"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.800"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.799"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.799"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.798"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.797"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.662" starttime="20171026 01:12:34.784"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.663" starttime="20171026 01:12:34.781"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.663" starttime="20171026 01:12:34.781"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.665" starttime="20171026 01:12:42.664"></status>
</kw>
<msg timestamp="20171026 01:12:42.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:42.665" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:42.665" starttime="20171026 01:12:42.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.665" starttime="20171026 01:12:42.665"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.681" starttime="20171026 01:12:42.680"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171026 01:12:42.682" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171026 01:12:42.682" starttime="20171026 01:12:42.682"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.682" starttime="20171026 01:12:42.679"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.682" starttime="20171026 01:12:42.666"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.682" starttime="20171026 01:12:42.663"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:42.682" starttime="20171026 01:12:42.663"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.684" starttime="20171026 01:12:42.684"></status>
</kw>
<msg timestamp="20171026 01:12:42.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:42.684" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:42.684" starttime="20171026 01:12:42.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.685" starttime="20171026 01:12:42.685"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:12:42.718" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:42.719" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171026 01:12:42.899" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171026 01:12:42.909" level="INFO">${core_files} = None</msg>
<msg timestamp="20171026 01:12:42.909" level="INFO">${stderr} = None</msg>
<msg timestamp="20171026 01:12:42.909" level="INFO">${rc} = None</msg>
<msg timestamp="20171026 01:12:42.909" level="FAIL">#(UTC) 2017/10/26 01:12:42.908301 -    0.190183 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171026 01:12:42.909" starttime="20171026 01:12:42.699"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171026 01:12:42.910" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171026 01:12:42.910" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171026 01:12:42.910" starttime="20171026 01:12:42.910"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:42.920" starttime="20171026 01:12:42.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:43.756" starttime="20171026 01:12:42.921"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.756" starttime="20171026 01:12:42.920"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.756" starttime="20171026 01:12:42.918"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.756" starttime="20171026 01:12:42.911"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171026 01:12:43.756" starttime="20171026 01:12:43.756"></status>
</kw>
<status status="FAIL" endtime="20171026 01:12:43.756" starttime="20171026 01:12:42.699"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.757" starttime="20171026 01:12:42.685"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.757" starttime="20171026 01:12:42.683"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:43.757" starttime="20171026 01:12:42.682"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:43.759" starttime="20171026 01:12:43.758"></status>
</kw>
<msg timestamp="20171026 01:12:43.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:43.759" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:43.759" starttime="20171026 01:12:43.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:43.760" starttime="20171026 01:12:43.759"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:12:43.774" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171026 01:12:43.774" starttime="20171026 01:12:43.773"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:12:43.775" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171026 01:12:43.775" starttime="20171026 01:12:43.775"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:43.776" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171026 01:12:43.776" starttime="20171026 01:12:43.776"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:43.778" starttime="20171026 01:12:43.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:43.778" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:43.778" starttime="20171026 01:12:43.778"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:43.818" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:43.819" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171026 01:12:43.999" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:43.999" starttime="20171026 01:12:43.796"></status>
</kw>
<msg timestamp="20171026 01:12:43.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:43.999" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171026 01:12:43.999" starttime="20171026 01:12:43.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:44.000" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171026 01:12:44.000" starttime="20171026 01:12:44.000"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:44.001" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:44.001" starttime="20171026 01:12:44.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:44.009" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:44.009" starttime="20171026 01:12:44.008"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.009" starttime="20171026 01:12:44.007"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.009" starttime="20171026 01:12:44.001"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.009" starttime="20171026 01:12:43.776"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.009" starttime="20171026 01:12:43.776"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:44.010" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171026 01:12:44.010" starttime="20171026 01:12:44.009"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:44.011" starttime="20171026 01:12:44.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:44.012" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:44.012" starttime="20171026 01:12:44.012"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:44.053" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:44.053" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171026 01:12:44.667" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:44.667" starttime="20171026 01:12:44.030"></status>
</kw>
<msg timestamp="20171026 01:12:44.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:44.668" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171026 01:12:44.668" starttime="20171026 01:12:44.012"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:44.669" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171026 01:12:44.669" starttime="20171026 01:12:44.669"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:44.670" level="INFO">${stderr} = ls: /proc/2665/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171026 01:12:44.670" starttime="20171026 01:12:44.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:44.678" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:44.678" starttime="20171026 01:12:44.678"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.679" starttime="20171026 01:12:44.677"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.679" starttime="20171026 01:12:44.670"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.679" starttime="20171026 01:12:44.010"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:44.679" starttime="20171026 01:12:44.009"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:44.680" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171026 01:12:44.680" starttime="20171026 01:12:44.679"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:44.681" starttime="20171026 01:12:44.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:44.682" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:44.682" starttime="20171026 01:12:44.681"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:44.722" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:44.723" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171026 01:12:47.307" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:47.307" starttime="20171026 01:12:44.700"></status>
</kw>
<msg timestamp="20171026 01:12:47.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:47.311" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:12:54 UTC. --\nOct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 26 00:58:29 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171026 01:12:47.311" starttime="20171026 01:12:44.682"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:47.313" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:12:54 UTC. --
Oct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 26 00:58:29 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171026 01:12:47.313" starttime="20171026 01:12:47.311"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:47.313" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:47.313" starttime="20171026 01:12:47.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:47.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:47.322" starttime="20171026 01:12:47.321"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:47.323" starttime="20171026 01:12:47.320"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:47.323" starttime="20171026 01:12:47.314"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:47.323" starttime="20171026 01:12:44.680"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:47.323" starttime="20171026 01:12:44.679"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:47.324" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171026 01:12:47.324" starttime="20171026 01:12:47.323"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:47.325" starttime="20171026 01:12:47.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:47.326" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:47.326" starttime="20171026 01:12:47.325"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:47.367" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:47.367" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171026 01:12:54.873" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:54.877" starttime="20171026 01:12:47.344"></status>
</kw>
<msg timestamp="20171026 01:12:54.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:54.917" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",\n\t"__REALTIME_TIMESTAMP" : "1508979509470956",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171026 01:12:54.918" starttime="20171026 01:12:47.326"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:54.927" level="INFO">${stdout} = {
	"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",
	"__REALTIME_TIMESTAMP" : "1508979509470956",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171026 01:12:54.927" starttime="20171026 01:12:54.918"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:54.928" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:54.928" starttime="20171026 01:12:54.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:54.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:54.957" starttime="20171026 01:12:54.949"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:54.957" starttime="20171026 01:12:54.938"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:54.957" starttime="20171026 01:12:54.929"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:54.957" starttime="20171026 01:12:47.324"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:54.957" starttime="20171026 01:12:47.323"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:54.958" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171026 01:12:54.958" starttime="20171026 01:12:54.958"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:54.960" starttime="20171026 01:12:54.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:54.961" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:54.961" starttime="20171026 01:12:54.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:55.001" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:55.002" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171026 01:12:55.182" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:55.182" starttime="20171026 01:12:54.978"></status>
</kw>
<msg timestamp="20171026 01:12:55.182" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:55.182" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          219268 kB\nMemAvailable:     327488 kB\nBuffers:           33172 kB\nCached:            85420 kB\nSwapCached:            0 kB\nActive:           16299...</msg>
<status status="PASS" endtime="20171026 01:12:55.182" starttime="20171026 01:12:54.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:55.183" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          219268 kB
MemAvailable:     327488 kB
Buffers:           33172 kB
Cached:            85420 kB
SwapCached:            0 kB
Active:           162996 kB
Inac...</msg>
<status status="PASS" endtime="20171026 01:12:55.183" starttime="20171026 01:12:55.182"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:55.183" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:55.183" starttime="20171026 01:12:55.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:55.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:55.191" starttime="20171026 01:12:55.191"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.191" starttime="20171026 01:12:55.190"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.191" starttime="20171026 01:12:55.184"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.192" starttime="20171026 01:12:54.959"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.192" starttime="20171026 01:12:54.958"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:55.192" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171026 01:12:55.192" starttime="20171026 01:12:55.192"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:55.194" starttime="20171026 01:12:55.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:55.195" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:55.195" starttime="20171026 01:12:55.194"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:55.235" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:55.236" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171026 01:12:55.658" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:55.658" starttime="20171026 01:12:55.212"></status>
</kw>
<msg timestamp="20171026 01:12:55.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:55.658" level="INFO">${ret_values} = (u'Mem: 212984K used, 219268K free, 8948K shrd, 33172K buff, 85424K cached\nCPU:   0% usr  28% sys   0% nic  71% idle   0% io   0% irq   0% sirq\nLoad average: 0.95 1.36 1.21 1/158 2669\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171026 01:12:55.658" starttime="20171026 01:12:55.195"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:55.659" level="INFO">${stdout} = Mem: 212984K used, 219268K free, 8948K shrd, 33172K buff, 85424K cached
CPU:   0% usr  28% sys   0% nic  71% idle   0% io   0% irq   0% sirq
Load average: 0.95 1.36 1.21 1/158 2669
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171026 01:12:55.659" starttime="20171026 01:12:55.659"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:55.660" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:55.660" starttime="20171026 01:12:55.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:55.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:55.668" starttime="20171026 01:12:55.667"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.668" starttime="20171026 01:12:55.666"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.668" starttime="20171026 01:12:55.660"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.668" starttime="20171026 01:12:55.193"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.668" starttime="20171026 01:12:55.192"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:12:55.669" level="INFO">${logpath} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171026 01:12:55.669" starttime="20171026 01:12:55.668"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:55.670" starttime="20171026 01:12:55.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:12:55.671" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:12:55.671" starttime="20171026 01:12:55.670"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:12:55.711" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:12:55.712" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171026 01:12:55.892" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:12:55.892" starttime="20171026 01:12:55.689"></status>
</kw>
<msg timestamp="20171026 01:12:55.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:55.893" level="INFO">${ret_values} = (u'[    0.650000] console [ttyS4] enabled\n[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us\n[    0.810000] random: fast init done\n[    0.840000] brd: module loaded\n[    0....</msg>
<status status="PASS" endtime="20171026 01:12:55.893" starttime="20171026 01:12:55.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:12:55.893" level="INFO">${stdout} = [    0.650000] console [ttyS4] enabled
[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us
[    0.810000] random: fast init done
[    0.840000] brd: module loaded
[    0.870000]...</msg>
<status status="PASS" endtime="20171026 01:12:55.893" starttime="20171026 01:12:55.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:12:55.894" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:12:55.894" starttime="20171026 01:12:55.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:12:55.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/20171026011231068976_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:55.901"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:55.901"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:55.894"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:55.669"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:55.668"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:43.775"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:43.774"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:43.774"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.902" starttime="20171026 01:12:43.774"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.903" starttime="20171026 01:12:43.773"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.903" starttime="20171026 01:12:43.760"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.903" starttime="20171026 01:12:43.757"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:55.903" starttime="20171026 01:12:43.757"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:55.905" starttime="20171026 01:12:55.904"></status>
</kw>
<msg timestamp="20171026 01:12:55.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:55.905" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:55.905" starttime="20171026 01:12:55.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:55.906" starttime="20171026 01:12:55.905"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:55.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:55.923" starttime="20171026 01:12:55.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:55.924" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:55.924" starttime="20171026 01:12:55.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:55.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:55.925" starttime="20171026 01:12:55.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:55.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:55.925" starttime="20171026 01:12:55.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:56.263" starttime="20171026 01:12:55.926"></status>
</kw>
<msg timestamp="20171026 01:12:56.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:56.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.263" starttime="20171026 01:12:55.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.264" starttime="20171026 01:12:56.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.265" starttime="20171026 01:12:56.264"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.265" starttime="20171026 01:12:55.922"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.265" starttime="20171026 01:12:55.921"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.265" starttime="20171026 01:12:55.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:56.265" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171026 01:12:56.265" starttime="20171026 01:12:56.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.266" starttime="20171026 01:12:56.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:56.368" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:12:56.368" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.368" starttime="20171026 01:12:56.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.369" starttime="20171026 01:12:56.368"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:56.369" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:56.369" starttime="20171026 01:12:56.369"></status>
</kw>
<msg timestamp="20171026 01:12:56.369" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.369" starttime="20171026 01:12:55.920"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:12:56.371" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:12:56.371" starttime="20171026 01:12:56.370"></status>
</kw>
<msg timestamp="20171026 01:12:56.371" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:12:56.371" starttime="20171026 01:12:56.370"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171026 01:12:56.371" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:56.372" starttime="20171026 01:12:56.371"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.372" starttime="20171026 01:12:55.919"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.372" starttime="20171026 01:12:55.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.372" starttime="20171026 01:12:55.903"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.372" starttime="20171026 01:12:55.903"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.374" starttime="20171026 01:12:56.374"></status>
</kw>
<msg timestamp="20171026 01:12:56.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:56.374" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:12:56.374" starttime="20171026 01:12:56.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.375" starttime="20171026 01:12:56.375"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171026 01:12:56.390" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:56.389"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:56.388"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:56.375"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:56.372"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:56.372"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.390" starttime="20171026 01:12:31.373"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.391" starttime="20171026 01:12:31.370"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.391" starttime="20171026 01:12:31.370"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.391" starttime="20171026 01:12:31.369"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171026 01:12:56.397" starttime="20171026 01:12:56.397"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.397" starttime="20171026 01:12:56.391"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.397" starttime="20171026 01:12:31.368"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.398" starttime="20171026 01:12:27.987"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.398" starttime="20171026 01:12:27.987"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171026 01:12:56.399" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171026 01:12:56.399" starttime="20171026 01:12:56.398"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171026 01:12:56.400" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026011231068976_BmcCodeUpdate/20171026011231068976_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171026 01:12:56.400" starttime="20171026 01:12:56.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.400" starttime="20171026 01:12:56.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.401" starttime="20171026 01:12:56.401"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.402" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171026 01:12:56.402" starttime="20171026 01:12:56.401"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.403" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171026 01:12:56.403" starttime="20171026 01:12:56.402"></status>
</kw>
<msg timestamp="20171026 01:12:56.403" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171026 01:12:56.403" starttime="20171026 01:12:56.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.405" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:56.405" starttime="20171026 01:12:56.404"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.405" starttime="20171026 01:12:56.404"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.406" starttime="20171026 01:12:56.405"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:12:56.407" level="INFO">${cur_time} = 2017-10-26 01:12:56:406580</msg>
<status status="PASS" endtime="20171026 01:12:56.407" starttime="20171026 01:12:56.406"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:12:56.407" level="INFO">${cur_time} = 20171026011256406580</msg>
<status status="PASS" endtime="20171026 01:12:56.407" starttime="20171026 01:12:56.407"></status>
</kw>
<msg timestamp="20171026 01:12:56.408" level="INFO">${cur_time} = 20171026011256406580</msg>
<status status="PASS" endtime="20171026 01:12:56.408" starttime="20171026 01:12:56.406"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:12:56.409" starttime="20171026 01:12:56.408"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.409" starttime="20171026 01:12:56.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:56.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:56.413" starttime="20171026 01:12:56.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:56.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:56.414" starttime="20171026 01:12:56.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:56.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:56.415" starttime="20171026 01:12:56.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:56.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:56.416" starttime="20171026 01:12:56.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:56.754" starttime="20171026 01:12:56.416"></status>
</kw>
<msg timestamp="20171026 01:12:56.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:56.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.754" starttime="20171026 01:12:56.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.755" starttime="20171026 01:12:56.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.756" starttime="20171026 01:12:56.756"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.756" starttime="20171026 01:12:56.412"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.756" starttime="20171026 01:12:56.412"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.756" starttime="20171026 01:12:56.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:56.757" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171026 01:12:56.757" starttime="20171026 01:12:56.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.758" starttime="20171026 01:12:56.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:56.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171026 01:12:56.833" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.833" starttime="20171026 01:12:56.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:56.834" starttime="20171026 01:12:56.834"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:56.834" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:56.834" starttime="20171026 01:12:56.834"></status>
</kw>
<msg timestamp="20171026 01:12:56.835" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:56.835" starttime="20171026 01:12:56.410"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:12:56.835" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:56.836" starttime="20171026 01:12:56.835"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:56.836" starttime="20171026 01:12:56.410"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:12:56.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:12:56.839" starttime="20171026 01:12:56.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:12:56.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:12:56.840" starttime="20171026 01:12:56.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:12:56.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:12:56.841" starttime="20171026 01:12:56.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:12:56.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:12:56.841" starttime="20171026 01:12:56.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:12:57.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:12:57.164" starttime="20171026 01:12:56.842"></status>
</kw>
<msg timestamp="20171026 01:12:57.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:12:57.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:57.164" starttime="20171026 01:12:56.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:12:57.164" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:57.165" starttime="20171026 01:12:57.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:12:57.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:12:57.165" starttime="20171026 01:12:57.165"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.166" starttime="20171026 01:12:56.838"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.166" starttime="20171026 01:12:56.837"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.166" starttime="20171026 01:12:56.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:12:57.166" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:12:57.166" starttime="20171026 01:12:57.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:57.167" starttime="20171026 01:12:57.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:12:57.249" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:12:57.249" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:57.249" starttime="20171026 01:12:57.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:12:57.249" starttime="20171026 01:12:57.249"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:12:57.250" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:12:57.250" starttime="20171026 01:12:57.250"></status>
</kw>
<msg timestamp="20171026 01:12:57.250" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:12:57.250" starttime="20171026 01:12:56.836"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:12:57.251" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:12:57.251" starttime="20171026 01:12:57.251"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.251" starttime="20171026 01:12:56.836"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.251" starttime="20171026 01:12:56.410"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.251" starttime="20171026 01:12:56.409"></status>
</kw>
<status status="PASS" endtime="20171026 01:12:57.251" starttime="20171026 01:12:27.986"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<kw name="Fatal Error" library="BuiltIn">
<doc>Stops the whole test execution.</doc>
<arguments>
<arg>msg=Code update failed.</arg>
</arguments>
<msg timestamp="20171026 01:12:57.252" level="FAIL">Code update failed.</msg>
<status status="FAIL" endtime="20171026 01:12:57.253" starttime="20171026 01:12:57.252"></status>
</kw>
<status status="FAIL" endtime="20171026 01:12:57.253" starttime="20171026 01:12:57.252"></status>
</kw>
<status status="FAIL" endtime="20171026 01:12:57.253" starttime="20171026 01:12:27.985">Code update failed.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171026 01:12:57.253" critical="yes" starttime="20171026 01:12:04.367">SSLError: ('The write operation timed out',)

Also teardown failed:
Code update failed.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171026 01:12:57.254" starttime="20171026 01:11:58.937"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">BMC_Code_Update</stat>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
