<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170707 21:19:10.673" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" id="s1" source="/tmp/fspcibld/14999/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:11.427">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:19:11.427" status="FAIL" endtime="20170707 21:19:11.427"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:11.427">${has_host} = False</msg>
<status starttime="20170707 21:19:11.426" status="PASS" endtime="20170707 21:19:11.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:19:11.428" status="PASS" endtime="20170707 21:19:11.428"></status>
</kw>
<status starttime="20170707 21:19:11.427" status="PASS" endtime="20170707 21:19:11.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:11.430">${port_num} = 22</msg>
<status starttime="20170707 21:19:11.429" status="PASS" endtime="20170707 21:19:11.430"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:11.430">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:19:11.430" status="PASS" endtime="20170707 21:19:11.430"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:11.431">${https_num} = 443</msg>
<status starttime="20170707 21:19:11.430" status="PASS" endtime="20170707 21:19:11.431"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:11.431">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:19:11.431" status="PASS" endtime="20170707 21:19:11.432"></status>
</kw>
<status starttime="20170707 21:19:11.429" status="PASS" endtime="20170707 21:19:11.432"></status>
</kw>
<status starttime="20170707 21:19:11.429" status="PASS" endtime="20170707 21:19:11.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:11.433">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:19:11.433" status="FAIL" endtime="20170707 21:19:11.433"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:11.433">${has_port} = False</msg>
<status starttime="20170707 21:19:11.432" status="PASS" endtime="20170707 21:19:11.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:19:11.435" status="PASS" endtime="20170707 21:19:11.435"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:19:11.435" status="PASS" endtime="20170707 21:19:11.436"></status>
</kw>
<status starttime="20170707 21:19:11.434" status="PASS" endtime="20170707 21:19:11.436"></status>
</kw>
<status starttime="20170707 21:19:11.434" status="PASS" endtime="20170707 21:19:11.436"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:11.436">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:19:13.300">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:19:11.436" status="PASS" endtime="20170707 21:19:13.300"></status>
</kw>
<status starttime="20170707 21:19:11.425" status="PASS" endtime="20170707 21:19:13.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:13.302">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170707 21:19:13.385">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:19:13.385">${output} = VERSION_ID="v1.99.7-96-g038f2e9"</msg>
<msg level="INFO" timestamp="20170707 21:19:13.385">${stderr} = </msg>
<status starttime="20170707 21:19:13.302" status="PASS" endtime="20170707 21:19:13.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.386">Length is 0</msg>
<status starttime="20170707 21:19:13.386" status="PASS" endtime="20170707 21:19:13.386"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.387">VERSION_ID="v1.99.7-96-g038f2e9"</msg>
<status starttime="20170707 21:19:13.386" status="PASS" endtime="20170707 21:19:13.387"></status>
</kw>
<status starttime="20170707 21:19:13.301" status="PASS" endtime="20170707 21:19:13.387"></status>
</kw>
<status starttime="20170707 21:19:13.301" status="PASS" endtime="20170707 21:19:13.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:13.389">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170707 21:19:13.478">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:19:13.478">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170707 21:19:13.479">${stderr} = </msg>
<status starttime="20170707 21:19:13.388" status="PASS" endtime="20170707 21:19:13.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.479">Length is 0</msg>
<status starttime="20170707 21:19:13.479" status="PASS" endtime="20170707 21:19:13.479"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:13.479">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status starttime="20170707 21:19:13.388" status="PASS" endtime="20170707 21:19:13.480"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.480">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.52
	op-build-v1.17-128-gf1b53c7-dirty
	buildroot-2017.05-15-gcd06d25
	skiboot-v5.7-rc1
	hostboot-d0a8f18
	linux-4.11.6-openpower1-p060b411
	petitboot-v1.4.3-p84d353a
	machine-xml-5b59a1d
	occ-6a00709
	hostboot-binaries-0e2ad15
	capp-ucode-9c73e9f
	sbe-02021c6
</msg>
<status starttime="20170707 21:19:13.480" status="PASS" endtime="20170707 21:19:13.481"></status>
</kw>
<status starttime="20170707 21:19:13.387" status="PASS" endtime="20170707 21:19:13.481"></status>
</kw>
<status starttime="20170707 21:19:13.387" status="PASS" endtime="20170707 21:19:13.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:13.485">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:19:13.484" status="FAIL" endtime="20170707 21:19:13.485"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:13.485">${has_host} = False</msg>
<status starttime="20170707 21:19:13.483" status="PASS" endtime="20170707 21:19:13.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:19:13.486" status="PASS" endtime="20170707 21:19:13.486"></status>
</kw>
<status starttime="20170707 21:19:13.485" status="PASS" endtime="20170707 21:19:13.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:13.487">${port_num} = 22</msg>
<status starttime="20170707 21:19:13.487" status="PASS" endtime="20170707 21:19:13.487"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:13.488">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:19:13.488" status="PASS" endtime="20170707 21:19:13.488"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:13.488">${https_num} = 443</msg>
<status starttime="20170707 21:19:13.488" status="PASS" endtime="20170707 21:19:13.488"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.489">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:19:13.489" status="PASS" endtime="20170707 21:19:13.489"></status>
</kw>
<status starttime="20170707 21:19:13.487" status="PASS" endtime="20170707 21:19:13.489"></status>
</kw>
<status starttime="20170707 21:19:13.486" status="PASS" endtime="20170707 21:19:13.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:13.490">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:19:13.490" status="FAIL" endtime="20170707 21:19:13.490"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:13.490">${has_port} = False</msg>
<status starttime="20170707 21:19:13.490" status="PASS" endtime="20170707 21:19:13.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:19:13.492" status="PASS" endtime="20170707 21:19:13.492"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:19:13.492" status="PASS" endtime="20170707 21:19:13.493"></status>
</kw>
<status starttime="20170707 21:19:13.491" status="PASS" endtime="20170707 21:19:13.493"></status>
</kw>
<status starttime="20170707 21:19:13.491" status="PASS" endtime="20170707 21:19:13.493"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:13.493">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:19:15.421">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:19:13.493" status="PASS" endtime="20170707 21:19:15.421"></status>
</kw>
<status starttime="20170707 21:19:13.482" status="PASS" endtime="20170707 21:19:15.421"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:15.422">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170707 21:19:15.514">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:19:15.515">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170707 21:19:15.515">${stderr} = </msg>
<status starttime="20170707 21:19:15.422" status="PASS" endtime="20170707 21:19:15.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:15.515">Length is 0</msg>
<status starttime="20170707 21:19:15.515" status="PASS" endtime="20170707 21:19:15.515"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:15.516">Length is 11</msg>
<status starttime="20170707 21:19:15.516" status="PASS" endtime="20170707 21:19:15.516"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:15.516">${bmc_model} = Witherspoon</msg>
<status starttime="20170707 21:19:13.482" status="PASS" endtime="20170707 21:19:15.516"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:15.517">BMC Model=Witherspoon</msg>
<status starttime="20170707 21:19:15.516" status="PASS" endtime="20170707 21:19:15.517"></status>
</kw>
<status starttime="20170707 21:19:13.482" status="PASS" endtime="20170707 21:19:15.517"></status>
</kw>
<status starttime="20170707 21:19:13.482" status="PASS" endtime="20170707 21:19:15.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:15.519">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:19:15.519" status="FAIL" endtime="20170707 21:19:15.519"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:15.520">${has_host} = False</msg>
<status starttime="20170707 21:19:15.519" status="PASS" endtime="20170707 21:19:15.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:19:15.521" status="PASS" endtime="20170707 21:19:15.521"></status>
</kw>
<status starttime="20170707 21:19:15.520" status="PASS" endtime="20170707 21:19:15.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:15.522">${port_num} = 22</msg>
<status starttime="20170707 21:19:15.522" status="PASS" endtime="20170707 21:19:15.523"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:15.523">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:19:15.523" status="PASS" endtime="20170707 21:19:15.523"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:15.524">${https_num} = 443</msg>
<status starttime="20170707 21:19:15.523" status="PASS" endtime="20170707 21:19:15.524"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:15.524">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:19:15.524" status="PASS" endtime="20170707 21:19:15.524"></status>
</kw>
<status starttime="20170707 21:19:15.522" status="PASS" endtime="20170707 21:19:15.525"></status>
</kw>
<status starttime="20170707 21:19:15.521" status="PASS" endtime="20170707 21:19:15.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:15.525">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:19:15.525" status="FAIL" endtime="20170707 21:19:15.526"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:15.526">${has_port} = False</msg>
<status starttime="20170707 21:19:15.525" status="PASS" endtime="20170707 21:19:15.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:19:15.527" status="PASS" endtime="20170707 21:19:15.527"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:19:15.527" status="PASS" endtime="20170707 21:19:15.528"></status>
</kw>
<status starttime="20170707 21:19:15.527" status="PASS" endtime="20170707 21:19:15.528"></status>
</kw>
<status starttime="20170707 21:19:15.526" status="PASS" endtime="20170707 21:19:15.528"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:15.529">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:19:17.852">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:19:15.528" status="PASS" endtime="20170707 21:19:17.853"></status>
</kw>
<status starttime="20170707 21:19:15.518" status="PASS" endtime="20170707 21:19:17.853"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:17.854">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170707 21:19:17.952">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:19:17.952">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170707 21:19:17.953">${stderr} = </msg>
<status starttime="20170707 21:19:17.854" status="PASS" endtime="20170707 21:19:17.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:17.953">Length is 0</msg>
<status starttime="20170707 21:19:17.953" status="PASS" endtime="20170707 21:19:17.954"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:17.954">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170707 21:19:17.853" status="PASS" endtime="20170707 21:19:17.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170707 21:19:17.954" status="PASS" endtime="20170707 21:19:17.955"></status>
</kw>
<status starttime="20170707 21:19:15.517" status="PASS" endtime="20170707 21:19:17.955"></status>
</kw>
<status starttime="20170707 21:19:15.517" status="PASS" endtime="20170707 21:19:17.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170707 21:19:17.955" status="PASS" endtime="20170707 21:19:17.956"></status>
</kw>
<status starttime="20170707 21:19:11.425" status="PASS" endtime="20170707 21:19:17.956"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/14999/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/14999/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.045">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:18.044" status="PASS" endtime="20170707 21:19:18.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:18.046" status="PASS" endtime="20170707 21:19:18.046"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.047">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:18.046" status="PASS" endtime="20170707 21:19:18.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:18.047" status="PASS" endtime="20170707 21:19:18.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.320">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:18.048" status="PASS" endtime="20170707 21:19:18.320"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.320">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:18.320">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:18.048" status="PASS" endtime="20170707 21:19:18.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.321">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:18.321" status="PASS" endtime="20170707 21:19:18.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:18.322" status="PASS" endtime="20170707 21:19:18.322"></status>
</kw>
<status starttime="20170707 21:19:18.044" status="PASS" endtime="20170707 21:19:18.322"></status>
</kw>
<status starttime="20170707 21:19:18.043" status="PASS" endtime="20170707 21:19:18.322"></status>
</kw>
<status starttime="20170707 21:19:18.042" status="PASS" endtime="20170707 21:19:18.322"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.327">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:18.327" status="PASS" endtime="20170707 21:19:18.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:18.328" status="PASS" endtime="20170707 21:19:18.328"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.329">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:18.328" status="PASS" endtime="20170707 21:19:18.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:18.329" status="PASS" endtime="20170707 21:19:18.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.568">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:18.330" status="PASS" endtime="20170707 21:19:18.568"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.568">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:18.568">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:18.330" status="PASS" endtime="20170707 21:19:18.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.569">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:18.568" status="PASS" endtime="20170707 21:19:18.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:18.569" status="PASS" endtime="20170707 21:19:18.570"></status>
</kw>
<status starttime="20170707 21:19:18.326" status="PASS" endtime="20170707 21:19:18.570"></status>
</kw>
<status starttime="20170707 21:19:18.326" status="PASS" endtime="20170707 21:19:18.570"></status>
</kw>
<status starttime="20170707 21:19:18.325" status="PASS" endtime="20170707 21:19:18.570"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.571">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:19:18.570" status="PASS" endtime="20170707 21:19:18.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.573">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:18.572" status="PASS" endtime="20170707 21:19:18.573"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.574">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:18.573" status="PASS" endtime="20170707 21:19:18.574"></status>
</kw>
<status starttime="20170707 21:19:18.573" status="PASS" endtime="20170707 21:19:18.574"></status>
</kw>
<status starttime="20170707 21:19:18.571" status="PASS" endtime="20170707 21:19:18.574"></status>
</kw>
<status starttime="20170707 21:19:18.571" status="PASS" endtime="20170707 21:19:18.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.715">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:19:18.716">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:18.574" status="PASS" endtime="20170707 21:19:18.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:18.717" status="PASS" endtime="20170707 21:19:18.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.718">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:18.718" status="PASS" endtime="20170707 21:19:18.719"></status>
</kw>
<status starttime="20170707 21:19:18.718" status="PASS" endtime="20170707 21:19:18.719"></status>
</kw>
<status starttime="20170707 21:19:18.717" status="PASS" endtime="20170707 21:19:18.719"></status>
</kw>
<status starttime="20170707 21:19:18.716" status="PASS" endtime="20170707 21:19:18.719"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:18.325" status="PASS" endtime="20170707 21:19:18.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:18.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:18.719" status="PASS" endtime="20170707 21:19:18.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.720">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:18.720">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:18.720">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:18.720" status="PASS" endtime="20170707 21:19:18.720"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.721">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:19:18.324" status="PASS" endtime="20170707 21:19:18.721"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.721">${host_state} = Running</msg>
<status starttime="20170707 21:19:18.324" status="PASS" endtime="20170707 21:19:18.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:18.722">Running != Quiesced</msg>
<status starttime="20170707 21:19:18.722" status="FAIL" endtime="20170707 21:19:18.722"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.722">${status} = False</msg>
<status starttime="20170707 21:19:18.721" status="PASS" endtime="20170707 21:19:18.723"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.723">${status} = False</msg>
<status starttime="20170707 21:19:18.323" status="PASS" endtime="20170707 21:19:18.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170707 21:19:18.723" status="PASS" endtime="20170707 21:19:18.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170707 21:19:18.724" status="PASS" endtime="20170707 21:19:18.724"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.732">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170707 21:19:18.725" status="PASS" endtime="20170707 21:19:18.732"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.740">${FFDC_DIR_PATH} = </msg>
<status starttime="20170707 21:19:18.733" status="PASS" endtime="20170707 21:19:18.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.743">${cur_time} = 2017-07-07 21:19:18:742221</msg>
<status starttime="20170707 21:19:18.742" status="PASS" endtime="20170707 21:19:18.743"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.743">${cur_time} = 20170707211918742221</msg>
<status starttime="20170707 21:19:18.743" status="PASS" endtime="20170707 21:19:18.743"></status>
</kw>
<status starttime="20170707 21:19:18.742" status="PASS" endtime="20170707 21:19:18.743"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.747">${FFDC_TIME} = 20170707211918742221</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.748">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170707 21:19:18.748" status="PASS" endtime="20170707 21:19:18.748"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.749">${suite_name} = 20170707211918742221_TestsSecurityTestSsl</msg>
<status starttime="20170707 21:19:18.749" status="PASS" endtime="20170707 21:19:18.749"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.750">${test_name} = TestSSLConnection</msg>
<status starttime="20170707 21:19:18.749" status="PASS" endtime="20170707 21:19:18.750"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.750">${test_name} = 20170707211918742221_TestSSLConnection</msg>
<status starttime="20170707 21:19:18.750" status="PASS" endtime="20170707 21:19:18.750"></status>
</kw>
<status starttime="20170707 21:19:18.748" status="PASS" endtime="20170707 21:19:18.750"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.751">${FFDC_DIR_PATH} = /tmp/fspcibld/14999/obmc-robot/logs/20170707211918742221_TestsSecurityTestSsl/20170707211918742221_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170707 21:19:18.755">${FFDC_PREFIX} = 20170707211918742221_</msg>
<status starttime="20170707 21:19:18.741" status="PASS" endtime="20170707 21:19:18.755"></status>
</kw>
<status starttime="20170707 21:19:18.741" status="PASS" endtime="20170707 21:19:18.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170707 21:19:18.755" status="PASS" endtime="20170707 21:19:18.756"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:19:18.757">Created directory '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs"&gt;/tmp/fspcibld/14999/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170707 21:19:18.756" status="PASS" endtime="20170707 21:19:18.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:18.758">File '/tmp/fspcibld/14999/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170707 21:19:18.757" status="FAIL" endtime="20170707 21:19:18.758"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.758">${exist} = False</msg>
<status starttime="20170707 21:19:18.757" status="PASS" endtime="20170707 21:19:18.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:19:18.760">Created file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:19:18.759" status="PASS" endtime="20170707 21:19:18.760"></status>
</kw>
<status starttime="20170707 21:19:18.758" status="PASS" endtime="20170707 21:19:18.760"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170707 21:19:18.760" status="PASS" endtime="20170707 21:19:18.760"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.761">${cur_time} = 2017-07-07 21:19:18:761168</msg>
<status starttime="20170707 21:19:18.761" status="PASS" endtime="20170707 21:19:18.761"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.762">${cur_time} = 20170707211918761168</msg>
<status starttime="20170707 21:19:18.762" status="PASS" endtime="20170707 21:19:18.762"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.762">${cur_time} = 20170707211918761168</msg>
<status starttime="20170707 21:19:18.760" status="PASS" endtime="20170707 21:19:18.762"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:19:18.763">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:19:18.762" status="PASS" endtime="20170707 21:19:18.763"></status>
</kw>
<status starttime="20170707 21:19:18.724" status="PASS" endtime="20170707 21:19:18.763"></status>
</kw>
<status starttime="20170707 21:19:18.323" status="PASS" endtime="20170707 21:19:18.763"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170707 21:19:18.041" critical="yes" status="PASS" endtime="20170707 21:19:18.763"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170707 21:19:18.764">Delete All Sessions</msg>
<status starttime="20170707 21:19:18.764" status="PASS" endtime="20170707 21:19:18.764"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170707 21:19:17.959" status="PASS" endtime="20170707 21:19:18.764"></status>
</suite>
<status starttime="20170707 21:19:17.956" status="PASS" endtime="20170707 21:19:18.766"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/14999/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.815">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.815" status="PASS" endtime="20170707 21:19:18.815"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.816">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.816" status="PASS" endtime="20170707 21:19:18.816"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.816">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.814" status="PASS" endtime="20170707 21:19:18.816"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.818">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.818" status="PASS" endtime="20170707 21:19:18.818"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.819">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.818" status="PASS" endtime="20170707 21:19:18.819"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.819">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:19:18.817" status="PASS" endtime="20170707 21:19:18.819"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.820">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 21:19:18.820" status="PASS" endtime="20170707 21:19:18.820"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:19:18.820" status="PASS" endtime="20170707 21:19:18.820"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.828">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:19:18.851">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:19:18.851">${output} = /tmp/fspcibld/14999/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 21:19:18.821" status="PASS" endtime="20170707 21:19:18.851"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 21:19:18.854" status="PASS" endtime="20170707 21:19:18.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 21:19:18.855" status="PASS" endtime="20170707 21:19:18.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.856">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:19:18.856" status="PASS" endtime="20170707 21:19:18.856"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:18.857">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:19:18.819" status="PASS" endtime="20170707 21:19:18.857"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.857">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170707 21:19:18.857" status="PASS" endtime="20170707 21:19:18.858"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:19:18.858" status="PASS" endtime="20170707 21:19:18.858"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.863">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:19:18.913">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:19:18.913">${os_con_pid} = </msg>
<status starttime="20170707 21:19:18.858" status="PASS" endtime="20170707 21:19:18.913"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170707 21:19:18.923" status="PASS" endtime="20170707 21:19:18.924"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.925">${cmd_buf} = kill -9 </msg>
<status starttime="20170707 21:19:18.924" status="PASS" endtime="20170707 21:19:18.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:19:18.925" status="PASS" endtime="20170707 21:19:18.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.927">${rc} = None</msg>
<msg level="INFO" timestamp="20170707 21:19:18.927">${output} = None</msg>
<status starttime="20170707 21:19:18.926" status="PASS" endtime="20170707 21:19:18.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 21:19:18.927" status="PASS" endtime="20170707 21:19:18.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:18.930">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status starttime="20170707 21:19:18.929" status="FAIL" endtime="20170707 21:19:18.930"></status>
</kw>
<status starttime="20170707 21:19:18.928" status="PASS" endtime="20170707 21:19:18.930"></status>
</kw>
<status starttime="20170707 21:19:18.928" status="PASS" endtime="20170707 21:19:18.930"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.930">${output} = </msg>
<status starttime="20170707 21:19:18.930" status="PASS" endtime="20170707 21:19:18.931"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:18.931">${loc_quiet} = 1</msg>
<status starttime="20170707 21:19:18.931" status="PASS" endtime="20170707 21:19:18.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170707 21:19:18.933" status="PASS" endtime="20170707 21:19:19.400"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:19.400">${rc} = 1</msg>
<msg level="INFO" timestamp="20170707 21:19:19.401">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170707 21:19:18.931" status="PASS" endtime="20170707 21:19:19.401"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:19.401">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170707 21:19:18.816" status="PASS" endtime="20170707 21:19:19.401"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:19:19.404">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170707 21:19:19.403" status="PASS" endtime="20170707 21:19:19.404"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.405">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 21:19:19.404" status="PASS" endtime="20170707 21:19:19.405"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:19:19.405" status="PASS" endtime="20170707 21:19:19.405"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.409">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:19:19.414">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:19:19.414">${output} = /tmp/fspcibld/14999/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 21:19:19.405" status="PASS" endtime="20170707 21:19:19.414"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 21:19:19.416" status="PASS" endtime="20170707 21:19:19.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 21:19:19.417" status="PASS" endtime="20170707 21:19:19.418"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.419">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:19:19.418" status="PASS" endtime="20170707 21:19:19.419"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:19.419">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:19:19.404" status="PASS" endtime="20170707 21:19:19.419"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.420">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170707 21:19:19.419" status="PASS" endtime="20170707 21:19:19.420"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:19:19.420" status="PASS" endtime="20170707 21:19:19.420"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.423">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170707 21:19:19.432">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:19:19.432">${output} = </msg>
<status starttime="20170707 21:19:19.421" status="PASS" endtime="20170707 21:19:19.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170707 21:19:19.434" status="PASS" endtime="20170707 21:19:19.435"></status>
</kw>
<status starttime="20170707 21:19:18.814" status="PASS" endtime="20170707 21:19:19.435"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.436">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.438">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170707 21:19:19.437" status="PASS" endtime="20170707 21:19:19.438"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.439">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 21:19:19.439" status="PASS" endtime="20170707 21:19:19.439"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.443">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:19.442" status="PASS" endtime="20170707 21:19:19.444"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:19.444" status="PASS" endtime="20170707 21:19:19.445"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.446">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:19.445" status="PASS" endtime="20170707 21:19:19.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.447">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:19.446" status="PASS" endtime="20170707 21:19:19.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.954">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:19.449" status="PASS" endtime="20170707 21:19:19.954"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:19.954">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:19.955">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:19.448" status="PASS" endtime="20170707 21:19:19.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.955">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:19.955" status="PASS" endtime="20170707 21:19:19.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.956">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:19.956" status="PASS" endtime="20170707 21:19:19.956"></status>
</kw>
<status starttime="20170707 21:19:19.441" status="PASS" endtime="20170707 21:19:19.956"></status>
</kw>
<status starttime="20170707 21:19:19.441" status="PASS" endtime="20170707 21:19:19.956"></status>
</kw>
<status starttime="20170707 21:19:19.440" status="PASS" endtime="20170707 21:19:19.957"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.957">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 21:19:19.957" status="PASS" endtime="20170707 21:19:19.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.958">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:19.957" status="PASS" endtime="20170707 21:19:19.958"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 21:19:19.958" status="PASS" endtime="20170707 21:19:19.958"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:19.960">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170707 21:19:19.959" status="PASS" endtime="20170707 21:19:19.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:19.961">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 21:19:19.961" status="PASS" endtime="20170707 21:19:19.961"></status>
</kw>
<status starttime="20170707 21:19:19.960" status="PASS" endtime="20170707 21:19:19.961"></status>
</kw>
<status starttime="20170707 21:19:19.959" status="PASS" endtime="20170707 21:19:19.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.480">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 21:19:20.480">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:19.961" status="PASS" endtime="20170707 21:19:20.480"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.481">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:20.481" status="PASS" endtime="20170707 21:19:20.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:20.487">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:20.487" status="PASS" endtime="20170707 21:19:20.488"></status>
</kw>
<status starttime="20170707 21:19:20.481" status="PASS" endtime="20170707 21:19:20.488"></status>
</kw>
<status starttime="20170707 21:19:20.480" status="PASS" endtime="20170707 21:19:20.488"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:20.488">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:19.439" status="PASS" endtime="20170707 21:19:20.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:20.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:20.489" status="PASS" endtime="20170707 21:19:20.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.490">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:20.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:20.490">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:20.489" status="PASS" endtime="20170707 21:19:20.490"></status>
</kw>
<status starttime="20170707 21:19:19.438" status="PASS" endtime="20170707 21:19:20.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 21:19:20.490" status="PASS" endtime="20170707 21:19:20.490"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:20.495">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:20.494" status="PASS" endtime="20170707 21:19:20.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:20.495" status="PASS" endtime="20170707 21:19:20.496"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:20.496" status="PASS" endtime="20170707 21:19:20.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:20.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:20.497" status="PASS" endtime="20170707 21:19:20.497"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:22.251">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:20.498" status="PASS" endtime="20170707 21:19:22.251"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:22.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:22.251">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:20.497" status="PASS" endtime="20170707 21:19:22.251"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:22.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:22.252" status="PASS" endtime="20170707 21:19:22.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:22.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:22.252" status="PASS" endtime="20170707 21:19:22.253"></status>
</kw>
<status starttime="20170707 21:19:20.494" status="PASS" endtime="20170707 21:19:22.253"></status>
</kw>
<status starttime="20170707 21:19:20.494" status="PASS" endtime="20170707 21:19:22.253"></status>
</kw>
<status starttime="20170707 21:19:20.493" status="PASS" endtime="20170707 21:19:22.253"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:22.254">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:19:22.253" status="PASS" endtime="20170707 21:19:22.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:22.259">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:22.258" status="PASS" endtime="20170707 21:19:22.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:22.260">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:22.259" status="PASS" endtime="20170707 21:19:22.260"></status>
</kw>
<status starttime="20170707 21:19:22.259" status="PASS" endtime="20170707 21:19:22.260"></status>
</kw>
<status starttime="20170707 21:19:22.257" status="PASS" endtime="20170707 21:19:22.260"></status>
</kw>
<status starttime="20170707 21:19:22.255" status="PASS" endtime="20170707 21:19:22.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:29.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:19:29.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:22.260" status="PASS" endtime="20170707 21:19:29.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:29.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:29.134" status="PASS" endtime="20170707 21:19:29.134"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:29.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:29.135" status="PASS" endtime="20170707 21:19:29.135"></status>
</kw>
<status starttime="20170707 21:19:29.135" status="PASS" endtime="20170707 21:19:29.136"></status>
</kw>
<status starttime="20170707 21:19:29.133" status="PASS" endtime="20170707 21:19:29.136"></status>
</kw>
<status starttime="20170707 21:19:29.133" status="PASS" endtime="20170707 21:19:29.136"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:29.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:20.492" status="PASS" endtime="20170707 21:19:29.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:29.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:29.136" status="PASS" endtime="20170707 21:19:29.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:29.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:29.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:29.137">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:29.137" status="PASS" endtime="20170707 21:19:29.137"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:29.138">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:19:20.492" status="PASS" endtime="20170707 21:19:29.138"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:29.138">${host_state} = Running</msg>
<status starttime="20170707 21:19:20.491" status="PASS" endtime="20170707 21:19:29.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:29.139">Off != Running</msg>
<status starttime="20170707 21:19:29.138" status="FAIL" endtime="20170707 21:19:29.139"></status>
</kw>
<status starttime="20170707 21:19:20.491" status="FAIL" endtime="20170707 21:19:29.139"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.145">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:39.145" status="PASS" endtime="20170707 21:19:39.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:39.146" status="PASS" endtime="20170707 21:19:39.147"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.147">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:39.147" status="PASS" endtime="20170707 21:19:39.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.148">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:39.147" status="PASS" endtime="20170707 21:19:39.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:39.148" status="PASS" endtime="20170707 21:19:39.336"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:39.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.148" status="PASS" endtime="20170707 21:19:39.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.337" status="PASS" endtime="20170707 21:19:39.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.338" status="PASS" endtime="20170707 21:19:39.338"></status>
</kw>
<status starttime="20170707 21:19:39.144" status="PASS" endtime="20170707 21:19:39.338"></status>
</kw>
<status starttime="20170707 21:19:39.144" status="PASS" endtime="20170707 21:19:39.338"></status>
</kw>
<status starttime="20170707 21:19:39.143" status="PASS" endtime="20170707 21:19:39.339"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.339">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:19:39.339" status="PASS" endtime="20170707 21:19:39.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.341">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:39.341" status="PASS" endtime="20170707 21:19:39.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.342">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:39.342" status="PASS" endtime="20170707 21:19:39.342"></status>
</kw>
<status starttime="20170707 21:19:39.341" status="PASS" endtime="20170707 21:19:39.342"></status>
</kw>
<status starttime="20170707 21:19:39.340" status="PASS" endtime="20170707 21:19:39.343"></status>
</kw>
<status starttime="20170707 21:19:39.339" status="PASS" endtime="20170707 21:19:39.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.409">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:19:39.409">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.343" status="PASS" endtime="20170707 21:19:39.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.411">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:39.410" status="PASS" endtime="20170707 21:19:39.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.412">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:39.411" status="PASS" endtime="20170707 21:19:39.412"></status>
</kw>
<status starttime="20170707 21:19:39.411" status="PASS" endtime="20170707 21:19:39.412"></status>
</kw>
<status starttime="20170707 21:19:39.410" status="PASS" endtime="20170707 21:19:39.412"></status>
</kw>
<status starttime="20170707 21:19:39.409" status="PASS" endtime="20170707 21:19:39.412"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.142" status="PASS" endtime="20170707 21:19:39.413"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.413" status="PASS" endtime="20170707 21:19:39.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.414">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:39.414">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:39.414">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:39.414" status="PASS" endtime="20170707 21:19:39.414"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.414">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:19:39.142" status="PASS" endtime="20170707 21:19:39.414"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.415">${host_state} = Off</msg>
<status starttime="20170707 21:19:39.141" status="PASS" endtime="20170707 21:19:39.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170707 21:19:39.415" status="PASS" endtime="20170707 21:19:39.415"></status>
</kw>
<status starttime="20170707 21:19:39.140" status="PASS" endtime="20170707 21:19:39.415"></status>
</kw>
<status starttime="20170707 21:19:20.491" status="PASS" endtime="20170707 21:19:39.415"></status>
</kw>
<status starttime="20170707 21:19:19.437" status="PASS" endtime="20170707 21:19:39.415"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.420">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:39.420" status="PASS" endtime="20170707 21:19:39.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:39.421" status="PASS" endtime="20170707 21:19:39.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.422">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:39.421" status="PASS" endtime="20170707 21:19:39.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:39.422" status="PASS" endtime="20170707 21:19:39.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:39.423" status="PASS" endtime="20170707 21:19:39.717"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.717">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:39.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.423" status="PASS" endtime="20170707 21:19:39.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.718" status="PASS" endtime="20170707 21:19:39.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.718" status="PASS" endtime="20170707 21:19:39.719"></status>
</kw>
<status starttime="20170707 21:19:39.419" status="PASS" endtime="20170707 21:19:39.719"></status>
</kw>
<status starttime="20170707 21:19:39.419" status="PASS" endtime="20170707 21:19:39.719"></status>
</kw>
<status starttime="20170707 21:19:39.418" status="PASS" endtime="20170707 21:19:39.720"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.720">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:19:39.720" status="PASS" endtime="20170707 21:19:39.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.722">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:19:39.722" status="PASS" endtime="20170707 21:19:39.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.723">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:19:39.723" status="PASS" endtime="20170707 21:19:39.724"></status>
</kw>
<status starttime="20170707 21:19:39.723" status="PASS" endtime="20170707 21:19:39.724"></status>
</kw>
<status starttime="20170707 21:19:39.721" status="PASS" endtime="20170707 21:19:39.724"></status>
</kw>
<status starttime="20170707 21:19:39.721" status="PASS" endtime="20170707 21:19:39.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.804">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:19:39.804">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.724" status="PASS" endtime="20170707 21:19:39.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.806">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:39.806" status="PASS" endtime="20170707 21:19:39.806"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.807">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:39.807" status="PASS" endtime="20170707 21:19:39.807"></status>
</kw>
<status starttime="20170707 21:19:39.806" status="PASS" endtime="20170707 21:19:39.807"></status>
</kw>
<status starttime="20170707 21:19:39.805" status="PASS" endtime="20170707 21:19:39.808"></status>
</kw>
<status starttime="20170707 21:19:39.805" status="PASS" endtime="20170707 21:19:39.808"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.417" status="PASS" endtime="20170707 21:19:39.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:39.808" status="PASS" endtime="20170707 21:19:39.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.810">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:39.810">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:39.810">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:39.809" status="PASS" endtime="20170707 21:19:39.810"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.810">${state} = Off</msg>
<status starttime="20170707 21:19:39.417" status="PASS" endtime="20170707 21:19:39.810"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:39.810">${boot_progress} = Off</msg>
<status starttime="20170707 21:19:39.417" status="PASS" endtime="20170707 21:19:39.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170707 21:19:39.811" status="PASS" endtime="20170707 21:19:39.811"></status>
</kw>
<status starttime="20170707 21:19:39.416" status="PASS" endtime="20170707 21:19:39.811"></status>
</kw>
<status starttime="20170707 21:19:39.416" status="PASS" endtime="20170707 21:19:39.811"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.812">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170707 21:19:39.812" status="PASS" endtime="20170707 21:19:39.812"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.813">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 21:19:39.813" status="PASS" endtime="20170707 21:19:39.813"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:39.817">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:39.816" status="PASS" endtime="20170707 21:19:39.817"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.818">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:39.817" status="PASS" endtime="20170707 21:19:39.818"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.818">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:39.818" status="PASS" endtime="20170707 21:19:39.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:39.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:39.818" status="PASS" endtime="20170707 21:19:39.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.038">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:39.820" status="PASS" endtime="20170707 21:19:40.038"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:40.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:40.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.819" status="PASS" endtime="20170707 21:19:40.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.039">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:40.039" status="PASS" endtime="20170707 21:19:40.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:40.040" status="PASS" endtime="20170707 21:19:40.040"></status>
</kw>
<status starttime="20170707 21:19:39.815" status="PASS" endtime="20170707 21:19:40.040"></status>
</kw>
<status starttime="20170707 21:19:39.815" status="PASS" endtime="20170707 21:19:40.040"></status>
</kw>
<status starttime="20170707 21:19:39.814" status="PASS" endtime="20170707 21:19:40.041"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.041">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 21:19:40.041" status="PASS" endtime="20170707 21:19:40.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:40.042" status="PASS" endtime="20170707 21:19:40.042"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 21:19:40.042" status="PASS" endtime="20170707 21:19:40.042"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.044">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status starttime="20170707 21:19:40.043" status="PASS" endtime="20170707 21:19:40.044"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.045">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 21:19:40.045" status="PASS" endtime="20170707 21:19:40.045"></status>
</kw>
<status starttime="20170707 21:19:40.044" status="PASS" endtime="20170707 21:19:40.045"></status>
</kw>
<status starttime="20170707 21:19:40.043" status="PASS" endtime="20170707 21:19:40.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.262">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 21:19:40.262">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:40.046" status="PASS" endtime="20170707 21:19:40.262"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.264">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:40.263" status="PASS" endtime="20170707 21:19:40.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.265">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:40.264" status="PASS" endtime="20170707 21:19:40.265"></status>
</kw>
<status starttime="20170707 21:19:40.264" status="PASS" endtime="20170707 21:19:40.265"></status>
</kw>
<status starttime="20170707 21:19:40.262" status="PASS" endtime="20170707 21:19:40.265"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:40.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:39.813" status="PASS" endtime="20170707 21:19:40.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:40.265" status="PASS" endtime="20170707 21:19:40.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.266">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:40.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:40.267">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:40.266" status="PASS" endtime="20170707 21:19:40.267"></status>
</kw>
<status starttime="20170707 21:19:39.812" status="PASS" endtime="20170707 21:19:40.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 21:19:40.267" status="PASS" endtime="20170707 21:19:40.268"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:40.273">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:40.272" status="PASS" endtime="20170707 21:19:40.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:40.273" status="PASS" endtime="20170707 21:19:40.273"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:40.274" status="PASS" endtime="20170707 21:19:40.274"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:40.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:40.274" status="PASS" endtime="20170707 21:19:40.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:41.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:40.275" status="PASS" endtime="20170707 21:19:41.697"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:41.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:19:41.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:40.275" status="PASS" endtime="20170707 21:19:41.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:41.698">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:41.697" status="PASS" endtime="20170707 21:19:41.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:41.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:41.698" status="PASS" endtime="20170707 21:19:41.698"></status>
</kw>
<status starttime="20170707 21:19:40.272" status="PASS" endtime="20170707 21:19:41.699"></status>
</kw>
<status starttime="20170707 21:19:40.271" status="PASS" endtime="20170707 21:19:41.699"></status>
</kw>
<status starttime="20170707 21:19:40.271" status="PASS" endtime="20170707 21:19:41.699"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:41.699">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:19:41.699" status="PASS" endtime="20170707 21:19:41.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:41.702">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:41.701" status="PASS" endtime="20170707 21:19:41.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:41.703">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:19:41.703" status="PASS" endtime="20170707 21:19:41.703"></status>
</kw>
<status starttime="20170707 21:19:41.702" status="PASS" endtime="20170707 21:19:41.704"></status>
</kw>
<status starttime="20170707 21:19:41.700" status="PASS" endtime="20170707 21:19:41.704"></status>
</kw>
<status starttime="20170707 21:19:41.700" status="PASS" endtime="20170707 21:19:41.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:49.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:19:49.930">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:41.704" status="PASS" endtime="20170707 21:19:49.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:49.932">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:49.931" status="PASS" endtime="20170707 21:19:49.932"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:49.933">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:19:49.932" status="PASS" endtime="20170707 21:19:49.933"></status>
</kw>
<status starttime="20170707 21:19:49.932" status="PASS" endtime="20170707 21:19:49.933"></status>
</kw>
<status starttime="20170707 21:19:49.931" status="PASS" endtime="20170707 21:19:49.933"></status>
</kw>
<status starttime="20170707 21:19:49.930" status="PASS" endtime="20170707 21:19:49.933"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:49.933">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:40.270" status="PASS" endtime="20170707 21:19:49.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:49.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:19:49.934" status="PASS" endtime="20170707 21:19:49.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:49.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:19:49.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:19:49.935">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:19:49.934" status="PASS" endtime="20170707 21:19:49.935"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:49.935">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:19:40.269" status="PASS" endtime="20170707 21:19:49.935"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:19:49.935">${host_state} = Off</msg>
<status starttime="20170707 21:19:40.269" status="PASS" endtime="20170707 21:19:49.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:19:49.936">Running != Off</msg>
<status starttime="20170707 21:19:49.936" status="FAIL" endtime="20170707 21:19:49.936"></status>
</kw>
<status starttime="20170707 21:19:40.268" status="FAIL" endtime="20170707 21:19:49.936"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:19:59.941">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:19:59.941" status="PASS" endtime="20170707 21:19:59.942"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:59.942">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:19:59.942" status="PASS" endtime="20170707 21:19:59.942"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:59.943">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:19:59.943" status="PASS" endtime="20170707 21:19:59.943"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:19:59.944">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:19:59.944" status="PASS" endtime="20170707 21:19:59.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:19:59.945" status="PASS" endtime="20170707 21:20:01.284"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:01.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:01.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:59.944" status="PASS" endtime="20170707 21:20:01.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:01.284" status="PASS" endtime="20170707 21:20:01.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:01.285" status="PASS" endtime="20170707 21:20:01.286"></status>
</kw>
<status starttime="20170707 21:19:59.940" status="PASS" endtime="20170707 21:20:01.286"></status>
</kw>
<status starttime="20170707 21:19:59.940" status="PASS" endtime="20170707 21:20:01.286"></status>
</kw>
<status starttime="20170707 21:19:59.939" status="PASS" endtime="20170707 21:20:01.286"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:01.286">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:20:01.286" status="PASS" endtime="20170707 21:20:01.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:01.289">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:20:01.288" status="PASS" endtime="20170707 21:20:01.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.290">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:20:01.289" status="PASS" endtime="20170707 21:20:01.290"></status>
</kw>
<status starttime="20170707 21:20:01.289" status="PASS" endtime="20170707 21:20:01.290"></status>
</kw>
<status starttime="20170707 21:20:01.287" status="PASS" endtime="20170707 21:20:01.290"></status>
</kw>
<status starttime="20170707 21:20:01.287" status="PASS" endtime="20170707 21:20:01.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:01.905">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:01.905">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:01.290" status="PASS" endtime="20170707 21:20:01.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:01.908">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:01.907" status="PASS" endtime="20170707 21:20:01.908"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.909">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:01.908" status="PASS" endtime="20170707 21:20:01.909"></status>
</kw>
<status starttime="20170707 21:20:01.908" status="PASS" endtime="20170707 21:20:01.909"></status>
</kw>
<status starttime="20170707 21:20:01.907" status="PASS" endtime="20170707 21:20:01.909"></status>
</kw>
<status starttime="20170707 21:20:01.906" status="PASS" endtime="20170707 21:20:01.909"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:01.909">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:19:59.939" status="PASS" endtime="20170707 21:20:01.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:01.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:01.909" status="PASS" endtime="20170707 21:20:01.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:01.910">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:01.910">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:01.911">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:01.910" status="PASS" endtime="20170707 21:20:01.911"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:01.911">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:19:59.938" status="PASS" endtime="20170707 21:20:01.911"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:01.911">${host_state} = Off</msg>
<status starttime="20170707 21:19:59.938" status="PASS" endtime="20170707 21:20:01.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:01.912">Running != Off</msg>
<status starttime="20170707 21:20:01.911" status="FAIL" endtime="20170707 21:20:01.912"></status>
</kw>
<status starttime="20170707 21:19:59.937" status="FAIL" endtime="20170707 21:20:01.912"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:11.917">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:11.917" status="PASS" endtime="20170707 21:20:11.918"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:11.918">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:11.918" status="PASS" endtime="20170707 21:20:11.918"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:11.919">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:11.919" status="PASS" endtime="20170707 21:20:11.919"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:11.920">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:11.919" status="PASS" endtime="20170707 21:20:11.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:11.920" status="PASS" endtime="20170707 21:20:12.138"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:12.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:11.920" status="PASS" endtime="20170707 21:20:12.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.138" status="PASS" endtime="20170707 21:20:12.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.139" status="PASS" endtime="20170707 21:20:12.139"></status>
</kw>
<status starttime="20170707 21:20:11.917" status="PASS" endtime="20170707 21:20:12.140"></status>
</kw>
<status starttime="20170707 21:20:11.916" status="PASS" endtime="20170707 21:20:12.140"></status>
</kw>
<status starttime="20170707 21:20:11.915" status="PASS" endtime="20170707 21:20:12.140"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.140">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:20:12.140" status="PASS" endtime="20170707 21:20:12.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.143">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:20:12.142" status="PASS" endtime="20170707 21:20:12.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.143">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:20:12.143" status="PASS" endtime="20170707 21:20:12.144"></status>
</kw>
<status starttime="20170707 21:20:12.143" status="PASS" endtime="20170707 21:20:12.144"></status>
</kw>
<status starttime="20170707 21:20:12.141" status="PASS" endtime="20170707 21:20:12.144"></status>
</kw>
<status starttime="20170707 21:20:12.141" status="PASS" endtime="20170707 21:20:12.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.264">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:12.264">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:12.144" status="PASS" endtime="20170707 21:20:12.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.266">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:12.265" status="PASS" endtime="20170707 21:20:12.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.267">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:12.267" status="PASS" endtime="20170707 21:20:12.267"></status>
</kw>
<status starttime="20170707 21:20:12.266" status="PASS" endtime="20170707 21:20:12.267"></status>
</kw>
<status starttime="20170707 21:20:12.265" status="PASS" endtime="20170707 21:20:12.267"></status>
</kw>
<status starttime="20170707 21:20:12.264" status="PASS" endtime="20170707 21:20:12.267"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.267">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:11.914" status="PASS" endtime="20170707 21:20:12.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.268" status="PASS" endtime="20170707 21:20:12.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.269">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:12.269">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:12.269">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:12.268" status="PASS" endtime="20170707 21:20:12.269"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.269">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:20:11.914" status="PASS" endtime="20170707 21:20:12.269"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.269">${host_state} = Running</msg>
<status starttime="20170707 21:20:11.913" status="PASS" endtime="20170707 21:20:12.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170707 21:20:12.270" status="PASS" endtime="20170707 21:20:12.270"></status>
</kw>
<status starttime="20170707 21:20:11.913" status="PASS" endtime="20170707 21:20:12.270"></status>
</kw>
<status starttime="20170707 21:19:40.268" status="PASS" endtime="20170707 21:20:12.270"></status>
</kw>
<status starttime="20170707 21:19:39.811" status="PASS" endtime="20170707 21:20:12.270"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.275">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:12.275" status="PASS" endtime="20170707 21:20:12.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:12.276" status="PASS" endtime="20170707 21:20:12.276"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.276">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:12.276" status="PASS" endtime="20170707 21:20:12.277"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.277">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:12.277" status="PASS" endtime="20170707 21:20:12.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:12.278" status="PASS" endtime="20170707 21:20:12.574"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.574">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:12.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:12.277" status="PASS" endtime="20170707 21:20:12.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.574" status="PASS" endtime="20170707 21:20:12.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.575" status="PASS" endtime="20170707 21:20:12.576"></status>
</kw>
<status starttime="20170707 21:20:12.274" status="PASS" endtime="20170707 21:20:12.576"></status>
</kw>
<status starttime="20170707 21:20:12.274" status="PASS" endtime="20170707 21:20:12.576"></status>
</kw>
<status starttime="20170707 21:20:12.273" status="PASS" endtime="20170707 21:20:12.576"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.577">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:20:12.576" status="PASS" endtime="20170707 21:20:12.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.579">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:12.578" status="PASS" endtime="20170707 21:20:12.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.580">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:12.579" status="PASS" endtime="20170707 21:20:12.580"></status>
</kw>
<status starttime="20170707 21:20:12.579" status="PASS" endtime="20170707 21:20:12.580"></status>
</kw>
<status starttime="20170707 21:20:12.578" status="PASS" endtime="20170707 21:20:12.580"></status>
</kw>
<status starttime="20170707 21:20:12.577" status="PASS" endtime="20170707 21:20:12.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.674">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:12.674">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:12.580" status="PASS" endtime="20170707 21:20:12.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.676">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:12.675" status="PASS" endtime="20170707 21:20:12.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.677">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:12.677" status="PASS" endtime="20170707 21:20:12.677"></status>
</kw>
<status starttime="20170707 21:20:12.676" status="PASS" endtime="20170707 21:20:12.677"></status>
</kw>
<status starttime="20170707 21:20:12.675" status="PASS" endtime="20170707 21:20:12.677"></status>
</kw>
<status starttime="20170707 21:20:12.674" status="PASS" endtime="20170707 21:20:12.677"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:12.272" status="PASS" endtime="20170707 21:20:12.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:12.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:12.678" status="PASS" endtime="20170707 21:20:12.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:12.679">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:12.679">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:12.679">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:12.679" status="PASS" endtime="20170707 21:20:12.679"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.679">${state} = Off</msg>
<status starttime="20170707 21:20:12.272" status="PASS" endtime="20170707 21:20:12.679"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:12.680">${boot_progress} = Off</msg>
<status starttime="20170707 21:20:12.271" status="PASS" endtime="20170707 21:20:12.680"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:12.680">Off != FW Progress, Starting OS</msg>
<status starttime="20170707 21:20:12.680" status="FAIL" endtime="20170707 21:20:12.680"></status>
</kw>
<status starttime="20170707 21:20:12.271" status="FAIL" endtime="20170707 21:20:12.680"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:22.688">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:22.687" status="PASS" endtime="20170707 21:20:22.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:22.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:22.688" status="PASS" endtime="20170707 21:20:22.689"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:22.689">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:22.689" status="PASS" endtime="20170707 21:20:22.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:22.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:22.690" status="PASS" endtime="20170707 21:20:22.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:22.691" status="PASS" endtime="20170707 21:20:23.020"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:23.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:23.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:22.690" status="PASS" endtime="20170707 21:20:23.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:23.021" status="PASS" endtime="20170707 21:20:23.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:23.022" status="PASS" endtime="20170707 21:20:23.022"></status>
</kw>
<status starttime="20170707 21:20:22.685" status="PASS" endtime="20170707 21:20:23.022"></status>
</kw>
<status starttime="20170707 21:20:22.684" status="PASS" endtime="20170707 21:20:23.022"></status>
</kw>
<status starttime="20170707 21:20:22.684" status="PASS" endtime="20170707 21:20:23.022"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:23.023">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:20:23.023" status="PASS" endtime="20170707 21:20:23.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:23.025">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:23.024" status="PASS" endtime="20170707 21:20:23.025"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.026">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:23.026" status="PASS" endtime="20170707 21:20:23.026"></status>
</kw>
<status starttime="20170707 21:20:23.025" status="PASS" endtime="20170707 21:20:23.026"></status>
</kw>
<status starttime="20170707 21:20:23.024" status="PASS" endtime="20170707 21:20:23.026"></status>
</kw>
<status starttime="20170707 21:20:23.023" status="PASS" endtime="20170707 21:20:23.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:23.127">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:23.127">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:23.027" status="PASS" endtime="20170707 21:20:23.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:23.130">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:23.129" status="PASS" endtime="20170707 21:20:23.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.131">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:23.131" status="PASS" endtime="20170707 21:20:23.132"></status>
</kw>
<status starttime="20170707 21:20:23.130" status="PASS" endtime="20170707 21:20:23.132"></status>
</kw>
<status starttime="20170707 21:20:23.128" status="PASS" endtime="20170707 21:20:23.132"></status>
</kw>
<status starttime="20170707 21:20:23.128" status="PASS" endtime="20170707 21:20:23.132"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:23.132">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:22.683" status="PASS" endtime="20170707 21:20:23.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:23.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:23.132" status="PASS" endtime="20170707 21:20:23.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:23.133">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:23.133">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:23.134">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:23.133" status="PASS" endtime="20170707 21:20:23.134"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:23.134">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:22.682" status="PASS" endtime="20170707 21:20:23.134"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:23.134">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:22.682" status="PASS" endtime="20170707 21:20:23.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:23.135">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:20:23.134" status="FAIL" endtime="20170707 21:20:23.135"></status>
</kw>
<status starttime="20170707 21:20:22.681" status="FAIL" endtime="20170707 21:20:23.135"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.140">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:33.140" status="PASS" endtime="20170707 21:20:33.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:33.141" status="PASS" endtime="20170707 21:20:33.141"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.142">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:33.141" status="PASS" endtime="20170707 21:20:33.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:33.142" status="PASS" endtime="20170707 21:20:33.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.593">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:33.143" status="PASS" endtime="20170707 21:20:33.593"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:33.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:33.593">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:33.143" status="PASS" endtime="20170707 21:20:33.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.594">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:33.594" status="PASS" endtime="20170707 21:20:33.594"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:33.595" status="PASS" endtime="20170707 21:20:33.595"></status>
</kw>
<status starttime="20170707 21:20:33.139" status="PASS" endtime="20170707 21:20:33.595"></status>
</kw>
<status starttime="20170707 21:20:33.139" status="PASS" endtime="20170707 21:20:33.595"></status>
</kw>
<status starttime="20170707 21:20:33.138" status="PASS" endtime="20170707 21:20:33.595"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.596">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:20:33.596" status="PASS" endtime="20170707 21:20:33.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.599">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:33.598" status="PASS" endtime="20170707 21:20:33.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.599">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:33.599" status="PASS" endtime="20170707 21:20:33.600"></status>
</kw>
<status starttime="20170707 21:20:33.599" status="PASS" endtime="20170707 21:20:33.600"></status>
</kw>
<status starttime="20170707 21:20:33.597" status="PASS" endtime="20170707 21:20:33.600"></status>
</kw>
<status starttime="20170707 21:20:33.596" status="PASS" endtime="20170707 21:20:33.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.697">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:33.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:33.600" status="PASS" endtime="20170707 21:20:33.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.699">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:33.699" status="PASS" endtime="20170707 21:20:33.699"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.700">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:33.700" status="PASS" endtime="20170707 21:20:33.700"></status>
</kw>
<status starttime="20170707 21:20:33.700" status="PASS" endtime="20170707 21:20:33.701"></status>
</kw>
<status starttime="20170707 21:20:33.698" status="PASS" endtime="20170707 21:20:33.701"></status>
</kw>
<status starttime="20170707 21:20:33.698" status="PASS" endtime="20170707 21:20:33.701"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:33.701">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:33.137" status="PASS" endtime="20170707 21:20:33.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:33.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:33.701" status="PASS" endtime="20170707 21:20:33.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:33.702">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:33.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:33.702">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:33.702" status="PASS" endtime="20170707 21:20:33.702"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:33.703">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:33.137" status="PASS" endtime="20170707 21:20:33.703"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:33.703">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:33.136" status="PASS" endtime="20170707 21:20:33.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:33.704">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:20:33.703" status="FAIL" endtime="20170707 21:20:33.704"></status>
</kw>
<status starttime="20170707 21:20:33.136" status="FAIL" endtime="20170707 21:20:33.704"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:43.709">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:43.708" status="PASS" endtime="20170707 21:20:43.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:43.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:43.710" status="PASS" endtime="20170707 21:20:43.710"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:43.711">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:43.711" status="PASS" endtime="20170707 21:20:43.711"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:43.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:43.711" status="PASS" endtime="20170707 21:20:43.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:43.712" status="PASS" endtime="20170707 21:20:44.021"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:44.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:44.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:43.712" status="PASS" endtime="20170707 21:20:44.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:44.022" status="PASS" endtime="20170707 21:20:44.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:44.023" status="PASS" endtime="20170707 21:20:44.023"></status>
</kw>
<status starttime="20170707 21:20:43.708" status="PASS" endtime="20170707 21:20:44.024"></status>
</kw>
<status starttime="20170707 21:20:43.708" status="PASS" endtime="20170707 21:20:44.024"></status>
</kw>
<status starttime="20170707 21:20:43.707" status="PASS" endtime="20170707 21:20:44.024"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:44.024">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:20:44.024" status="PASS" endtime="20170707 21:20:44.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:44.026">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:44.026" status="PASS" endtime="20170707 21:20:44.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.027">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:44.027" status="PASS" endtime="20170707 21:20:44.027"></status>
</kw>
<status starttime="20170707 21:20:44.027" status="PASS" endtime="20170707 21:20:44.028"></status>
</kw>
<status starttime="20170707 21:20:44.025" status="PASS" endtime="20170707 21:20:44.028"></status>
</kw>
<status starttime="20170707 21:20:44.025" status="PASS" endtime="20170707 21:20:44.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:44.096">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:44.096">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:44.028" status="PASS" endtime="20170707 21:20:44.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:44.098">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:44.098" status="PASS" endtime="20170707 21:20:44.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.099">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:44.099" status="PASS" endtime="20170707 21:20:44.099"></status>
</kw>
<status starttime="20170707 21:20:44.098" status="PASS" endtime="20170707 21:20:44.099"></status>
</kw>
<status starttime="20170707 21:20:44.097" status="PASS" endtime="20170707 21:20:44.099"></status>
</kw>
<status starttime="20170707 21:20:44.097" status="PASS" endtime="20170707 21:20:44.100"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:44.100">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:43.706" status="PASS" endtime="20170707 21:20:44.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:44.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:44.100" status="PASS" endtime="20170707 21:20:44.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:44.101">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:44.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:44.101">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:44.101" status="PASS" endtime="20170707 21:20:44.101"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:44.101">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:43.706" status="PASS" endtime="20170707 21:20:44.102"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:44.102">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:43.705" status="PASS" endtime="20170707 21:20:44.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:44.102">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:20:44.102" status="FAIL" endtime="20170707 21:20:44.103"></status>
</kw>
<status starttime="20170707 21:20:43.705" status="FAIL" endtime="20170707 21:20:44.103"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.109">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:20:54.109" status="PASS" endtime="20170707 21:20:54.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:20:54.110" status="PASS" endtime="20170707 21:20:54.111"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.112">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:20:54.111" status="PASS" endtime="20170707 21:20:54.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:20:54.112" status="PASS" endtime="20170707 21:20:54.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.421">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:20:54.114" status="PASS" endtime="20170707 21:20:54.421"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:54.421">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:20:54.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:54.113" status="PASS" endtime="20170707 21:20:54.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.422">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:54.422" status="PASS" endtime="20170707 21:20:54.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:54.422" status="PASS" endtime="20170707 21:20:54.423"></status>
</kw>
<status starttime="20170707 21:20:54.108" status="PASS" endtime="20170707 21:20:54.423"></status>
</kw>
<status starttime="20170707 21:20:54.107" status="PASS" endtime="20170707 21:20:54.423"></status>
</kw>
<status starttime="20170707 21:20:54.106" status="PASS" endtime="20170707 21:20:54.423"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.424">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:20:54.423" status="PASS" endtime="20170707 21:20:54.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.426">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:54.425" status="PASS" endtime="20170707 21:20:54.426"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.427">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:20:54.426" status="PASS" endtime="20170707 21:20:54.427"></status>
</kw>
<status starttime="20170707 21:20:54.426" status="PASS" endtime="20170707 21:20:54.427"></status>
</kw>
<status starttime="20170707 21:20:54.424" status="PASS" endtime="20170707 21:20:54.427"></status>
</kw>
<status starttime="20170707 21:20:54.424" status="PASS" endtime="20170707 21:20:54.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.494">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:20:54.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:54.427" status="PASS" endtime="20170707 21:20:54.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.496">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:54.496" status="PASS" endtime="20170707 21:20:54.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.497">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:20:54.497" status="PASS" endtime="20170707 21:20:54.497"></status>
</kw>
<status starttime="20170707 21:20:54.496" status="PASS" endtime="20170707 21:20:54.497"></status>
</kw>
<status starttime="20170707 21:20:54.495" status="PASS" endtime="20170707 21:20:54.498"></status>
</kw>
<status starttime="20170707 21:20:54.495" status="PASS" endtime="20170707 21:20:54.498"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:54.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:20:54.106" status="PASS" endtime="20170707 21:20:54.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:20:54.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:20:54.498" status="PASS" endtime="20170707 21:20:54.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:20:54.499">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:20:54.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:20:54.499">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:20:54.499" status="PASS" endtime="20170707 21:20:54.499"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:54.499">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:54.104" status="PASS" endtime="20170707 21:20:54.500"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:20:54.500">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:20:54.104" status="PASS" endtime="20170707 21:20:54.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:20:54.500">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:20:54.500" status="FAIL" endtime="20170707 21:20:54.500"></status>
</kw>
<status starttime="20170707 21:20:54.103" status="FAIL" endtime="20170707 21:20:54.501"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.507">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:21:04.506" status="PASS" endtime="20170707 21:21:04.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.508">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:04.508" status="PASS" endtime="20170707 21:21:04.508"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.508">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:21:04.508" status="PASS" endtime="20170707 21:21:04.509"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:21:04.509" status="PASS" endtime="20170707 21:21:04.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.814">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:21:04.510" status="PASS" endtime="20170707 21:21:04.814"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:04.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:21:04.814">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:04.509" status="PASS" endtime="20170707 21:21:04.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.815">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:04.815" status="PASS" endtime="20170707 21:21:04.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:04.816" status="PASS" endtime="20170707 21:21:04.816"></status>
</kw>
<status starttime="20170707 21:21:04.506" status="PASS" endtime="20170707 21:21:04.816"></status>
</kw>
<status starttime="20170707 21:21:04.505" status="PASS" endtime="20170707 21:21:04.816"></status>
</kw>
<status starttime="20170707 21:21:04.505" status="PASS" endtime="20170707 21:21:04.816"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.817">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:21:04.817" status="PASS" endtime="20170707 21:21:04.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.819">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:04.819" status="PASS" endtime="20170707 21:21:04.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.820">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:04.820" status="PASS" endtime="20170707 21:21:04.820"></status>
</kw>
<status starttime="20170707 21:21:04.819" status="PASS" endtime="20170707 21:21:04.820"></status>
</kw>
<status starttime="20170707 21:21:04.818" status="PASS" endtime="20170707 21:21:04.820"></status>
</kw>
<status starttime="20170707 21:21:04.817" status="PASS" endtime="20170707 21:21:04.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.889">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:21:04.889">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:04.821" status="PASS" endtime="20170707 21:21:04.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.891">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:04.890" status="PASS" endtime="20170707 21:21:04.891"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.892">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:04.892" status="PASS" endtime="20170707 21:21:04.893"></status>
</kw>
<status starttime="20170707 21:21:04.892" status="PASS" endtime="20170707 21:21:04.893"></status>
</kw>
<status starttime="20170707 21:21:04.890" status="PASS" endtime="20170707 21:21:04.893"></status>
</kw>
<status starttime="20170707 21:21:04.889" status="PASS" endtime="20170707 21:21:04.893"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:04.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:04.504" status="PASS" endtime="20170707 21:21:04.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:04.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:04.893" status="PASS" endtime="20170707 21:21:04.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:04.894">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:21:04.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:21:04.894">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:21:04.894" status="PASS" endtime="20170707 21:21:04.894"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:04.895">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:21:04.504" status="PASS" endtime="20170707 21:21:04.895"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:04.895">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:21:04.503" status="PASS" endtime="20170707 21:21:04.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:21:04.896">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:21:04.895" status="FAIL" endtime="20170707 21:21:04.896"></status>
</kw>
<status starttime="20170707 21:21:04.502" status="FAIL" endtime="20170707 21:21:04.896"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:14.902">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:21:14.902" status="PASS" endtime="20170707 21:21:14.902"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:14.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:14.903" status="PASS" endtime="20170707 21:21:14.903"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:14.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:21:14.903" status="PASS" endtime="20170707 21:21:14.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:14.904">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:21:14.904" status="PASS" endtime="20170707 21:21:14.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:21:14.905" status="PASS" endtime="20170707 21:21:15.177"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:15.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:21:15.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:14.905" status="PASS" endtime="20170707 21:21:15.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:15.178" status="PASS" endtime="20170707 21:21:15.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:15.178" status="PASS" endtime="20170707 21:21:15.179"></status>
</kw>
<status starttime="20170707 21:21:14.901" status="PASS" endtime="20170707 21:21:15.179"></status>
</kw>
<status starttime="20170707 21:21:14.900" status="PASS" endtime="20170707 21:21:15.179"></status>
</kw>
<status starttime="20170707 21:21:14.899" status="PASS" endtime="20170707 21:21:15.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:15.180">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:21:15.180" status="PASS" endtime="20170707 21:21:15.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:15.182">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:15.181" status="PASS" endtime="20170707 21:21:15.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.183">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:15.183" status="PASS" endtime="20170707 21:21:15.183"></status>
</kw>
<status starttime="20170707 21:21:15.182" status="PASS" endtime="20170707 21:21:15.184"></status>
</kw>
<status starttime="20170707 21:21:15.181" status="PASS" endtime="20170707 21:21:15.184"></status>
</kw>
<status starttime="20170707 21:21:15.180" status="PASS" endtime="20170707 21:21:15.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:15.298">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:21:15.298">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:15.184" status="PASS" endtime="20170707 21:21:15.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:15.300">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:15.300" status="PASS" endtime="20170707 21:21:15.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.302">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:15.301" status="PASS" endtime="20170707 21:21:15.302"></status>
</kw>
<status starttime="20170707 21:21:15.300" status="PASS" endtime="20170707 21:21:15.302"></status>
</kw>
<status starttime="20170707 21:21:15.299" status="PASS" endtime="20170707 21:21:15.302"></status>
</kw>
<status starttime="20170707 21:21:15.299" status="PASS" endtime="20170707 21:21:15.302"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:15.302">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:14.899" status="PASS" endtime="20170707 21:21:15.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:15.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:15.303" status="PASS" endtime="20170707 21:21:15.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:15.304">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:21:15.304">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:21:15.304">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:21:15.303" status="PASS" endtime="20170707 21:21:15.304"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:15.304">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:21:14.898" status="PASS" endtime="20170707 21:21:15.304"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:15.304">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:21:14.897" status="PASS" endtime="20170707 21:21:15.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:21:15.305">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:21:15.305" status="FAIL" endtime="20170707 21:21:15.305"></status>
</kw>
<status starttime="20170707 21:21:14.897" status="FAIL" endtime="20170707 21:21:15.305"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.310">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:21:25.310" status="PASS" endtime="20170707 21:21:25.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:25.311" status="PASS" endtime="20170707 21:21:25.312"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:21:25.312" status="PASS" endtime="20170707 21:21:25.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:21:25.313" status="PASS" endtime="20170707 21:21:25.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:21:25.314" status="PASS" endtime="20170707 21:21:25.677"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:25.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:21:25.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:25.314" status="PASS" endtime="20170707 21:21:25.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:25.678" status="PASS" endtime="20170707 21:21:25.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:25.679" status="PASS" endtime="20170707 21:21:25.679"></status>
</kw>
<status starttime="20170707 21:21:25.309" status="PASS" endtime="20170707 21:21:25.679"></status>
</kw>
<status starttime="20170707 21:21:25.309" status="PASS" endtime="20170707 21:21:25.679"></status>
</kw>
<status starttime="20170707 21:21:25.308" status="PASS" endtime="20170707 21:21:25.680"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.680">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:21:25.680" status="PASS" endtime="20170707 21:21:25.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.683">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:25.682" status="PASS" endtime="20170707 21:21:25.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.684">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:21:25.683" status="PASS" endtime="20170707 21:21:25.684"></status>
</kw>
<status starttime="20170707 21:21:25.683" status="PASS" endtime="20170707 21:21:25.684"></status>
</kw>
<status starttime="20170707 21:21:25.681" status="PASS" endtime="20170707 21:21:25.684"></status>
</kw>
<status starttime="20170707 21:21:25.680" status="PASS" endtime="20170707 21:21:25.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.771">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:21:25.771">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:25.684" status="PASS" endtime="20170707 21:21:25.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.773">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:25.772" status="PASS" endtime="20170707 21:21:25.773"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.774">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:25.773" status="PASS" endtime="20170707 21:21:25.774"></status>
</kw>
<status starttime="20170707 21:21:25.773" status="PASS" endtime="20170707 21:21:25.774"></status>
</kw>
<status starttime="20170707 21:21:25.772" status="PASS" endtime="20170707 21:21:25.774"></status>
</kw>
<status starttime="20170707 21:21:25.771" status="PASS" endtime="20170707 21:21:25.774"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:25.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:25.308" status="PASS" endtime="20170707 21:21:25.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:25.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:25.775" status="PASS" endtime="20170707 21:21:25.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:25.775">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:21:25.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:21:25.776">${content} = {u'data': u'FW Progress, Starting OS', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:21:25.775" status="PASS" endtime="20170707 21:21:25.776"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:25.776">${state} = FW Progress, Starting OS</msg>
<status starttime="20170707 21:21:25.307" status="PASS" endtime="20170707 21:21:25.776"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:25.776">${boot_progress} = FW Progress, Starting OS</msg>
<status starttime="20170707 21:21:25.307" status="PASS" endtime="20170707 21:21:25.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status starttime="20170707 21:21:25.777" status="PASS" endtime="20170707 21:21:25.777"></status>
</kw>
<status starttime="20170707 21:21:25.306" status="PASS" endtime="20170707 21:21:25.777"></status>
</kw>
<status starttime="20170707 21:20:12.271" status="PASS" endtime="20170707 21:21:25.777"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:55.778">Slept 30 seconds</msg>
<status starttime="20170707 21:21:25.777" status="PASS" endtime="20170707 21:21:55.778"></status>
</kw>
<kw library="utils" name="Flush REST Sessions">
<doc>Removes all the active session objects</doc>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170707 21:21:55.779">Delete All Sessions</msg>
<status starttime="20170707 21:21:55.779" status="PASS" endtime="20170707 21:21:55.782"></status>
</kw>
<status starttime="20170707 21:21:55.779" status="PASS" endtime="20170707 21:21:55.782"></status>
</kw>
<status starttime="20170707 21:19:19.436" status="PASS" endtime="20170707 21:21:55.782"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:55.783">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:55.784">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170707 21:21:55.784" status="PASS" endtime="20170707 21:21:55.784"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:55.785">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 21:21:55.785" status="PASS" endtime="20170707 21:21:55.785"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:55.788">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:21:55.788" status="PASS" endtime="20170707 21:21:55.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:55.789">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:55.789" status="PASS" endtime="20170707 21:21:55.789"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:55.789">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:21:55.789" status="PASS" endtime="20170707 21:21:55.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:55.790">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:21:55.790" status="PASS" endtime="20170707 21:21:55.790"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:21:55.791" status="PASS" endtime="20170707 21:21:56.021"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:56.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:21:56.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:55.790" status="PASS" endtime="20170707 21:21:56.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:56.021" status="PASS" endtime="20170707 21:21:56.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:56.022" status="PASS" endtime="20170707 21:21:56.023"></status>
</kw>
<status starttime="20170707 21:21:55.787" status="PASS" endtime="20170707 21:21:56.023"></status>
</kw>
<status starttime="20170707 21:21:55.787" status="PASS" endtime="20170707 21:21:56.023"></status>
</kw>
<status starttime="20170707 21:21:55.786" status="PASS" endtime="20170707 21:21:56.023"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.024">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 21:21:56.023" status="PASS" endtime="20170707 21:21:56.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:56.024" status="PASS" endtime="20170707 21:21:56.024"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 21:21:56.025" status="PASS" endtime="20170707 21:21:56.025"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.026">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170707 21:21:56.026" status="PASS" endtime="20170707 21:21:56.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.027">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 21:21:56.027" status="PASS" endtime="20170707 21:21:56.027"></status>
</kw>
<status starttime="20170707 21:21:56.026" status="PASS" endtime="20170707 21:21:56.027"></status>
</kw>
<status starttime="20170707 21:21:56.025" status="PASS" endtime="20170707 21:21:56.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.242">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 21:21:56.242">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:56.028" status="PASS" endtime="20170707 21:21:56.242"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.243">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:56.243" status="PASS" endtime="20170707 21:21:56.243"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.244">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:21:56.244" status="PASS" endtime="20170707 21:21:56.245"></status>
</kw>
<status starttime="20170707 21:21:56.244" status="PASS" endtime="20170707 21:21:56.245"></status>
</kw>
<status starttime="20170707 21:21:56.242" status="PASS" endtime="20170707 21:21:56.245"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:56.245">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:55.785" status="PASS" endtime="20170707 21:21:56.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:56.245" status="PASS" endtime="20170707 21:21:56.246"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.246">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:21:56.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:21:56.246">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:21:56.246" status="PASS" endtime="20170707 21:21:56.246"></status>
</kw>
<status starttime="20170707 21:21:55.784" status="PASS" endtime="20170707 21:21:56.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 21:21:56.247" status="PASS" endtime="20170707 21:21:56.247"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.252">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:21:56.252" status="PASS" endtime="20170707 21:21:56.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:21:56.253" status="PASS" endtime="20170707 21:21:56.253"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.254">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:21:56.253" status="PASS" endtime="20170707 21:21:56.254"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:21:56.254" status="PASS" endtime="20170707 21:21:56.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:21:56.255" status="PASS" endtime="20170707 21:21:56.929"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:21:56.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:21:56.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:56.255" status="PASS" endtime="20170707 21:21:56.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:56.930" status="PASS" endtime="20170707 21:21:56.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:21:56.931" status="PASS" endtime="20170707 21:21:56.931"></status>
</kw>
<status starttime="20170707 21:21:56.251" status="PASS" endtime="20170707 21:21:56.931"></status>
</kw>
<status starttime="20170707 21:21:56.250" status="PASS" endtime="20170707 21:21:56.932"></status>
</kw>
<status starttime="20170707 21:21:56.250" status="PASS" endtime="20170707 21:21:56.932"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.932">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:21:56.932" status="PASS" endtime="20170707 21:21:56.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:21:56.935">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:21:56.934" status="PASS" endtime="20170707 21:21:56.935"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:21:56.935">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:21:56.935" status="PASS" endtime="20170707 21:21:56.936"></status>
</kw>
<status starttime="20170707 21:21:56.935" status="PASS" endtime="20170707 21:21:56.936"></status>
</kw>
<status starttime="20170707 21:21:56.933" status="PASS" endtime="20170707 21:21:56.936"></status>
</kw>
<status starttime="20170707 21:21:56.933" status="PASS" endtime="20170707 21:21:56.936"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:04.942">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:04.943">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:56.936" status="PASS" endtime="20170707 21:22:04.943"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:04.945">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:04.944" status="PASS" endtime="20170707 21:22:04.945"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:04.950">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:04.950" status="PASS" endtime="20170707 21:22:04.950"></status>
</kw>
<status starttime="20170707 21:22:04.945" status="PASS" endtime="20170707 21:22:04.950"></status>
</kw>
<status starttime="20170707 21:22:04.944" status="PASS" endtime="20170707 21:22:04.950"></status>
</kw>
<status starttime="20170707 21:22:04.943" status="PASS" endtime="20170707 21:22:04.950"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:04.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:21:56.249" status="PASS" endtime="20170707 21:22:04.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:04.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:04.951" status="PASS" endtime="20170707 21:22:04.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:04.952">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:04.952">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:04.952">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:04.952" status="PASS" endtime="20170707 21:22:04.952"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:04.953">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:21:56.248" status="PASS" endtime="20170707 21:22:04.953"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:04.953">${host_state} = Running</msg>
<status starttime="20170707 21:21:56.248" status="PASS" endtime="20170707 21:22:04.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:22:04.954">Off != Running</msg>
<status starttime="20170707 21:22:04.954" status="FAIL" endtime="20170707 21:22:04.954"></status>
</kw>
<status starttime="20170707 21:21:56.248" status="FAIL" endtime="20170707 21:22:04.954"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:14.960">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:14.960" status="PASS" endtime="20170707 21:22:14.960"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:14.961">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:14.961" status="PASS" endtime="20170707 21:22:14.961"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:14.962">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:14.961" status="PASS" endtime="20170707 21:22:14.962"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:14.962">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:14.962" status="PASS" endtime="20170707 21:22:14.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:14.963" status="PASS" endtime="20170707 21:22:15.439"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:15.439">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:15.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:14.963" status="PASS" endtime="20170707 21:22:15.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.440">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:15.439" status="PASS" endtime="20170707 21:22:15.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:15.440" status="PASS" endtime="20170707 21:22:15.441"></status>
</kw>
<status starttime="20170707 21:22:14.959" status="PASS" endtime="20170707 21:22:15.441"></status>
</kw>
<status starttime="20170707 21:22:14.959" status="PASS" endtime="20170707 21:22:15.441"></status>
</kw>
<status starttime="20170707 21:22:14.958" status="PASS" endtime="20170707 21:22:15.441"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:15.442">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:22:15.442" status="PASS" endtime="20170707 21:22:15.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:15.444">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:15.443" status="PASS" endtime="20170707 21:22:15.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.445">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:15.445" status="PASS" endtime="20170707 21:22:15.445"></status>
</kw>
<status starttime="20170707 21:22:15.444" status="PASS" endtime="20170707 21:22:15.445"></status>
</kw>
<status starttime="20170707 21:22:15.443" status="PASS" endtime="20170707 21:22:15.445"></status>
</kw>
<status starttime="20170707 21:22:15.442" status="PASS" endtime="20170707 21:22:15.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:15.512">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:15.512">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:15.446" status="PASS" endtime="20170707 21:22:15.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:15.514">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:15.513" status="PASS" endtime="20170707 21:22:15.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.515">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:15.515" status="PASS" endtime="20170707 21:22:15.515"></status>
</kw>
<status starttime="20170707 21:22:15.514" status="PASS" endtime="20170707 21:22:15.515"></status>
</kw>
<status starttime="20170707 21:22:15.513" status="PASS" endtime="20170707 21:22:15.515"></status>
</kw>
<status starttime="20170707 21:22:15.512" status="PASS" endtime="20170707 21:22:15.515"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:15.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:14.957" status="PASS" endtime="20170707 21:22:15.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:15.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:15.516" status="PASS" endtime="20170707 21:22:15.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:15.517">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:15.517">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:15.517">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:15.516" status="PASS" endtime="20170707 21:22:15.517"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:15.517">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:22:14.957" status="PASS" endtime="20170707 21:22:15.517"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:15.518">${host_state} = Running</msg>
<status starttime="20170707 21:22:14.956" status="PASS" endtime="20170707 21:22:15.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:22:15.518">Off != Running</msg>
<status starttime="20170707 21:22:15.518" status="FAIL" endtime="20170707 21:22:15.518"></status>
</kw>
<status starttime="20170707 21:22:14.955" status="FAIL" endtime="20170707 21:22:15.518"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.524">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:25.524" status="PASS" endtime="20170707 21:22:25.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:25.525" status="PASS" endtime="20170707 21:22:25.525"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.526">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:25.525" status="PASS" endtime="20170707 21:22:25.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.526">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:25.526" status="PASS" endtime="20170707 21:22:25.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.721">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:25.527" status="PASS" endtime="20170707 21:22:25.721"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:25.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:25.721">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:25.527" status="PASS" endtime="20170707 21:22:25.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:25.722" status="PASS" endtime="20170707 21:22:25.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.723">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:25.722" status="PASS" endtime="20170707 21:22:25.723"></status>
</kw>
<status starttime="20170707 21:22:25.523" status="PASS" endtime="20170707 21:22:25.723"></status>
</kw>
<status starttime="20170707 21:22:25.522" status="PASS" endtime="20170707 21:22:25.723"></status>
</kw>
<status starttime="20170707 21:22:25.521" status="PASS" endtime="20170707 21:22:25.723"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.724">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:22:25.723" status="PASS" endtime="20170707 21:22:25.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.726">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:25.725" status="PASS" endtime="20170707 21:22:25.726"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.727">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:25.726" status="PASS" endtime="20170707 21:22:25.727"></status>
</kw>
<status starttime="20170707 21:22:25.726" status="PASS" endtime="20170707 21:22:25.727"></status>
</kw>
<status starttime="20170707 21:22:25.724" status="PASS" endtime="20170707 21:22:25.727"></status>
</kw>
<status starttime="20170707 21:22:25.724" status="PASS" endtime="20170707 21:22:25.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:25.824">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:25.727" status="PASS" endtime="20170707 21:22:25.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.826">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:25.825" status="PASS" endtime="20170707 21:22:25.826"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.827">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:25.826" status="PASS" endtime="20170707 21:22:25.827"></status>
</kw>
<status starttime="20170707 21:22:25.826" status="PASS" endtime="20170707 21:22:25.827"></status>
</kw>
<status starttime="20170707 21:22:25.825" status="PASS" endtime="20170707 21:22:25.827"></status>
</kw>
<status starttime="20170707 21:22:25.824" status="PASS" endtime="20170707 21:22:25.827"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:25.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:25.521" status="PASS" endtime="20170707 21:22:25.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:25.828" status="PASS" endtime="20170707 21:22:25.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:25.829">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:25.829">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:25.828" status="PASS" endtime="20170707 21:22:25.829"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:25.829">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:22:25.520" status="PASS" endtime="20170707 21:22:25.829"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:25.829">${host_state} = Off</msg>
<status starttime="20170707 21:22:25.520" status="PASS" endtime="20170707 21:22:25.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170707 21:22:25.830" status="PASS" endtime="20170707 21:22:25.830"></status>
</kw>
<status starttime="20170707 21:22:25.519" status="PASS" endtime="20170707 21:22:25.830"></status>
</kw>
<status starttime="20170707 21:21:56.247" status="PASS" endtime="20170707 21:22:25.830"></status>
</kw>
<status starttime="20170707 21:21:55.783" status="PASS" endtime="20170707 21:22:25.830"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:25.835">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:25.835" status="PASS" endtime="20170707 21:22:25.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:25.836" status="PASS" endtime="20170707 21:22:25.836"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:25.836" status="PASS" endtime="20170707 21:22:25.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:25.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:25.837" status="PASS" endtime="20170707 21:22:25.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:25.838" status="PASS" endtime="20170707 21:22:26.110"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:26.110">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:25.837" status="PASS" endtime="20170707 21:22:26.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.110" status="PASS" endtime="20170707 21:22:26.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.111" status="PASS" endtime="20170707 21:22:26.112"></status>
</kw>
<status starttime="20170707 21:22:25.834" status="PASS" endtime="20170707 21:22:26.112"></status>
</kw>
<status starttime="20170707 21:22:25.834" status="PASS" endtime="20170707 21:22:26.112"></status>
</kw>
<status starttime="20170707 21:22:25.833" status="PASS" endtime="20170707 21:22:26.112"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.113">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:22:26.112" status="PASS" endtime="20170707 21:22:26.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.115">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:22:26.114" status="PASS" endtime="20170707 21:22:26.115"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.116">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:22:26.116" status="PASS" endtime="20170707 21:22:26.116"></status>
</kw>
<status starttime="20170707 21:22:26.115" status="PASS" endtime="20170707 21:22:26.116"></status>
</kw>
<status starttime="20170707 21:22:26.113" status="PASS" endtime="20170707 21:22:26.116"></status>
</kw>
<status starttime="20170707 21:22:26.113" status="PASS" endtime="20170707 21:22:26.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.200">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:26.201">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.117" status="PASS" endtime="20170707 21:22:26.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.203">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:26.202" status="PASS" endtime="20170707 21:22:26.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.203">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:26.203" status="PASS" endtime="20170707 21:22:26.204"></status>
</kw>
<status starttime="20170707 21:22:26.203" status="PASS" endtime="20170707 21:22:26.204"></status>
</kw>
<status starttime="20170707 21:22:26.202" status="PASS" endtime="20170707 21:22:26.204"></status>
</kw>
<status starttime="20170707 21:22:26.201" status="PASS" endtime="20170707 21:22:26.204"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:25.833" status="PASS" endtime="20170707 21:22:26.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.204" status="PASS" endtime="20170707 21:22:26.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.206">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:26.206">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:26.206">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:26.205" status="PASS" endtime="20170707 21:22:26.206"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.206">${state} = Off</msg>
<status starttime="20170707 21:22:25.832" status="PASS" endtime="20170707 21:22:26.206"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.207">${boot_progress} = Off</msg>
<status starttime="20170707 21:22:25.831" status="PASS" endtime="20170707 21:22:26.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170707 21:22:26.207" status="PASS" endtime="20170707 21:22:26.207"></status>
</kw>
<status starttime="20170707 21:22:25.831" status="PASS" endtime="20170707 21:22:26.208"></status>
</kw>
<status starttime="20170707 21:22:25.830" status="PASS" endtime="20170707 21:22:26.208"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.209">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170707 21:22:26.209" status="PASS" endtime="20170707 21:22:26.209"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.210">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 21:22:26.210" status="PASS" endtime="20170707 21:22:26.210"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.213">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:26.213" status="PASS" endtime="20170707 21:22:26.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.214">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:26.214" status="PASS" endtime="20170707 21:22:26.214"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:26.214" status="PASS" endtime="20170707 21:22:26.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.215">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:26.215" status="PASS" endtime="20170707 21:22:26.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:26.216" status="PASS" endtime="20170707 21:22:26.410"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:26.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.216" status="PASS" endtime="20170707 21:22:26.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.410" status="PASS" endtime="20170707 21:22:26.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.411" status="PASS" endtime="20170707 21:22:26.412"></status>
</kw>
<status starttime="20170707 21:22:26.212" status="PASS" endtime="20170707 21:22:26.412"></status>
</kw>
<status starttime="20170707 21:22:26.212" status="PASS" endtime="20170707 21:22:26.412"></status>
</kw>
<status starttime="20170707 21:22:26.211" status="PASS" endtime="20170707 21:22:26.413"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.413">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 21:22:26.413" status="PASS" endtime="20170707 21:22:26.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.414">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:26.414" status="PASS" endtime="20170707 21:22:26.414"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 21:22:26.415" status="PASS" endtime="20170707 21:22:26.415"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.417">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status starttime="20170707 21:22:26.416" status="PASS" endtime="20170707 21:22:26.417"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.419">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 21:22:26.418" status="PASS" endtime="20170707 21:22:26.419"></status>
</kw>
<status starttime="20170707 21:22:26.418" status="PASS" endtime="20170707 21:22:26.419"></status>
</kw>
<status starttime="20170707 21:22:26.415" status="PASS" endtime="20170707 21:22:26.419"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.645">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 21:22:26.645">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.419" status="PASS" endtime="20170707 21:22:26.645"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.647">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:26.646" status="PASS" endtime="20170707 21:22:26.647"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.647">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:26.647" status="PASS" endtime="20170707 21:22:26.648"></status>
</kw>
<status starttime="20170707 21:22:26.647" status="PASS" endtime="20170707 21:22:26.648"></status>
</kw>
<status starttime="20170707 21:22:26.645" status="PASS" endtime="20170707 21:22:26.648"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:26.648">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.211" status="PASS" endtime="20170707 21:22:26.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:26.648" status="PASS" endtime="20170707 21:22:26.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.649">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:26.649">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:26.649">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:26.649" status="PASS" endtime="20170707 21:22:26.649"></status>
</kw>
<status starttime="20170707 21:22:26.209" status="PASS" endtime="20170707 21:22:26.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 21:22:26.650" status="PASS" endtime="20170707 21:22:26.650"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:26.655">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:26.654" status="PASS" endtime="20170707 21:22:26.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:26.655" status="PASS" endtime="20170707 21:22:26.656"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.656">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:26.656" status="PASS" endtime="20170707 21:22:26.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:26.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:26.657" status="PASS" endtime="20170707 21:22:26.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:28.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:26.658" status="PASS" endtime="20170707 21:22:28.228"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:28.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:28.228">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.657" status="PASS" endtime="20170707 21:22:28.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:28.229">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:28.228" status="PASS" endtime="20170707 21:22:28.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:28.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:28.229" status="PASS" endtime="20170707 21:22:28.230"></status>
</kw>
<status starttime="20170707 21:22:26.654" status="PASS" endtime="20170707 21:22:28.230"></status>
</kw>
<status starttime="20170707 21:22:26.653" status="PASS" endtime="20170707 21:22:28.230"></status>
</kw>
<status starttime="20170707 21:22:26.653" status="PASS" endtime="20170707 21:22:28.230"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:28.230">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:22:28.230" status="PASS" endtime="20170707 21:22:28.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:28.233">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:28.232" status="PASS" endtime="20170707 21:22:28.233"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:28.234">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:28.233" status="PASS" endtime="20170707 21:22:28.234"></status>
</kw>
<status starttime="20170707 21:22:28.233" status="PASS" endtime="20170707 21:22:28.234"></status>
</kw>
<status starttime="20170707 21:22:28.231" status="PASS" endtime="20170707 21:22:28.234"></status>
</kw>
<status starttime="20170707 21:22:28.231" status="PASS" endtime="20170707 21:22:28.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:35.424">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:35.424">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:28.234" status="PASS" endtime="20170707 21:22:35.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:35.427">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:35.426" status="PASS" endtime="20170707 21:22:35.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:35.427">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:35.427" status="PASS" endtime="20170707 21:22:35.428"></status>
</kw>
<status starttime="20170707 21:22:35.427" status="PASS" endtime="20170707 21:22:35.428"></status>
</kw>
<status starttime="20170707 21:22:35.425" status="PASS" endtime="20170707 21:22:35.428"></status>
</kw>
<status starttime="20170707 21:22:35.425" status="PASS" endtime="20170707 21:22:35.428"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:35.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:26.652" status="PASS" endtime="20170707 21:22:35.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:35.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:35.428" status="PASS" endtime="20170707 21:22:35.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:35.429">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:35.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:35.430">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:35.429" status="PASS" endtime="20170707 21:22:35.430"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:35.430">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:22:26.651" status="PASS" endtime="20170707 21:22:35.430"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:35.430">${host_state} = Off</msg>
<status starttime="20170707 21:22:26.651" status="PASS" endtime="20170707 21:22:35.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:22:35.431">Running != Off</msg>
<status starttime="20170707 21:22:35.431" status="FAIL" endtime="20170707 21:22:35.432"></status>
</kw>
<status starttime="20170707 21:22:26.651" status="FAIL" endtime="20170707 21:22:35.432"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:45.437">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:45.436" status="PASS" endtime="20170707 21:22:45.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:45.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:45.437" status="PASS" endtime="20170707 21:22:45.438"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:45.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:45.438" status="PASS" endtime="20170707 21:22:45.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:45.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:45.439" status="PASS" endtime="20170707 21:22:45.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:46.428">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:45.440" status="PASS" endtime="20170707 21:22:46.428"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:46.428">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:46.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:45.439" status="PASS" endtime="20170707 21:22:46.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:46.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:46.429" status="PASS" endtime="20170707 21:22:46.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:46.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:46.429" status="PASS" endtime="20170707 21:22:46.430"></status>
</kw>
<status starttime="20170707 21:22:45.436" status="PASS" endtime="20170707 21:22:46.430"></status>
</kw>
<status starttime="20170707 21:22:45.435" status="PASS" endtime="20170707 21:22:46.430"></status>
</kw>
<status starttime="20170707 21:22:45.435" status="PASS" endtime="20170707 21:22:46.431"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:46.431">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:22:46.431" status="PASS" endtime="20170707 21:22:46.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:46.433">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:46.433" status="PASS" endtime="20170707 21:22:46.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:46.434">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:46.434" status="PASS" endtime="20170707 21:22:46.434"></status>
</kw>
<status starttime="20170707 21:22:46.433" status="PASS" endtime="20170707 21:22:46.434"></status>
</kw>
<status starttime="20170707 21:22:46.432" status="PASS" endtime="20170707 21:22:46.435"></status>
</kw>
<status starttime="20170707 21:22:46.431" status="PASS" endtime="20170707 21:22:46.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:47.336">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:47.336">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:46.435" status="PASS" endtime="20170707 21:22:47.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:47.338">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:47.338" status="PASS" endtime="20170707 21:22:47.338"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:47.339">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:47.339" status="PASS" endtime="20170707 21:22:47.339"></status>
</kw>
<status starttime="20170707 21:22:47.338" status="PASS" endtime="20170707 21:22:47.339"></status>
</kw>
<status starttime="20170707 21:22:47.337" status="PASS" endtime="20170707 21:22:47.339"></status>
</kw>
<status starttime="20170707 21:22:47.337" status="PASS" endtime="20170707 21:22:47.339"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:47.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:45.434" status="PASS" endtime="20170707 21:22:47.340"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:47.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:47.340" status="PASS" endtime="20170707 21:22:47.340"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:47.341">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:47.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:47.341">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:47.341" status="PASS" endtime="20170707 21:22:47.341"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:47.341">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:22:45.433" status="PASS" endtime="20170707 21:22:47.341"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:47.342">${host_state} = Off</msg>
<status starttime="20170707 21:22:45.433" status="PASS" endtime="20170707 21:22:47.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:22:47.343">Running != Off</msg>
<status starttime="20170707 21:22:47.342" status="FAIL" endtime="20170707 21:22:47.343"></status>
</kw>
<status starttime="20170707 21:22:45.432" status="FAIL" endtime="20170707 21:22:47.343"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.349">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:57.348" status="PASS" endtime="20170707 21:22:57.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:57.349" status="PASS" endtime="20170707 21:22:57.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.350">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:57.350" status="PASS" endtime="20170707 21:22:57.350"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:57.351" status="PASS" endtime="20170707 21:22:57.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.566">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:57.352" status="PASS" endtime="20170707 21:22:57.566"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:57.566">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:57.566">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.351" status="PASS" endtime="20170707 21:22:57.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.567">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:57.567" status="PASS" endtime="20170707 21:22:57.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:57.567" status="PASS" endtime="20170707 21:22:57.568"></status>
</kw>
<status starttime="20170707 21:22:57.347" status="PASS" endtime="20170707 21:22:57.568"></status>
</kw>
<status starttime="20170707 21:22:57.347" status="PASS" endtime="20170707 21:22:57.568"></status>
</kw>
<status starttime="20170707 21:22:57.346" status="PASS" endtime="20170707 21:22:57.568"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.569">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:22:57.568" status="PASS" endtime="20170707 21:22:57.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.572">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:57.571" status="PASS" endtime="20170707 21:22:57.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.573">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:22:57.573" status="PASS" endtime="20170707 21:22:57.574"></status>
</kw>
<status starttime="20170707 21:22:57.572" status="PASS" endtime="20170707 21:22:57.574"></status>
</kw>
<status starttime="20170707 21:22:57.570" status="PASS" endtime="20170707 21:22:57.574"></status>
</kw>
<status starttime="20170707 21:22:57.569" status="PASS" endtime="20170707 21:22:57.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.684">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:57.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.574" status="PASS" endtime="20170707 21:22:57.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.686">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:57.686" status="PASS" endtime="20170707 21:22:57.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.687">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:57.687" status="PASS" endtime="20170707 21:22:57.687"></status>
</kw>
<status starttime="20170707 21:22:57.687" status="PASS" endtime="20170707 21:22:57.687"></status>
</kw>
<status starttime="20170707 21:22:57.685" status="PASS" endtime="20170707 21:22:57.688"></status>
</kw>
<status starttime="20170707 21:22:57.685" status="PASS" endtime="20170707 21:22:57.688"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:57.688">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.345" status="PASS" endtime="20170707 21:22:57.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:57.688" status="PASS" endtime="20170707 21:22:57.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.689">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:57.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:57.689">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:57.689" status="PASS" endtime="20170707 21:22:57.689"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:57.690">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 21:22:57.345" status="PASS" endtime="20170707 21:22:57.690"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:57.690">${host_state} = Running</msg>
<status starttime="20170707 21:22:57.344" status="PASS" endtime="20170707 21:22:57.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170707 21:22:57.690" status="PASS" endtime="20170707 21:22:57.691"></status>
</kw>
<status starttime="20170707 21:22:57.343" status="PASS" endtime="20170707 21:22:57.691"></status>
</kw>
<status starttime="20170707 21:22:26.650" status="PASS" endtime="20170707 21:22:57.691"></status>
</kw>
<status starttime="20170707 21:22:26.208" status="PASS" endtime="20170707 21:22:57.691"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.696">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:22:57.695" status="PASS" endtime="20170707 21:22:57.696"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:22:57.696" status="PASS" endtime="20170707 21:22:57.697"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.698">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:22:57.697" status="PASS" endtime="20170707 21:22:57.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.698">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:22:57.698" status="PASS" endtime="20170707 21:22:57.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.972">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:22:57.700" status="PASS" endtime="20170707 21:22:57.973"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:57.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:22:57.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.699" status="PASS" endtime="20170707 21:22:57.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:57.973" status="PASS" endtime="20170707 21:22:57.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:57.974" status="PASS" endtime="20170707 21:22:57.975"></status>
</kw>
<status starttime="20170707 21:22:57.695" status="PASS" endtime="20170707 21:22:57.975"></status>
</kw>
<status starttime="20170707 21:22:57.694" status="PASS" endtime="20170707 21:22:57.975"></status>
</kw>
<status starttime="20170707 21:22:57.694" status="PASS" endtime="20170707 21:22:57.975"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.976">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:22:57.975" status="PASS" endtime="20170707 21:22:57.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:57.979">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:22:57.978" status="PASS" endtime="20170707 21:22:57.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:57.980">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:22:57.980" status="PASS" endtime="20170707 21:22:57.980"></status>
</kw>
<status starttime="20170707 21:22:57.979" status="PASS" endtime="20170707 21:22:57.980"></status>
</kw>
<status starttime="20170707 21:22:57.977" status="PASS" endtime="20170707 21:22:57.980"></status>
</kw>
<status starttime="20170707 21:22:57.976" status="PASS" endtime="20170707 21:22:57.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:58.064">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:22:58.065">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.981" status="PASS" endtime="20170707 21:22:58.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:58.067">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:58.066" status="PASS" endtime="20170707 21:22:58.067"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:58.068">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:22:58.068" status="PASS" endtime="20170707 21:22:58.068"></status>
</kw>
<status starttime="20170707 21:22:58.067" status="PASS" endtime="20170707 21:22:58.068"></status>
</kw>
<status starttime="20170707 21:22:58.066" status="PASS" endtime="20170707 21:22:58.068"></status>
</kw>
<status starttime="20170707 21:22:58.065" status="PASS" endtime="20170707 21:22:58.068"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:58.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:22:57.693" status="PASS" endtime="20170707 21:22:58.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:22:58.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:22:58.069" status="PASS" endtime="20170707 21:22:58.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:22:58.070">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:22:58.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:22:58.070">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:22:58.069" status="PASS" endtime="20170707 21:22:58.070"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:58.070">${state} = Off</msg>
<status starttime="20170707 21:22:57.693" status="PASS" endtime="20170707 21:22:58.070"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:22:58.070">${boot_progress} = Off</msg>
<status starttime="20170707 21:22:57.692" status="PASS" endtime="20170707 21:22:58.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:22:58.071">Off != FW Progress, Starting OS</msg>
<status starttime="20170707 21:22:58.071" status="FAIL" endtime="20170707 21:22:58.071"></status>
</kw>
<status starttime="20170707 21:22:57.692" status="FAIL" endtime="20170707 21:22:58.072"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.077">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:08.077" status="PASS" endtime="20170707 21:23:08.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:08.078" status="PASS" endtime="20170707 21:23:08.078"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.079">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:08.078" status="PASS" endtime="20170707 21:23:08.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:08.079" status="PASS" endtime="20170707 21:23:08.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:08.083" status="PASS" endtime="20170707 21:23:08.334"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:08.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:23:08.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:08.083" status="PASS" endtime="20170707 21:23:08.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.335">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:08.334" status="PASS" endtime="20170707 21:23:08.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:08.335" status="PASS" endtime="20170707 21:23:08.335"></status>
</kw>
<status starttime="20170707 21:23:08.076" status="PASS" endtime="20170707 21:23:08.336"></status>
</kw>
<status starttime="20170707 21:23:08.076" status="PASS" endtime="20170707 21:23:08.336"></status>
</kw>
<status starttime="20170707 21:23:08.075" status="PASS" endtime="20170707 21:23:08.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.336">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:23:08.336" status="PASS" endtime="20170707 21:23:08.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.338">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:08.338" status="PASS" endtime="20170707 21:23:08.339"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.339">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:08.339" status="PASS" endtime="20170707 21:23:08.339"></status>
</kw>
<status starttime="20170707 21:23:08.339" status="PASS" endtime="20170707 21:23:08.340"></status>
</kw>
<status starttime="20170707 21:23:08.337" status="PASS" endtime="20170707 21:23:08.340"></status>
</kw>
<status starttime="20170707 21:23:08.337" status="PASS" endtime="20170707 21:23:08.340"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.431">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:23:08.431">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:08.340" status="PASS" endtime="20170707 21:23:08.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.433">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:08.432" status="PASS" endtime="20170707 21:23:08.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.434">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:08.434" status="PASS" endtime="20170707 21:23:08.434"></status>
</kw>
<status starttime="20170707 21:23:08.433" status="PASS" endtime="20170707 21:23:08.434"></status>
</kw>
<status starttime="20170707 21:23:08.432" status="PASS" endtime="20170707 21:23:08.434"></status>
</kw>
<status starttime="20170707 21:23:08.431" status="PASS" endtime="20170707 21:23:08.434"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:08.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:08.074" status="PASS" endtime="20170707 21:23:08.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:08.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:08.435" status="PASS" endtime="20170707 21:23:08.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:08.436">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:23:08.436">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:23:08.436">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:23:08.435" status="PASS" endtime="20170707 21:23:08.436"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:08.436">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:08.074" status="PASS" endtime="20170707 21:23:08.436"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:08.436">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:08.073" status="PASS" endtime="20170707 21:23:08.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:23:08.437">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:23:08.437" status="FAIL" endtime="20170707 21:23:08.437"></status>
</kw>
<status starttime="20170707 21:23:08.072" status="FAIL" endtime="20170707 21:23:08.437"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:18.472">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:18.471" status="PASS" endtime="20170707 21:23:18.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:18.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:18.472" status="PASS" endtime="20170707 21:23:18.473"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:18.473">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:18.473" status="PASS" endtime="20170707 21:23:18.473"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:18.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:18.474" status="PASS" endtime="20170707 21:23:18.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:18.866">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:18.475" status="PASS" endtime="20170707 21:23:18.867"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:18.867">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:23:18.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:18.474" status="PASS" endtime="20170707 21:23:18.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:18.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:18.867" status="PASS" endtime="20170707 21:23:18.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:18.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:18.868" status="PASS" endtime="20170707 21:23:18.868"></status>
</kw>
<status starttime="20170707 21:23:18.470" status="PASS" endtime="20170707 21:23:18.868"></status>
</kw>
<status starttime="20170707 21:23:18.470" status="PASS" endtime="20170707 21:23:18.868"></status>
</kw>
<status starttime="20170707 21:23:18.440" status="PASS" endtime="20170707 21:23:18.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:18.869">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:23:18.869" status="PASS" endtime="20170707 21:23:18.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:18.871">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:18.870" status="PASS" endtime="20170707 21:23:18.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:18.873">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:18.872" status="PASS" endtime="20170707 21:23:18.873"></status>
</kw>
<status starttime="20170707 21:23:18.872" status="PASS" endtime="20170707 21:23:18.873"></status>
</kw>
<status starttime="20170707 21:23:18.870" status="PASS" endtime="20170707 21:23:18.873"></status>
</kw>
<status starttime="20170707 21:23:18.869" status="PASS" endtime="20170707 21:23:18.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:19.009">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:23:19.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:18.873" status="PASS" endtime="20170707 21:23:19.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:19.012">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:19.011" status="PASS" endtime="20170707 21:23:19.012"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:19.013">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:19.012" status="PASS" endtime="20170707 21:23:19.013"></status>
</kw>
<status starttime="20170707 21:23:19.012" status="PASS" endtime="20170707 21:23:19.013"></status>
</kw>
<status starttime="20170707 21:23:19.011" status="PASS" endtime="20170707 21:23:19.013"></status>
</kw>
<status starttime="20170707 21:23:19.010" status="PASS" endtime="20170707 21:23:19.013"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:19.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:18.440" status="PASS" endtime="20170707 21:23:19.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:19.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:19.013" status="PASS" endtime="20170707 21:23:19.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:19.014">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:23:19.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:23:19.015">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:23:19.014" status="PASS" endtime="20170707 21:23:19.015"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:19.015">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:18.439" status="PASS" endtime="20170707 21:23:19.015"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:19.015">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:18.439" status="PASS" endtime="20170707 21:23:19.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:23:19.016">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:23:19.015" status="FAIL" endtime="20170707 21:23:19.016"></status>
</kw>
<status starttime="20170707 21:23:18.438" status="FAIL" endtime="20170707 21:23:19.016"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.021">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:29.021" status="PASS" endtime="20170707 21:23:29.022"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:29.022" status="PASS" endtime="20170707 21:23:29.023"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.023">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:29.023" status="PASS" endtime="20170707 21:23:29.023"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.024">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:29.024" status="PASS" endtime="20170707 21:23:29.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.225">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:29.025" status="PASS" endtime="20170707 21:23:29.226"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:29.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:23:29.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:29.025" status="PASS" endtime="20170707 21:23:29.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.226">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:29.226" status="PASS" endtime="20170707 21:23:29.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:29.227" status="PASS" endtime="20170707 21:23:29.227"></status>
</kw>
<status starttime="20170707 21:23:29.020" status="PASS" endtime="20170707 21:23:29.227"></status>
</kw>
<status starttime="20170707 21:23:29.020" status="PASS" endtime="20170707 21:23:29.227"></status>
</kw>
<status starttime="20170707 21:23:29.019" status="PASS" endtime="20170707 21:23:29.228"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.228">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:23:29.228" status="PASS" endtime="20170707 21:23:29.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.231">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:29.230" status="PASS" endtime="20170707 21:23:29.231"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.232">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:29.232" status="PASS" endtime="20170707 21:23:29.232"></status>
</kw>
<status starttime="20170707 21:23:29.231" status="PASS" endtime="20170707 21:23:29.233"></status>
</kw>
<status starttime="20170707 21:23:29.229" status="PASS" endtime="20170707 21:23:29.233"></status>
</kw>
<status starttime="20170707 21:23:29.228" status="PASS" endtime="20170707 21:23:29.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.300">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:23:29.300">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:29.233" status="PASS" endtime="20170707 21:23:29.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.302">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:29.301" status="PASS" endtime="20170707 21:23:29.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.303">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:29.302" status="PASS" endtime="20170707 21:23:29.303"></status>
</kw>
<status starttime="20170707 21:23:29.302" status="PASS" endtime="20170707 21:23:29.303"></status>
</kw>
<status starttime="20170707 21:23:29.301" status="PASS" endtime="20170707 21:23:29.303"></status>
</kw>
<status starttime="20170707 21:23:29.300" status="PASS" endtime="20170707 21:23:29.303"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:29.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:29.019" status="PASS" endtime="20170707 21:23:29.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:29.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:29.304" status="PASS" endtime="20170707 21:23:29.304"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:29.305">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:23:29.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:23:29.305">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:23:29.304" status="PASS" endtime="20170707 21:23:29.305"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:29.305">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:29.018" status="PASS" endtime="20170707 21:23:29.305"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:29.305">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:29.018" status="PASS" endtime="20170707 21:23:29.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:23:29.306">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:23:29.306" status="FAIL" endtime="20170707 21:23:29.306"></status>
</kw>
<status starttime="20170707 21:23:29.017" status="FAIL" endtime="20170707 21:23:29.306"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.312">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:39.311" status="PASS" endtime="20170707 21:23:39.312"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.313">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:39.312" status="PASS" endtime="20170707 21:23:39.313"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.313">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:39.313" status="PASS" endtime="20170707 21:23:39.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:39.314" status="PASS" endtime="20170707 21:23:39.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:39.315" status="PASS" endtime="20170707 21:23:39.510"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:39.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:23:39.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:39.314" status="PASS" endtime="20170707 21:23:39.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:39.510" status="PASS" endtime="20170707 21:23:39.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:39.511" status="PASS" endtime="20170707 21:23:39.511"></status>
</kw>
<status starttime="20170707 21:23:39.311" status="PASS" endtime="20170707 21:23:39.511"></status>
</kw>
<status starttime="20170707 21:23:39.310" status="PASS" endtime="20170707 21:23:39.511"></status>
</kw>
<status starttime="20170707 21:23:39.310" status="PASS" endtime="20170707 21:23:39.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.512">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:23:39.512" status="PASS" endtime="20170707 21:23:39.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.514">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:39.514" status="PASS" endtime="20170707 21:23:39.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.515">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:39.515" status="PASS" endtime="20170707 21:23:39.515"></status>
</kw>
<status starttime="20170707 21:23:39.515" status="PASS" endtime="20170707 21:23:39.516"></status>
</kw>
<status starttime="20170707 21:23:39.513" status="PASS" endtime="20170707 21:23:39.516"></status>
</kw>
<status starttime="20170707 21:23:39.512" status="PASS" endtime="20170707 21:23:39.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.584">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:23:39.584">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:39.516" status="PASS" endtime="20170707 21:23:39.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.586">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:39.585" status="PASS" endtime="20170707 21:23:39.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.587">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:39.587" status="PASS" endtime="20170707 21:23:39.587"></status>
</kw>
<status starttime="20170707 21:23:39.586" status="PASS" endtime="20170707 21:23:39.587"></status>
</kw>
<status starttime="20170707 21:23:39.585" status="PASS" endtime="20170707 21:23:39.587"></status>
</kw>
<status starttime="20170707 21:23:39.584" status="PASS" endtime="20170707 21:23:39.587"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:39.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:39.309" status="PASS" endtime="20170707 21:23:39.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:39.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:39.588" status="PASS" endtime="20170707 21:23:39.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:39.589">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:23:39.589">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:23:39.589">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:23:39.588" status="PASS" endtime="20170707 21:23:39.589"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:39.589">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:39.308" status="PASS" endtime="20170707 21:23:39.589"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:39.589">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:39.308" status="PASS" endtime="20170707 21:23:39.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:23:39.590">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:23:39.590" status="FAIL" endtime="20170707 21:23:39.590"></status>
</kw>
<status starttime="20170707 21:23:39.307" status="FAIL" endtime="20170707 21:23:39.590"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.595">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:49.595" status="PASS" endtime="20170707 21:23:49.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.597">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:49.596" status="PASS" endtime="20170707 21:23:49.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.597">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:49.597" status="PASS" endtime="20170707 21:23:49.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.598">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:49.598" status="PASS" endtime="20170707 21:23:49.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:49.599" status="PASS" endtime="20170707 21:23:49.826"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:49.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:23:49.826">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:49.598" status="PASS" endtime="20170707 21:23:49.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:49.826" status="PASS" endtime="20170707 21:23:49.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:49.827" status="PASS" endtime="20170707 21:23:49.828"></status>
</kw>
<status starttime="20170707 21:23:49.594" status="PASS" endtime="20170707 21:23:49.828"></status>
</kw>
<status starttime="20170707 21:23:49.594" status="PASS" endtime="20170707 21:23:49.828"></status>
</kw>
<status starttime="20170707 21:23:49.593" status="PASS" endtime="20170707 21:23:49.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.828">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:23:49.828" status="PASS" endtime="20170707 21:23:49.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.830">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:49.830" status="PASS" endtime="20170707 21:23:49.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.831">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:23:49.831" status="PASS" endtime="20170707 21:23:49.832"></status>
</kw>
<status starttime="20170707 21:23:49.831" status="PASS" endtime="20170707 21:23:49.832"></status>
</kw>
<status starttime="20170707 21:23:49.829" status="PASS" endtime="20170707 21:23:49.832"></status>
</kw>
<status starttime="20170707 21:23:49.829" status="PASS" endtime="20170707 21:23:49.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.908">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:23:49.909">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:49.832" status="PASS" endtime="20170707 21:23:49.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.910">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:49.910" status="PASS" endtime="20170707 21:23:49.910"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.911">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:23:49.911" status="PASS" endtime="20170707 21:23:49.911"></status>
</kw>
<status starttime="20170707 21:23:49.911" status="PASS" endtime="20170707 21:23:49.912"></status>
</kw>
<status starttime="20170707 21:23:49.909" status="PASS" endtime="20170707 21:23:49.912"></status>
</kw>
<status starttime="20170707 21:23:49.909" status="PASS" endtime="20170707 21:23:49.912"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:49.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:49.592" status="PASS" endtime="20170707 21:23:49.912"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:49.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:23:49.912" status="PASS" endtime="20170707 21:23:49.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:49.913">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:23:49.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:23:49.913">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:23:49.913" status="PASS" endtime="20170707 21:23:49.914"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:49.914">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:49.592" status="PASS" endtime="20170707 21:23:49.914"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:23:49.914">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:49.591" status="PASS" endtime="20170707 21:23:49.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:23:49.915">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:23:49.914" status="FAIL" endtime="20170707 21:23:49.915"></status>
</kw>
<status starttime="20170707 21:23:49.591" status="FAIL" endtime="20170707 21:23:49.915"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:23:59.920">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:23:59.920" status="PASS" endtime="20170707 21:23:59.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:59.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:23:59.921" status="PASS" endtime="20170707 21:23:59.921"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:59.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:23:59.921" status="PASS" endtime="20170707 21:23:59.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:23:59.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:23:59.922" status="PASS" endtime="20170707 21:23:59.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:23:59.923" status="PASS" endtime="20170707 21:24:00.165"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:00.165">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:00.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:59.922" status="PASS" endtime="20170707 21:24:00.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.166">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:00.165" status="PASS" endtime="20170707 21:24:00.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:00.166" status="PASS" endtime="20170707 21:24:00.166"></status>
</kw>
<status starttime="20170707 21:23:59.919" status="PASS" endtime="20170707 21:24:00.167"></status>
</kw>
<status starttime="20170707 21:23:59.918" status="PASS" endtime="20170707 21:24:00.167"></status>
</kw>
<status starttime="20170707 21:23:59.918" status="PASS" endtime="20170707 21:24:00.167"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:00.167">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:00.167" status="PASS" endtime="20170707 21:24:00.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:00.169">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:00.169" status="PASS" endtime="20170707 21:24:00.169"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.170">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:00.170" status="PASS" endtime="20170707 21:24:00.170"></status>
</kw>
<status starttime="20170707 21:24:00.170" status="PASS" endtime="20170707 21:24:00.171"></status>
</kw>
<status starttime="20170707 21:24:00.168" status="PASS" endtime="20170707 21:24:00.171"></status>
</kw>
<status starttime="20170707 21:24:00.168" status="PASS" endtime="20170707 21:24:00.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:00.237">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:00.237">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:00.171" status="PASS" endtime="20170707 21:24:00.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:00.239">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:00.239" status="PASS" endtime="20170707 21:24:00.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.240">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:00.240" status="PASS" endtime="20170707 21:24:00.241"></status>
</kw>
<status starttime="20170707 21:24:00.240" status="PASS" endtime="20170707 21:24:00.241"></status>
</kw>
<status starttime="20170707 21:24:00.238" status="PASS" endtime="20170707 21:24:00.241"></status>
</kw>
<status starttime="20170707 21:24:00.238" status="PASS" endtime="20170707 21:24:00.241"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:00.241">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:23:59.917" status="PASS" endtime="20170707 21:24:00.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:00.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:00.241" status="PASS" endtime="20170707 21:24:00.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:00.242">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:00.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:00.242">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:00.242" status="PASS" endtime="20170707 21:24:00.242"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:00.243">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:59.916" status="PASS" endtime="20170707 21:24:00.243"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:00.243">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:23:59.916" status="PASS" endtime="20170707 21:24:00.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:00.244">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:00.243" status="FAIL" endtime="20170707 21:24:00.244"></status>
</kw>
<status starttime="20170707 21:23:59.915" status="FAIL" endtime="20170707 21:24:00.244"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.249">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:24:10.248" status="PASS" endtime="20170707 21:24:10.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:24:10.249" status="PASS" endtime="20170707 21:24:10.250"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:24:10.250" status="PASS" endtime="20170707 21:24:10.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:24:10.251" status="PASS" endtime="20170707 21:24:10.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:24:10.252" status="PASS" endtime="20170707 21:24:10.493"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:10.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:10.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:10.251" status="PASS" endtime="20170707 21:24:10.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:10.494" status="PASS" endtime="20170707 21:24:10.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:10.494" status="PASS" endtime="20170707 21:24:10.495"></status>
</kw>
<status starttime="20170707 21:24:10.248" status="PASS" endtime="20170707 21:24:10.495"></status>
</kw>
<status starttime="20170707 21:24:10.247" status="PASS" endtime="20170707 21:24:10.495"></status>
</kw>
<status starttime="20170707 21:24:10.247" status="PASS" endtime="20170707 21:24:10.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.496">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:10.496" status="PASS" endtime="20170707 21:24:10.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.498">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:10.497" status="PASS" endtime="20170707 21:24:10.498"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.499">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:10.499" status="PASS" endtime="20170707 21:24:10.499"></status>
</kw>
<status starttime="20170707 21:24:10.498" status="PASS" endtime="20170707 21:24:10.499"></status>
</kw>
<status starttime="20170707 21:24:10.497" status="PASS" endtime="20170707 21:24:10.499"></status>
</kw>
<status starttime="20170707 21:24:10.496" status="PASS" endtime="20170707 21:24:10.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.566">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:10.566">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:10.499" status="PASS" endtime="20170707 21:24:10.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.568">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:10.567" status="PASS" endtime="20170707 21:24:10.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.569">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:10.568" status="PASS" endtime="20170707 21:24:10.569"></status>
</kw>
<status starttime="20170707 21:24:10.568" status="PASS" endtime="20170707 21:24:10.569"></status>
</kw>
<status starttime="20170707 21:24:10.567" status="PASS" endtime="20170707 21:24:10.569"></status>
</kw>
<status starttime="20170707 21:24:10.566" status="PASS" endtime="20170707 21:24:10.569"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:10.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:10.246" status="PASS" endtime="20170707 21:24:10.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:10.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:10.570" status="PASS" endtime="20170707 21:24:10.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:10.571">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:10.571">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:10.571">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:10.570" status="PASS" endtime="20170707 21:24:10.571"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:10.571">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:10.245" status="PASS" endtime="20170707 21:24:10.571"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:10.571">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:10.245" status="PASS" endtime="20170707 21:24:10.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:10.572">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:10.572" status="FAIL" endtime="20170707 21:24:10.572"></status>
</kw>
<status starttime="20170707 21:24:10.244" status="FAIL" endtime="20170707 21:24:10.572"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.578">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:24:20.577" status="PASS" endtime="20170707 21:24:20.578"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:24:20.578" status="PASS" endtime="20170707 21:24:20.579"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.579">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:24:20.579" status="PASS" endtime="20170707 21:24:20.579"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.580">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:24:20.580" status="PASS" endtime="20170707 21:24:20.580"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:24:20.581" status="PASS" endtime="20170707 21:24:20.827"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:20.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:20.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:20.580" status="PASS" endtime="20170707 21:24:20.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:20.827" status="PASS" endtime="20170707 21:24:20.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:20.828" status="PASS" endtime="20170707 21:24:20.829"></status>
</kw>
<status starttime="20170707 21:24:20.576" status="PASS" endtime="20170707 21:24:20.829"></status>
</kw>
<status starttime="20170707 21:24:20.576" status="PASS" endtime="20170707 21:24:20.829"></status>
</kw>
<status starttime="20170707 21:24:20.575" status="PASS" endtime="20170707 21:24:20.829"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.829">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:20.829" status="PASS" endtime="20170707 21:24:20.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.832">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:20.831" status="PASS" endtime="20170707 21:24:20.832"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.833">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:20.832" status="PASS" endtime="20170707 21:24:20.833"></status>
</kw>
<status starttime="20170707 21:24:20.832" status="PASS" endtime="20170707 21:24:20.833"></status>
</kw>
<status starttime="20170707 21:24:20.830" status="PASS" endtime="20170707 21:24:20.833"></status>
</kw>
<status starttime="20170707 21:24:20.830" status="PASS" endtime="20170707 21:24:20.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.899">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:20.899">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:20.833" status="PASS" endtime="20170707 21:24:20.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.901">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:20.901" status="PASS" endtime="20170707 21:24:20.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.902">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:20.902" status="PASS" endtime="20170707 21:24:20.903"></status>
</kw>
<status starttime="20170707 21:24:20.901" status="PASS" endtime="20170707 21:24:20.903"></status>
</kw>
<status starttime="20170707 21:24:20.900" status="PASS" endtime="20170707 21:24:20.903"></status>
</kw>
<status starttime="20170707 21:24:20.900" status="PASS" endtime="20170707 21:24:20.903"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:20.903">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:20.575" status="PASS" endtime="20170707 21:24:20.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:20.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:20.903" status="PASS" endtime="20170707 21:24:20.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:20.904">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:20.904">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:20.905">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:20.904" status="PASS" endtime="20170707 21:24:20.905"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:20.905">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:20.574" status="PASS" endtime="20170707 21:24:20.905"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:20.905">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:20.573" status="PASS" endtime="20170707 21:24:20.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:20.906">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:20.905" status="FAIL" endtime="20170707 21:24:20.906"></status>
</kw>
<status starttime="20170707 21:24:20.573" status="FAIL" endtime="20170707 21:24:20.906"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:30.911">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:24:30.910" status="PASS" endtime="20170707 21:24:30.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:30.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:24:30.912" status="PASS" endtime="20170707 21:24:30.912"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:30.913">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:24:30.912" status="PASS" endtime="20170707 21:24:30.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:30.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:24:30.913" status="PASS" endtime="20170707 21:24:30.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:24:30.914" status="PASS" endtime="20170707 21:24:31.148"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:31.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:31.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:30.914" status="PASS" endtime="20170707 21:24:31.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:31.149" status="PASS" endtime="20170707 21:24:31.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:31.149" status="PASS" endtime="20170707 21:24:31.150"></status>
</kw>
<status starttime="20170707 21:24:30.910" status="PASS" endtime="20170707 21:24:31.150"></status>
</kw>
<status starttime="20170707 21:24:30.909" status="PASS" endtime="20170707 21:24:31.150"></status>
</kw>
<status starttime="20170707 21:24:30.909" status="PASS" endtime="20170707 21:24:31.150"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:31.151">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:31.150" status="PASS" endtime="20170707 21:24:31.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:31.153">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:31.152" status="PASS" endtime="20170707 21:24:31.153"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.154">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:31.153" status="PASS" endtime="20170707 21:24:31.154"></status>
</kw>
<status starttime="20170707 21:24:31.153" status="PASS" endtime="20170707 21:24:31.154"></status>
</kw>
<status starttime="20170707 21:24:31.151" status="PASS" endtime="20170707 21:24:31.154"></status>
</kw>
<status starttime="20170707 21:24:31.151" status="PASS" endtime="20170707 21:24:31.154"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:31.222">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:31.222">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:31.154" status="PASS" endtime="20170707 21:24:31.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:31.224">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:31.223" status="PASS" endtime="20170707 21:24:31.224"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.225">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:31.224" status="PASS" endtime="20170707 21:24:31.225"></status>
</kw>
<status starttime="20170707 21:24:31.224" status="PASS" endtime="20170707 21:24:31.225"></status>
</kw>
<status starttime="20170707 21:24:31.223" status="PASS" endtime="20170707 21:24:31.225"></status>
</kw>
<status starttime="20170707 21:24:31.222" status="PASS" endtime="20170707 21:24:31.225"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:31.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:30.908" status="PASS" endtime="20170707 21:24:31.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:31.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:31.226" status="PASS" endtime="20170707 21:24:31.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:31.227">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:31.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:31.227">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:31.226" status="PASS" endtime="20170707 21:24:31.227"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:31.227">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:30.908" status="PASS" endtime="20170707 21:24:31.227"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:31.227">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:30.907" status="PASS" endtime="20170707 21:24:31.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:31.228">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:31.228" status="FAIL" endtime="20170707 21:24:31.228"></status>
</kw>
<status starttime="20170707 21:24:30.906" status="FAIL" endtime="20170707 21:24:31.228"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.236">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:24:41.235" status="PASS" endtime="20170707 21:24:41.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:24:41.236" status="PASS" endtime="20170707 21:24:41.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:24:41.237" status="PASS" endtime="20170707 21:24:41.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:24:41.238" status="PASS" endtime="20170707 21:24:41.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:24:41.239" status="PASS" endtime="20170707 21:24:41.728"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:41.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:41.729">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:41.238" status="PASS" endtime="20170707 21:24:41.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.729">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:41.729" status="PASS" endtime="20170707 21:24:41.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:41.730" status="PASS" endtime="20170707 21:24:41.730"></status>
</kw>
<status starttime="20170707 21:24:41.233" status="PASS" endtime="20170707 21:24:41.730"></status>
</kw>
<status starttime="20170707 21:24:41.232" status="PASS" endtime="20170707 21:24:41.730"></status>
</kw>
<status starttime="20170707 21:24:41.232" status="PASS" endtime="20170707 21:24:41.730"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.731">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:41.731" status="PASS" endtime="20170707 21:24:41.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.733">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:41.732" status="PASS" endtime="20170707 21:24:41.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.734">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:41.734" status="PASS" endtime="20170707 21:24:41.734"></status>
</kw>
<status starttime="20170707 21:24:41.733" status="PASS" endtime="20170707 21:24:41.734"></status>
</kw>
<status starttime="20170707 21:24:41.732" status="PASS" endtime="20170707 21:24:41.734"></status>
</kw>
<status starttime="20170707 21:24:41.731" status="PASS" endtime="20170707 21:24:41.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.820">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:41.820">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:41.735" status="PASS" endtime="20170707 21:24:41.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.822">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:41.821" status="PASS" endtime="20170707 21:24:41.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.823">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:41.823" status="PASS" endtime="20170707 21:24:41.823"></status>
</kw>
<status starttime="20170707 21:24:41.822" status="PASS" endtime="20170707 21:24:41.823"></status>
</kw>
<status starttime="20170707 21:24:41.821" status="PASS" endtime="20170707 21:24:41.823"></status>
</kw>
<status starttime="20170707 21:24:41.820" status="PASS" endtime="20170707 21:24:41.824"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:41.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:41.231" status="PASS" endtime="20170707 21:24:41.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:41.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:41.824" status="PASS" endtime="20170707 21:24:41.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:41.825">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:41.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:41.825">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:41.825" status="PASS" endtime="20170707 21:24:41.825"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:41.825">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:41.230" status="PASS" endtime="20170707 21:24:41.825"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:41.826">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:41.230" status="PASS" endtime="20170707 21:24:41.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:41.826">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:41.826" status="FAIL" endtime="20170707 21:24:41.826"></status>
</kw>
<status starttime="20170707 21:24:41.229" status="FAIL" endtime="20170707 21:24:41.826"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:51.831">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:24:51.831" status="PASS" endtime="20170707 21:24:51.832"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:51.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:24:51.832" status="PASS" endtime="20170707 21:24:51.832"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:51.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:24:51.833" status="PASS" endtime="20170707 21:24:51.833"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:51.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:24:51.833" status="PASS" endtime="20170707 21:24:51.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:24:51.834" status="PASS" endtime="20170707 21:24:52.032"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:52.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:24:52.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:51.834" status="PASS" endtime="20170707 21:24:52.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:52.033" status="PASS" endtime="20170707 21:24:52.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:52.034" status="PASS" endtime="20170707 21:24:52.034"></status>
</kw>
<status starttime="20170707 21:24:51.830" status="PASS" endtime="20170707 21:24:52.034"></status>
</kw>
<status starttime="20170707 21:24:51.830" status="PASS" endtime="20170707 21:24:52.034"></status>
</kw>
<status starttime="20170707 21:24:51.829" status="PASS" endtime="20170707 21:24:52.034"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:52.035">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:24:52.035" status="PASS" endtime="20170707 21:24:52.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:52.038">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:52.037" status="PASS" endtime="20170707 21:24:52.038"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.039">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:24:52.038" status="PASS" endtime="20170707 21:24:52.039"></status>
</kw>
<status starttime="20170707 21:24:52.038" status="PASS" endtime="20170707 21:24:52.039"></status>
</kw>
<status starttime="20170707 21:24:52.036" status="PASS" endtime="20170707 21:24:52.039"></status>
</kw>
<status starttime="20170707 21:24:52.035" status="PASS" endtime="20170707 21:24:52.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:52.116">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:24:52.117">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:52.039" status="PASS" endtime="20170707 21:24:52.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:52.119">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:52.118" status="PASS" endtime="20170707 21:24:52.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.119">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:24:52.119" status="PASS" endtime="20170707 21:24:52.120"></status>
</kw>
<status starttime="20170707 21:24:52.119" status="PASS" endtime="20170707 21:24:52.120"></status>
</kw>
<status starttime="20170707 21:24:52.118" status="PASS" endtime="20170707 21:24:52.120"></status>
</kw>
<status starttime="20170707 21:24:52.117" status="PASS" endtime="20170707 21:24:52.120"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:52.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:24:51.829" status="PASS" endtime="20170707 21:24:52.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:24:52.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:24:52.120" status="PASS" endtime="20170707 21:24:52.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:24:52.121">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:24:52.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:24:52.122">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:24:52.121" status="PASS" endtime="20170707 21:24:52.122"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:52.122">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:51.828" status="PASS" endtime="20170707 21:24:52.122"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:24:52.122">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:24:51.828" status="PASS" endtime="20170707 21:24:52.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:24:52.123">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:24:52.122" status="FAIL" endtime="20170707 21:24:52.123"></status>
</kw>
<status starttime="20170707 21:24:51.827" status="FAIL" endtime="20170707 21:24:52.123"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.129">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:02.129" status="PASS" endtime="20170707 21:25:02.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:02.130" status="PASS" endtime="20170707 21:25:02.131"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.131">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:02.131" status="PASS" endtime="20170707 21:25:02.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:02.132" status="PASS" endtime="20170707 21:25:02.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:02.133" status="PASS" endtime="20170707 21:25:02.358"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:02.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:02.359">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:02.132" status="PASS" endtime="20170707 21:25:02.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:02.359" status="PASS" endtime="20170707 21:25:02.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:02.360" status="PASS" endtime="20170707 21:25:02.360"></status>
</kw>
<status starttime="20170707 21:25:02.128" status="PASS" endtime="20170707 21:25:02.360"></status>
</kw>
<status starttime="20170707 21:25:02.128" status="PASS" endtime="20170707 21:25:02.360"></status>
</kw>
<status starttime="20170707 21:25:02.127" status="PASS" endtime="20170707 21:25:02.360"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.361">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:02.361" status="PASS" endtime="20170707 21:25:02.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.363">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:02.363" status="PASS" endtime="20170707 21:25:02.363"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.364">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:02.364" status="PASS" endtime="20170707 21:25:02.364"></status>
</kw>
<status starttime="20170707 21:25:02.363" status="PASS" endtime="20170707 21:25:02.364"></status>
</kw>
<status starttime="20170707 21:25:02.362" status="PASS" endtime="20170707 21:25:02.364"></status>
</kw>
<status starttime="20170707 21:25:02.361" status="PASS" endtime="20170707 21:25:02.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.457">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:02.457">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:02.365" status="PASS" endtime="20170707 21:25:02.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.459">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:02.458" status="PASS" endtime="20170707 21:25:02.459"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.460">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:02.460" status="PASS" endtime="20170707 21:25:02.460"></status>
</kw>
<status starttime="20170707 21:25:02.459" status="PASS" endtime="20170707 21:25:02.460"></status>
</kw>
<status starttime="20170707 21:25:02.458" status="PASS" endtime="20170707 21:25:02.460"></status>
</kw>
<status starttime="20170707 21:25:02.458" status="PASS" endtime="20170707 21:25:02.460"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:02.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:02.127" status="PASS" endtime="20170707 21:25:02.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:02.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:02.461" status="PASS" endtime="20170707 21:25:02.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:02.462">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:02.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:02.462">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:02.461" status="PASS" endtime="20170707 21:25:02.462"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:02.462">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:02.126" status="PASS" endtime="20170707 21:25:02.462"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:02.462">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:02.126" status="PASS" endtime="20170707 21:25:02.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:02.463">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:02.463" status="FAIL" endtime="20170707 21:25:02.463"></status>
</kw>
<status starttime="20170707 21:25:02.123" status="FAIL" endtime="20170707 21:25:02.463"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.469">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:12.468" status="PASS" endtime="20170707 21:25:12.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:12.470" status="PASS" endtime="20170707 21:25:12.470"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.470">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:12.470" status="PASS" endtime="20170707 21:25:12.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.471">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:12.471" status="PASS" endtime="20170707 21:25:12.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:12.472" status="PASS" endtime="20170707 21:25:12.730"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:12.730">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:12.730">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:12.471" status="PASS" endtime="20170707 21:25:12.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.731">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:12.730" status="PASS" endtime="20170707 21:25:12.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:12.731" status="PASS" endtime="20170707 21:25:12.732"></status>
</kw>
<status starttime="20170707 21:25:12.468" status="PASS" endtime="20170707 21:25:12.732"></status>
</kw>
<status starttime="20170707 21:25:12.468" status="PASS" endtime="20170707 21:25:12.732"></status>
</kw>
<status starttime="20170707 21:25:12.467" status="PASS" endtime="20170707 21:25:12.732"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.732">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:12.732" status="PASS" endtime="20170707 21:25:12.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.734">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:12.734" status="PASS" endtime="20170707 21:25:12.734"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.735">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:12.735" status="PASS" endtime="20170707 21:25:12.735"></status>
</kw>
<status starttime="20170707 21:25:12.735" status="PASS" endtime="20170707 21:25:12.736"></status>
</kw>
<status starttime="20170707 21:25:12.733" status="PASS" endtime="20170707 21:25:12.736"></status>
</kw>
<status starttime="20170707 21:25:12.733" status="PASS" endtime="20170707 21:25:12.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.828">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:12.828">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:12.736" status="PASS" endtime="20170707 21:25:12.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.830">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:12.829" status="PASS" endtime="20170707 21:25:12.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.831">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:12.830" status="PASS" endtime="20170707 21:25:12.831"></status>
</kw>
<status starttime="20170707 21:25:12.830" status="PASS" endtime="20170707 21:25:12.831"></status>
</kw>
<status starttime="20170707 21:25:12.829" status="PASS" endtime="20170707 21:25:12.831"></status>
</kw>
<status starttime="20170707 21:25:12.828" status="PASS" endtime="20170707 21:25:12.831"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:12.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:12.466" status="PASS" endtime="20170707 21:25:12.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:12.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:12.832" status="PASS" endtime="20170707 21:25:12.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:12.832">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:12.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:12.833">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:12.832" status="PASS" endtime="20170707 21:25:12.833"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:12.833">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:12.465" status="PASS" endtime="20170707 21:25:12.833"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:12.833">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:12.465" status="PASS" endtime="20170707 21:25:12.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:12.834">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:12.833" status="FAIL" endtime="20170707 21:25:12.834"></status>
</kw>
<status starttime="20170707 21:25:12.464" status="FAIL" endtime="20170707 21:25:12.834"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:22.839">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:22.838" status="PASS" endtime="20170707 21:25:22.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:22.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:22.839" status="PASS" endtime="20170707 21:25:22.840"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:22.840">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:22.840" status="PASS" endtime="20170707 21:25:22.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:22.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:22.841" status="PASS" endtime="20170707 21:25:22.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.085">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:22.842" status="PASS" endtime="20170707 21:25:23.085"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:23.086">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:23.086">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:22.841" status="PASS" endtime="20170707 21:25:23.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.086">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:23.086" status="PASS" endtime="20170707 21:25:23.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:23.087" status="PASS" endtime="20170707 21:25:23.087"></status>
</kw>
<status starttime="20170707 21:25:22.838" status="PASS" endtime="20170707 21:25:23.087"></status>
</kw>
<status starttime="20170707 21:25:22.837" status="PASS" endtime="20170707 21:25:23.087"></status>
</kw>
<status starttime="20170707 21:25:22.837" status="PASS" endtime="20170707 21:25:23.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:23.088">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:23.088" status="PASS" endtime="20170707 21:25:23.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:23.091">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:23.090" status="PASS" endtime="20170707 21:25:23.091"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.092">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:23.092" status="PASS" endtime="20170707 21:25:23.092"></status>
</kw>
<status starttime="20170707 21:25:23.091" status="PASS" endtime="20170707 21:25:23.093"></status>
</kw>
<status starttime="20170707 21:25:23.089" status="PASS" endtime="20170707 21:25:23.093"></status>
</kw>
<status starttime="20170707 21:25:23.088" status="PASS" endtime="20170707 21:25:23.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:23.167">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:23.167">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:23.093" status="PASS" endtime="20170707 21:25:23.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:23.169">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:23.168" status="PASS" endtime="20170707 21:25:23.169"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.170">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:23.169" status="PASS" endtime="20170707 21:25:23.170"></status>
</kw>
<status starttime="20170707 21:25:23.169" status="PASS" endtime="20170707 21:25:23.170"></status>
</kw>
<status starttime="20170707 21:25:23.168" status="PASS" endtime="20170707 21:25:23.170"></status>
</kw>
<status starttime="20170707 21:25:23.167" status="PASS" endtime="20170707 21:25:23.170"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:23.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:22.836" status="PASS" endtime="20170707 21:25:23.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:23.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:23.171" status="PASS" endtime="20170707 21:25:23.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:23.172">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:23.172">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:23.172">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:23.171" status="PASS" endtime="20170707 21:25:23.172"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:23.172">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:22.836" status="PASS" endtime="20170707 21:25:23.172"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:23.172">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:22.835" status="PASS" endtime="20170707 21:25:23.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:23.173">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:23.172" status="FAIL" endtime="20170707 21:25:23.173"></status>
</kw>
<status starttime="20170707 21:25:22.835" status="FAIL" endtime="20170707 21:25:23.173"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.179">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:33.178" status="PASS" endtime="20170707 21:25:33.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.180">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:33.179" status="PASS" endtime="20170707 21:25:33.180"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:33.180" status="PASS" endtime="20170707 21:25:33.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:33.181" status="PASS" endtime="20170707 21:25:33.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:33.182" status="PASS" endtime="20170707 21:25:33.436"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:33.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:33.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:33.181" status="PASS" endtime="20170707 21:25:33.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:33.437" status="PASS" endtime="20170707 21:25:33.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:33.438" status="PASS" endtime="20170707 21:25:33.438"></status>
</kw>
<status starttime="20170707 21:25:33.177" status="PASS" endtime="20170707 21:25:33.438"></status>
</kw>
<status starttime="20170707 21:25:33.177" status="PASS" endtime="20170707 21:25:33.438"></status>
</kw>
<status starttime="20170707 21:25:33.176" status="PASS" endtime="20170707 21:25:33.438"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.439">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:33.439" status="PASS" endtime="20170707 21:25:33.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.441">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:33.440" status="PASS" endtime="20170707 21:25:33.441"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.442">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:33.442" status="PASS" endtime="20170707 21:25:33.442"></status>
</kw>
<status starttime="20170707 21:25:33.441" status="PASS" endtime="20170707 21:25:33.442"></status>
</kw>
<status starttime="20170707 21:25:33.440" status="PASS" endtime="20170707 21:25:33.442"></status>
</kw>
<status starttime="20170707 21:25:33.439" status="PASS" endtime="20170707 21:25:33.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.531">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:33.531">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:33.443" status="PASS" endtime="20170707 21:25:33.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.533">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:33.533" status="PASS" endtime="20170707 21:25:33.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.534">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:33.534" status="PASS" endtime="20170707 21:25:33.535"></status>
</kw>
<status starttime="20170707 21:25:33.533" status="PASS" endtime="20170707 21:25:33.535"></status>
</kw>
<status starttime="20170707 21:25:33.532" status="PASS" endtime="20170707 21:25:33.535"></status>
</kw>
<status starttime="20170707 21:25:33.532" status="PASS" endtime="20170707 21:25:33.535"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:33.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:33.175" status="PASS" endtime="20170707 21:25:33.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:33.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:33.535" status="PASS" endtime="20170707 21:25:33.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:33.536">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:33.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:33.537">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:33.536" status="PASS" endtime="20170707 21:25:33.537"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:33.537">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:33.175" status="PASS" endtime="20170707 21:25:33.537"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:33.537">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:33.174" status="PASS" endtime="20170707 21:25:33.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:33.538">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:33.537" status="FAIL" endtime="20170707 21:25:33.538"></status>
</kw>
<status starttime="20170707 21:25:33.174" status="FAIL" endtime="20170707 21:25:33.538"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.543">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:43.543" status="PASS" endtime="20170707 21:25:43.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:43.544" status="PASS" endtime="20170707 21:25:43.544"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.545">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:43.545" status="PASS" endtime="20170707 21:25:43.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:43.545" status="PASS" endtime="20170707 21:25:43.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:43.546" status="PASS" endtime="20170707 21:25:43.747"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:43.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:43.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:43.546" status="PASS" endtime="20170707 21:25:43.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:43.747" status="PASS" endtime="20170707 21:25:43.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:43.748" status="PASS" endtime="20170707 21:25:43.749"></status>
</kw>
<status starttime="20170707 21:25:43.542" status="PASS" endtime="20170707 21:25:43.750"></status>
</kw>
<status starttime="20170707 21:25:43.542" status="PASS" endtime="20170707 21:25:43.750"></status>
</kw>
<status starttime="20170707 21:25:43.541" status="PASS" endtime="20170707 21:25:43.750"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.750">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:43.750" status="PASS" endtime="20170707 21:25:43.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.753">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:43.752" status="PASS" endtime="20170707 21:25:43.753"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.753">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:43.753" status="PASS" endtime="20170707 21:25:43.754"></status>
</kw>
<status starttime="20170707 21:25:43.753" status="PASS" endtime="20170707 21:25:43.754"></status>
</kw>
<status starttime="20170707 21:25:43.751" status="PASS" endtime="20170707 21:25:43.754"></status>
</kw>
<status starttime="20170707 21:25:43.751" status="PASS" endtime="20170707 21:25:43.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.826">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:43.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:43.754" status="PASS" endtime="20170707 21:25:43.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.827">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:43.827" status="PASS" endtime="20170707 21:25:43.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.828">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:43.828" status="PASS" endtime="20170707 21:25:43.829"></status>
</kw>
<status starttime="20170707 21:25:43.828" status="PASS" endtime="20170707 21:25:43.829"></status>
</kw>
<status starttime="20170707 21:25:43.827" status="PASS" endtime="20170707 21:25:43.829"></status>
</kw>
<status starttime="20170707 21:25:43.826" status="PASS" endtime="20170707 21:25:43.829"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:43.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:43.540" status="PASS" endtime="20170707 21:25:43.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:43.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:43.829" status="PASS" endtime="20170707 21:25:43.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:43.831">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:43.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:43.831">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:43.830" status="PASS" endtime="20170707 21:25:43.831"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:43.831">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:43.540" status="PASS" endtime="20170707 21:25:43.831"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:43.831">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:43.539" status="PASS" endtime="20170707 21:25:43.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:43.832">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:43.832" status="FAIL" endtime="20170707 21:25:43.832"></status>
</kw>
<status starttime="20170707 21:25:43.538" status="FAIL" endtime="20170707 21:25:43.832"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:53.838">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:25:53.838" status="PASS" endtime="20170707 21:25:53.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:53.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:25:53.839" status="PASS" endtime="20170707 21:25:53.840"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:53.840">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:25:53.840" status="PASS" endtime="20170707 21:25:53.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:53.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:25:53.840" status="PASS" endtime="20170707 21:25:53.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:25:53.842" status="PASS" endtime="20170707 21:25:54.091"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:54.092">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:25:54.092">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:53.841" status="PASS" endtime="20170707 21:25:54.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:54.092" status="PASS" endtime="20170707 21:25:54.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:54.093" status="PASS" endtime="20170707 21:25:54.093"></status>
</kw>
<status starttime="20170707 21:25:53.837" status="PASS" endtime="20170707 21:25:54.093"></status>
</kw>
<status starttime="20170707 21:25:53.837" status="PASS" endtime="20170707 21:25:54.093"></status>
</kw>
<status starttime="20170707 21:25:53.836" status="PASS" endtime="20170707 21:25:54.094"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:54.094">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:25:54.094" status="PASS" endtime="20170707 21:25:54.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:54.096">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:54.096" status="PASS" endtime="20170707 21:25:54.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.097">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:25:54.097" status="PASS" endtime="20170707 21:25:54.097"></status>
</kw>
<status starttime="20170707 21:25:54.096" status="PASS" endtime="20170707 21:25:54.097"></status>
</kw>
<status starttime="20170707 21:25:54.095" status="PASS" endtime="20170707 21:25:54.097"></status>
</kw>
<status starttime="20170707 21:25:54.094" status="PASS" endtime="20170707 21:25:54.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:54.176">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:25:54.176">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:54.098" status="PASS" endtime="20170707 21:25:54.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:54.178">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:54.177" status="PASS" endtime="20170707 21:25:54.178"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.179">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:25:54.179" status="PASS" endtime="20170707 21:25:54.179"></status>
</kw>
<status starttime="20170707 21:25:54.178" status="PASS" endtime="20170707 21:25:54.179"></status>
</kw>
<status starttime="20170707 21:25:54.177" status="PASS" endtime="20170707 21:25:54.180"></status>
</kw>
<status starttime="20170707 21:25:54.176" status="PASS" endtime="20170707 21:25:54.180"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:54.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:25:53.835" status="PASS" endtime="20170707 21:25:54.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:25:54.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:25:54.180" status="PASS" endtime="20170707 21:25:54.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:25:54.181">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:25:54.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:25:54.181">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:25:54.181" status="PASS" endtime="20170707 21:25:54.181"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:54.182">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:53.834" status="PASS" endtime="20170707 21:25:54.182"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:25:54.182">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:25:53.834" status="PASS" endtime="20170707 21:25:54.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:25:54.183">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:25:54.182" status="FAIL" endtime="20170707 21:25:54.183"></status>
</kw>
<status starttime="20170707 21:25:53.833" status="FAIL" endtime="20170707 21:25:54.183"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.188">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:04.187" status="PASS" endtime="20170707 21:26:04.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:04.188" status="PASS" endtime="20170707 21:26:04.189"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.189">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:04.189" status="PASS" endtime="20170707 21:26:04.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:04.190" status="PASS" endtime="20170707 21:26:04.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:04.191" status="PASS" endtime="20170707 21:26:04.451"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:04.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:04.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:04.190" status="PASS" endtime="20170707 21:26:04.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:04.452" status="PASS" endtime="20170707 21:26:04.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:04.453" status="PASS" endtime="20170707 21:26:04.453"></status>
</kw>
<status starttime="20170707 21:26:04.187" status="PASS" endtime="20170707 21:26:04.453"></status>
</kw>
<status starttime="20170707 21:26:04.186" status="PASS" endtime="20170707 21:26:04.453"></status>
</kw>
<status starttime="20170707 21:26:04.186" status="PASS" endtime="20170707 21:26:04.453"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.454">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:04.454" status="PASS" endtime="20170707 21:26:04.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.456">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:04.455" status="PASS" endtime="20170707 21:26:04.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.457">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:04.457" status="PASS" endtime="20170707 21:26:04.457"></status>
</kw>
<status starttime="20170707 21:26:04.456" status="PASS" endtime="20170707 21:26:04.457"></status>
</kw>
<status starttime="20170707 21:26:04.455" status="PASS" endtime="20170707 21:26:04.457"></status>
</kw>
<status starttime="20170707 21:26:04.454" status="PASS" endtime="20170707 21:26:04.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.533">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:04.533">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:04.458" status="PASS" endtime="20170707 21:26:04.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.535">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:04.534" status="PASS" endtime="20170707 21:26:04.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.536">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:04.535" status="PASS" endtime="20170707 21:26:04.536"></status>
</kw>
<status starttime="20170707 21:26:04.535" status="PASS" endtime="20170707 21:26:04.536"></status>
</kw>
<status starttime="20170707 21:26:04.534" status="PASS" endtime="20170707 21:26:04.536"></status>
</kw>
<status starttime="20170707 21:26:04.533" status="PASS" endtime="20170707 21:26:04.536"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:04.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:04.185" status="PASS" endtime="20170707 21:26:04.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:04.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:04.537" status="PASS" endtime="20170707 21:26:04.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:04.537">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:04.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:04.538">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:04.537" status="PASS" endtime="20170707 21:26:04.538"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:04.538">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:04.184" status="PASS" endtime="20170707 21:26:04.538"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:04.538">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:04.184" status="PASS" endtime="20170707 21:26:04.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:04.539">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:04.538" status="FAIL" endtime="20170707 21:26:04.539"></status>
</kw>
<status starttime="20170707 21:26:04.183" status="FAIL" endtime="20170707 21:26:04.539"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.545">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:14.544" status="PASS" endtime="20170707 21:26:14.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:14.545" status="PASS" endtime="20170707 21:26:14.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.547">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:14.547" status="PASS" endtime="20170707 21:26:14.547"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:14.548" status="PASS" endtime="20170707 21:26:14.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:14.549" status="PASS" endtime="20170707 21:26:14.825"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:14.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:14.826">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:14.548" status="PASS" endtime="20170707 21:26:14.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:14.826" status="PASS" endtime="20170707 21:26:14.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:14.827" status="PASS" endtime="20170707 21:26:14.827"></status>
</kw>
<status starttime="20170707 21:26:14.543" status="PASS" endtime="20170707 21:26:14.827"></status>
</kw>
<status starttime="20170707 21:26:14.543" status="PASS" endtime="20170707 21:26:14.827"></status>
</kw>
<status starttime="20170707 21:26:14.542" status="PASS" endtime="20170707 21:26:14.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.828">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:14.828" status="PASS" endtime="20170707 21:26:14.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.830">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:14.830" status="PASS" endtime="20170707 21:26:14.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.831">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:14.831" status="PASS" endtime="20170707 21:26:14.831"></status>
</kw>
<status starttime="20170707 21:26:14.830" status="PASS" endtime="20170707 21:26:14.831"></status>
</kw>
<status starttime="20170707 21:26:14.829" status="PASS" endtime="20170707 21:26:14.832"></status>
</kw>
<status starttime="20170707 21:26:14.828" status="PASS" endtime="20170707 21:26:14.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.912">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:14.912">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:14.832" status="PASS" endtime="20170707 21:26:14.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.915">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:14.914" status="PASS" endtime="20170707 21:26:14.915"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.916">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:14.915" status="PASS" endtime="20170707 21:26:14.916"></status>
</kw>
<status starttime="20170707 21:26:14.915" status="PASS" endtime="20170707 21:26:14.916"></status>
</kw>
<status starttime="20170707 21:26:14.914" status="PASS" endtime="20170707 21:26:14.916"></status>
</kw>
<status starttime="20170707 21:26:14.913" status="PASS" endtime="20170707 21:26:14.916"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:14.916">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:14.541" status="PASS" endtime="20170707 21:26:14.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:14.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:14.917" status="PASS" endtime="20170707 21:26:14.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:14.918">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:14.918">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:14.918">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:14.917" status="PASS" endtime="20170707 21:26:14.918"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:14.918">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:14.541" status="PASS" endtime="20170707 21:26:14.918"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:14.918">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:14.540" status="PASS" endtime="20170707 21:26:14.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:14.919">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:14.919" status="FAIL" endtime="20170707 21:26:14.919"></status>
</kw>
<status starttime="20170707 21:26:14.540" status="FAIL" endtime="20170707 21:26:14.920"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:24.925">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:24.925" status="PASS" endtime="20170707 21:26:24.925"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:24.926">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:24.926" status="PASS" endtime="20170707 21:26:24.926"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:24.927">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:24.926" status="PASS" endtime="20170707 21:26:24.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:24.927">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:24.927" status="PASS" endtime="20170707 21:26:24.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:24.928" status="PASS" endtime="20170707 21:26:25.148"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:25.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:25.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:24.927" status="PASS" endtime="20170707 21:26:25.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:25.149" status="PASS" endtime="20170707 21:26:25.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:25.150" status="PASS" endtime="20170707 21:26:25.150"></status>
</kw>
<status starttime="20170707 21:26:24.924" status="PASS" endtime="20170707 21:26:25.150"></status>
</kw>
<status starttime="20170707 21:26:24.924" status="PASS" endtime="20170707 21:26:25.150"></status>
</kw>
<status starttime="20170707 21:26:24.923" status="PASS" endtime="20170707 21:26:25.150"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:25.151">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:25.151" status="PASS" endtime="20170707 21:26:25.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:25.154">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:25.153" status="PASS" endtime="20170707 21:26:25.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.155">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:25.154" status="PASS" endtime="20170707 21:26:25.155"></status>
</kw>
<status starttime="20170707 21:26:25.154" status="PASS" endtime="20170707 21:26:25.155"></status>
</kw>
<status starttime="20170707 21:26:25.152" status="PASS" endtime="20170707 21:26:25.155"></status>
</kw>
<status starttime="20170707 21:26:25.151" status="PASS" endtime="20170707 21:26:25.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:25.257">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:25.257">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:25.155" status="PASS" endtime="20170707 21:26:25.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:25.260">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:25.259" status="PASS" endtime="20170707 21:26:25.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.261">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:25.260" status="PASS" endtime="20170707 21:26:25.261"></status>
</kw>
<status starttime="20170707 21:26:25.260" status="PASS" endtime="20170707 21:26:25.261"></status>
</kw>
<status starttime="20170707 21:26:25.259" status="PASS" endtime="20170707 21:26:25.261"></status>
</kw>
<status starttime="20170707 21:26:25.258" status="PASS" endtime="20170707 21:26:25.261"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:25.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:24.922" status="PASS" endtime="20170707 21:26:25.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:25.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:25.261" status="PASS" endtime="20170707 21:26:25.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:25.262">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:25.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:25.263">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:25.262" status="PASS" endtime="20170707 21:26:25.263"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:25.263">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:24.922" status="PASS" endtime="20170707 21:26:25.263"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:25.263">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:24.921" status="PASS" endtime="20170707 21:26:25.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:25.264">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:25.263" status="FAIL" endtime="20170707 21:26:25.264"></status>
</kw>
<status starttime="20170707 21:26:24.920" status="FAIL" endtime="20170707 21:26:25.264"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.273">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:35.273" status="PASS" endtime="20170707 21:26:35.274"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:35.274" status="PASS" endtime="20170707 21:26:35.275"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.276">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:35.275" status="PASS" endtime="20170707 21:26:35.276"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:35.276" status="PASS" endtime="20170707 21:26:35.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:35.277" status="PASS" endtime="20170707 21:26:35.478"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:35.478">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:35.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:35.277" status="PASS" endtime="20170707 21:26:35.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.479">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:35.479" status="PASS" endtime="20170707 21:26:35.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:35.480" status="PASS" endtime="20170707 21:26:35.480"></status>
</kw>
<status starttime="20170707 21:26:35.272" status="PASS" endtime="20170707 21:26:35.480"></status>
</kw>
<status starttime="20170707 21:26:35.272" status="PASS" endtime="20170707 21:26:35.480"></status>
</kw>
<status starttime="20170707 21:26:35.271" status="PASS" endtime="20170707 21:26:35.480"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.481">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:35.481" status="PASS" endtime="20170707 21:26:35.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.483">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:35.483" status="PASS" endtime="20170707 21:26:35.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.484">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:35.484" status="PASS" endtime="20170707 21:26:35.484"></status>
</kw>
<status starttime="20170707 21:26:35.483" status="PASS" endtime="20170707 21:26:35.484"></status>
</kw>
<status starttime="20170707 21:26:35.482" status="PASS" endtime="20170707 21:26:35.484"></status>
</kw>
<status starttime="20170707 21:26:35.481" status="PASS" endtime="20170707 21:26:35.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.583">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:35.584">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:35.485" status="PASS" endtime="20170707 21:26:35.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.586">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:35.585" status="PASS" endtime="20170707 21:26:35.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.587">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:35.587" status="PASS" endtime="20170707 21:26:35.587"></status>
</kw>
<status starttime="20170707 21:26:35.586" status="PASS" endtime="20170707 21:26:35.587"></status>
</kw>
<status starttime="20170707 21:26:35.585" status="PASS" endtime="20170707 21:26:35.587"></status>
</kw>
<status starttime="20170707 21:26:35.584" status="PASS" endtime="20170707 21:26:35.587"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:35.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:35.270" status="PASS" endtime="20170707 21:26:35.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:35.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:35.588" status="PASS" endtime="20170707 21:26:35.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:35.589">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:35.589">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:35.589">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:35.588" status="PASS" endtime="20170707 21:26:35.589"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:35.589">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:35.269" status="PASS" endtime="20170707 21:26:35.589"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:35.589">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:35.269" status="PASS" endtime="20170707 21:26:35.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:35.590">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:35.590" status="FAIL" endtime="20170707 21:26:35.590"></status>
</kw>
<status starttime="20170707 21:26:35.268" status="FAIL" endtime="20170707 21:26:35.590"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:45.596">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:45.596" status="PASS" endtime="20170707 21:26:45.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:45.597">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:45.597" status="PASS" endtime="20170707 21:26:45.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:45.598">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:45.597" status="PASS" endtime="20170707 21:26:45.598"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:45.598">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:45.598" status="PASS" endtime="20170707 21:26:45.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:45.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:45.599" status="PASS" endtime="20170707 21:26:45.865"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:45.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:45.865">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:45.599" status="PASS" endtime="20170707 21:26:45.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:45.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:45.866" status="PASS" endtime="20170707 21:26:45.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:45.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:45.867" status="PASS" endtime="20170707 21:26:45.867"></status>
</kw>
<status starttime="20170707 21:26:45.595" status="PASS" endtime="20170707 21:26:45.867"></status>
</kw>
<status starttime="20170707 21:26:45.595" status="PASS" endtime="20170707 21:26:45.867"></status>
</kw>
<status starttime="20170707 21:26:45.594" status="PASS" endtime="20170707 21:26:45.867"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:45.868">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:45.868" status="PASS" endtime="20170707 21:26:45.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:45.870">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:45.869" status="PASS" endtime="20170707 21:26:45.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:45.871">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:45.871" status="PASS" endtime="20170707 21:26:45.872"></status>
</kw>
<status starttime="20170707 21:26:45.870" status="PASS" endtime="20170707 21:26:45.872"></status>
</kw>
<status starttime="20170707 21:26:45.869" status="PASS" endtime="20170707 21:26:45.872"></status>
</kw>
<status starttime="20170707 21:26:45.868" status="PASS" endtime="20170707 21:26:45.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:46.020">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:46.021">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:45.872" status="PASS" endtime="20170707 21:26:46.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:46.023">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:46.022" status="PASS" endtime="20170707 21:26:46.023"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:46.024">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:46.023" status="PASS" endtime="20170707 21:26:46.024"></status>
</kw>
<status starttime="20170707 21:26:46.023" status="PASS" endtime="20170707 21:26:46.024"></status>
</kw>
<status starttime="20170707 21:26:46.022" status="PASS" endtime="20170707 21:26:46.024"></status>
</kw>
<status starttime="20170707 21:26:46.021" status="PASS" endtime="20170707 21:26:46.024"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:46.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:45.593" status="PASS" endtime="20170707 21:26:46.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:46.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:46.025" status="PASS" endtime="20170707 21:26:46.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:46.025">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:46.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:46.026">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:46.025" status="PASS" endtime="20170707 21:26:46.026"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:46.026">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:45.592" status="PASS" endtime="20170707 21:26:46.026"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:46.026">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:45.592" status="PASS" endtime="20170707 21:26:46.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:46.027">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:46.026" status="FAIL" endtime="20170707 21:26:46.027"></status>
</kw>
<status starttime="20170707 21:26:45.591" status="FAIL" endtime="20170707 21:26:46.027"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.032">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:26:56.032" status="PASS" endtime="20170707 21:26:56.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:26:56.033" status="PASS" endtime="20170707 21:26:56.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.034">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:26:56.033" status="PASS" endtime="20170707 21:26:56.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:26:56.034" status="PASS" endtime="20170707 21:26:56.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:26:56.036" status="PASS" endtime="20170707 21:26:56.285"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:56.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:26:56.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:56.035" status="PASS" endtime="20170707 21:26:56.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:56.286" status="PASS" endtime="20170707 21:26:56.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:56.286" status="PASS" endtime="20170707 21:26:56.287"></status>
</kw>
<status starttime="20170707 21:26:56.031" status="PASS" endtime="20170707 21:26:56.287"></status>
</kw>
<status starttime="20170707 21:26:56.031" status="PASS" endtime="20170707 21:26:56.287"></status>
</kw>
<status starttime="20170707 21:26:56.030" status="PASS" endtime="20170707 21:26:56.288"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.288">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:26:56.288" status="PASS" endtime="20170707 21:26:56.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.290">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:56.290" status="PASS" endtime="20170707 21:26:56.291"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.291">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:26:56.291" status="PASS" endtime="20170707 21:26:56.292"></status>
</kw>
<status starttime="20170707 21:26:56.291" status="PASS" endtime="20170707 21:26:56.292"></status>
</kw>
<status starttime="20170707 21:26:56.289" status="PASS" endtime="20170707 21:26:56.292"></status>
</kw>
<status starttime="20170707 21:26:56.289" status="PASS" endtime="20170707 21:26:56.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.374">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:26:56.374">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:56.292" status="PASS" endtime="20170707 21:26:56.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.376">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:56.376" status="PASS" endtime="20170707 21:26:56.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.377">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:26:56.377" status="PASS" endtime="20170707 21:26:56.377"></status>
</kw>
<status starttime="20170707 21:26:56.377" status="PASS" endtime="20170707 21:26:56.378"></status>
</kw>
<status starttime="20170707 21:26:56.375" status="PASS" endtime="20170707 21:26:56.378"></status>
</kw>
<status starttime="20170707 21:26:56.375" status="PASS" endtime="20170707 21:26:56.378"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:56.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:26:56.029" status="PASS" endtime="20170707 21:26:56.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:26:56.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:26:56.378" status="PASS" endtime="20170707 21:26:56.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:26:56.379">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:26:56.379">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:26:56.379">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:26:56.379" status="PASS" endtime="20170707 21:26:56.379"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:56.380">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:56.029" status="PASS" endtime="20170707 21:26:56.380"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:26:56.380">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:26:56.028" status="PASS" endtime="20170707 21:26:56.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:26:56.381">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:26:56.380" status="FAIL" endtime="20170707 21:26:56.381"></status>
</kw>
<status starttime="20170707 21:26:56.028" status="FAIL" endtime="20170707 21:26:56.381"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.387">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:06.387" status="PASS" endtime="20170707 21:27:06.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:06.388" status="PASS" endtime="20170707 21:27:06.388"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.389">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:06.388" status="PASS" endtime="20170707 21:27:06.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:06.389" status="PASS" endtime="20170707 21:27:06.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:06.390" status="PASS" endtime="20170707 21:27:06.602"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:06.602">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:06.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:06.389" status="PASS" endtime="20170707 21:27:06.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.603">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:06.603" status="PASS" endtime="20170707 21:27:06.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:06.603" status="PASS" endtime="20170707 21:27:06.604"></status>
</kw>
<status starttime="20170707 21:27:06.386" status="PASS" endtime="20170707 21:27:06.604"></status>
</kw>
<status starttime="20170707 21:27:06.386" status="PASS" endtime="20170707 21:27:06.604"></status>
</kw>
<status starttime="20170707 21:27:06.384" status="PASS" endtime="20170707 21:27:06.604"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.605">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:06.605" status="PASS" endtime="20170707 21:27:06.605"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.608">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:06.607" status="PASS" endtime="20170707 21:27:06.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.610">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:06.609" status="PASS" endtime="20170707 21:27:06.610"></status>
</kw>
<status starttime="20170707 21:27:06.609" status="PASS" endtime="20170707 21:27:06.610"></status>
</kw>
<status starttime="20170707 21:27:06.606" status="PASS" endtime="20170707 21:27:06.610"></status>
</kw>
<status starttime="20170707 21:27:06.606" status="PASS" endtime="20170707 21:27:06.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.703">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:06.703">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:06.610" status="PASS" endtime="20170707 21:27:06.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.706">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:06.705" status="PASS" endtime="20170707 21:27:06.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.706">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:06.706" status="PASS" endtime="20170707 21:27:06.707"></status>
</kw>
<status starttime="20170707 21:27:06.706" status="PASS" endtime="20170707 21:27:06.707"></status>
</kw>
<status starttime="20170707 21:27:06.704" status="PASS" endtime="20170707 21:27:06.707"></status>
</kw>
<status starttime="20170707 21:27:06.704" status="PASS" endtime="20170707 21:27:06.707"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:06.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:06.384" status="PASS" endtime="20170707 21:27:06.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:06.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:06.707" status="PASS" endtime="20170707 21:27:06.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:06.708">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:06.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:06.708">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:06.708" status="PASS" endtime="20170707 21:27:06.709"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:06.709">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:06.383" status="PASS" endtime="20170707 21:27:06.709"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:06.709">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:06.382" status="PASS" endtime="20170707 21:27:06.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:06.710">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:06.709" status="FAIL" endtime="20170707 21:27:06.710"></status>
</kw>
<status starttime="20170707 21:27:06.381" status="FAIL" endtime="20170707 21:27:06.710"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:16.715">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:16.715" status="PASS" endtime="20170707 21:27:16.716"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:16.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:16.716" status="PASS" endtime="20170707 21:27:16.716"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:16.717">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:16.717" status="PASS" endtime="20170707 21:27:16.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:16.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:16.717" status="PASS" endtime="20170707 21:27:16.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:16.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:16.718" status="PASS" endtime="20170707 21:27:16.925"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:16.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:16.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:16.718" status="PASS" endtime="20170707 21:27:16.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:16.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:16.925" status="PASS" endtime="20170707 21:27:16.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:16.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:16.926" status="PASS" endtime="20170707 21:27:16.927"></status>
</kw>
<status starttime="20170707 21:27:16.714" status="PASS" endtime="20170707 21:27:16.927"></status>
</kw>
<status starttime="20170707 21:27:16.714" status="PASS" endtime="20170707 21:27:16.927"></status>
</kw>
<status starttime="20170707 21:27:16.713" status="PASS" endtime="20170707 21:27:16.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:16.928">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:16.927" status="PASS" endtime="20170707 21:27:16.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:16.930">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:16.929" status="PASS" endtime="20170707 21:27:16.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:16.931">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:16.931" status="PASS" endtime="20170707 21:27:16.931"></status>
</kw>
<status starttime="20170707 21:27:16.930" status="PASS" endtime="20170707 21:27:16.931"></status>
</kw>
<status starttime="20170707 21:27:16.929" status="PASS" endtime="20170707 21:27:16.931"></status>
</kw>
<status starttime="20170707 21:27:16.928" status="PASS" endtime="20170707 21:27:16.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:17.019">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:17.019">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:16.932" status="PASS" endtime="20170707 21:27:17.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:17.021">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:17.021" status="PASS" endtime="20170707 21:27:17.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:17.022">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:17.022" status="PASS" endtime="20170707 21:27:17.022"></status>
</kw>
<status starttime="20170707 21:27:17.022" status="PASS" endtime="20170707 21:27:17.023"></status>
</kw>
<status starttime="20170707 21:27:17.020" status="PASS" endtime="20170707 21:27:17.023"></status>
</kw>
<status starttime="20170707 21:27:17.020" status="PASS" endtime="20170707 21:27:17.023"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:17.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:16.712" status="PASS" endtime="20170707 21:27:17.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:17.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:17.023" status="PASS" endtime="20170707 21:27:17.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:17.024">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:17.024">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:17.024">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:17.024" status="PASS" endtime="20170707 21:27:17.024"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:17.025">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:16.712" status="PASS" endtime="20170707 21:27:17.025"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:17.025">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:16.711" status="PASS" endtime="20170707 21:27:17.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:17.026">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:17.025" status="FAIL" endtime="20170707 21:27:17.026"></status>
</kw>
<status starttime="20170707 21:27:16.711" status="FAIL" endtime="20170707 21:27:17.026"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.032">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:27.031" status="PASS" endtime="20170707 21:27:27.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:27.033" status="PASS" endtime="20170707 21:27:27.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:27.033" status="PASS" endtime="20170707 21:27:27.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:27.034" status="PASS" endtime="20170707 21:27:27.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:27.035" status="PASS" endtime="20170707 21:27:27.268"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:27.268">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:27.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:27.034" status="PASS" endtime="20170707 21:27:27.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.269">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:27.269" status="PASS" endtime="20170707 21:27:27.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:27.269" status="PASS" endtime="20170707 21:27:27.270"></status>
</kw>
<status starttime="20170707 21:27:27.030" status="PASS" endtime="20170707 21:27:27.270"></status>
</kw>
<status starttime="20170707 21:27:27.030" status="PASS" endtime="20170707 21:27:27.270"></status>
</kw>
<status starttime="20170707 21:27:27.029" status="PASS" endtime="20170707 21:27:27.270"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.271">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:27.270" status="PASS" endtime="20170707 21:27:27.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.273">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:27.272" status="PASS" endtime="20170707 21:27:27.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.274">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:27.274" status="PASS" endtime="20170707 21:27:27.274"></status>
</kw>
<status starttime="20170707 21:27:27.273" status="PASS" endtime="20170707 21:27:27.274"></status>
</kw>
<status starttime="20170707 21:27:27.272" status="PASS" endtime="20170707 21:27:27.274"></status>
</kw>
<status starttime="20170707 21:27:27.271" status="PASS" endtime="20170707 21:27:27.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.346">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:27.346">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:27.275" status="PASS" endtime="20170707 21:27:27.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.348">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:27.347" status="PASS" endtime="20170707 21:27:27.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.351">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:27.350" status="PASS" endtime="20170707 21:27:27.351"></status>
</kw>
<status starttime="20170707 21:27:27.348" status="PASS" endtime="20170707 21:27:27.351"></status>
</kw>
<status starttime="20170707 21:27:27.347" status="PASS" endtime="20170707 21:27:27.351"></status>
</kw>
<status starttime="20170707 21:27:27.346" status="PASS" endtime="20170707 21:27:27.351"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:27.351">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:27.028" status="PASS" endtime="20170707 21:27:27.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:27.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:27.352" status="PASS" endtime="20170707 21:27:27.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:27.353">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:27.353">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:27.353">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:27.352" status="PASS" endtime="20170707 21:27:27.353"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:27.353">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:27.027" status="PASS" endtime="20170707 21:27:27.353"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:27.353">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:27.027" status="PASS" endtime="20170707 21:27:27.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:27.354">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:27.354" status="FAIL" endtime="20170707 21:27:27.354"></status>
</kw>
<status starttime="20170707 21:27:27.026" status="FAIL" endtime="20170707 21:27:27.354"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.359">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:37.359" status="PASS" endtime="20170707 21:27:37.360"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:37.360" status="PASS" endtime="20170707 21:27:37.360"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.361">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:37.361" status="PASS" endtime="20170707 21:27:37.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:37.361" status="PASS" endtime="20170707 21:27:37.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:37.362" status="PASS" endtime="20170707 21:27:37.542"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:37.542">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:37.542">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:37.362" status="PASS" endtime="20170707 21:27:37.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.543">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:37.542" status="PASS" endtime="20170707 21:27:37.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:37.543" status="PASS" endtime="20170707 21:27:37.543"></status>
</kw>
<status starttime="20170707 21:27:37.358" status="PASS" endtime="20170707 21:27:37.544"></status>
</kw>
<status starttime="20170707 21:27:37.358" status="PASS" endtime="20170707 21:27:37.544"></status>
</kw>
<status starttime="20170707 21:27:37.357" status="PASS" endtime="20170707 21:27:37.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.544">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:37.544" status="PASS" endtime="20170707 21:27:37.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.547">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:37.546" status="PASS" endtime="20170707 21:27:37.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.548">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:37.548" status="PASS" endtime="20170707 21:27:37.548"></status>
</kw>
<status starttime="20170707 21:27:37.547" status="PASS" endtime="20170707 21:27:37.548"></status>
</kw>
<status starttime="20170707 21:27:37.545" status="PASS" endtime="20170707 21:27:37.548"></status>
</kw>
<status starttime="20170707 21:27:37.545" status="PASS" endtime="20170707 21:27:37.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.645">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:37.645">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:37.548" status="PASS" endtime="20170707 21:27:37.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.647">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:37.647" status="PASS" endtime="20170707 21:27:37.647"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.648">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:37.648" status="PASS" endtime="20170707 21:27:37.648"></status>
</kw>
<status starttime="20170707 21:27:37.648" status="PASS" endtime="20170707 21:27:37.648"></status>
</kw>
<status starttime="20170707 21:27:37.646" status="PASS" endtime="20170707 21:27:37.649"></status>
</kw>
<status starttime="20170707 21:27:37.646" status="PASS" endtime="20170707 21:27:37.649"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:37.649">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:37.357" status="PASS" endtime="20170707 21:27:37.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:37.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:37.649" status="PASS" endtime="20170707 21:27:37.650"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:37.650">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:37.650">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:37.650">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:37.650" status="PASS" endtime="20170707 21:27:37.650"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:37.651">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:37.356" status="PASS" endtime="20170707 21:27:37.651"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:37.651">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:37.356" status="PASS" endtime="20170707 21:27:37.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:37.652">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:37.651" status="FAIL" endtime="20170707 21:27:37.652"></status>
</kw>
<status starttime="20170707 21:27:37.355" status="FAIL" endtime="20170707 21:27:37.652"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:47.657">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:47.657" status="PASS" endtime="20170707 21:27:47.658"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:47.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:47.659" status="PASS" endtime="20170707 21:27:47.659"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:47.659">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:47.659" status="PASS" endtime="20170707 21:27:47.660"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:47.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:47.660" status="PASS" endtime="20170707 21:27:47.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:47.916">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:47.661" status="PASS" endtime="20170707 21:27:47.916"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:47.917">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:47.917">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:47.660" status="PASS" endtime="20170707 21:27:47.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:47.917">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:47.917" status="PASS" endtime="20170707 21:27:47.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:47.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:47.918" status="PASS" endtime="20170707 21:27:47.918"></status>
</kw>
<status starttime="20170707 21:27:47.656" status="PASS" endtime="20170707 21:27:47.918"></status>
</kw>
<status starttime="20170707 21:27:47.656" status="PASS" endtime="20170707 21:27:47.919"></status>
</kw>
<status starttime="20170707 21:27:47.655" status="PASS" endtime="20170707 21:27:47.919"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:47.919">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:47.919" status="PASS" endtime="20170707 21:27:47.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:47.921">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:47.921" status="PASS" endtime="20170707 21:27:47.921"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:47.922">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:47.922" status="PASS" endtime="20170707 21:27:47.922"></status>
</kw>
<status starttime="20170707 21:27:47.922" status="PASS" endtime="20170707 21:27:47.923"></status>
</kw>
<status starttime="20170707 21:27:47.920" status="PASS" endtime="20170707 21:27:47.923"></status>
</kw>
<status starttime="20170707 21:27:47.920" status="PASS" endtime="20170707 21:27:47.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:48.042">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:48.042">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:47.923" status="PASS" endtime="20170707 21:27:48.042"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:48.044">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:48.043" status="PASS" endtime="20170707 21:27:48.044"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:48.045">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:48.045" status="PASS" endtime="20170707 21:27:48.045"></status>
</kw>
<status starttime="20170707 21:27:48.044" status="PASS" endtime="20170707 21:27:48.045"></status>
</kw>
<status starttime="20170707 21:27:48.043" status="PASS" endtime="20170707 21:27:48.045"></status>
</kw>
<status starttime="20170707 21:27:48.042" status="PASS" endtime="20170707 21:27:48.045"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:48.046">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:47.655" status="PASS" endtime="20170707 21:27:48.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:48.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:48.046" status="PASS" endtime="20170707 21:27:48.046"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:48.047">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:48.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:48.047">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:48.047" status="PASS" endtime="20170707 21:27:48.047"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:48.047">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:47.654" status="PASS" endtime="20170707 21:27:48.047"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:48.048">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:47.654" status="PASS" endtime="20170707 21:27:48.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:48.048">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:48.048" status="FAIL" endtime="20170707 21:27:48.048"></status>
</kw>
<status starttime="20170707 21:27:47.653" status="FAIL" endtime="20170707 21:27:48.049"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.054">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:27:58.054" status="PASS" endtime="20170707 21:27:58.055"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:27:58.055" status="PASS" endtime="20170707 21:27:58.055"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.056">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:27:58.056" status="PASS" endtime="20170707 21:27:58.056"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.057">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:27:58.056" status="PASS" endtime="20170707 21:27:58.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.293">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:27:58.057" status="PASS" endtime="20170707 21:27:58.293"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:58.294">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:27:58.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:58.057" status="PASS" endtime="20170707 21:27:58.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.294">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:58.294" status="PASS" endtime="20170707 21:27:58.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:58.295" status="PASS" endtime="20170707 21:27:58.295"></status>
</kw>
<status starttime="20170707 21:27:58.053" status="PASS" endtime="20170707 21:27:58.295"></status>
</kw>
<status starttime="20170707 21:27:58.053" status="PASS" endtime="20170707 21:27:58.295"></status>
</kw>
<status starttime="20170707 21:27:58.052" status="PASS" endtime="20170707 21:27:58.296"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.296">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:27:58.296" status="PASS" endtime="20170707 21:27:58.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.298">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:58.298" status="PASS" endtime="20170707 21:27:58.298"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.299">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:27:58.299" status="PASS" endtime="20170707 21:27:58.299"></status>
</kw>
<status starttime="20170707 21:27:58.298" status="PASS" endtime="20170707 21:27:58.299"></status>
</kw>
<status starttime="20170707 21:27:58.297" status="PASS" endtime="20170707 21:27:58.300"></status>
</kw>
<status starttime="20170707 21:27:58.296" status="PASS" endtime="20170707 21:27:58.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.370">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:27:58.370">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:58.300" status="PASS" endtime="20170707 21:27:58.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.372">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:58.372" status="PASS" endtime="20170707 21:27:58.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.373">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:27:58.373" status="PASS" endtime="20170707 21:27:58.373"></status>
</kw>
<status starttime="20170707 21:27:58.372" status="PASS" endtime="20170707 21:27:58.373"></status>
</kw>
<status starttime="20170707 21:27:58.371" status="PASS" endtime="20170707 21:27:58.374"></status>
</kw>
<status starttime="20170707 21:27:58.371" status="PASS" endtime="20170707 21:27:58.374"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:58.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:27:58.052" status="PASS" endtime="20170707 21:27:58.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:27:58.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:27:58.374" status="PASS" endtime="20170707 21:27:58.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:27:58.375">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:27:58.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:27:58.375">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:27:58.375" status="PASS" endtime="20170707 21:27:58.375"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:58.376">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:58.050" status="PASS" endtime="20170707 21:27:58.376"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:27:58.376">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:27:58.050" status="PASS" endtime="20170707 21:27:58.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:27:58.376">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:27:58.376" status="FAIL" endtime="20170707 21:27:58.377"></status>
</kw>
<status starttime="20170707 21:27:58.049" status="FAIL" endtime="20170707 21:27:58.377"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.387">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:28:08.386" status="PASS" endtime="20170707 21:28:08.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:28:08.387" status="PASS" endtime="20170707 21:28:08.388"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.388">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:28:08.388" status="PASS" endtime="20170707 21:28:08.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:28:08.389" status="PASS" endtime="20170707 21:28:08.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:28:08.391" status="PASS" endtime="20170707 21:28:08.645"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:08.646">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:28:08.646">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:08.389" status="PASS" endtime="20170707 21:28:08.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:08.646" status="PASS" endtime="20170707 21:28:08.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:08.647" status="PASS" endtime="20170707 21:28:08.647"></status>
</kw>
<status starttime="20170707 21:28:08.386" status="PASS" endtime="20170707 21:28:08.647"></status>
</kw>
<status starttime="20170707 21:28:08.385" status="PASS" endtime="20170707 21:28:08.647"></status>
</kw>
<status starttime="20170707 21:28:08.385" status="PASS" endtime="20170707 21:28:08.648"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.648">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:28:08.648" status="PASS" endtime="20170707 21:28:08.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.651">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:08.650" status="PASS" endtime="20170707 21:28:08.651"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.652">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:08.652" status="PASS" endtime="20170707 21:28:08.652"></status>
</kw>
<status starttime="20170707 21:28:08.651" status="PASS" endtime="20170707 21:28:08.652"></status>
</kw>
<status starttime="20170707 21:28:08.649" status="PASS" endtime="20170707 21:28:08.652"></status>
</kw>
<status starttime="20170707 21:28:08.649" status="PASS" endtime="20170707 21:28:08.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.782">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:28:08.782">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:08.653" status="PASS" endtime="20170707 21:28:08.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.785">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:08.784" status="PASS" endtime="20170707 21:28:08.785"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.786">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:08.785" status="PASS" endtime="20170707 21:28:08.786"></status>
</kw>
<status starttime="20170707 21:28:08.785" status="PASS" endtime="20170707 21:28:08.786"></status>
</kw>
<status starttime="20170707 21:28:08.784" status="PASS" endtime="20170707 21:28:08.786"></status>
</kw>
<status starttime="20170707 21:28:08.783" status="PASS" endtime="20170707 21:28:08.786"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:08.786">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:08.384" status="PASS" endtime="20170707 21:28:08.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:08.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:08.786" status="PASS" endtime="20170707 21:28:08.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:08.788">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:28:08.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:28:08.788">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:28:08.787" status="PASS" endtime="20170707 21:28:08.788"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:08.788">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:08.383" status="PASS" endtime="20170707 21:28:08.788"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:08.789">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:08.383" status="PASS" endtime="20170707 21:28:08.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:28:08.789">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:28:08.789" status="FAIL" endtime="20170707 21:28:08.789"></status>
</kw>
<status starttime="20170707 21:28:08.382" status="FAIL" endtime="20170707 21:28:08.790"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:18.795">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:28:18.795" status="PASS" endtime="20170707 21:28:18.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:18.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:28:18.796" status="PASS" endtime="20170707 21:28:18.796"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:18.797">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:28:18.796" status="PASS" endtime="20170707 21:28:18.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:18.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:28:18.797" status="PASS" endtime="20170707 21:28:18.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:28:18.798" status="PASS" endtime="20170707 21:28:19.041"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:19.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:28:19.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:18.798" status="PASS" endtime="20170707 21:28:19.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:19.041" status="PASS" endtime="20170707 21:28:19.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:19.042" status="PASS" endtime="20170707 21:28:19.043"></status>
</kw>
<status starttime="20170707 21:28:18.794" status="PASS" endtime="20170707 21:28:19.043"></status>
</kw>
<status starttime="20170707 21:28:18.793" status="PASS" endtime="20170707 21:28:19.043"></status>
</kw>
<status starttime="20170707 21:28:18.792" status="PASS" endtime="20170707 21:28:19.043"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:19.044">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:28:19.043" status="PASS" endtime="20170707 21:28:19.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:19.046">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:19.045" status="PASS" endtime="20170707 21:28:19.046"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.047">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:19.047" status="PASS" endtime="20170707 21:28:19.047"></status>
</kw>
<status starttime="20170707 21:28:19.046" status="PASS" endtime="20170707 21:28:19.047"></status>
</kw>
<status starttime="20170707 21:28:19.044" status="PASS" endtime="20170707 21:28:19.049"></status>
</kw>
<status starttime="20170707 21:28:19.044" status="PASS" endtime="20170707 21:28:19.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:19.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:28:19.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:19.049" status="PASS" endtime="20170707 21:28:19.197"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:19.199">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:19.198" status="PASS" endtime="20170707 21:28:19.199"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.200">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:19.200" status="PASS" endtime="20170707 21:28:19.200"></status>
</kw>
<status starttime="20170707 21:28:19.199" status="PASS" endtime="20170707 21:28:19.200"></status>
</kw>
<status starttime="20170707 21:28:19.197" status="PASS" endtime="20170707 21:28:19.200"></status>
</kw>
<status starttime="20170707 21:28:19.197" status="PASS" endtime="20170707 21:28:19.200"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:19.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:18.792" status="PASS" endtime="20170707 21:28:19.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:19.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:19.201" status="PASS" endtime="20170707 21:28:19.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:19.202">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:28:19.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:28:19.202">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:28:19.201" status="PASS" endtime="20170707 21:28:19.202"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:19.202">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:18.791" status="PASS" endtime="20170707 21:28:19.202"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:19.202">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:18.791" status="PASS" endtime="20170707 21:28:19.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:28:19.203">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:28:19.203" status="FAIL" endtime="20170707 21:28:19.203"></status>
</kw>
<status starttime="20170707 21:28:18.790" status="FAIL" endtime="20170707 21:28:19.203"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.209">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:28:29.208" status="PASS" endtime="20170707 21:28:29.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:28:29.210" status="PASS" endtime="20170707 21:28:29.210"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.210">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:28:29.210" status="PASS" endtime="20170707 21:28:29.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:28:29.211" status="PASS" endtime="20170707 21:28:29.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:28:29.212" status="PASS" endtime="20170707 21:28:29.484"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:29.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:28:29.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:29.211" status="PASS" endtime="20170707 21:28:29.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:29.485" status="PASS" endtime="20170707 21:28:29.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:29.485" status="PASS" endtime="20170707 21:28:29.486"></status>
</kw>
<status starttime="20170707 21:28:29.208" status="PASS" endtime="20170707 21:28:29.486"></status>
</kw>
<status starttime="20170707 21:28:29.207" status="PASS" endtime="20170707 21:28:29.486"></status>
</kw>
<status starttime="20170707 21:28:29.206" status="PASS" endtime="20170707 21:28:29.487"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.487">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:28:29.487" status="PASS" endtime="20170707 21:28:29.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.489">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:29.489" status="PASS" endtime="20170707 21:28:29.489"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.490">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:29.490" status="PASS" endtime="20170707 21:28:29.490"></status>
</kw>
<status starttime="20170707 21:28:29.489" status="PASS" endtime="20170707 21:28:29.490"></status>
</kw>
<status starttime="20170707 21:28:29.488" status="PASS" endtime="20170707 21:28:29.490"></status>
</kw>
<status starttime="20170707 21:28:29.487" status="PASS" endtime="20170707 21:28:29.491"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.644">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:28:29.644">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:29.491" status="PASS" endtime="20170707 21:28:29.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.646">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:29.645" status="PASS" endtime="20170707 21:28:29.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.647">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:29.647" status="PASS" endtime="20170707 21:28:29.647"></status>
</kw>
<status starttime="20170707 21:28:29.646" status="PASS" endtime="20170707 21:28:29.647"></status>
</kw>
<status starttime="20170707 21:28:29.645" status="PASS" endtime="20170707 21:28:29.647"></status>
</kw>
<status starttime="20170707 21:28:29.644" status="PASS" endtime="20170707 21:28:29.647"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:29.647">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:29.206" status="PASS" endtime="20170707 21:28:29.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:29.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:29.648" status="PASS" endtime="20170707 21:28:29.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:29.649">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:28:29.649">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:28:29.649">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:28:29.648" status="PASS" endtime="20170707 21:28:29.649"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:29.649">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:29.205" status="PASS" endtime="20170707 21:28:29.649"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:29.649">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:29.205" status="PASS" endtime="20170707 21:28:29.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:28:29.650">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:28:29.650" status="FAIL" endtime="20170707 21:28:29.650"></status>
</kw>
<status starttime="20170707 21:28:29.204" status="FAIL" endtime="20170707 21:28:29.650"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:39.656">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:28:39.656" status="PASS" endtime="20170707 21:28:39.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:39.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:28:39.657" status="PASS" endtime="20170707 21:28:39.657"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:39.658">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:28:39.658" status="PASS" endtime="20170707 21:28:39.658"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:39.659">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:28:39.658" status="PASS" endtime="20170707 21:28:39.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:39.914">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:28:39.659" status="PASS" endtime="20170707 21:28:39.914"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:39.914">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:28:39.914">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:39.659" status="PASS" endtime="20170707 21:28:39.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:39.915">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:39.915" status="PASS" endtime="20170707 21:28:39.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:39.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:39.915" status="PASS" endtime="20170707 21:28:39.916"></status>
</kw>
<status starttime="20170707 21:28:39.655" status="PASS" endtime="20170707 21:28:39.916"></status>
</kw>
<status starttime="20170707 21:28:39.654" status="PASS" endtime="20170707 21:28:39.916"></status>
</kw>
<status starttime="20170707 21:28:39.654" status="PASS" endtime="20170707 21:28:39.916"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:39.917">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:28:39.917" status="PASS" endtime="20170707 21:28:39.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:39.919">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:39.918" status="PASS" endtime="20170707 21:28:39.919"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:39.920">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:39.920" status="PASS" endtime="20170707 21:28:39.920"></status>
</kw>
<status starttime="20170707 21:28:39.919" status="PASS" endtime="20170707 21:28:39.920"></status>
</kw>
<status starttime="20170707 21:28:39.918" status="PASS" endtime="20170707 21:28:39.921"></status>
</kw>
<status starttime="20170707 21:28:39.917" status="PASS" endtime="20170707 21:28:39.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:40.096">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:28:40.097">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:39.921" status="PASS" endtime="20170707 21:28:40.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:40.099">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:40.098" status="PASS" endtime="20170707 21:28:40.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:40.100">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:40.100" status="PASS" endtime="20170707 21:28:40.100"></status>
</kw>
<status starttime="20170707 21:28:40.099" status="PASS" endtime="20170707 21:28:40.100"></status>
</kw>
<status starttime="20170707 21:28:40.098" status="PASS" endtime="20170707 21:28:40.100"></status>
</kw>
<status starttime="20170707 21:28:40.097" status="PASS" endtime="20170707 21:28:40.100"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:40.101">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:39.653" status="PASS" endtime="20170707 21:28:40.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:40.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:40.101" status="PASS" endtime="20170707 21:28:40.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:40.102">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:28:40.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:28:40.102">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:28:40.102" status="PASS" endtime="20170707 21:28:40.102"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:40.103">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:39.652" status="PASS" endtime="20170707 21:28:40.103"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:40.103">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:39.652" status="PASS" endtime="20170707 21:28:40.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:28:40.104">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:28:40.103" status="FAIL" endtime="20170707 21:28:40.104"></status>
</kw>
<status starttime="20170707 21:28:39.651" status="FAIL" endtime="20170707 21:28:40.104"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.109">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:28:50.109" status="PASS" endtime="20170707 21:28:50.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:28:50.110" status="PASS" endtime="20170707 21:28:50.110"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.111">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:28:50.110" status="PASS" endtime="20170707 21:28:50.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:28:50.111" status="PASS" endtime="20170707 21:28:50.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:28:50.112" status="PASS" endtime="20170707 21:28:50.350"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:50.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:28:50.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:50.112" status="PASS" endtime="20170707 21:28:50.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.351">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:50.351" status="PASS" endtime="20170707 21:28:50.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:50.351" status="PASS" endtime="20170707 21:28:50.352"></status>
</kw>
<status starttime="20170707 21:28:50.108" status="PASS" endtime="20170707 21:28:50.352"></status>
</kw>
<status starttime="20170707 21:28:50.108" status="PASS" endtime="20170707 21:28:50.352"></status>
</kw>
<status starttime="20170707 21:28:50.107" status="PASS" endtime="20170707 21:28:50.352"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.353">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:28:50.352" status="PASS" endtime="20170707 21:28:50.353"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.355">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:50.354" status="PASS" endtime="20170707 21:28:50.355"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.356">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:28:50.355" status="PASS" endtime="20170707 21:28:50.356"></status>
</kw>
<status starttime="20170707 21:28:50.355" status="PASS" endtime="20170707 21:28:50.356"></status>
</kw>
<status starttime="20170707 21:28:50.353" status="PASS" endtime="20170707 21:28:50.356"></status>
</kw>
<status starttime="20170707 21:28:50.353" status="PASS" endtime="20170707 21:28:50.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.494">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:28:50.495">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:50.356" status="PASS" endtime="20170707 21:28:50.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.497">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:50.496" status="PASS" endtime="20170707 21:28:50.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.498">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:28:50.497" status="PASS" endtime="20170707 21:28:50.498"></status>
</kw>
<status starttime="20170707 21:28:50.497" status="PASS" endtime="20170707 21:28:50.498"></status>
</kw>
<status starttime="20170707 21:28:50.496" status="PASS" endtime="20170707 21:28:50.498"></status>
</kw>
<status starttime="20170707 21:28:50.495" status="PASS" endtime="20170707 21:28:50.498"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:50.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:28:50.107" status="PASS" endtime="20170707 21:28:50.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:28:50.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:28:50.498" status="PASS" endtime="20170707 21:28:50.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:28:50.500">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:28:50.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:28:50.500">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:28:50.499" status="PASS" endtime="20170707 21:28:50.500"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:50.500">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:50.106" status="PASS" endtime="20170707 21:28:50.500"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:28:50.500">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:28:50.105" status="PASS" endtime="20170707 21:28:50.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:28:50.501">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:28:50.501" status="FAIL" endtime="20170707 21:28:50.501"></status>
</kw>
<status starttime="20170707 21:28:50.105" status="FAIL" endtime="20170707 21:28:50.501"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.509">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:00.509" status="PASS" endtime="20170707 21:29:00.510"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.510">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:00.510" status="PASS" endtime="20170707 21:29:00.510"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.511">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:00.511" status="PASS" endtime="20170707 21:29:00.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:00.511" status="PASS" endtime="20170707 21:29:00.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:00.512" status="PASS" endtime="20170707 21:29:00.850"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:00.850">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:00.850">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:00.512" status="PASS" endtime="20170707 21:29:00.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.851">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:00.851" status="PASS" endtime="20170707 21:29:00.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:00.852" status="PASS" endtime="20170707 21:29:00.852"></status>
</kw>
<status starttime="20170707 21:29:00.506" status="PASS" endtime="20170707 21:29:00.852"></status>
</kw>
<status starttime="20170707 21:29:00.506" status="PASS" endtime="20170707 21:29:00.852"></status>
</kw>
<status starttime="20170707 21:29:00.505" status="PASS" endtime="20170707 21:29:00.852"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.853">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:00.853" status="PASS" endtime="20170707 21:29:00.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.855">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:00.854" status="PASS" endtime="20170707 21:29:00.855"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.856">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:00.856" status="PASS" endtime="20170707 21:29:00.856"></status>
</kw>
<status starttime="20170707 21:29:00.855" status="PASS" endtime="20170707 21:29:00.857"></status>
</kw>
<status starttime="20170707 21:29:00.854" status="PASS" endtime="20170707 21:29:00.857"></status>
</kw>
<status starttime="20170707 21:29:00.853" status="PASS" endtime="20170707 21:29:00.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.966">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:00.966">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:00.857" status="PASS" endtime="20170707 21:29:00.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.968">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:00.968" status="PASS" endtime="20170707 21:29:00.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.969">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:00.969" status="PASS" endtime="20170707 21:29:00.970"></status>
</kw>
<status starttime="20170707 21:29:00.968" status="PASS" endtime="20170707 21:29:00.970"></status>
</kw>
<status starttime="20170707 21:29:00.967" status="PASS" endtime="20170707 21:29:00.970"></status>
</kw>
<status starttime="20170707 21:29:00.967" status="PASS" endtime="20170707 21:29:00.970"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:00.970">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:00.504" status="PASS" endtime="20170707 21:29:00.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:00.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:00.971" status="PASS" endtime="20170707 21:29:00.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:00.972">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:00.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:00.972">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:00.971" status="PASS" endtime="20170707 21:29:00.972"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:00.972">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:00.503" status="PASS" endtime="20170707 21:29:00.972"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:00.972">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:00.503" status="PASS" endtime="20170707 21:29:00.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:00.973">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:00.973" status="FAIL" endtime="20170707 21:29:00.973"></status>
</kw>
<status starttime="20170707 21:29:00.502" status="FAIL" endtime="20170707 21:29:00.973"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:10.978">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:10.978" status="PASS" endtime="20170707 21:29:10.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:10.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:10.979" status="PASS" endtime="20170707 21:29:10.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:10.980">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:10.979" status="PASS" endtime="20170707 21:29:10.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:10.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:10.980" status="PASS" endtime="20170707 21:29:10.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:10.981" status="PASS" endtime="20170707 21:29:11.343"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:11.343">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:11.343">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:10.981" status="PASS" endtime="20170707 21:29:11.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:11.344" status="PASS" endtime="20170707 21:29:11.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:11.345" status="PASS" endtime="20170707 21:29:11.345"></status>
</kw>
<status starttime="20170707 21:29:10.977" status="PASS" endtime="20170707 21:29:11.345"></status>
</kw>
<status starttime="20170707 21:29:10.977" status="PASS" endtime="20170707 21:29:11.345"></status>
</kw>
<status starttime="20170707 21:29:10.976" status="PASS" endtime="20170707 21:29:11.345"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:11.346">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:11.346" status="PASS" endtime="20170707 21:29:11.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:11.349">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:11.348" status="PASS" endtime="20170707 21:29:11.349"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.349">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:11.349" status="PASS" endtime="20170707 21:29:11.350"></status>
</kw>
<status starttime="20170707 21:29:11.349" status="PASS" endtime="20170707 21:29:11.350"></status>
</kw>
<status starttime="20170707 21:29:11.347" status="PASS" endtime="20170707 21:29:11.350"></status>
</kw>
<status starttime="20170707 21:29:11.346" status="PASS" endtime="20170707 21:29:11.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:11.419">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:11.419">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:11.350" status="PASS" endtime="20170707 21:29:11.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:11.422">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:11.421" status="PASS" endtime="20170707 21:29:11.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.423">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:11.423" status="PASS" endtime="20170707 21:29:11.423"></status>
</kw>
<status starttime="20170707 21:29:11.422" status="PASS" endtime="20170707 21:29:11.423"></status>
</kw>
<status starttime="20170707 21:29:11.421" status="PASS" endtime="20170707 21:29:11.423"></status>
</kw>
<status starttime="20170707 21:29:11.420" status="PASS" endtime="20170707 21:29:11.423"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:11.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:10.975" status="PASS" endtime="20170707 21:29:11.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:11.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:11.424" status="PASS" endtime="20170707 21:29:11.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:11.425">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:11.425">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:11.425">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:11.424" status="PASS" endtime="20170707 21:29:11.425"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:11.425">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:10.975" status="PASS" endtime="20170707 21:29:11.426"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:11.426">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:10.974" status="PASS" endtime="20170707 21:29:11.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:11.426">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:11.426" status="FAIL" endtime="20170707 21:29:11.427"></status>
</kw>
<status starttime="20170707 21:29:10.974" status="FAIL" endtime="20170707 21:29:11.427"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.432">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:21.431" status="PASS" endtime="20170707 21:29:21.432"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:21.433" status="PASS" endtime="20170707 21:29:21.433"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:21.433" status="PASS" endtime="20170707 21:29:21.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.434">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:21.434" status="PASS" endtime="20170707 21:29:21.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:21.435" status="PASS" endtime="20170707 21:29:21.739"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:21.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:21.740">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:21.435" status="PASS" endtime="20170707 21:29:21.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:21.740" status="PASS" endtime="20170707 21:29:21.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:21.741" status="PASS" endtime="20170707 21:29:21.741"></status>
</kw>
<status starttime="20170707 21:29:21.431" status="PASS" endtime="20170707 21:29:21.742"></status>
</kw>
<status starttime="20170707 21:29:21.430" status="PASS" endtime="20170707 21:29:21.742"></status>
</kw>
<status starttime="20170707 21:29:21.430" status="PASS" endtime="20170707 21:29:21.742"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.742">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:21.742" status="PASS" endtime="20170707 21:29:21.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.744">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:21.744" status="PASS" endtime="20170707 21:29:21.745"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.745">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:21.745" status="PASS" endtime="20170707 21:29:21.746"></status>
</kw>
<status starttime="20170707 21:29:21.745" status="PASS" endtime="20170707 21:29:21.746"></status>
</kw>
<status starttime="20170707 21:29:21.743" status="PASS" endtime="20170707 21:29:21.746"></status>
</kw>
<status starttime="20170707 21:29:21.743" status="PASS" endtime="20170707 21:29:21.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.813">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:21.813">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:21.746" status="PASS" endtime="20170707 21:29:21.813"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.815">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:21.815" status="PASS" endtime="20170707 21:29:21.815"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.816">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:21.816" status="PASS" endtime="20170707 21:29:21.816"></status>
</kw>
<status starttime="20170707 21:29:21.815" status="PASS" endtime="20170707 21:29:21.816"></status>
</kw>
<status starttime="20170707 21:29:21.814" status="PASS" endtime="20170707 21:29:21.817"></status>
</kw>
<status starttime="20170707 21:29:21.814" status="PASS" endtime="20170707 21:29:21.817"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:21.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:21.429" status="PASS" endtime="20170707 21:29:21.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:21.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:21.817" status="PASS" endtime="20170707 21:29:21.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:21.818">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:21.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:21.818">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:21.818" status="PASS" endtime="20170707 21:29:21.818"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:21.818">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:21.428" status="PASS" endtime="20170707 21:29:21.819"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:21.819">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:21.428" status="PASS" endtime="20170707 21:29:21.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:21.819">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:21.819" status="FAIL" endtime="20170707 21:29:21.819"></status>
</kw>
<status starttime="20170707 21:29:21.427" status="FAIL" endtime="20170707 21:29:21.820"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:31.826">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:31.825" status="PASS" endtime="20170707 21:29:31.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:31.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:31.826" status="PASS" endtime="20170707 21:29:31.827"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:31.827">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:31.827" status="PASS" endtime="20170707 21:29:31.828"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:31.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:31.828" status="PASS" endtime="20170707 21:29:31.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:31.829" status="PASS" endtime="20170707 21:29:32.110"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:32.111">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:32.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:31.829" status="PASS" endtime="20170707 21:29:32.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.112">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:32.111" status="PASS" endtime="20170707 21:29:32.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:32.112" status="PASS" endtime="20170707 21:29:32.113"></status>
</kw>
<status starttime="20170707 21:29:31.825" status="PASS" endtime="20170707 21:29:32.113"></status>
</kw>
<status starttime="20170707 21:29:31.824" status="PASS" endtime="20170707 21:29:32.113"></status>
</kw>
<status starttime="20170707 21:29:31.824" status="PASS" endtime="20170707 21:29:32.113"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:32.114">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:32.113" status="PASS" endtime="20170707 21:29:32.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:32.116">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:32.115" status="PASS" endtime="20170707 21:29:32.116"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.117">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:32.117" status="PASS" endtime="20170707 21:29:32.117"></status>
</kw>
<status starttime="20170707 21:29:32.116" status="PASS" endtime="20170707 21:29:32.117"></status>
</kw>
<status starttime="20170707 21:29:32.115" status="PASS" endtime="20170707 21:29:32.117"></status>
</kw>
<status starttime="20170707 21:29:32.114" status="PASS" endtime="20170707 21:29:32.117"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:32.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:32.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:32.118" status="PASS" endtime="20170707 21:29:32.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:32.198">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:32.197" status="PASS" endtime="20170707 21:29:32.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.199">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:32.199" status="PASS" endtime="20170707 21:29:32.199"></status>
</kw>
<status starttime="20170707 21:29:32.198" status="PASS" endtime="20170707 21:29:32.199"></status>
</kw>
<status starttime="20170707 21:29:32.197" status="PASS" endtime="20170707 21:29:32.199"></status>
</kw>
<status starttime="20170707 21:29:32.196" status="PASS" endtime="20170707 21:29:32.199"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:32.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:31.823" status="PASS" endtime="20170707 21:29:32.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:32.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:32.200" status="PASS" endtime="20170707 21:29:32.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:32.201">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:32.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:32.201">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:32.200" status="PASS" endtime="20170707 21:29:32.201"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:32.201">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:31.822" status="PASS" endtime="20170707 21:29:32.201"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:32.202">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:31.821" status="PASS" endtime="20170707 21:29:32.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:32.203">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:32.202" status="FAIL" endtime="20170707 21:29:32.203"></status>
</kw>
<status starttime="20170707 21:29:31.820" status="FAIL" endtime="20170707 21:29:32.203"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.208">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:42.208" status="PASS" endtime="20170707 21:29:42.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:42.209" status="PASS" endtime="20170707 21:29:42.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.210">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:42.209" status="PASS" endtime="20170707 21:29:42.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:42.210" status="PASS" endtime="20170707 21:29:42.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:42.211" status="PASS" endtime="20170707 21:29:42.493"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:42.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:42.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:42.211" status="PASS" endtime="20170707 21:29:42.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:42.494" status="PASS" endtime="20170707 21:29:42.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:42.494" status="PASS" endtime="20170707 21:29:42.495"></status>
</kw>
<status starttime="20170707 21:29:42.207" status="PASS" endtime="20170707 21:29:42.495"></status>
</kw>
<status starttime="20170707 21:29:42.207" status="PASS" endtime="20170707 21:29:42.495"></status>
</kw>
<status starttime="20170707 21:29:42.206" status="PASS" endtime="20170707 21:29:42.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.496">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:42.495" status="PASS" endtime="20170707 21:29:42.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.498">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:42.497" status="PASS" endtime="20170707 21:29:42.498"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.499">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:42.499" status="PASS" endtime="20170707 21:29:42.499"></status>
</kw>
<status starttime="20170707 21:29:42.498" status="PASS" endtime="20170707 21:29:42.499"></status>
</kw>
<status starttime="20170707 21:29:42.496" status="PASS" endtime="20170707 21:29:42.499"></status>
</kw>
<status starttime="20170707 21:29:42.496" status="PASS" endtime="20170707 21:29:42.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.571">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:42.572">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:42.499" status="PASS" endtime="20170707 21:29:42.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.574">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:42.573" status="PASS" endtime="20170707 21:29:42.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.574">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:42.574" status="PASS" endtime="20170707 21:29:42.575"></status>
</kw>
<status starttime="20170707 21:29:42.574" status="PASS" endtime="20170707 21:29:42.575"></status>
</kw>
<status starttime="20170707 21:29:42.573" status="PASS" endtime="20170707 21:29:42.575"></status>
</kw>
<status starttime="20170707 21:29:42.572" status="PASS" endtime="20170707 21:29:42.575"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:42.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:42.205" status="PASS" endtime="20170707 21:29:42.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:42.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:42.575" status="PASS" endtime="20170707 21:29:42.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:42.576">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:42.576">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:42.577">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:42.576" status="PASS" endtime="20170707 21:29:42.577"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:42.577">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:42.205" status="PASS" endtime="20170707 21:29:42.577"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:42.577">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:42.204" status="PASS" endtime="20170707 21:29:42.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:42.578">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:42.577" status="FAIL" endtime="20170707 21:29:42.578"></status>
</kw>
<status starttime="20170707 21:29:42.203" status="FAIL" endtime="20170707 21:29:42.578"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.584">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:29:52.583" status="PASS" endtime="20170707 21:29:52.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.585">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:29:52.584" status="PASS" endtime="20170707 21:29:52.585"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.585">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:29:52.585" status="PASS" endtime="20170707 21:29:52.585"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.586">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:29:52.586" status="PASS" endtime="20170707 21:29:52.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:29:52.587" status="PASS" endtime="20170707 21:29:52.794"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:52.794">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:29:52.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:52.586" status="PASS" endtime="20170707 21:29:52.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:52.794" status="PASS" endtime="20170707 21:29:52.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:52.795" status="PASS" endtime="20170707 21:29:52.796"></status>
</kw>
<status starttime="20170707 21:29:52.582" status="PASS" endtime="20170707 21:29:52.796"></status>
</kw>
<status starttime="20170707 21:29:52.582" status="PASS" endtime="20170707 21:29:52.796"></status>
</kw>
<status starttime="20170707 21:29:52.581" status="PASS" endtime="20170707 21:29:52.796"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.797">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:29:52.797" status="PASS" endtime="20170707 21:29:52.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.801">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:52.800" status="PASS" endtime="20170707 21:29:52.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.802">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:29:52.802" status="PASS" endtime="20170707 21:29:52.802"></status>
</kw>
<status starttime="20170707 21:29:52.801" status="PASS" endtime="20170707 21:29:52.802"></status>
</kw>
<status starttime="20170707 21:29:52.799" status="PASS" endtime="20170707 21:29:52.802"></status>
</kw>
<status starttime="20170707 21:29:52.798" status="PASS" endtime="20170707 21:29:52.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.973">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:29:52.974">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:52.803" status="PASS" endtime="20170707 21:29:52.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.976">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:52.976" status="PASS" endtime="20170707 21:29:52.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.978">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:29:52.978" status="PASS" endtime="20170707 21:29:52.978"></status>
</kw>
<status starttime="20170707 21:29:52.977" status="PASS" endtime="20170707 21:29:52.978"></status>
</kw>
<status starttime="20170707 21:29:52.975" status="PASS" endtime="20170707 21:29:52.978"></status>
</kw>
<status starttime="20170707 21:29:52.974" status="PASS" endtime="20170707 21:29:52.978"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:52.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:29:52.580" status="PASS" endtime="20170707 21:29:52.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:29:52.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:29:52.979" status="PASS" endtime="20170707 21:29:52.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:29:52.980">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:29:52.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:29:52.980">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:29:52.980" status="PASS" endtime="20170707 21:29:52.980"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:52.980">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:52.580" status="PASS" endtime="20170707 21:29:52.981"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:29:52.981">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:29:52.579" status="PASS" endtime="20170707 21:29:52.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:29:52.981">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:29:52.981" status="FAIL" endtime="20170707 21:29:52.981"></status>
</kw>
<status starttime="20170707 21:29:52.579" status="FAIL" endtime="20170707 21:29:52.982"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:02.987">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:02.986" status="PASS" endtime="20170707 21:30:02.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:02.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:02.987" status="PASS" endtime="20170707 21:30:02.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:02.988">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:02.988" status="PASS" endtime="20170707 21:30:02.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:02.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:02.989" status="PASS" endtime="20170707 21:30:02.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:02.990" status="PASS" endtime="20170707 21:30:03.176"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:03.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:03.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:02.989" status="PASS" endtime="20170707 21:30:03.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:03.176" status="PASS" endtime="20170707 21:30:03.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:03.177" status="PASS" endtime="20170707 21:30:03.178"></status>
</kw>
<status starttime="20170707 21:30:02.986" status="PASS" endtime="20170707 21:30:03.178"></status>
</kw>
<status starttime="20170707 21:30:02.985" status="PASS" endtime="20170707 21:30:03.178"></status>
</kw>
<status starttime="20170707 21:30:02.985" status="PASS" endtime="20170707 21:30:03.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:03.179">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:03.179" status="PASS" endtime="20170707 21:30:03.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:03.181">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:03.181" status="PASS" endtime="20170707 21:30:03.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.182">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:03.182" status="PASS" endtime="20170707 21:30:03.183"></status>
</kw>
<status starttime="20170707 21:30:03.182" status="PASS" endtime="20170707 21:30:03.183"></status>
</kw>
<status starttime="20170707 21:30:03.180" status="PASS" endtime="20170707 21:30:03.183"></status>
</kw>
<status starttime="20170707 21:30:03.179" status="PASS" endtime="20170707 21:30:03.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:03.266">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:03.266">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:03.183" status="PASS" endtime="20170707 21:30:03.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:03.268">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:03.268" status="PASS" endtime="20170707 21:30:03.269"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.269">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:03.269" status="PASS" endtime="20170707 21:30:03.270"></status>
</kw>
<status starttime="20170707 21:30:03.269" status="PASS" endtime="20170707 21:30:03.270"></status>
</kw>
<status starttime="20170707 21:30:03.267" status="PASS" endtime="20170707 21:30:03.270"></status>
</kw>
<status starttime="20170707 21:30:03.267" status="PASS" endtime="20170707 21:30:03.270"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:03.270">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:02.984" status="PASS" endtime="20170707 21:30:03.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:03.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:03.270" status="PASS" endtime="20170707 21:30:03.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:03.271">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:03.271">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:03.271">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:03.271" status="PASS" endtime="20170707 21:30:03.272"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:03.272">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:02.983" status="PASS" endtime="20170707 21:30:03.272"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:03.272">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:02.983" status="PASS" endtime="20170707 21:30:03.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:03.273">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:03.272" status="FAIL" endtime="20170707 21:30:03.273"></status>
</kw>
<status starttime="20170707 21:30:02.982" status="FAIL" endtime="20170707 21:30:03.273"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.279">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:13.278" status="PASS" endtime="20170707 21:30:13.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:13.279" status="PASS" endtime="20170707 21:30:13.280"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.280">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:13.280" status="PASS" endtime="20170707 21:30:13.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.281">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:13.281" status="PASS" endtime="20170707 21:30:13.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.459">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:13.282" status="PASS" endtime="20170707 21:30:13.459"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:13.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:13.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:13.281" status="PASS" endtime="20170707 21:30:13.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.460">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:13.460" status="PASS" endtime="20170707 21:30:13.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:13.461" status="PASS" endtime="20170707 21:30:13.461"></status>
</kw>
<status starttime="20170707 21:30:13.277" status="PASS" endtime="20170707 21:30:13.462"></status>
</kw>
<status starttime="20170707 21:30:13.277" status="PASS" endtime="20170707 21:30:13.462"></status>
</kw>
<status starttime="20170707 21:30:13.276" status="PASS" endtime="20170707 21:30:13.462"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.462">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:13.462" status="PASS" endtime="20170707 21:30:13.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.464">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:13.464" status="PASS" endtime="20170707 21:30:13.464"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.465">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:13.465" status="PASS" endtime="20170707 21:30:13.465"></status>
</kw>
<status starttime="20170707 21:30:13.465" status="PASS" endtime="20170707 21:30:13.466"></status>
</kw>
<status starttime="20170707 21:30:13.463" status="PASS" endtime="20170707 21:30:13.466"></status>
</kw>
<status starttime="20170707 21:30:13.463" status="PASS" endtime="20170707 21:30:13.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.547">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:13.548">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:13.466" status="PASS" endtime="20170707 21:30:13.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.549">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:13.549" status="PASS" endtime="20170707 21:30:13.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.551">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:13.550" status="PASS" endtime="20170707 21:30:13.551"></status>
</kw>
<status starttime="20170707 21:30:13.550" status="PASS" endtime="20170707 21:30:13.551"></status>
</kw>
<status starttime="20170707 21:30:13.548" status="PASS" endtime="20170707 21:30:13.551"></status>
</kw>
<status starttime="20170707 21:30:13.548" status="PASS" endtime="20170707 21:30:13.551"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:13.552">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:13.275" status="PASS" endtime="20170707 21:30:13.552"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:13.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:13.552" status="PASS" endtime="20170707 21:30:13.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:13.553">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:13.553">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:13.553">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:13.552" status="PASS" endtime="20170707 21:30:13.553"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:13.553">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:13.275" status="PASS" endtime="20170707 21:30:13.553"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:13.553">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:13.274" status="PASS" endtime="20170707 21:30:13.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:13.554">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:13.554" status="FAIL" endtime="20170707 21:30:13.554"></status>
</kw>
<status starttime="20170707 21:30:13.274" status="FAIL" endtime="20170707 21:30:13.554"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.560">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:23.559" status="PASS" endtime="20170707 21:30:23.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:23.561" status="PASS" endtime="20170707 21:30:23.561"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.562">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:23.562" status="PASS" endtime="20170707 21:30:23.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:23.562" status="PASS" endtime="20170707 21:30:23.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.793">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:23.563" status="PASS" endtime="20170707 21:30:23.793"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:23.793">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:23.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:23.563" status="PASS" endtime="20170707 21:30:23.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.794">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:23.794" status="PASS" endtime="20170707 21:30:23.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:23.795" status="PASS" endtime="20170707 21:30:23.797"></status>
</kw>
<status starttime="20170707 21:30:23.559" status="PASS" endtime="20170707 21:30:23.797"></status>
</kw>
<status starttime="20170707 21:30:23.558" status="PASS" endtime="20170707 21:30:23.797"></status>
</kw>
<status starttime="20170707 21:30:23.558" status="PASS" endtime="20170707 21:30:23.798"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.798">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:23.798" status="PASS" endtime="20170707 21:30:23.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.800">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:23.800" status="PASS" endtime="20170707 21:30:23.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.801">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:23.801" status="PASS" endtime="20170707 21:30:23.801"></status>
</kw>
<status starttime="20170707 21:30:23.801" status="PASS" endtime="20170707 21:30:23.802"></status>
</kw>
<status starttime="20170707 21:30:23.799" status="PASS" endtime="20170707 21:30:23.802"></status>
</kw>
<status starttime="20170707 21:30:23.798" status="PASS" endtime="20170707 21:30:23.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.878">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:23.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:23.802" status="PASS" endtime="20170707 21:30:23.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.881">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:23.880" status="PASS" endtime="20170707 21:30:23.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.881">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:23.881" status="PASS" endtime="20170707 21:30:23.882"></status>
</kw>
<status starttime="20170707 21:30:23.881" status="PASS" endtime="20170707 21:30:23.882"></status>
</kw>
<status starttime="20170707 21:30:23.879" status="PASS" endtime="20170707 21:30:23.882"></status>
</kw>
<status starttime="20170707 21:30:23.879" status="PASS" endtime="20170707 21:30:23.882"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:23.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:23.557" status="PASS" endtime="20170707 21:30:23.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:23.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:23.882" status="PASS" endtime="20170707 21:30:23.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:23.883">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:23.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:23.884">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:23.883" status="PASS" endtime="20170707 21:30:23.884"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:23.884">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:23.556" status="PASS" endtime="20170707 21:30:23.884"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:23.884">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:23.556" status="PASS" endtime="20170707 21:30:23.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:23.885">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:23.884" status="FAIL" endtime="20170707 21:30:23.885"></status>
</kw>
<status starttime="20170707 21:30:23.555" status="FAIL" endtime="20170707 21:30:23.885"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:33.890">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:33.890" status="PASS" endtime="20170707 21:30:33.891"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:33.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:33.891" status="PASS" endtime="20170707 21:30:33.892"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:33.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:33.892" status="PASS" endtime="20170707 21:30:33.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:33.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:33.893" status="PASS" endtime="20170707 21:30:33.893"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:33.894" status="PASS" endtime="20170707 21:30:34.156"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:34.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:34.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:33.893" status="PASS" endtime="20170707 21:30:34.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.157">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:34.157" status="PASS" endtime="20170707 21:30:34.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:34.158" status="PASS" endtime="20170707 21:30:34.158"></status>
</kw>
<status starttime="20170707 21:30:33.889" status="PASS" endtime="20170707 21:30:34.158"></status>
</kw>
<status starttime="20170707 21:30:33.889" status="PASS" endtime="20170707 21:30:34.158"></status>
</kw>
<status starttime="20170707 21:30:33.888" status="PASS" endtime="20170707 21:30:34.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:34.159">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:34.159" status="PASS" endtime="20170707 21:30:34.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:34.161">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:34.161" status="PASS" endtime="20170707 21:30:34.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.162">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:34.162" status="PASS" endtime="20170707 21:30:34.162"></status>
</kw>
<status starttime="20170707 21:30:34.161" status="PASS" endtime="20170707 21:30:34.162"></status>
</kw>
<status starttime="20170707 21:30:34.160" status="PASS" endtime="20170707 21:30:34.163"></status>
</kw>
<status starttime="20170707 21:30:34.159" status="PASS" endtime="20170707 21:30:34.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:34.230">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:34.230">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:34.163" status="PASS" endtime="20170707 21:30:34.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:34.232">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:34.231" status="PASS" endtime="20170707 21:30:34.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.233">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:34.232" status="PASS" endtime="20170707 21:30:34.233"></status>
</kw>
<status starttime="20170707 21:30:34.232" status="PASS" endtime="20170707 21:30:34.233"></status>
</kw>
<status starttime="20170707 21:30:34.231" status="PASS" endtime="20170707 21:30:34.233"></status>
</kw>
<status starttime="20170707 21:30:34.230" status="PASS" endtime="20170707 21:30:34.233"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:34.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:33.887" status="PASS" endtime="20170707 21:30:34.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:34.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:34.234" status="PASS" endtime="20170707 21:30:34.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:34.235">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:34.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:34.235">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:34.234" status="PASS" endtime="20170707 21:30:34.235"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:34.235">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:33.887" status="PASS" endtime="20170707 21:30:34.235"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:34.235">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:33.886" status="PASS" endtime="20170707 21:30:34.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:34.236">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:34.236" status="FAIL" endtime="20170707 21:30:34.236"></status>
</kw>
<status starttime="20170707 21:30:33.886" status="FAIL" endtime="20170707 21:30:34.237"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.242">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:44.242" status="PASS" endtime="20170707 21:30:44.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:44.243" status="PASS" endtime="20170707 21:30:44.243"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.244">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:44.243" status="PASS" endtime="20170707 21:30:44.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:44.244" status="PASS" endtime="20170707 21:30:44.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.592">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:44.245" status="PASS" endtime="20170707 21:30:44.592"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:44.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:44.592">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:44.245" status="PASS" endtime="20170707 21:30:44.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.593">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:44.593" status="PASS" endtime="20170707 21:30:44.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:44.593" status="PASS" endtime="20170707 21:30:44.594"></status>
</kw>
<status starttime="20170707 21:30:44.241" status="PASS" endtime="20170707 21:30:44.594"></status>
</kw>
<status starttime="20170707 21:30:44.241" status="PASS" endtime="20170707 21:30:44.594"></status>
</kw>
<status starttime="20170707 21:30:44.240" status="PASS" endtime="20170707 21:30:44.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.595">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:44.594" status="PASS" endtime="20170707 21:30:44.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.597">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:44.597" status="PASS" endtime="20170707 21:30:44.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.598">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:44.598" status="PASS" endtime="20170707 21:30:44.598"></status>
</kw>
<status starttime="20170707 21:30:44.597" status="PASS" endtime="20170707 21:30:44.598"></status>
</kw>
<status starttime="20170707 21:30:44.596" status="PASS" endtime="20170707 21:30:44.599"></status>
</kw>
<status starttime="20170707 21:30:44.595" status="PASS" endtime="20170707 21:30:44.599"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.665">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:44.665">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:44.599" status="PASS" endtime="20170707 21:30:44.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.667">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:44.667" status="PASS" endtime="20170707 21:30:44.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.668">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:44.668" status="PASS" endtime="20170707 21:30:44.668"></status>
</kw>
<status starttime="20170707 21:30:44.668" status="PASS" endtime="20170707 21:30:44.669"></status>
</kw>
<status starttime="20170707 21:30:44.666" status="PASS" endtime="20170707 21:30:44.669"></status>
</kw>
<status starttime="20170707 21:30:44.666" status="PASS" endtime="20170707 21:30:44.669"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:44.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:44.239" status="PASS" endtime="20170707 21:30:44.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:44.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:44.669" status="PASS" endtime="20170707 21:30:44.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:44.670">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:44.670">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:44.670">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:44.670" status="PASS" endtime="20170707 21:30:44.670"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:44.671">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:44.239" status="PASS" endtime="20170707 21:30:44.671"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:44.671">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:44.238" status="PASS" endtime="20170707 21:30:44.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:44.672">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:44.671" status="FAIL" endtime="20170707 21:30:44.672"></status>
</kw>
<status starttime="20170707 21:30:44.238" status="FAIL" endtime="20170707 21:30:44.672"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:54.677">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:30:54.676" status="PASS" endtime="20170707 21:30:54.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:54.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:30:54.678" status="PASS" endtime="20170707 21:30:54.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:54.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:30:54.679" status="PASS" endtime="20170707 21:30:54.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:54.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:30:54.679" status="PASS" endtime="20170707 21:30:54.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:54.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:30:54.680" status="PASS" endtime="20170707 21:30:54.915"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:54.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:30:54.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:54.680" status="PASS" endtime="20170707 21:30:54.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:54.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:54.915" status="PASS" endtime="20170707 21:30:54.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:54.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:54.916" status="PASS" endtime="20170707 21:30:54.917"></status>
</kw>
<status starttime="20170707 21:30:54.676" status="PASS" endtime="20170707 21:30:54.917"></status>
</kw>
<status starttime="20170707 21:30:54.675" status="PASS" endtime="20170707 21:30:54.917"></status>
</kw>
<status starttime="20170707 21:30:54.675" status="PASS" endtime="20170707 21:30:54.917"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:54.917">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:30:54.917" status="PASS" endtime="20170707 21:30:54.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:54.920">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:54.919" status="PASS" endtime="20170707 21:30:54.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:54.920">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:30:54.920" status="PASS" endtime="20170707 21:30:54.921"></status>
</kw>
<status starttime="20170707 21:30:54.920" status="PASS" endtime="20170707 21:30:54.921"></status>
</kw>
<status starttime="20170707 21:30:54.918" status="PASS" endtime="20170707 21:30:54.921"></status>
</kw>
<status starttime="20170707 21:30:54.918" status="PASS" endtime="20170707 21:30:54.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:55.023">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:30:55.023">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:54.921" status="PASS" endtime="20170707 21:30:55.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:55.025">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:55.024" status="PASS" endtime="20170707 21:30:55.025"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:55.026">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:30:55.025" status="PASS" endtime="20170707 21:30:55.026"></status>
</kw>
<status starttime="20170707 21:30:55.025" status="PASS" endtime="20170707 21:30:55.026"></status>
</kw>
<status starttime="20170707 21:30:55.024" status="PASS" endtime="20170707 21:30:55.026"></status>
</kw>
<status starttime="20170707 21:30:55.023" status="PASS" endtime="20170707 21:30:55.026"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:55.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:30:54.674" status="PASS" endtime="20170707 21:30:55.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:30:55.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:30:55.027" status="PASS" endtime="20170707 21:30:55.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:30:55.028">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:30:55.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:30:55.028">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:30:55.027" status="PASS" endtime="20170707 21:30:55.028"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:55.028">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:54.673" status="PASS" endtime="20170707 21:30:55.028"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:30:55.028">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:30:54.673" status="PASS" endtime="20170707 21:30:55.028"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:30:55.029">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:30:55.029" status="FAIL" endtime="20170707 21:30:55.029"></status>
</kw>
<status starttime="20170707 21:30:54.672" status="FAIL" endtime="20170707 21:30:55.029"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.035">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:05.035" status="PASS" endtime="20170707 21:31:05.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.036">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:05.036" status="PASS" endtime="20170707 21:31:05.036"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.037">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:05.036" status="PASS" endtime="20170707 21:31:05.037"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.037">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:05.037" status="PASS" endtime="20170707 21:31:05.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.261">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:05.038" status="PASS" endtime="20170707 21:31:05.261"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:05.261">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:05.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:05.038" status="PASS" endtime="20170707 21:31:05.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.262">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:05.261" status="PASS" endtime="20170707 21:31:05.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:05.262" status="PASS" endtime="20170707 21:31:05.263"></status>
</kw>
<status starttime="20170707 21:31:05.034" status="PASS" endtime="20170707 21:31:05.263"></status>
</kw>
<status starttime="20170707 21:31:05.034" status="PASS" endtime="20170707 21:31:05.263"></status>
</kw>
<status starttime="20170707 21:31:05.033" status="PASS" endtime="20170707 21:31:05.263"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.264">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:05.263" status="PASS" endtime="20170707 21:31:05.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.266">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:05.265" status="PASS" endtime="20170707 21:31:05.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.267">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:05.267" status="PASS" endtime="20170707 21:31:05.267"></status>
</kw>
<status starttime="20170707 21:31:05.266" status="PASS" endtime="20170707 21:31:05.267"></status>
</kw>
<status starttime="20170707 21:31:05.265" status="PASS" endtime="20170707 21:31:05.268"></status>
</kw>
<status starttime="20170707 21:31:05.264" status="PASS" endtime="20170707 21:31:05.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.350">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:05.350">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:05.268" status="PASS" endtime="20170707 21:31:05.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.352">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:05.351" status="PASS" endtime="20170707 21:31:05.352"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.352">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:05.352" status="PASS" endtime="20170707 21:31:05.353"></status>
</kw>
<status starttime="20170707 21:31:05.352" status="PASS" endtime="20170707 21:31:05.353"></status>
</kw>
<status starttime="20170707 21:31:05.351" status="PASS" endtime="20170707 21:31:05.353"></status>
</kw>
<status starttime="20170707 21:31:05.350" status="PASS" endtime="20170707 21:31:05.353"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:05.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:05.032" status="PASS" endtime="20170707 21:31:05.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:05.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:05.353" status="PASS" endtime="20170707 21:31:05.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:05.354">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:05.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:05.355">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:05.354" status="PASS" endtime="20170707 21:31:05.355"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:05.355">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:05.031" status="PASS" endtime="20170707 21:31:05.355"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:05.355">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:05.031" status="PASS" endtime="20170707 21:31:05.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:05.356">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:05.355" status="FAIL" endtime="20170707 21:31:05.356"></status>
</kw>
<status starttime="20170707 21:31:05.030" status="FAIL" endtime="20170707 21:31:05.356"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.361">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:15.361" status="PASS" endtime="20170707 21:31:15.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:15.362" status="PASS" endtime="20170707 21:31:15.362"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.363">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:15.362" status="PASS" endtime="20170707 21:31:15.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:15.363" status="PASS" endtime="20170707 21:31:15.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:15.364" status="PASS" endtime="20170707 21:31:15.584"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:15.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:15.584">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:15.364" status="PASS" endtime="20170707 21:31:15.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:15.585" status="PASS" endtime="20170707 21:31:15.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:15.585" status="PASS" endtime="20170707 21:31:15.586"></status>
</kw>
<status starttime="20170707 21:31:15.360" status="PASS" endtime="20170707 21:31:15.586"></status>
</kw>
<status starttime="20170707 21:31:15.360" status="PASS" endtime="20170707 21:31:15.586"></status>
</kw>
<status starttime="20170707 21:31:15.359" status="PASS" endtime="20170707 21:31:15.586"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.587">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:15.586" status="PASS" endtime="20170707 21:31:15.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.589">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:15.588" status="PASS" endtime="20170707 21:31:15.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.590">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:15.590" status="PASS" endtime="20170707 21:31:15.590"></status>
</kw>
<status starttime="20170707 21:31:15.589" status="PASS" endtime="20170707 21:31:15.590"></status>
</kw>
<status starttime="20170707 21:31:15.588" status="PASS" endtime="20170707 21:31:15.590"></status>
</kw>
<status starttime="20170707 21:31:15.587" status="PASS" endtime="20170707 21:31:15.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.684">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:15.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:15.590" status="PASS" endtime="20170707 21:31:15.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.686">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:15.685" status="PASS" endtime="20170707 21:31:15.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.687">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:15.687" status="PASS" endtime="20170707 21:31:15.687"></status>
</kw>
<status starttime="20170707 21:31:15.686" status="PASS" endtime="20170707 21:31:15.687"></status>
</kw>
<status starttime="20170707 21:31:15.685" status="PASS" endtime="20170707 21:31:15.687"></status>
</kw>
<status starttime="20170707 21:31:15.684" status="PASS" endtime="20170707 21:31:15.687"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:15.688">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:15.358" status="PASS" endtime="20170707 21:31:15.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:15.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:15.688" status="PASS" endtime="20170707 21:31:15.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:15.689">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:15.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:15.689">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:15.689" status="PASS" endtime="20170707 21:31:15.689"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:15.689">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:15.358" status="PASS" endtime="20170707 21:31:15.689"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:15.690">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:15.357" status="PASS" endtime="20170707 21:31:15.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:15.690">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:15.690" status="FAIL" endtime="20170707 21:31:15.690"></status>
</kw>
<status starttime="20170707 21:31:15.357" status="FAIL" endtime="20170707 21:31:15.691"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:25.698">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:25.698" status="PASS" endtime="20170707 21:31:25.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:25.699">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:25.699" status="PASS" endtime="20170707 21:31:25.699"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:25.700">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:25.700" status="PASS" endtime="20170707 21:31:25.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:25.701">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:25.700" status="PASS" endtime="20170707 21:31:25.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:25.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:25.701" status="PASS" endtime="20170707 21:31:25.950"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:25.950">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:25.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:25.701" status="PASS" endtime="20170707 21:31:25.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:25.951">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:25.951" status="PASS" endtime="20170707 21:31:25.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:25.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:25.951" status="PASS" endtime="20170707 21:31:25.952"></status>
</kw>
<status starttime="20170707 21:31:25.697" status="PASS" endtime="20170707 21:31:25.952"></status>
</kw>
<status starttime="20170707 21:31:25.696" status="PASS" endtime="20170707 21:31:25.952"></status>
</kw>
<status starttime="20170707 21:31:25.696" status="PASS" endtime="20170707 21:31:25.952"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:25.953">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:25.952" status="PASS" endtime="20170707 21:31:25.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:25.955">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:25.955" status="PASS" endtime="20170707 21:31:25.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:25.956">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:25.956" status="PASS" endtime="20170707 21:31:25.957"></status>
</kw>
<status starttime="20170707 21:31:25.955" status="PASS" endtime="20170707 21:31:25.957"></status>
</kw>
<status starttime="20170707 21:31:25.954" status="PASS" endtime="20170707 21:31:25.957"></status>
</kw>
<status starttime="20170707 21:31:25.953" status="PASS" endtime="20170707 21:31:25.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:26.048">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:26.049">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:25.957" status="PASS" endtime="20170707 21:31:26.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:26.051">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:26.050" status="PASS" endtime="20170707 21:31:26.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:26.052">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:26.051" status="PASS" endtime="20170707 21:31:26.052"></status>
</kw>
<status starttime="20170707 21:31:26.051" status="PASS" endtime="20170707 21:31:26.052"></status>
</kw>
<status starttime="20170707 21:31:26.049" status="PASS" endtime="20170707 21:31:26.052"></status>
</kw>
<status starttime="20170707 21:31:26.049" status="PASS" endtime="20170707 21:31:26.052"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:26.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:25.695" status="PASS" endtime="20170707 21:31:26.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:26.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:26.053" status="PASS" endtime="20170707 21:31:26.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:26.054">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:26.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:26.054">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:26.053" status="PASS" endtime="20170707 21:31:26.054"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:26.054">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:25.694" status="PASS" endtime="20170707 21:31:26.054"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:26.054">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:25.694" status="PASS" endtime="20170707 21:31:26.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:26.055">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:26.055" status="FAIL" endtime="20170707 21:31:26.055"></status>
</kw>
<status starttime="20170707 21:31:25.693" status="FAIL" endtime="20170707 21:31:26.055"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.062">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:36.061" status="PASS" endtime="20170707 21:31:36.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:36.063" status="PASS" endtime="20170707 21:31:36.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:36.063" status="PASS" endtime="20170707 21:31:36.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:36.064" status="PASS" endtime="20170707 21:31:36.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:36.065" status="PASS" endtime="20170707 21:31:36.258"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:36.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:36.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:36.065" status="PASS" endtime="20170707 21:31:36.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:36.259" status="PASS" endtime="20170707 21:31:36.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:36.260" status="PASS" endtime="20170707 21:31:36.261"></status>
</kw>
<status starttime="20170707 21:31:36.061" status="PASS" endtime="20170707 21:31:36.261"></status>
</kw>
<status starttime="20170707 21:31:36.060" status="PASS" endtime="20170707 21:31:36.261"></status>
</kw>
<status starttime="20170707 21:31:36.059" status="PASS" endtime="20170707 21:31:36.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.261">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:36.261" status="PASS" endtime="20170707 21:31:36.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.264">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:36.263" status="PASS" endtime="20170707 21:31:36.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.265">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:36.264" status="PASS" endtime="20170707 21:31:36.265"></status>
</kw>
<status starttime="20170707 21:31:36.264" status="PASS" endtime="20170707 21:31:36.265"></status>
</kw>
<status starttime="20170707 21:31:36.262" status="PASS" endtime="20170707 21:31:36.265"></status>
</kw>
<status starttime="20170707 21:31:36.262" status="PASS" endtime="20170707 21:31:36.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.381">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:36.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:36.265" status="PASS" endtime="20170707 21:31:36.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.383">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:36.383" status="PASS" endtime="20170707 21:31:36.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.384">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:36.384" status="PASS" endtime="20170707 21:31:36.385"></status>
</kw>
<status starttime="20170707 21:31:36.384" status="PASS" endtime="20170707 21:31:36.385"></status>
</kw>
<status starttime="20170707 21:31:36.382" status="PASS" endtime="20170707 21:31:36.385"></status>
</kw>
<status starttime="20170707 21:31:36.382" status="PASS" endtime="20170707 21:31:36.385"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:36.385">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:36.059" status="PASS" endtime="20170707 21:31:36.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:36.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:36.385" status="PASS" endtime="20170707 21:31:36.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:36.386">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:36.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:36.386">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:36.386" status="PASS" endtime="20170707 21:31:36.386"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:36.387">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:36.058" status="PASS" endtime="20170707 21:31:36.387"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:36.387">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:36.058" status="PASS" endtime="20170707 21:31:36.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:36.388">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:36.387" status="FAIL" endtime="20170707 21:31:36.388"></status>
</kw>
<status starttime="20170707 21:31:36.057" status="FAIL" endtime="20170707 21:31:36.388"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.394">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:46.393" status="PASS" endtime="20170707 21:31:46.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:46.394" status="PASS" endtime="20170707 21:31:46.395"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.395">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:46.395" status="PASS" endtime="20170707 21:31:46.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:46.395" status="PASS" endtime="20170707 21:31:46.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:46.397" status="PASS" endtime="20170707 21:31:46.584"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:46.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:46.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:46.396" status="PASS" endtime="20170707 21:31:46.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:46.585" status="PASS" endtime="20170707 21:31:46.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:46.586" status="PASS" endtime="20170707 21:31:46.586"></status>
</kw>
<status starttime="20170707 21:31:46.392" status="PASS" endtime="20170707 21:31:46.586"></status>
</kw>
<status starttime="20170707 21:31:46.392" status="PASS" endtime="20170707 21:31:46.586"></status>
</kw>
<status starttime="20170707 21:31:46.391" status="PASS" endtime="20170707 21:31:46.587"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.587">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:46.587" status="PASS" endtime="20170707 21:31:46.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.589">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:46.589" status="PASS" endtime="20170707 21:31:46.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.590">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:46.590" status="PASS" endtime="20170707 21:31:46.590"></status>
</kw>
<status starttime="20170707 21:31:46.590" status="PASS" endtime="20170707 21:31:46.590"></status>
</kw>
<status starttime="20170707 21:31:46.588" status="PASS" endtime="20170707 21:31:46.591"></status>
</kw>
<status starttime="20170707 21:31:46.587" status="PASS" endtime="20170707 21:31:46.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.658">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:46.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:46.591" status="PASS" endtime="20170707 21:31:46.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.660">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:46.659" status="PASS" endtime="20170707 21:31:46.660"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.663">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:46.663" status="PASS" endtime="20170707 21:31:46.663"></status>
</kw>
<status starttime="20170707 21:31:46.660" status="PASS" endtime="20170707 21:31:46.663"></status>
</kw>
<status starttime="20170707 21:31:46.659" status="PASS" endtime="20170707 21:31:46.663"></status>
</kw>
<status starttime="20170707 21:31:46.658" status="PASS" endtime="20170707 21:31:46.664"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:46.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:46.390" status="PASS" endtime="20170707 21:31:46.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:46.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:46.664" status="PASS" endtime="20170707 21:31:46.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:46.665">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:46.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:46.665">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:46.665" status="PASS" endtime="20170707 21:31:46.665"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:46.665">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:46.390" status="PASS" endtime="20170707 21:31:46.665"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:46.666">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:46.389" status="PASS" endtime="20170707 21:31:46.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:46.666">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:46.666" status="FAIL" endtime="20170707 21:31:46.666"></status>
</kw>
<status starttime="20170707 21:31:46.388" status="FAIL" endtime="20170707 21:31:46.667"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.672">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:31:56.672" status="PASS" endtime="20170707 21:31:56.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:31:56.673" status="PASS" endtime="20170707 21:31:56.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.674">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:31:56.673" status="PASS" endtime="20170707 21:31:56.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:31:56.674" status="PASS" endtime="20170707 21:31:56.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:31:56.675" status="PASS" endtime="20170707 21:31:56.877"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:56.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:31:56.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:56.675" status="PASS" endtime="20170707 21:31:56.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:56.878" status="PASS" endtime="20170707 21:31:56.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:56.878" status="PASS" endtime="20170707 21:31:56.879"></status>
</kw>
<status starttime="20170707 21:31:56.671" status="PASS" endtime="20170707 21:31:56.879"></status>
</kw>
<status starttime="20170707 21:31:56.670" status="PASS" endtime="20170707 21:31:56.879"></status>
</kw>
<status starttime="20170707 21:31:56.670" status="PASS" endtime="20170707 21:31:56.879"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.880">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:31:56.880" status="PASS" endtime="20170707 21:31:56.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.883">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:56.882" status="PASS" endtime="20170707 21:31:56.883"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.884">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:31:56.884" status="PASS" endtime="20170707 21:31:56.884"></status>
</kw>
<status starttime="20170707 21:31:56.883" status="PASS" endtime="20170707 21:31:56.884"></status>
</kw>
<status starttime="20170707 21:31:56.881" status="PASS" endtime="20170707 21:31:56.884"></status>
</kw>
<status starttime="20170707 21:31:56.881" status="PASS" endtime="20170707 21:31:56.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.952">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:31:56.952">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:56.885" status="PASS" endtime="20170707 21:31:56.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.955">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:56.954" status="PASS" endtime="20170707 21:31:56.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.956">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:31:56.956" status="PASS" endtime="20170707 21:31:56.956"></status>
</kw>
<status starttime="20170707 21:31:56.955" status="PASS" endtime="20170707 21:31:56.956"></status>
</kw>
<status starttime="20170707 21:31:56.954" status="PASS" endtime="20170707 21:31:56.956"></status>
</kw>
<status starttime="20170707 21:31:56.953" status="PASS" endtime="20170707 21:31:56.956"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:56.957">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:31:56.669" status="PASS" endtime="20170707 21:31:56.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:31:56.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:31:56.957" status="PASS" endtime="20170707 21:31:56.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:31:56.958">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:31:56.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:31:56.958">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:31:56.957" status="PASS" endtime="20170707 21:31:56.958"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:56.958">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:56.668" status="PASS" endtime="20170707 21:31:56.958"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:31:56.958">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:31:56.668" status="PASS" endtime="20170707 21:31:56.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:31:56.959">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:31:56.959" status="FAIL" endtime="20170707 21:31:56.959"></status>
</kw>
<status starttime="20170707 21:31:56.667" status="FAIL" endtime="20170707 21:31:56.959"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:06.964">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:06.964" status="PASS" endtime="20170707 21:32:06.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:06.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:06.966" status="PASS" endtime="20170707 21:32:06.966"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:06.967">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:06.966" status="PASS" endtime="20170707 21:32:06.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:06.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:06.967" status="PASS" endtime="20170707 21:32:06.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:06.968" status="PASS" endtime="20170707 21:32:07.215"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:07.215">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:07.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:06.968" status="PASS" endtime="20170707 21:32:07.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.216">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:07.216" status="PASS" endtime="20170707 21:32:07.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:07.217" status="PASS" endtime="20170707 21:32:07.217"></status>
</kw>
<status starttime="20170707 21:32:06.964" status="PASS" endtime="20170707 21:32:07.217"></status>
</kw>
<status starttime="20170707 21:32:06.963" status="PASS" endtime="20170707 21:32:07.217"></status>
</kw>
<status starttime="20170707 21:32:06.962" status="PASS" endtime="20170707 21:32:07.218"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:07.218">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:07.218" status="PASS" endtime="20170707 21:32:07.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:07.220">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:07.220" status="PASS" endtime="20170707 21:32:07.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.221">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:07.221" status="PASS" endtime="20170707 21:32:07.221"></status>
</kw>
<status starttime="20170707 21:32:07.220" status="PASS" endtime="20170707 21:32:07.221"></status>
</kw>
<status starttime="20170707 21:32:07.219" status="PASS" endtime="20170707 21:32:07.222"></status>
</kw>
<status starttime="20170707 21:32:07.218" status="PASS" endtime="20170707 21:32:07.222"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:07.314">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:07.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:07.222" status="PASS" endtime="20170707 21:32:07.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:07.316">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:07.316" status="PASS" endtime="20170707 21:32:07.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.317">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:07.317" status="PASS" endtime="20170707 21:32:07.317"></status>
</kw>
<status starttime="20170707 21:32:07.316" status="PASS" endtime="20170707 21:32:07.317"></status>
</kw>
<status starttime="20170707 21:32:07.315" status="PASS" endtime="20170707 21:32:07.317"></status>
</kw>
<status starttime="20170707 21:32:07.315" status="PASS" endtime="20170707 21:32:07.317"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:07.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:06.962" status="PASS" endtime="20170707 21:32:07.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:07.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:07.318" status="PASS" endtime="20170707 21:32:07.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:07.319">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:07.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:07.319">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:07.319" status="PASS" endtime="20170707 21:32:07.319"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:07.319">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:06.961" status="PASS" endtime="20170707 21:32:07.319"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:07.320">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:06.961" status="PASS" endtime="20170707 21:32:07.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:07.320">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:07.320" status="FAIL" endtime="20170707 21:32:07.320"></status>
</kw>
<status starttime="20170707 21:32:06.960" status="FAIL" endtime="20170707 21:32:07.320"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.326">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:17.326" status="PASS" endtime="20170707 21:32:17.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:17.327" status="PASS" endtime="20170707 21:32:17.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.328">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:17.328" status="PASS" endtime="20170707 21:32:17.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:17.328" status="PASS" endtime="20170707 21:32:17.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:17.329" status="PASS" endtime="20170707 21:32:17.620"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:17.620">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:17.620">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:17.329" status="PASS" endtime="20170707 21:32:17.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:17.621" status="PASS" endtime="20170707 21:32:17.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:17.622" status="PASS" endtime="20170707 21:32:17.622"></status>
</kw>
<status starttime="20170707 21:32:17.325" status="PASS" endtime="20170707 21:32:17.622"></status>
</kw>
<status starttime="20170707 21:32:17.325" status="PASS" endtime="20170707 21:32:17.622"></status>
</kw>
<status starttime="20170707 21:32:17.324" status="PASS" endtime="20170707 21:32:17.622"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.623">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:17.623" status="PASS" endtime="20170707 21:32:17.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.625">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:17.625" status="PASS" endtime="20170707 21:32:17.625"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.626">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:17.626" status="PASS" endtime="20170707 21:32:17.626"></status>
</kw>
<status starttime="20170707 21:32:17.625" status="PASS" endtime="20170707 21:32:17.626"></status>
</kw>
<status starttime="20170707 21:32:17.624" status="PASS" endtime="20170707 21:32:17.627"></status>
</kw>
<status starttime="20170707 21:32:17.623" status="PASS" endtime="20170707 21:32:17.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.741">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:17.741">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:17.627" status="PASS" endtime="20170707 21:32:17.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.744">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:17.743" status="PASS" endtime="20170707 21:32:17.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.745">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:17.745" status="PASS" endtime="20170707 21:32:17.745"></status>
</kw>
<status starttime="20170707 21:32:17.744" status="PASS" endtime="20170707 21:32:17.745"></status>
</kw>
<status starttime="20170707 21:32:17.743" status="PASS" endtime="20170707 21:32:17.745"></status>
</kw>
<status starttime="20170707 21:32:17.742" status="PASS" endtime="20170707 21:32:17.745"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:17.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:17.323" status="PASS" endtime="20170707 21:32:17.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:17.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:17.746" status="PASS" endtime="20170707 21:32:17.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:17.747">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:17.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:17.747">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:17.746" status="PASS" endtime="20170707 21:32:17.747"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:17.747">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:17.322" status="PASS" endtime="20170707 21:32:17.747"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:17.747">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:17.322" status="PASS" endtime="20170707 21:32:17.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:17.748">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:17.748" status="FAIL" endtime="20170707 21:32:17.748"></status>
</kw>
<status starttime="20170707 21:32:17.321" status="FAIL" endtime="20170707 21:32:17.748"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:27.753">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:27.753" status="PASS" endtime="20170707 21:32:27.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:27.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:27.754" status="PASS" endtime="20170707 21:32:27.754"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:27.755">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:27.755" status="PASS" endtime="20170707 21:32:27.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:27.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:27.755" status="PASS" endtime="20170707 21:32:27.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:27.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:27.756" status="PASS" endtime="20170707 21:32:27.992"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:27.992">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:27.992">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:27.756" status="PASS" endtime="20170707 21:32:27.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:27.993">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:27.993" status="PASS" endtime="20170707 21:32:27.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:27.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:27.994" status="PASS" endtime="20170707 21:32:27.994"></status>
</kw>
<status starttime="20170707 21:32:27.752" status="PASS" endtime="20170707 21:32:27.994"></status>
</kw>
<status starttime="20170707 21:32:27.752" status="PASS" endtime="20170707 21:32:27.994"></status>
</kw>
<status starttime="20170707 21:32:27.751" status="PASS" endtime="20170707 21:32:27.994"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:27.995">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:27.995" status="PASS" endtime="20170707 21:32:27.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:27.997">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:27.997" status="PASS" endtime="20170707 21:32:27.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:27.998">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:27.998" status="PASS" endtime="20170707 21:32:27.998"></status>
</kw>
<status starttime="20170707 21:32:27.997" status="PASS" endtime="20170707 21:32:27.998"></status>
</kw>
<status starttime="20170707 21:32:27.996" status="PASS" endtime="20170707 21:32:27.998"></status>
</kw>
<status starttime="20170707 21:32:27.995" status="PASS" endtime="20170707 21:32:27.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:28.074">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:28.074">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:27.999" status="PASS" endtime="20170707 21:32:28.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:28.076">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:28.075" status="PASS" endtime="20170707 21:32:28.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:28.077">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:28.077" status="PASS" endtime="20170707 21:32:28.077"></status>
</kw>
<status starttime="20170707 21:32:28.076" status="PASS" endtime="20170707 21:32:28.077"></status>
</kw>
<status starttime="20170707 21:32:28.075" status="PASS" endtime="20170707 21:32:28.077"></status>
</kw>
<status starttime="20170707 21:32:28.074" status="PASS" endtime="20170707 21:32:28.077"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:28.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:27.751" status="PASS" endtime="20170707 21:32:28.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:28.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:28.078" status="PASS" endtime="20170707 21:32:28.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:28.079">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:28.079">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:28.079">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:28.079" status="PASS" endtime="20170707 21:32:28.080"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:28.080">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:27.750" status="PASS" endtime="20170707 21:32:28.080"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:28.080">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:27.750" status="PASS" endtime="20170707 21:32:28.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:28.081">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:28.081" status="FAIL" endtime="20170707 21:32:28.081"></status>
</kw>
<status starttime="20170707 21:32:27.749" status="FAIL" endtime="20170707 21:32:28.082"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.088">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:38.087" status="PASS" endtime="20170707 21:32:38.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:38.089" status="PASS" endtime="20170707 21:32:38.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.090">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:38.089" status="PASS" endtime="20170707 21:32:38.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:38.090" status="PASS" endtime="20170707 21:32:38.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:38.091" status="PASS" endtime="20170707 21:32:38.383"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:38.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:38.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:38.091" status="PASS" endtime="20170707 21:32:38.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:38.384" status="PASS" endtime="20170707 21:32:38.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:38.384" status="PASS" endtime="20170707 21:32:38.385"></status>
</kw>
<status starttime="20170707 21:32:38.086" status="PASS" endtime="20170707 21:32:38.385"></status>
</kw>
<status starttime="20170707 21:32:38.086" status="PASS" endtime="20170707 21:32:38.385"></status>
</kw>
<status starttime="20170707 21:32:38.085" status="PASS" endtime="20170707 21:32:38.385"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.386">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:38.385" status="PASS" endtime="20170707 21:32:38.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.388">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:38.387" status="PASS" endtime="20170707 21:32:38.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.389">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:38.388" status="PASS" endtime="20170707 21:32:38.389"></status>
</kw>
<status starttime="20170707 21:32:38.388" status="PASS" endtime="20170707 21:32:38.389"></status>
</kw>
<status starttime="20170707 21:32:38.386" status="PASS" endtime="20170707 21:32:38.389"></status>
</kw>
<status starttime="20170707 21:32:38.386" status="PASS" endtime="20170707 21:32:38.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.456">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:38.456">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:38.389" status="PASS" endtime="20170707 21:32:38.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.458">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:38.457" status="PASS" endtime="20170707 21:32:38.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.459">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:38.459" status="PASS" endtime="20170707 21:32:38.459"></status>
</kw>
<status starttime="20170707 21:32:38.458" status="PASS" endtime="20170707 21:32:38.459"></status>
</kw>
<status starttime="20170707 21:32:38.457" status="PASS" endtime="20170707 21:32:38.460"></status>
</kw>
<status starttime="20170707 21:32:38.456" status="PASS" endtime="20170707 21:32:38.460"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:38.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:38.084" status="PASS" endtime="20170707 21:32:38.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:38.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:38.460" status="PASS" endtime="20170707 21:32:38.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:38.461">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:38.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:38.461">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:38.461" status="PASS" endtime="20170707 21:32:38.461"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:38.462">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:38.084" status="PASS" endtime="20170707 21:32:38.462"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:38.462">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:38.083" status="PASS" endtime="20170707 21:32:38.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:38.462">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:38.462" status="FAIL" endtime="20170707 21:32:38.463"></status>
</kw>
<status starttime="20170707 21:32:38.083" status="FAIL" endtime="20170707 21:32:38.463"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.468">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:48.467" status="PASS" endtime="20170707 21:32:48.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:48.468" status="PASS" endtime="20170707 21:32:48.469"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:48.469" status="PASS" endtime="20170707 21:32:48.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:48.470" status="PASS" endtime="20170707 21:32:48.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:48.471" status="PASS" endtime="20170707 21:32:48.719"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:48.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:48.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:48.470" status="PASS" endtime="20170707 21:32:48.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:48.720" status="PASS" endtime="20170707 21:32:48.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:48.721" status="PASS" endtime="20170707 21:32:48.722"></status>
</kw>
<status starttime="20170707 21:32:48.467" status="PASS" endtime="20170707 21:32:48.722"></status>
</kw>
<status starttime="20170707 21:32:48.466" status="PASS" endtime="20170707 21:32:48.722"></status>
</kw>
<status starttime="20170707 21:32:48.466" status="PASS" endtime="20170707 21:32:48.722"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.723">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:48.722" status="PASS" endtime="20170707 21:32:48.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.725">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:48.724" status="PASS" endtime="20170707 21:32:48.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.726">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:48.725" status="PASS" endtime="20170707 21:32:48.726"></status>
</kw>
<status starttime="20170707 21:32:48.725" status="PASS" endtime="20170707 21:32:48.726"></status>
</kw>
<status starttime="20170707 21:32:48.723" status="PASS" endtime="20170707 21:32:48.726"></status>
</kw>
<status starttime="20170707 21:32:48.723" status="PASS" endtime="20170707 21:32:48.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.844">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:48.844">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:48.726" status="PASS" endtime="20170707 21:32:48.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.846">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:48.846" status="PASS" endtime="20170707 21:32:48.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.847">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:48.847" status="PASS" endtime="20170707 21:32:48.847"></status>
</kw>
<status starttime="20170707 21:32:48.847" status="PASS" endtime="20170707 21:32:48.847"></status>
</kw>
<status starttime="20170707 21:32:48.845" status="PASS" endtime="20170707 21:32:48.848"></status>
</kw>
<status starttime="20170707 21:32:48.845" status="PASS" endtime="20170707 21:32:48.848"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:48.848">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:48.465" status="PASS" endtime="20170707 21:32:48.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:48.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:48.848" status="PASS" endtime="20170707 21:32:48.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:48.849">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:48.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:48.849">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:48.849" status="PASS" endtime="20170707 21:32:48.849"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:48.850">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:48.464" status="PASS" endtime="20170707 21:32:48.850"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:48.850">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:48.464" status="PASS" endtime="20170707 21:32:48.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:48.851">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:48.850" status="FAIL" endtime="20170707 21:32:48.851"></status>
</kw>
<status starttime="20170707 21:32:48.463" status="FAIL" endtime="20170707 21:32:48.851"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:58.865">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:58.865" status="PASS" endtime="20170707 21:32:58.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:58.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:58.866" status="PASS" endtime="20170707 21:32:58.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:58.867">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:58.867" status="PASS" endtime="20170707 21:32:58.867"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:58.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:58.867" status="PASS" endtime="20170707 21:32:58.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:58.868" status="PASS" endtime="20170707 21:32:59.149"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.149">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:59.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:58.868" status="PASS" endtime="20170707 21:32:59.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.149" status="PASS" endtime="20170707 21:32:59.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.150" status="PASS" endtime="20170707 21:32:59.151"></status>
</kw>
<status starttime="20170707 21:32:58.864" status="PASS" endtime="20170707 21:32:59.151"></status>
</kw>
<status starttime="20170707 21:32:58.864" status="PASS" endtime="20170707 21:32:59.151"></status>
</kw>
<status starttime="20170707 21:32:58.863" status="PASS" endtime="20170707 21:32:59.151"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.151">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170707 21:32:59.151" status="PASS" endtime="20170707 21:32:59.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.154">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:59.153" status="PASS" endtime="20170707 21:32:59.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.154">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170707 21:32:59.154" status="PASS" endtime="20170707 21:32:59.155"></status>
</kw>
<status starttime="20170707 21:32:59.154" status="PASS" endtime="20170707 21:32:59.155"></status>
</kw>
<status starttime="20170707 21:32:59.152" status="PASS" endtime="20170707 21:32:59.155"></status>
</kw>
<status starttime="20170707 21:32:59.152" status="PASS" endtime="20170707 21:32:59.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.224">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:59.224">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:59.155" status="PASS" endtime="20170707 21:32:59.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.226">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:59.226" status="PASS" endtime="20170707 21:32:59.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.227">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:59.227" status="PASS" endtime="20170707 21:32:59.227"></status>
</kw>
<status starttime="20170707 21:32:59.226" status="PASS" endtime="20170707 21:32:59.228"></status>
</kw>
<status starttime="20170707 21:32:59.225" status="PASS" endtime="20170707 21:32:59.228"></status>
</kw>
<status starttime="20170707 21:32:59.224" status="PASS" endtime="20170707 21:32:59.228"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.228">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:58.862" status="PASS" endtime="20170707 21:32:59.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.228" status="PASS" endtime="20170707 21:32:59.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.229">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:59.229">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:59.229">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:59.229" status="PASS" endtime="20170707 21:32:59.229"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.230">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:58.861" status="PASS" endtime="20170707 21:32:59.230"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.230">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170707 21:32:58.860" status="PASS" endtime="20170707 21:32:59.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:32:59.231">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:32:59.230" status="FAIL" endtime="20170707 21:32:59.231"></status>
</kw>
<status starttime="20170707 21:32:58.859" status="FAIL" endtime="20170707 21:32:59.231"></status>
</kw>
<msg level="FAIL" timestamp="20170707 21:32:59.231">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170707 21:22:57.691" status="FAIL" endtime="20170707 21:32:59.231"></status>
</kw>
<status starttime="20170707 21:21:55.783" status="FAIL" endtime="20170707 21:32:59.231"></status>
</kw>
<status starttime="20170707 21:19:19.436" status="FAIL" endtime="20170707 21:32:59.231"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.236">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:32:59.236" status="PASS" endtime="20170707 21:32:59.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:32:59.237" status="PASS" endtime="20170707 21:32:59.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.238">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:32:59.238" status="PASS" endtime="20170707 21:32:59.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:32:59.238" status="PASS" endtime="20170707 21:32:59.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:32:59.239" status="PASS" endtime="20170707 21:32:59.500"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:32:59.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:59.239" status="PASS" endtime="20170707 21:32:59.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.501" status="PASS" endtime="20170707 21:32:59.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.502" status="PASS" endtime="20170707 21:32:59.502"></status>
</kw>
<status starttime="20170707 21:32:59.235" status="PASS" endtime="20170707 21:32:59.502"></status>
</kw>
<status starttime="20170707 21:32:59.235" status="PASS" endtime="20170707 21:32:59.502"></status>
</kw>
<status starttime="20170707 21:32:59.234" status="PASS" endtime="20170707 21:32:59.502"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.503">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:32:59.503" status="PASS" endtime="20170707 21:32:59.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.505">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:32:59.504" status="PASS" endtime="20170707 21:32:59.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.506">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:32:59.506" status="PASS" endtime="20170707 21:32:59.506"></status>
</kw>
<status starttime="20170707 21:32:59.505" status="PASS" endtime="20170707 21:32:59.506"></status>
</kw>
<status starttime="20170707 21:32:59.504" status="PASS" endtime="20170707 21:32:59.506"></status>
</kw>
<status starttime="20170707 21:32:59.503" status="PASS" endtime="20170707 21:32:59.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.571">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:32:59.571">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:59.507" status="PASS" endtime="20170707 21:32:59.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.574">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:59.573" status="PASS" endtime="20170707 21:32:59.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.575">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:32:59.575" status="PASS" endtime="20170707 21:32:59.575"></status>
</kw>
<status starttime="20170707 21:32:59.574" status="PASS" endtime="20170707 21:32:59.575"></status>
</kw>
<status starttime="20170707 21:32:59.573" status="PASS" endtime="20170707 21:32:59.575"></status>
</kw>
<status starttime="20170707 21:32:59.572" status="PASS" endtime="20170707 21:32:59.575"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:32:59.234" status="PASS" endtime="20170707 21:32:59.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:32:59.576" status="PASS" endtime="20170707 21:32:59.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.577">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:32:59.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:32:59.577">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:32:59.577" status="PASS" endtime="20170707 21:32:59.577"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.577">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170707 21:32:59.233" status="PASS" endtime="20170707 21:32:59.577"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.578">${host_state} = Quiesced</msg>
<status starttime="20170707 21:32:59.233" status="PASS" endtime="20170707 21:32:59.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170707 21:32:59.578" status="PASS" endtime="20170707 21:32:59.579"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.579">${status} = True</msg>
<status starttime="20170707 21:32:59.578" status="PASS" endtime="20170707 21:32:59.579"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:32:59.579">${status} = True</msg>
<status starttime="20170707 21:32:59.232" status="PASS" endtime="20170707 21:32:59.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:32:59.626">Length is 9</msg>
<status starttime="20170707 21:32:59.626" status="PASS" endtime="20170707 21:32:59.626"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:32:59.641">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:33:02.654">${RC} = 0</msg>
<msg level="INFO" timestamp="20170707 21:33:02.654">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.823 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=2.31 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status starttime="20170707 21:32:59.626" status="PASS" endtime="20170707 21:33:02.654"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:02.657">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.823 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=2.31 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.40 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.736 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.736/1.319/2.317/0.631 ms</msg>
<status starttime="20170707 21:33:02.657" status="PASS" endtime="20170707 21:33:02.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170707 21:33:02.664" status="PASS" endtime="20170707 21:33:02.665"></status>
</kw>
<status starttime="20170707 21:32:59.625" status="PASS" endtime="20170707 21:33:02.665"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.683">${cur_time} = 2017-07-07 21:33:02:682911</msg>
<status starttime="20170707 21:33:02.683" status="PASS" endtime="20170707 21:33:02.683"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.684">${cur_time} = 20170707213302682911</msg>
<status starttime="20170707 21:33:02.683" status="PASS" endtime="20170707 21:33:02.684"></status>
</kw>
<status starttime="20170707 21:33:02.682" status="PASS" endtime="20170707 21:33:02.684"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:02.685">${FFDC_TIME} = 20170707213302682911</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.695">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170707 21:33:02.695" status="PASS" endtime="20170707 21:33:02.695"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.696">${suite_name} = 20170707213302682911_TestsTestBasicPoweron</msg>
<status starttime="20170707 21:33:02.695" status="PASS" endtime="20170707 21:33:02.696"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.696">${test_name} = PowerOnTest</msg>
<status starttime="20170707 21:33:02.696" status="PASS" endtime="20170707 21:33:02.696"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.697">${test_name} = 20170707213302682911_PowerOnTest</msg>
<status starttime="20170707 21:33:02.697" status="PASS" endtime="20170707 21:33:02.697"></status>
</kw>
<status starttime="20170707 21:33:02.694" status="PASS" endtime="20170707 21:33:02.697"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:02.698">${FFDC_DIR_PATH} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170707 21:33:02.698">${FFDC_PREFIX} = 20170707213302682911_</msg>
<msg level="INFO" timestamp="20170707 21:33:02.727">${LOG_PREFIX} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.728">Created directory '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.727" status="PASS" endtime="20170707 21:33:02.729"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:02.735">${FFDC_FILE_PATH} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.766">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.766" status="PASS" endtime="20170707 21:33:02.766"></status>
</kw>
<status starttime="20170707 21:33:02.765" status="PASS" endtime="20170707 21:33:02.767"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.768">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.767" status="PASS" endtime="20170707 21:33:02.768"></status>
</kw>
<status starttime="20170707 21:33:02.767" status="PASS" endtime="20170707 21:33:02.768"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.769">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.769" status="PASS" endtime="20170707 21:33:02.769"></status>
</kw>
<status starttime="20170707 21:33:02.768" status="PASS" endtime="20170707 21:33:02.769"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.771">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.770" status="PASS" endtime="20170707 21:33:02.771"></status>
</kw>
<status starttime="20170707 21:33:02.770" status="PASS" endtime="20170707 21:33:02.771"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.772">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.772" status="PASS" endtime="20170707 21:33:02.772"></status>
</kw>
<status starttime="20170707 21:33:02.771" status="PASS" endtime="20170707 21:33:02.772"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.773">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.773" status="PASS" endtime="20170707 21:33:02.773"></status>
</kw>
<status starttime="20170707 21:33:02.772" status="PASS" endtime="20170707 21:33:02.774"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.775">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.774" status="PASS" endtime="20170707 21:33:02.775"></status>
</kw>
<status starttime="20170707 21:33:02.774" status="PASS" endtime="20170707 21:33:02.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.778">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.776" status="PASS" endtime="20170707 21:33:02.778"></status>
</kw>
<status starttime="20170707 21:33:02.775" status="PASS" endtime="20170707 21:33:02.779"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.780">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.779" status="PASS" endtime="20170707 21:33:02.780"></status>
</kw>
<status starttime="20170707 21:33:02.779" status="PASS" endtime="20170707 21:33:02.780"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.782">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.781" status="PASS" endtime="20170707 21:33:02.782"></status>
</kw>
<status starttime="20170707 21:33:02.781" status="PASS" endtime="20170707 21:33:02.782"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.783">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.782" status="PASS" endtime="20170707 21:33:02.783"></status>
</kw>
<status starttime="20170707 21:33:02.782" status="PASS" endtime="20170707 21:33:02.783"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.784">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.784" status="PASS" endtime="20170707 21:33:02.784"></status>
</kw>
<status starttime="20170707 21:33:02.783" status="PASS" endtime="20170707 21:33:02.784"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:02.786">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:02.785" status="PASS" endtime="20170707 21:33:02.786"></status>
</kw>
<status starttime="20170707 21:33:02.785" status="PASS" endtime="20170707 21:33:02.786"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:02.788">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:33:02.788" status="FAIL" endtime="20170707 21:33:02.788"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:02.788">${has_host} = False</msg>
<status starttime="20170707 21:33:02.787" status="PASS" endtime="20170707 21:33:02.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:33:02.789" status="PASS" endtime="20170707 21:33:02.789"></status>
</kw>
<status starttime="20170707 21:33:02.789" status="PASS" endtime="20170707 21:33:02.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.791">${port_num} = 22</msg>
<status starttime="20170707 21:33:02.791" status="PASS" endtime="20170707 21:33:02.791"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.792">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:33:02.791" status="PASS" endtime="20170707 21:33:02.792"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:02.792">${https_num} = 443</msg>
<status starttime="20170707 21:33:02.792" status="PASS" endtime="20170707 21:33:02.792"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:02.793">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:33:02.793" status="PASS" endtime="20170707 21:33:02.793"></status>
</kw>
<status starttime="20170707 21:33:02.790" status="PASS" endtime="20170707 21:33:02.793"></status>
</kw>
<status starttime="20170707 21:33:02.790" status="PASS" endtime="20170707 21:33:02.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:02.794">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:33:02.794" status="FAIL" endtime="20170707 21:33:02.794"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:02.795">${has_port} = False</msg>
<status starttime="20170707 21:33:02.794" status="PASS" endtime="20170707 21:33:02.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:33:02.796" status="PASS" endtime="20170707 21:33:02.796"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:33:02.797" status="PASS" endtime="20170707 21:33:02.797"></status>
</kw>
<status starttime="20170707 21:33:02.796" status="PASS" endtime="20170707 21:33:02.797"></status>
</kw>
<status starttime="20170707 21:33:02.795" status="PASS" endtime="20170707 21:33:02.797"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:02.798">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:33:04.447">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:33:02.797" status="PASS" endtime="20170707 21:33:04.447"></status>
</kw>
<status starttime="20170707 21:33:02.786" status="PASS" endtime="20170707 21:33:04.447"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.448">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170707 21:33:04.533">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:04.534">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170707 21:33:04.534">${stderr} = </msg>
<status starttime="20170707 21:33:04.448" status="PASS" endtime="20170707 21:33:04.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:04.535">Length is 0</msg>
<status starttime="20170707 21:33:04.535" status="PASS" endtime="20170707 21:33:04.535"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:04.536">Length is 11</msg>
<status starttime="20170707 21:33:04.535" status="PASS" endtime="20170707 21:33:04.536"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:04.536">${model_name} = Witherspoon</msg>
<status starttime="20170707 21:33:02.786" status="PASS" endtime="20170707 21:33:04.536"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.540">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.539" status="PASS" endtime="20170707 21:33:04.540"></status>
</kw>
<status starttime="20170707 21:33:04.536" status="PASS" endtime="20170707 21:33:04.540"></status>
</kw>
<status starttime="20170707 21:33:02.780" status="PASS" endtime="20170707 21:33:04.540"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.541">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.541" status="PASS" endtime="20170707 21:33:04.541"></status>
</kw>
<status starttime="20170707 21:33:04.540" status="PASS" endtime="20170707 21:33:04.541"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.542">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170707 21:33:04.542" status="PASS" endtime="20170707 21:33:04.542"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.544">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.543" status="PASS" endtime="20170707 21:33:04.544"></status>
</kw>
<status starttime="20170707 21:33:04.542" status="PASS" endtime="20170707 21:33:04.544"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.545">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.544" status="PASS" endtime="20170707 21:33:04.545"></status>
</kw>
<status starttime="20170707 21:33:04.544" status="PASS" endtime="20170707 21:33:04.545"></status>
</kw>
<status starttime="20170707 21:33:04.542" status="PASS" endtime="20170707 21:33:04.545"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.547">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.546" status="PASS" endtime="20170707 21:33:04.547"></status>
</kw>
<status starttime="20170707 21:33:04.546" status="PASS" endtime="20170707 21:33:04.547"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.548">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.548" status="PASS" endtime="20170707 21:33:04.548"></status>
</kw>
<status starttime="20170707 21:33:04.547" status="PASS" endtime="20170707 21:33:04.548"></status>
</kw>
<status starttime="20170707 21:33:04.545" status="PASS" endtime="20170707 21:33:04.548"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.549">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.549" status="PASS" endtime="20170707 21:33:04.550"></status>
</kw>
<status starttime="20170707 21:33:04.548" status="PASS" endtime="20170707 21:33:04.550"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.551">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.550" status="PASS" endtime="20170707 21:33:04.551"></status>
</kw>
<status starttime="20170707 21:33:04.550" status="PASS" endtime="20170707 21:33:04.551"></status>
</kw>
<status starttime="20170707 21:33:04.548" status="PASS" endtime="20170707 21:33:04.551"></status>
</kw>
<status starttime="20170707 21:33:04.542" status="PASS" endtime="20170707 21:33:04.551"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:04.552">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:04.552" status="PASS" endtime="20170707 21:33:04.552"></status>
</kw>
<status starttime="20170707 21:33:04.551" status="PASS" endtime="20170707 21:33:04.552"></status>
</kw>
<status starttime="20170707 21:33:02.765" status="PASS" endtime="20170707 21:33:04.553"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.564">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170707 21:33:04.564" status="PASS" endtime="20170707 21:33:04.564"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.566">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('F...</msg>
<status starttime="20170707 21:33:04.566" status="PASS" endtime="20170707 21:33:04.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170707 21:33:04.567" status="PASS" endtime="20170707 21:33:04.567"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:04.567">@{ffdc_function_list} = [ Get Request FFDC | SEL Log | OS FFDC | Core Files | BMC Specific Files | FFDC Generic Report ]</msg>
<status starttime="20170707 21:33:04.566" status="PASS" endtime="20170707 21:33:04.567"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:04.570" status="PASS" endtime="20170707 21:33:04.570"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:04.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:04.570">${ret_values} = None</msg>
<status starttime="20170707 21:33:04.569" status="PASS" endtime="20170707 21:33:04.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:04.571" status="PASS" endtime="20170707 21:33:04.571"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:04.629">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:33:04.629" status="FAIL" endtime="20170707 21:33:04.630"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:04.630">${has_host} = False</msg>
<status starttime="20170707 21:33:04.629" status="PASS" endtime="20170707 21:33:04.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:33:04.631" status="PASS" endtime="20170707 21:33:04.631"></status>
</kw>
<status starttime="20170707 21:33:04.630" status="PASS" endtime="20170707 21:33:04.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.633">${port_num} = 22</msg>
<status starttime="20170707 21:33:04.632" status="PASS" endtime="20170707 21:33:04.633"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.633">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:33:04.633" status="PASS" endtime="20170707 21:33:04.633"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:04.634">${https_num} = 443</msg>
<status starttime="20170707 21:33:04.633" status="PASS" endtime="20170707 21:33:04.634"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:04.634">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:33:04.634" status="PASS" endtime="20170707 21:33:04.635"></status>
</kw>
<status starttime="20170707 21:33:04.632" status="PASS" endtime="20170707 21:33:04.635"></status>
</kw>
<status starttime="20170707 21:33:04.631" status="PASS" endtime="20170707 21:33:04.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:04.636">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:33:04.635" status="FAIL" endtime="20170707 21:33:04.636"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:04.636">${has_port} = False</msg>
<status starttime="20170707 21:33:04.635" status="PASS" endtime="20170707 21:33:04.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:33:04.638" status="PASS" endtime="20170707 21:33:04.638"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:33:04.638" status="PASS" endtime="20170707 21:33:04.639"></status>
</kw>
<status starttime="20170707 21:33:04.637" status="PASS" endtime="20170707 21:33:04.639"></status>
</kw>
<status starttime="20170707 21:33:04.637" status="PASS" endtime="20170707 21:33:04.639"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:04.639">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:33:06.372">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:33:04.639" status="PASS" endtime="20170707 21:33:06.372"></status>
</kw>
<status starttime="20170707 21:33:04.628" status="PASS" endtime="20170707 21:33:06.372"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.373">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170707 21:33:06.373" status="PASS" endtime="20170707 21:33:06.373"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.375">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170707 21:33:06.374" status="PASS" endtime="20170707 21:33:06.375"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.376">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_inventory.txt</msg>
<status starttime="20170707 21:33:06.375" status="PASS" endtime="20170707 21:33:06.376"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:06.379">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:06.378" status="PASS" endtime="20170707 21:33:06.381"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.381">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:06.381" status="PASS" endtime="20170707 21:33:06.382"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.382">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:06.382" status="PASS" endtime="20170707 21:33:06.382"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:06.382" status="PASS" endtime="20170707 21:33:06.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:06.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:06.384" status="PASS" endtime="20170707 21:33:06.576"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:06.576">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:06.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:06.383" status="PASS" endtime="20170707 21:33:06.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:06.577">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:06.576" status="PASS" endtime="20170707 21:33:06.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:06.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:06.577" status="PASS" endtime="20170707 21:33:06.578"></status>
</kw>
<status starttime="20170707 21:33:06.378" status="PASS" endtime="20170707 21:33:06.578"></status>
</kw>
<status starttime="20170707 21:33:06.377" status="PASS" endtime="20170707 21:33:06.578"></status>
</kw>
<status starttime="20170707 21:33:06.376" status="PASS" endtime="20170707 21:33:06.578"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:06.579">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170707 21:33:06.578" status="PASS" endtime="20170707 21:33:06.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:06.583" status="PASS" endtime="20170707 21:33:06.584"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:08.603">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:06.584" status="PASS" endtime="20170707 21:33:08.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:08.604" status="PASS" endtime="20170707 21:33:08.604"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:08.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:06.376" status="PASS" endtime="20170707 21:33:08.605"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:08.606" status="PASS" endtime="20170707 21:33:08.606"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:08.606">${status} = True</msg>
<status starttime="20170707 21:33:08.605" status="PASS" endtime="20170707 21:33:08.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170707 21:33:08.607" status="PASS" endtime="20170707 21:33:08.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.612">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:08.612">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170707 21:33:08.612">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status starttime="20170707 21:33:08.607" status="PASS" endtime="20170707 21:33:08.612"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:08.616">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_inventory.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:08.614" status="PASS" endtime="20170707 21:33:08.616"></status>
</kw>
<status starttime="20170707 21:33:08.613" status="PASS" endtime="20170707 21:33:08.616"></status>
</kw>
<status starttime="20170707 21:33:06.375" status="PASS" endtime="20170707 21:33:08.616"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.617">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_led.txt</msg>
<status starttime="20170707 21:33:08.616" status="PASS" endtime="20170707 21:33:08.617"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.620">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:08.620" status="PASS" endtime="20170707 21:33:08.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:08.620" status="PASS" endtime="20170707 21:33:08.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.621">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:08.621" status="PASS" endtime="20170707 21:33:08.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.622">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:08.622" status="PASS" endtime="20170707 21:33:08.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.814">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:08.623" status="PASS" endtime="20170707 21:33:08.814"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:08.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:08.814">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:08.622" status="PASS" endtime="20170707 21:33:08.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.815">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:08.814" status="PASS" endtime="20170707 21:33:08.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:08.815" status="PASS" endtime="20170707 21:33:08.815"></status>
</kw>
<status starttime="20170707 21:33:08.619" status="PASS" endtime="20170707 21:33:08.816"></status>
</kw>
<status starttime="20170707 21:33:08.618" status="PASS" endtime="20170707 21:33:08.816"></status>
</kw>
<status starttime="20170707 21:33:08.617" status="PASS" endtime="20170707 21:33:08.816"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.816">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170707 21:33:08.816" status="PASS" endtime="20170707 21:33:08.816"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:08.817" status="PASS" endtime="20170707 21:33:08.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.860">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:08.860">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 21:33:08.817" status="PASS" endtime="20170707 21:33:08.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:08.861" status="PASS" endtime="20170707 21:33:08.861"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:08.861">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 21:33:08.617" status="PASS" endtime="20170707 21:33:08.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 21:33:08.862">404 != 200</msg>
<status starttime="20170707 21:33:08.862" status="FAIL" endtime="20170707 21:33:08.863"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:08.863">${status} = False</msg>
<status starttime="20170707 21:33:08.861" status="PASS" endtime="20170707 21:33:08.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170707 21:33:08.864">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 21:33:08.864" status="PASS" endtime="20170707 21:33:08.864"></status>
</kw>
<status starttime="20170707 21:33:08.863" status="PASS" endtime="20170707 21:33:08.864"></status>
</kw>
<status starttime="20170707 21:33:08.616" status="PASS" endtime="20170707 21:33:08.864"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.866">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_record_log.txt</msg>
<status starttime="20170707 21:33:08.865" status="PASS" endtime="20170707 21:33:08.866"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:08.870">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:08.869" status="PASS" endtime="20170707 21:33:08.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:08.871" status="PASS" endtime="20170707 21:33:08.871"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.872">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:08.872" status="PASS" endtime="20170707 21:33:08.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:08.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:08.872" status="PASS" endtime="20170707 21:33:08.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:08.874" status="PASS" endtime="20170707 21:33:09.155"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:09.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:08.874" status="PASS" endtime="20170707 21:33:09.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.156">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.156" status="PASS" endtime="20170707 21:33:09.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.157" status="PASS" endtime="20170707 21:33:09.157"></status>
</kw>
<status starttime="20170707 21:33:08.869" status="PASS" endtime="20170707 21:33:09.158"></status>
</kw>
<status starttime="20170707 21:33:08.868" status="PASS" endtime="20170707 21:33:09.158"></status>
</kw>
<status starttime="20170707 21:33:08.867" status="PASS" endtime="20170707 21:33:09.158"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.158">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170707 21:33:09.158" status="PASS" endtime="20170707 21:33:09.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:09.159" status="PASS" endtime="20170707 21:33:09.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.218">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:09.218">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 21:33:09.159" status="PASS" endtime="20170707 21:33:09.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:09.218" status="PASS" endtime="20170707 21:33:09.219"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.219">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 21:33:08.866" status="PASS" endtime="20170707 21:33:09.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 21:33:09.220">404 != 200</msg>
<status starttime="20170707 21:33:09.220" status="FAIL" endtime="20170707 21:33:09.220"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.220">${status} = False</msg>
<status starttime="20170707 21:33:09.219" status="PASS" endtime="20170707 21:33:09.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170707 21:33:09.221">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 21:33:09.221" status="PASS" endtime="20170707 21:33:09.221"></status>
</kw>
<status starttime="20170707 21:33:09.221" status="PASS" endtime="20170707 21:33:09.221"></status>
</kw>
<status starttime="20170707 21:33:08.865" status="PASS" endtime="20170707 21:33:09.222"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.222">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_elog.txt</msg>
<status starttime="20170707 21:33:09.222" status="PASS" endtime="20170707 21:33:09.222"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.225">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:09.225" status="PASS" endtime="20170707 21:33:09.226"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.226">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:09.226" status="PASS" endtime="20170707 21:33:09.226"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.227">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:09.227" status="PASS" endtime="20170707 21:33:09.227"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:09.227" status="PASS" endtime="20170707 21:33:09.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:09.228" status="PASS" endtime="20170707 21:33:09.408"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:09.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.228" status="PASS" endtime="20170707 21:33:09.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.409" status="PASS" endtime="20170707 21:33:09.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.410" status="PASS" endtime="20170707 21:33:09.410"></status>
</kw>
<status starttime="20170707 21:33:09.224" status="PASS" endtime="20170707 21:33:09.410"></status>
</kw>
<status starttime="20170707 21:33:09.224" status="PASS" endtime="20170707 21:33:09.410"></status>
</kw>
<status starttime="20170707 21:33:09.223" status="PASS" endtime="20170707 21:33:09.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.411">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170707 21:33:09.411" status="PASS" endtime="20170707 21:33:09.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:09.411" status="PASS" endtime="20170707 21:33:09.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.619">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:09.619">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.412" status="PASS" endtime="20170707 21:33:09.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:09.620" status="PASS" endtime="20170707 21:33:09.620"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.620">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.222" status="PASS" endtime="20170707 21:33:09.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.621" status="PASS" endtime="20170707 21:33:09.622"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.622">${status} = True</msg>
<status starttime="20170707 21:33:09.621" status="PASS" endtime="20170707 21:33:09.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170707 21:33:09.622" status="PASS" endtime="20170707 21:33:09.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.624">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462305898, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f b5 b4 37 d3 00 00 00 0f b9 be be 1a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b2 ed 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 5f 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 2e 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d8 b8 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 56 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 00 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 88 e6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 93 1a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 51 fe 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5c d6 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 56 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6d c8 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 3c 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 18 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 8f f8 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 74 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f 6a 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 76 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 d2 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 72 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 e8 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c 64 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 e6 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 74 d8 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7e 24 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9c 92 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 aa ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c5 d4 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 20 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e2 28 00 00 00 00 00 63 4f 68 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e3 78 00 00 00 00 00 63 44 48 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 44 c8 00 00 00 00 00 63 49 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 6b 28 00 00 00 00 00 52 ec 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 97 01 01 00 00 00 78"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462310297, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462527010, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462531167, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462619002, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462739739, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:09.624">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170707 21:33:09.625">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "org.open_power.Error.Host.Event.Event",
            "Re...</msg>
<status starttime="20170707 21:33:09.623" status="PASS" endtime="20170707 21:33:09.625"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:09.627">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_elog.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:09.626" status="PASS" endtime="20170707 21:33:09.627"></status>
</kw>
<status starttime="20170707 21:33:09.625" status="PASS" endtime="20170707 21:33:09.627"></status>
</kw>
<status starttime="20170707 21:33:09.222" status="PASS" endtime="20170707 21:33:09.627"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.628">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_sensor_list.txt</msg>
<status starttime="20170707 21:33:09.627" status="PASS" endtime="20170707 21:33:09.628"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.631">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:09.631" status="PASS" endtime="20170707 21:33:09.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:09.632" status="PASS" endtime="20170707 21:33:09.632"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.633">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:09.632" status="PASS" endtime="20170707 21:33:09.633"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:09.633" status="PASS" endtime="20170707 21:33:09.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:09.634" status="PASS" endtime="20170707 21:33:09.837"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:09.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:09.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.634" status="PASS" endtime="20170707 21:33:09.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.838" status="PASS" endtime="20170707 21:33:09.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:09.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:09.839" status="PASS" endtime="20170707 21:33:09.839"></status>
</kw>
<status starttime="20170707 21:33:09.630" status="PASS" endtime="20170707 21:33:09.839"></status>
</kw>
<status starttime="20170707 21:33:09.630" status="PASS" endtime="20170707 21:33:09.839"></status>
</kw>
<status starttime="20170707 21:33:09.629" status="PASS" endtime="20170707 21:33:09.840"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:09.840">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170707 21:33:09.840" status="PASS" endtime="20170707 21:33:09.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:09.841" status="PASS" endtime="20170707 21:33:09.841"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.211">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:10.211">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.841" status="PASS" endtime="20170707 21:33:10.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:10.212" status="PASS" endtime="20170707 21:33:10.212"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.213">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:09.628" status="PASS" endtime="20170707 21:33:10.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.213" status="PASS" endtime="20170707 21:33:10.214"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.214">${status} = True</msg>
<status starttime="20170707 21:33:10.213" status="PASS" endtime="20170707 21:33:10.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170707 21:33:10.214" status="PASS" endtime="20170707 21:33:10.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.216">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:10.216">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170707 21:33:10.216">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170707 21:33:10.215" status="PASS" endtime="20170707 21:33:10.216"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:10.218">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_sensor_list.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:10.217" status="PASS" endtime="20170707 21:33:10.218"></status>
</kw>
<status starttime="20170707 21:33:10.216" status="PASS" endtime="20170707 21:33:10.218"></status>
</kw>
<status starttime="20170707 21:33:09.627" status="PASS" endtime="20170707 21:33:10.218"></status>
</kw>
<status starttime="20170707 21:33:06.375" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:06.374" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:06.373" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:06.373" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:04.627" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:04.571" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:04.568" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<status starttime="20170707 21:33:04.568" status="PASS" endtime="20170707 21:33:10.219"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:10.221" status="PASS" endtime="20170707 21:33:10.221"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:10.221">${ret_values} = None</msg>
<status starttime="20170707 21:33:10.220" status="PASS" endtime="20170707 21:33:10.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:10.221" status="PASS" endtime="20170707 21:33:10.222"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.279">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:10.278" status="PASS" endtime="20170707 21:33:10.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:10.280" status="PASS" endtime="20170707 21:33:10.280"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.282">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:10.282" status="PASS" endtime="20170707 21:33:10.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:10.283" status="PASS" endtime="20170707 21:33:10.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.473">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:10.285" status="PASS" endtime="20170707 21:33:10.473"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.473">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:10.474">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.284" status="PASS" endtime="20170707 21:33:10.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.474">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.474" status="PASS" endtime="20170707 21:33:10.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.475">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.475" status="PASS" endtime="20170707 21:33:10.475"></status>
</kw>
<status starttime="20170707 21:33:10.278" status="PASS" endtime="20170707 21:33:10.475"></status>
</kw>
<status starttime="20170707 21:33:10.276" status="PASS" endtime="20170707 21:33:10.475"></status>
</kw>
<status starttime="20170707 21:33:10.275" status="PASS" endtime="20170707 21:33:10.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.476">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170707 21:33:10.476" status="PASS" endtime="20170707 21:33:10.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:10.476" status="PASS" endtime="20170707 21:33:10.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.688">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:10.688">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.477" status="PASS" endtime="20170707 21:33:10.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:10.689" status="PASS" endtime="20170707 21:33:10.689"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.690">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.274" status="PASS" endtime="20170707 21:33:10.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.690" status="PASS" endtime="20170707 21:33:10.691"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.691">${status} = True</msg>
<status starttime="20170707 21:33:10.690" status="PASS" endtime="20170707 21:33:10.691"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170707 21:33:10.692" status="PASS" endtime="20170707 21:33:10.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.693">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462305898, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f b5 b4 37 d3 00 00 00 0f b9 be be 1a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b2 ed 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 5f 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 2e 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d8 b8 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 56 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 00 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 88 e6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 93 1a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 51 fe 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5c d6 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 56 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6d c8 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 3c 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 18 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 8f f8 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 74 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f 6a 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 76 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 d2 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 72 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 e8 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c 64 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 e6 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 74 d8 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7e 24 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9c 92 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 aa ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c5 d4 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 20 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e2 28 00 00 00 00 00 63 4f 68 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e3 78 00 00 00 00 00 63 44 48 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 44 c8 00 00 00 00 00 63 49 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 6b 28 00 00 00 00 00 52 ec 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 97 01 01 00 00 00 78"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462310297, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462527010, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462531167, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462619002, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1499462739739, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:10.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:10.694">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/6': {u'Resolved': 0, u'Id': 6, u'Timestamp': 1499462739739, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Informational', u'AdditionalData': []...</msg>
<status starttime="20170707 21:33:10.692" status="PASS" endtime="20170707 21:33:10.694"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.695">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status starttime="20170707 21:33:10.694" status="PASS" endtime="20170707 21:33:10.695"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.695">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel</msg>
<status starttime="20170707 21:33:10.695" status="PASS" endtime="20170707 21:33:10.695"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:10.696">Created file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:10.696" status="PASS" endtime="20170707 21:33:10.696"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.700">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:10.700" status="PASS" endtime="20170707 21:33:10.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:10.701" status="PASS" endtime="20170707 21:33:10.701"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.701">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:10.701" status="PASS" endtime="20170707 21:33:10.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:10.702" status="PASS" endtime="20170707 21:33:10.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.881">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:10.703" status="PASS" endtime="20170707 21:33:10.881"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.882">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:10.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.702" status="PASS" endtime="20170707 21:33:10.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.882">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.882" status="PASS" endtime="20170707 21:33:10.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.883" status="PASS" endtime="20170707 21:33:10.883"></status>
</kw>
<status starttime="20170707 21:33:10.699" status="PASS" endtime="20170707 21:33:10.883"></status>
</kw>
<status starttime="20170707 21:33:10.699" status="PASS" endtime="20170707 21:33:10.883"></status>
</kw>
<status starttime="20170707 21:33:10.698" status="PASS" endtime="20170707 21:33:10.883"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.884">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170707 21:33:10.884" status="PASS" endtime="20170707 21:33:10.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:10.884" status="PASS" endtime="20170707 21:33:10.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.970">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:10.970">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.885" status="PASS" endtime="20170707 21:33:10.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:10.970" status="PASS" endtime="20170707 21:33:10.971"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.971">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.697" status="PASS" endtime="20170707 21:33:10.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:10.971" status="PASS" endtime="20170707 21:33:10.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.972">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:10.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:10.972">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:10.972" status="PASS" endtime="20170707 21:33:10.972"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:10.973">${esel_data} = []</msg>
<status starttime="20170707 21:33:10.697" status="PASS" endtime="20170707 21:33:10.973"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.973">Length is 0</msg>
<msg level="INFO" timestamp="20170707 21:33:10.973">${length} = 0</msg>
<status starttime="20170707 21:33:10.973" status="PASS" endtime="20170707 21:33:10.973"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.974">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 21:33:10.974" status="PASS" endtime="20170707 21:33:10.974"></status>
</kw>
<status starttime="20170707 21:33:10.697" status="PASS" endtime="20170707 21:33:10.974"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:10.979">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:10.977" status="PASS" endtime="20170707 21:33:10.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:10.980" status="PASS" endtime="20170707 21:33:10.981"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.981">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:10.981" status="PASS" endtime="20170707 21:33:10.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:10.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:10.981" status="PASS" endtime="20170707 21:33:10.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:10.982" status="PASS" endtime="20170707 21:33:11.259"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.259">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:11.259">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.982" status="PASS" endtime="20170707 21:33:11.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.260" status="PASS" endtime="20170707 21:33:11.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.260" status="PASS" endtime="20170707 21:33:11.261"></status>
</kw>
<status starttime="20170707 21:33:10.977" status="PASS" endtime="20170707 21:33:11.261"></status>
</kw>
<status starttime="20170707 21:33:10.976" status="PASS" endtime="20170707 21:33:11.261"></status>
</kw>
<status starttime="20170707 21:33:10.976" status="PASS" endtime="20170707 21:33:11.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.262">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170707 21:33:11.262" status="PASS" endtime="20170707 21:33:11.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:11.263" status="PASS" endtime="20170707 21:33:11.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.448">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:11.448">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.264" status="PASS" endtime="20170707 21:33:11.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:11.449" status="PASS" endtime="20170707 21:33:11.449"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:10.975" status="PASS" endtime="20170707 21:33:11.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.450" status="PASS" endtime="20170707 21:33:11.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.451">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f b5 b4 37 d3 00 00 00 0f b9 be be 1a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b2 ed 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 5f 01 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 2e 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d8 b8 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 56 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 01 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 00 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 88 e6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 93 1a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 51 fe 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5c d6 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 56 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6d c8 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 3c 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 18 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 8f f8 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 74 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f 6a 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 76 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 d2 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 72 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 e8 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c 64 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 e6 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 74 d8 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7e 24 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9c 92 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 aa ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c5 d4 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 20 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 30 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e2 28 00 00 00 00 00 63 4f 68 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 4d e3 78 00 00 00 00 00 63 44 48 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 44 c8 00 00 00 00 00 63 49 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 72 00 01 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 00 00 63 6b 28 00 00 00 00 00 52 ec 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 97 01 01 00 00 00 78"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:11.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:11.451">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f b5 b4 37 d3 00 00 00 0f b9 be be 1a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90...</msg>
<status starttime="20170707 21:33:11.450" status="PASS" endtime="20170707 21:33:11.451"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.452">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f b5 b4 37 d3 00 00 00 0f b9 be be 1a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status starttime="20170707 21:33:10.974" status="PASS" endtime="20170707 21:33:11.452"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.452">Length is 1</msg>
<msg level="INFO" timestamp="20170707 21:33:11.452">${length} = 1</msg>
<status starttime="20170707 21:33:11.452" status="PASS" endtime="20170707 21:33:11.452"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170707 21:33:11.453" status="PASS" endtime="20170707 21:33:11.453"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:11.454">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:11.454" status="PASS" endtime="20170707 21:33:11.454"></status>
</kw>
<status starttime="20170707 21:33:11.453" status="PASS" endtime="20170707 21:33:11.455"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:11.456">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:11.455" status="PASS" endtime="20170707 21:33:11.456"></status>
</kw>
<status starttime="20170707 21:33:11.455" status="PASS" endtime="20170707 21:33:11.456"></status>
</kw>
<status starttime="20170707 21:33:10.974" status="PASS" endtime="20170707 21:33:11.456"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.459">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:11.459" status="PASS" endtime="20170707 21:33:11.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:11.460" status="PASS" endtime="20170707 21:33:11.461"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.461">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:11.461" status="PASS" endtime="20170707 21:33:11.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.462">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:11.461" status="PASS" endtime="20170707 21:33:11.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:11.463" status="PASS" endtime="20170707 21:33:11.664"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:11.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.462" status="PASS" endtime="20170707 21:33:11.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.665" status="PASS" endtime="20170707 21:33:11.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.665" status="PASS" endtime="20170707 21:33:11.666"></status>
</kw>
<status starttime="20170707 21:33:11.458" status="PASS" endtime="20170707 21:33:11.666"></status>
</kw>
<status starttime="20170707 21:33:11.458" status="PASS" endtime="20170707 21:33:11.666"></status>
</kw>
<status starttime="20170707 21:33:11.457" status="PASS" endtime="20170707 21:33:11.666"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.667">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170707 21:33:11.666" status="PASS" endtime="20170707 21:33:11.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:11.667" status="PASS" endtime="20170707 21:33:11.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:11.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.668" status="PASS" endtime="20170707 21:33:11.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:11.758" status="PASS" endtime="20170707 21:33:11.758"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.758">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.457" status="PASS" endtime="20170707 21:33:11.758"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.759">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.758" status="PASS" endtime="20170707 21:33:11.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.760">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:11.760">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:11.760">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90...</msg>
<status starttime="20170707 21:33:11.759" status="PASS" endtime="20170707 21:33:11.760"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.761">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 ...</msg>
<status starttime="20170707 21:33:11.456" status="PASS" endtime="20170707 21:33:11.761"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.761">Length is 1</msg>
<msg level="INFO" timestamp="20170707 21:33:11.761">${length} = 1</msg>
<status starttime="20170707 21:33:11.761" status="PASS" endtime="20170707 21:33:11.761"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170707 21:33:11.762" status="PASS" endtime="20170707 21:33:11.762"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:11.763">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:11.763" status="PASS" endtime="20170707 21:33:11.763"></status>
</kw>
<status starttime="20170707 21:33:11.762" status="PASS" endtime="20170707 21:33:11.764"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:11.765">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:11.764" status="PASS" endtime="20170707 21:33:11.765"></status>
</kw>
<status starttime="20170707 21:33:11.764" status="PASS" endtime="20170707 21:33:11.765"></status>
</kw>
<status starttime="20170707 21:33:11.456" status="PASS" endtime="20170707 21:33:11.765"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.770">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:11.769" status="PASS" endtime="20170707 21:33:11.770"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:11.771" status="PASS" endtime="20170707 21:33:11.771"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.772">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:11.772" status="PASS" endtime="20170707 21:33:11.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.773">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:11.773" status="PASS" endtime="20170707 21:33:11.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.954">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:11.774" status="PASS" endtime="20170707 21:33:11.955"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:11.955">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:11.955">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.774" status="PASS" endtime="20170707 21:33:11.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.955">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.955" status="PASS" endtime="20170707 21:33:11.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:11.956">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:11.956" status="PASS" endtime="20170707 21:33:11.956"></status>
</kw>
<status starttime="20170707 21:33:11.768" status="PASS" endtime="20170707 21:33:11.957"></status>
</kw>
<status starttime="20170707 21:33:11.768" status="PASS" endtime="20170707 21:33:11.957"></status>
</kw>
<status starttime="20170707 21:33:11.767" status="PASS" endtime="20170707 21:33:11.957"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:11.957">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170707 21:33:11.957" status="PASS" endtime="20170707 21:33:11.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:11.958" status="PASS" endtime="20170707 21:33:11.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.051">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:12.051">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.958" status="PASS" endtime="20170707 21:33:12.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:12.052" status="PASS" endtime="20170707 21:33:12.052"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:11.767" status="PASS" endtime="20170707 21:33:12.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.053" status="PASS" endtime="20170707 21:33:12.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.054">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 da 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 70 8a 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 cf 8a 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 d9 14 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd 52 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9a ce 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 87 fc 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 92 36 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 44 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 1e 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 a4 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 16 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 8a 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 5a 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 3a 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 bc 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f b2 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a7 b6 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 6e 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a6 a8 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb 2e 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d4 8e 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3b f2 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 58 3e 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 73 f4 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7d 40 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9b ae 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 a9 d0 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c6 30 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e3 76 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 80 00 10 53 07 01 10 3f 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00 36 80 00 0c 51 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 36 80 00 0c 53 07 01 10 3f 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 37 80 00 0c 54 07 01 10 3f
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:12.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:12.054">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90...</msg>
<status starttime="20170707 21:33:12.053" status="PASS" endtime="20170707 21:33:12.054"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.055">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0f 80 e8 9a c0 00 00 00 0f 82 23 7f cd 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 20 90 00 00 20 ...</msg>
<status starttime="20170707 21:33:11.765" status="PASS" endtime="20170707 21:33:12.055"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.055">Length is 1</msg>
<msg level="INFO" timestamp="20170707 21:33:12.055">${length} = 1</msg>
<status starttime="20170707 21:33:12.055" status="PASS" endtime="20170707 21:33:12.055"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170707 21:33:12.055" status="PASS" endtime="20170707 21:33:12.056"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:12.057">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:12.057" status="PASS" endtime="20170707 21:33:12.057"></status>
</kw>
<status starttime="20170707 21:33:12.056" status="PASS" endtime="20170707 21:33:12.057"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:12.059">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_esel&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:12.058" status="PASS" endtime="20170707 21:33:12.059"></status>
</kw>
<status starttime="20170707 21:33:12.058" status="PASS" endtime="20170707 21:33:12.059"></status>
</kw>
<status starttime="20170707 21:33:11.765" status="PASS" endtime="20170707 21:33:12.059"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.063">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:12.062" status="PASS" endtime="20170707 21:33:12.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:12.063" status="PASS" endtime="20170707 21:33:12.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:12.064" status="PASS" endtime="20170707 21:33:12.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:12.064" status="PASS" endtime="20170707 21:33:12.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.316">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:12.065" status="PASS" endtime="20170707 21:33:12.316"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:12.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.065" status="PASS" endtime="20170707 21:33:12.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.317" status="PASS" endtime="20170707 21:33:12.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.317" status="PASS" endtime="20170707 21:33:12.318"></status>
</kw>
<status starttime="20170707 21:33:12.062" status="PASS" endtime="20170707 21:33:12.318"></status>
</kw>
<status starttime="20170707 21:33:12.061" status="PASS" endtime="20170707 21:33:12.318"></status>
</kw>
<status starttime="20170707 21:33:12.061" status="PASS" endtime="20170707 21:33:12.318"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.319">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170707 21:33:12.318" status="PASS" endtime="20170707 21:33:12.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:12.319" status="PASS" endtime="20170707 21:33:12.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.539">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:12.539">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.320" status="PASS" endtime="20170707 21:33:12.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:12.539" status="PASS" endtime="20170707 21:33:12.540"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.060" status="PASS" endtime="20170707 21:33:12.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.540" status="PASS" endtime="20170707 21:33:12.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.541">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:12.541">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:12.542">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:12.541" status="PASS" endtime="20170707 21:33:12.542"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.542">${esel_data} = []</msg>
<status starttime="20170707 21:33:12.059" status="PASS" endtime="20170707 21:33:12.542"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.542">Length is 0</msg>
<msg level="INFO" timestamp="20170707 21:33:12.542">${length} = 0</msg>
<status starttime="20170707 21:33:12.542" status="PASS" endtime="20170707 21:33:12.542"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.543">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 21:33:12.543" status="PASS" endtime="20170707 21:33:12.543"></status>
</kw>
<status starttime="20170707 21:33:12.059" status="PASS" endtime="20170707 21:33:12.543"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.551">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:12.551" status="PASS" endtime="20170707 21:33:12.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:12.552" status="PASS" endtime="20170707 21:33:12.553"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.554">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:12.553" status="PASS" endtime="20170707 21:33:12.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:12.554" status="PASS" endtime="20170707 21:33:12.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:12.556" status="PASS" endtime="20170707 21:33:12.745"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.749">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:12.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.555" status="PASS" endtime="20170707 21:33:12.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.750">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.750" status="PASS" endtime="20170707 21:33:12.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.751" status="PASS" endtime="20170707 21:33:12.751"></status>
</kw>
<status starttime="20170707 21:33:12.550" status="PASS" endtime="20170707 21:33:12.751"></status>
</kw>
<status starttime="20170707 21:33:12.550" status="PASS" endtime="20170707 21:33:12.751"></status>
</kw>
<status starttime="20170707 21:33:12.549" status="PASS" endtime="20170707 21:33:12.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.752">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170707 21:33:12.752" status="PASS" endtime="20170707 21:33:12.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 21:33:12.752" status="PASS" endtime="20170707 21:33:12.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.835">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:12.835">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.753" status="PASS" endtime="20170707 21:33:12.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 21:33:12.836" status="PASS" endtime="20170707 21:33:12.836"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:12.544" status="PASS" endtime="20170707 21:33:12.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:12.837" status="PASS" endtime="20170707 21:33:12.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.838">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:12.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:12.838">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:12.838" status="PASS" endtime="20170707 21:33:12.838"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.838">${esel_data} = []</msg>
<status starttime="20170707 21:33:12.544" status="PASS" endtime="20170707 21:33:12.838"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.839">Length is 0</msg>
<msg level="INFO" timestamp="20170707 21:33:12.839">${length} = 0</msg>
<status starttime="20170707 21:33:12.839" status="PASS" endtime="20170707 21:33:12.839"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.840">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 21:33:12.839" status="PASS" endtime="20170707 21:33:12.840"></status>
</kw>
<status starttime="20170707 21:33:12.543" status="PASS" endtime="20170707 21:33:12.840"></status>
</kw>
<status starttime="20170707 21:33:10.696" status="PASS" endtime="20170707 21:33:12.840"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:12.848">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:33:12.864">${out} = </msg>
<status starttime="20170707 21:33:12.840" status="PASS" endtime="20170707 21:33:12.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:12.868">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170707 21:33:12.867" status="FAIL" endtime="20170707 21:33:12.868"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.868">${status} = False</msg>
<status starttime="20170707 21:33:12.866" status="PASS" endtime="20170707 21:33:12.868"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.869">Returning from the enclosing user keyword.</msg>
<status starttime="20170707 21:33:12.868" status="PASS" endtime="20170707 21:33:12.869"></status>
</kw>
<status starttime="20170707 21:33:10.274" status="PASS" endtime="20170707 21:33:12.875"></status>
</kw>
<status starttime="20170707 21:33:10.222" status="PASS" endtime="20170707 21:33:12.875"></status>
</kw>
<status starttime="20170707 21:33:10.219" status="PASS" endtime="20170707 21:33:12.884"></status>
</kw>
<status starttime="20170707 21:33:10.219" status="PASS" endtime="20170707 21:33:12.884"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:12.889" status="PASS" endtime="20170707 21:33:12.898"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.898">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:12.898">${ret_values} = None</msg>
<status starttime="20170707 21:33:12.888" status="PASS" endtime="20170707 21:33:12.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:12.899" status="PASS" endtime="20170707 21:33:12.899"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:12.959">Returning from the enclosing user keyword.</msg>
<status starttime="20170707 21:33:12.959" status="PASS" endtime="20170707 21:33:12.959"></status>
</kw>
<status starttime="20170707 21:33:12.958" status="PASS" endtime="20170707 21:33:12.959"></status>
</kw>
<status starttime="20170707 21:33:12.900" status="PASS" endtime="20170707 21:33:12.959"></status>
</kw>
<status starttime="20170707 21:33:12.885" status="PASS" endtime="20170707 21:33:12.960"></status>
</kw>
<status starttime="20170707 21:33:12.884" status="PASS" endtime="20170707 21:33:12.960"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:12.962" status="PASS" endtime="20170707 21:33:12.962"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:12.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:12.962">${ret_values} = None</msg>
<status starttime="20170707 21:33:12.961" status="PASS" endtime="20170707 21:33:12.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:12.963" status="PASS" endtime="20170707 21:33:12.963"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:13.009">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:33:13.006" status="FAIL" endtime="20170707 21:33:13.009"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:13.009">${has_host} = False</msg>
<status starttime="20170707 21:33:13.002" status="PASS" endtime="20170707 21:33:13.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:33:13.012" status="PASS" endtime="20170707 21:33:13.017"></status>
</kw>
<status starttime="20170707 21:33:13.010" status="PASS" endtime="20170707 21:33:13.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:13.019">${port_num} = 22</msg>
<status starttime="20170707 21:33:13.019" status="PASS" endtime="20170707 21:33:13.019"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:13.020">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:33:13.020" status="PASS" endtime="20170707 21:33:13.020"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:13.021">${https_num} = 443</msg>
<status starttime="20170707 21:33:13.021" status="PASS" endtime="20170707 21:33:13.021"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:13.022">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:33:13.021" status="PASS" endtime="20170707 21:33:13.022"></status>
</kw>
<status starttime="20170707 21:33:13.018" status="PASS" endtime="20170707 21:33:13.022"></status>
</kw>
<status starttime="20170707 21:33:13.017" status="PASS" endtime="20170707 21:33:13.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:13.023">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:33:13.023" status="FAIL" endtime="20170707 21:33:13.024"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:13.024">${has_port} = False</msg>
<status starttime="20170707 21:33:13.023" status="PASS" endtime="20170707 21:33:13.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:33:13.026" status="PASS" endtime="20170707 21:33:13.026"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:33:13.027" status="PASS" endtime="20170707 21:33:13.028"></status>
</kw>
<status starttime="20170707 21:33:13.025" status="PASS" endtime="20170707 21:33:13.028"></status>
</kw>
<status starttime="20170707 21:33:13.024" status="PASS" endtime="20170707 21:33:13.028"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:13.029">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:33:14.885">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:33:13.028" status="PASS" endtime="20170707 21:33:14.886"></status>
</kw>
<status starttime="20170707 21:33:13.002" status="PASS" endtime="20170707 21:33:14.886"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:14.887">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170707 21:33:14.982">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170707 21:33:14.983">${core_files} = </msg>
<status starttime="20170707 21:33:14.886" status="PASS" endtime="20170707 21:33:14.983"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:14.984">@{core_list} = [ ]</msg>
<status starttime="20170707 21:33:14.983" status="PASS" endtime="20170707 21:33:14.984"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170707 21:33:14.985" status="PASS" endtime="20170707 21:33:15.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170707 21:33:15.024" status="PASS" endtime="20170707 21:33:15.967"></status>
</kw>
<status starttime="20170707 21:33:15.023" status="PASS" endtime="20170707 21:33:15.967"></status>
</kw>
<status starttime="20170707 21:33:15.023" status="PASS" endtime="20170707 21:33:15.967"></status>
</kw>
<status starttime="20170707 21:33:14.984" status="PASS" endtime="20170707 21:33:15.967"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170707 21:33:15.968" status="PASS" endtime="20170707 21:33:15.968"></status>
</kw>
<status starttime="20170707 21:33:13.001" status="PASS" endtime="20170707 21:33:15.968"></status>
</kw>
<status starttime="20170707 21:33:12.963" status="PASS" endtime="20170707 21:33:15.968"></status>
</kw>
<status starttime="20170707 21:33:12.960" status="PASS" endtime="20170707 21:33:15.968"></status>
</kw>
<status starttime="20170707 21:33:12.960" status="PASS" endtime="20170707 21:33:15.968"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:15.970" status="PASS" endtime="20170707 21:33:15.970"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:15.971">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:15.971">${ret_values} = None</msg>
<status starttime="20170707 21:33:15.970" status="PASS" endtime="20170707 21:33:15.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:15.971" status="PASS" endtime="20170707 21:33:15.971"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:16.019">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:33:16.018" status="FAIL" endtime="20170707 21:33:16.019"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:16.019">${has_host} = False</msg>
<status starttime="20170707 21:33:16.018" status="PASS" endtime="20170707 21:33:16.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:33:16.020" status="PASS" endtime="20170707 21:33:16.021"></status>
</kw>
<status starttime="20170707 21:33:16.020" status="PASS" endtime="20170707 21:33:16.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:16.023">${port_num} = 22</msg>
<status starttime="20170707 21:33:16.022" status="PASS" endtime="20170707 21:33:16.023"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:16.023">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:33:16.023" status="PASS" endtime="20170707 21:33:16.023"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:16.024">${https_num} = 443</msg>
<status starttime="20170707 21:33:16.023" status="PASS" endtime="20170707 21:33:16.024"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:16.025">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:33:16.024" status="PASS" endtime="20170707 21:33:16.025"></status>
</kw>
<status starttime="20170707 21:33:16.022" status="PASS" endtime="20170707 21:33:16.025"></status>
</kw>
<status starttime="20170707 21:33:16.021" status="PASS" endtime="20170707 21:33:16.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:16.026">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:33:16.026" status="FAIL" endtime="20170707 21:33:16.026"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:16.026">${has_port} = False</msg>
<status starttime="20170707 21:33:16.025" status="PASS" endtime="20170707 21:33:16.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:33:16.028" status="PASS" endtime="20170707 21:33:16.028"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:33:16.028" status="PASS" endtime="20170707 21:33:16.029"></status>
</kw>
<status starttime="20170707 21:33:16.027" status="PASS" endtime="20170707 21:33:16.029"></status>
</kw>
<status starttime="20170707 21:33:16.026" status="PASS" endtime="20170707 21:33:16.029"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:16.030">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:33:17.701">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:33:16.029" status="PASS" endtime="20170707 21:33:17.702"></status>
</kw>
<status starttime="20170707 21:33:16.016" status="PASS" endtime="20170707 21:33:17.702"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.703">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170707 21:33:17.703" status="PASS" endtime="20170707 21:33:17.703"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.704">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status starttime="20170707 21:33:17.704" status="PASS" endtime="20170707 21:33:17.704"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.705">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_procinfo.txt</msg>
<status starttime="20170707 21:33:17.705" status="PASS" endtime="20170707 21:33:17.705"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 21:33:17.706" status="PASS" endtime="20170707 21:33:17.707"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.707">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170707 21:33:17.765">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:17.765">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170707 21:33:17.765">${stderr} = </msg>
<status starttime="20170707 21:33:17.707" status="PASS" endtime="20170707 21:33:17.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:17.772">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_procinfo.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:17.771" status="PASS" endtime="20170707 21:33:17.772"></status>
</kw>
<status starttime="20170707 21:33:17.771" status="PASS" endtime="20170707 21:33:17.772"></status>
</kw>
<status starttime="20170707 21:33:17.766" status="PASS" endtime="20170707 21:33:17.772"></status>
</kw>
<status starttime="20170707 21:33:17.706" status="PASS" endtime="20170707 21:33:17.773"></status>
</kw>
<status starttime="20170707 21:33:17.705" status="PASS" endtime="20170707 21:33:17.773"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.773">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_journalctl.txt</msg>
<status starttime="20170707 21:33:17.773" status="PASS" endtime="20170707 21:33:17.773"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 21:33:17.774" status="PASS" endtime="20170707 21:33:17.775"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:17.775">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.096">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.103">${stdout} = -- Logs begin at Fri 2017-07-07 21:07:20 UTC, end at Fri 2017-07-07 21:33:17 UTC. --
Jul 07 21:07:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 07 21:07:20 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170707 21:33:23.103">${stderr} = </msg>
<status starttime="20170707 21:33:17.775" status="PASS" endtime="20170707 21:33:23.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:23.118">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_journalctl.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:23.115" status="PASS" endtime="20170707 21:33:23.118"></status>
</kw>
<status starttime="20170707 21:33:23.109" status="PASS" endtime="20170707 21:33:23.118"></status>
</kw>
<status starttime="20170707 21:33:23.104" status="PASS" endtime="20170707 21:33:23.122"></status>
</kw>
<status starttime="20170707 21:33:17.774" status="PASS" endtime="20170707 21:33:23.122"></status>
</kw>
<status starttime="20170707 21:33:17.773" status="PASS" endtime="20170707 21:33:23.122"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.123">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_dmesg.txt</msg>
<status starttime="20170707 21:33:23.122" status="PASS" endtime="20170707 21:33:23.123"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 21:33:23.124" status="PASS" endtime="20170707 21:33:23.124"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.125">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.284">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.284">${stdout} = [  558.060000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  558.060000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  558.060000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<msg level="INFO" timestamp="20170707 21:33:23.285">${stderr} = </msg>
<status starttime="20170707 21:33:23.125" status="PASS" endtime="20170707 21:33:23.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:23.295">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_dmesg.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:23.290" status="PASS" endtime="20170707 21:33:23.295"></status>
</kw>
<status starttime="20170707 21:33:23.290" status="PASS" endtime="20170707 21:33:23.295"></status>
</kw>
<status starttime="20170707 21:33:23.285" status="PASS" endtime="20170707 21:33:23.295"></status>
</kw>
<status starttime="20170707 21:33:23.123" status="PASS" endtime="20170707 21:33:23.296"></status>
</kw>
<status starttime="20170707 21:33:23.122" status="PASS" endtime="20170707 21:33:23.296"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.296">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_meminfo.txt</msg>
<status starttime="20170707 21:33:23.296" status="PASS" endtime="20170707 21:33:23.296"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 21:33:23.298" status="PASS" endtime="20170707 21:33:23.298"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.298">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.376">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.376">${stdout} = MemTotal:         432332 kB
MemFree:          268232 kB
MemAvailable:     313372 kB
Buffers:           10988 kB
Cached:            51412 kB
SwapCached:            0 kB
Active:           112152 kB
Inac...</msg>
<msg level="INFO" timestamp="20170707 21:33:23.376">${stderr} = </msg>
<status starttime="20170707 21:33:23.298" status="PASS" endtime="20170707 21:33:23.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:23.392">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_meminfo.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:23.387" status="PASS" endtime="20170707 21:33:23.392"></status>
</kw>
<status starttime="20170707 21:33:23.387" status="PASS" endtime="20170707 21:33:23.392"></status>
</kw>
<status starttime="20170707 21:33:23.377" status="PASS" endtime="20170707 21:33:23.392"></status>
</kw>
<status starttime="20170707 21:33:23.297" status="PASS" endtime="20170707 21:33:23.392"></status>
</kw>
<status starttime="20170707 21:33:23.296" status="PASS" endtime="20170707 21:33:23.392"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.393">${logpath} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_proc_list.txt</msg>
<status starttime="20170707 21:33:23.392" status="PASS" endtime="20170707 21:33:23.393"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 21:33:23.394" status="PASS" endtime="20170707 21:33:23.394"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.395">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.781">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:23.781">${stdout} = Mem: 164224K used, 268108K free, 14880K shrd, 10988K buff, 51416K cached
CPU:  36% usr  18% sys   0% nic  45% idle   0% io   0% irq   0% sirq
Load average: 0.76 0.70 0.92 1/149 2657
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170707 21:33:23.782">${stderr} = </msg>
<status starttime="20170707 21:33:23.394" status="PASS" endtime="20170707 21:33:23.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:23.788">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_proc_list.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:23.787" status="PASS" endtime="20170707 21:33:23.788"></status>
</kw>
<status starttime="20170707 21:33:23.787" status="PASS" endtime="20170707 21:33:23.788"></status>
</kw>
<status starttime="20170707 21:33:23.782" status="PASS" endtime="20170707 21:33:23.788"></status>
</kw>
<status starttime="20170707 21:33:23.393" status="PASS" endtime="20170707 21:33:23.788"></status>
</kw>
<status starttime="20170707 21:33:23.392" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:17.705" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:17.703" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:17.703" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:17.703" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:16.015" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:15.972" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:15.969" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<status starttime="20170707 21:33:15.968" status="PASS" endtime="20170707 21:33:23.789"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 21:33:23.791" status="PASS" endtime="20170707 21:33:23.791"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:23.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:23.791">${ret_values} = None</msg>
<status starttime="20170707 21:33:23.790" status="PASS" endtime="20170707 21:33:23.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 21:33:23.792" status="PASS" endtime="20170707 21:33:23.792"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:23.855">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 21:33:23.855" status="FAIL" endtime="20170707 21:33:23.855"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:23.856">${has_host} = False</msg>
<status starttime="20170707 21:33:23.855" status="PASS" endtime="20170707 21:33:23.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 21:33:23.856" status="PASS" endtime="20170707 21:33:23.857"></status>
</kw>
<status starttime="20170707 21:33:23.856" status="PASS" endtime="20170707 21:33:23.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.858">${port_num} = 22</msg>
<status starttime="20170707 21:33:23.858" status="PASS" endtime="20170707 21:33:23.858"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.859">${SSH_PORT} = 22</msg>
<status starttime="20170707 21:33:23.859" status="PASS" endtime="20170707 21:33:23.859"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:23.859">${https_num} = 443</msg>
<status starttime="20170707 21:33:23.859" status="PASS" endtime="20170707 21:33:23.860"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:23.860">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 21:33:23.860" status="PASS" endtime="20170707 21:33:23.860"></status>
</kw>
<status starttime="20170707 21:33:23.858" status="PASS" endtime="20170707 21:33:23.861"></status>
</kw>
<status starttime="20170707 21:33:23.857" status="PASS" endtime="20170707 21:33:23.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:23.862">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 21:33:23.861" status="FAIL" endtime="20170707 21:33:23.862"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:23.862">${has_port} = False</msg>
<status starttime="20170707 21:33:23.861" status="PASS" endtime="20170707 21:33:23.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 21:33:23.863" status="PASS" endtime="20170707 21:33:23.864"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 21:33:23.864" status="PASS" endtime="20170707 21:33:23.864"></status>
</kw>
<status starttime="20170707 21:33:23.863" status="PASS" endtime="20170707 21:33:23.864"></status>
</kw>
<status starttime="20170707 21:33:23.862" status="PASS" endtime="20170707 21:33:23.864"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:23.865">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 21:33:25.580">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 21:33:23.865" status="PASS" endtime="20170707 21:33:25.580"></status>
</kw>
<status starttime="20170707 21:33:23.854" status="PASS" endtime="20170707 21:33:25.580"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.581">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170707 21:33:25.581" status="PASS" endtime="20170707 21:33:25.581"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.583">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170707 21:33:25.582" status="PASS" endtime="20170707 21:33:25.583"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:25.588">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170707 21:33:25.583" status="PASS" endtime="20170707 21:33:25.588"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.591">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.590" status="PASS" endtime="20170707 21:33:25.591"></status>
</kw>
<status starttime="20170707 21:33:25.590" status="PASS" endtime="20170707 21:33:25.591"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.592">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.592" status="PASS" endtime="20170707 21:33:25.593"></status>
</kw>
<status starttime="20170707 21:33:25.591" status="PASS" endtime="20170707 21:33:25.593"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.594">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.593" status="PASS" endtime="20170707 21:33:25.594"></status>
</kw>
<status starttime="20170707 21:33:25.593" status="PASS" endtime="20170707 21:33:25.594"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.595">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.595" status="PASS" endtime="20170707 21:33:25.595"></status>
</kw>
<status starttime="20170707 21:33:25.594" status="PASS" endtime="20170707 21:33:25.595"></status>
</kw>
<status starttime="20170707 21:33:25.589" status="PASS" endtime="20170707 21:33:25.595"></status>
</kw>
<status starttime="20170707 21:33:25.589" status="PASS" endtime="20170707 21:33:25.596"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.596">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170707 21:33:25.653">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170707 21:33:25.653">${stdout} = </msg>
<msg level="INFO" timestamp="20170707 21:33:25.653">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170707 21:33:25.596" status="PASS" endtime="20170707 21:33:25.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.659">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.659" status="PASS" endtime="20170707 21:33:25.659"></status>
</kw>
<status starttime="20170707 21:33:25.658" status="PASS" endtime="20170707 21:33:25.659"></status>
</kw>
<status starttime="20170707 21:33:25.653" status="PASS" endtime="20170707 21:33:25.660"></status>
</kw>
<status starttime="20170707 21:33:25.588" status="PASS" endtime="20170707 21:33:25.660"></status>
</kw>
<status starttime="20170707 21:33:25.588" status="PASS" endtime="20170707 21:33:25.660"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.663">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.663" status="PASS" endtime="20170707 21:33:25.663"></status>
</kw>
<status starttime="20170707 21:33:25.662" status="PASS" endtime="20170707 21:33:25.663"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.665">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.665" status="PASS" endtime="20170707 21:33:25.665"></status>
</kw>
<status starttime="20170707 21:33:25.663" status="PASS" endtime="20170707 21:33:25.665"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.666">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.666" status="PASS" endtime="20170707 21:33:25.667"></status>
</kw>
<status starttime="20170707 21:33:25.666" status="PASS" endtime="20170707 21:33:25.667"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.668">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.667" status="PASS" endtime="20170707 21:33:25.668"></status>
</kw>
<status starttime="20170707 21:33:25.667" status="PASS" endtime="20170707 21:33:25.668"></status>
</kw>
<status starttime="20170707 21:33:25.661" status="PASS" endtime="20170707 21:33:25.668"></status>
</kw>
<status starttime="20170707 21:33:25.661" status="PASS" endtime="20170707 21:33:25.668"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.669">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170707 21:33:25.749">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:25.750">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-96"
VERSION_ID="v1.99.7-96-g038f2e9"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170707 21:33:25.750">${stderr} = </msg>
<status starttime="20170707 21:33:25.668" status="PASS" endtime="20170707 21:33:25.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.756">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.756" status="PASS" endtime="20170707 21:33:25.756"></status>
</kw>
<status starttime="20170707 21:33:25.755" status="PASS" endtime="20170707 21:33:25.756"></status>
</kw>
<status starttime="20170707 21:33:25.750" status="PASS" endtime="20170707 21:33:25.756"></status>
</kw>
<status starttime="20170707 21:33:25.660" status="PASS" endtime="20170707 21:33:25.756"></status>
</kw>
<status starttime="20170707 21:33:25.660" status="PASS" endtime="20170707 21:33:25.757"></status>
</kw>
<status starttime="20170707 21:33:25.588" status="PASS" endtime="20170707 21:33:25.757"></status>
</kw>
<status starttime="20170707 21:33:25.582" status="PASS" endtime="20170707 21:33:25.757"></status>
</kw>
<status starttime="20170707 21:33:25.582" status="PASS" endtime="20170707 21:33:25.757"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.758">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170707 21:33:25.757" status="PASS" endtime="20170707 21:33:25.758"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:25.759">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170707 21:33:25.758" status="PASS" endtime="20170707 21:33:25.759"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.762">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.761" status="PASS" endtime="20170707 21:33:25.762"></status>
</kw>
<status starttime="20170707 21:33:25.761" status="PASS" endtime="20170707 21:33:25.762"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.763">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.763" status="PASS" endtime="20170707 21:33:25.763"></status>
</kw>
<status starttime="20170707 21:33:25.762" status="PASS" endtime="20170707 21:33:25.763"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.765">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.764" status="PASS" endtime="20170707 21:33:25.765"></status>
</kw>
<status starttime="20170707 21:33:25.763" status="PASS" endtime="20170707 21:33:25.765"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:25.767">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:25.766" status="PASS" endtime="20170707 21:33:25.767"></status>
</kw>
<status starttime="20170707 21:33:25.765" status="PASS" endtime="20170707 21:33:25.767"></status>
</kw>
<status starttime="20170707 21:33:25.760" status="PASS" endtime="20170707 21:33:25.767"></status>
</kw>
<status starttime="20170707 21:33:25.760" status="PASS" endtime="20170707 21:33:25.767"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:25.768">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.288">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.289">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<msg level="INFO" timestamp="20170707 21:33:27.289">${stderr} = </msg>
<status starttime="20170707 21:33:25.767" status="PASS" endtime="20170707 21:33:27.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.295">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.295" status="PASS" endtime="20170707 21:33:27.295"></status>
</kw>
<status starttime="20170707 21:33:27.294" status="PASS" endtime="20170707 21:33:27.295"></status>
</kw>
<status starttime="20170707 21:33:27.289" status="PASS" endtime="20170707 21:33:27.295"></status>
</kw>
<status starttime="20170707 21:33:25.759" status="PASS" endtime="20170707 21:33:27.295"></status>
</kw>
<status starttime="20170707 21:33:25.759" status="PASS" endtime="20170707 21:33:27.296"></status>
</kw>
<status starttime="20170707 21:33:25.759" status="PASS" endtime="20170707 21:33:27.296"></status>
</kw>
<status starttime="20170707 21:33:25.757" status="PASS" endtime="20170707 21:33:27.296"></status>
</kw>
<status starttime="20170707 21:33:25.757" status="PASS" endtime="20170707 21:33:27.296"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.297">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20170707 21:33:27.297" status="PASS" endtime="20170707 21:33:27.297"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:27.298">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170707 21:33:27.297" status="PASS" endtime="20170707 21:33:27.298"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.301">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.300" status="PASS" endtime="20170707 21:33:27.301"></status>
</kw>
<status starttime="20170707 21:33:27.300" status="PASS" endtime="20170707 21:33:27.301"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.302">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.302" status="PASS" endtime="20170707 21:33:27.302"></status>
</kw>
<status starttime="20170707 21:33:27.301" status="PASS" endtime="20170707 21:33:27.303"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.304">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.303" status="PASS" endtime="20170707 21:33:27.304"></status>
</kw>
<status starttime="20170707 21:33:27.303" status="PASS" endtime="20170707 21:33:27.304"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.305">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.305" status="PASS" endtime="20170707 21:33:27.305"></status>
</kw>
<status starttime="20170707 21:33:27.304" status="PASS" endtime="20170707 21:33:27.305"></status>
</kw>
<status starttime="20170707 21:33:27.299" status="PASS" endtime="20170707 21:33:27.305"></status>
</kw>
<status starttime="20170707 21:33:27.299" status="PASS" endtime="20170707 21:33:27.305"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.306">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.436">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.437">${stdout} =  21:33:27 up 26 min,  load average: 0.77, 0.70, 0.92</msg>
<msg level="INFO" timestamp="20170707 21:33:27.437">${stderr} = </msg>
<status starttime="20170707 21:33:27.306" status="PASS" endtime="20170707 21:33:27.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.443">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.443" status="PASS" endtime="20170707 21:33:27.443"></status>
</kw>
<status starttime="20170707 21:33:27.442" status="PASS" endtime="20170707 21:33:27.443"></status>
</kw>
<status starttime="20170707 21:33:27.437" status="PASS" endtime="20170707 21:33:27.443"></status>
</kw>
<status starttime="20170707 21:33:27.298" status="PASS" endtime="20170707 21:33:27.443"></status>
</kw>
<status starttime="20170707 21:33:27.298" status="PASS" endtime="20170707 21:33:27.444"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.448">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.447" status="PASS" endtime="20170707 21:33:27.448"></status>
</kw>
<status starttime="20170707 21:33:27.447" status="PASS" endtime="20170707 21:33:27.448"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.449">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.449" status="PASS" endtime="20170707 21:33:27.449"></status>
</kw>
<status starttime="20170707 21:33:27.448" status="PASS" endtime="20170707 21:33:27.450"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.451">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.450" status="PASS" endtime="20170707 21:33:27.451"></status>
</kw>
<status starttime="20170707 21:33:27.450" status="PASS" endtime="20170707 21:33:27.451"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.452">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.452" status="PASS" endtime="20170707 21:33:27.452"></status>
</kw>
<status starttime="20170707 21:33:27.451" status="PASS" endtime="20170707 21:33:27.452"></status>
</kw>
<status starttime="20170707 21:33:27.446" status="PASS" endtime="20170707 21:33:27.452"></status>
</kw>
<status starttime="20170707 21:33:27.445" status="PASS" endtime="20170707 21:33:27.452"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.453">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.515">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.515">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Fri Jul 7 18:09:56 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170707 21:33:27.515">${stderr} = </msg>
<status starttime="20170707 21:33:27.453" status="PASS" endtime="20170707 21:33:27.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.521">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.521" status="PASS" endtime="20170707 21:33:27.522"></status>
</kw>
<status starttime="20170707 21:33:27.520" status="PASS" endtime="20170707 21:33:27.522"></status>
</kw>
<status starttime="20170707 21:33:27.515" status="PASS" endtime="20170707 21:33:27.522"></status>
</kw>
<status starttime="20170707 21:33:27.444" status="PASS" endtime="20170707 21:33:27.522"></status>
</kw>
<status starttime="20170707 21:33:27.444" status="PASS" endtime="20170707 21:33:27.522"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.525">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.525" status="PASS" endtime="20170707 21:33:27.525"></status>
</kw>
<status starttime="20170707 21:33:27.524" status="PASS" endtime="20170707 21:33:27.525"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.526">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.526" status="PASS" endtime="20170707 21:33:27.526"></status>
</kw>
<status starttime="20170707 21:33:27.525" status="PASS" endtime="20170707 21:33:27.527"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.528">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.527" status="PASS" endtime="20170707 21:33:27.528"></status>
</kw>
<status starttime="20170707 21:33:27.527" status="PASS" endtime="20170707 21:33:27.528"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.529">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.529" status="PASS" endtime="20170707 21:33:27.529"></status>
</kw>
<status starttime="20170707 21:33:27.528" status="PASS" endtime="20170707 21:33:27.530"></status>
</kw>
<status starttime="20170707 21:33:27.523" status="PASS" endtime="20170707 21:33:27.530"></status>
</kw>
<status starttime="20170707 21:33:27.523" status="PASS" endtime="20170707 21:33:27.530"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.530">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.618">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 21:33:27.618">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170707 21:33:27.618">${stderr} = </msg>
<status starttime="20170707 21:33:27.530" status="PASS" endtime="20170707 21:33:27.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:27.627">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/20170707213302682911_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:27.626" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.625" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.619" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.522" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.522" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.298" status="PASS" endtime="20170707 21:33:27.627"></status>
</kw>
<status starttime="20170707 21:33:27.296" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:27.296" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:25.581" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:23.853" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:23.792" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:23.789" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:23.789" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:04.567" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:04.565" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:04.564" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<status starttime="20170707 21:33:04.564" status="PASS" endtime="20170707 21:33:27.628"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170707 21:33:27.629" status="PASS" endtime="20170707 21:33:27.715"></status>
</kw>
<status starttime="20170707 21:33:04.563" status="PASS" endtime="20170707 21:33:27.715"></status>
</kw>
<status starttime="20170707 21:32:59.580" status="PASS" endtime="20170707 21:33:27.716"></status>
</kw>
<status starttime="20170707 21:32:59.579" status="PASS" endtime="20170707 21:33:27.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:27.721">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:27.721" status="PASS" endtime="20170707 21:33:27.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:27.722" status="PASS" endtime="20170707 21:33:27.722"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.723">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:27.723" status="PASS" endtime="20170707 21:33:27.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:27.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:27.723" status="PASS" endtime="20170707 21:33:27.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.210">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:27.724" status="PASS" endtime="20170707 21:33:28.210"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.210">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:28.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:27.724" status="PASS" endtime="20170707 21:33:28.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.211">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.210" status="PASS" endtime="20170707 21:33:28.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.211" status="PASS" endtime="20170707 21:33:28.212"></status>
</kw>
<status starttime="20170707 21:33:27.720" status="PASS" endtime="20170707 21:33:28.212"></status>
</kw>
<status starttime="20170707 21:33:27.720" status="PASS" endtime="20170707 21:33:28.212"></status>
</kw>
<status starttime="20170707 21:33:27.719" status="PASS" endtime="20170707 21:33:28.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.213">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:33:28.212" status="PASS" endtime="20170707 21:33:28.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.215">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:28.214" status="PASS" endtime="20170707 21:33:28.215"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.216">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:28.216" status="PASS" endtime="20170707 21:33:28.216"></status>
</kw>
<status starttime="20170707 21:33:28.215" status="PASS" endtime="20170707 21:33:28.217"></status>
</kw>
<status starttime="20170707 21:33:28.213" status="PASS" endtime="20170707 21:33:28.217"></status>
</kw>
<status starttime="20170707 21:33:28.213" status="PASS" endtime="20170707 21:33:28.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.347">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:28.347">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.217" status="PASS" endtime="20170707 21:33:28.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.349">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:28.348" status="PASS" endtime="20170707 21:33:28.349"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.350">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:28.350" status="PASS" endtime="20170707 21:33:28.350"></status>
</kw>
<status starttime="20170707 21:33:28.349" status="PASS" endtime="20170707 21:33:28.350"></status>
</kw>
<status starttime="20170707 21:33:28.348" status="PASS" endtime="20170707 21:33:28.350"></status>
</kw>
<status starttime="20170707 21:33:28.347" status="PASS" endtime="20170707 21:33:28.350"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.351">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:27.718" status="PASS" endtime="20170707 21:33:28.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.351" status="PASS" endtime="20170707 21:33:28.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.352">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:28.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:28.352">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:28.352" status="PASS" endtime="20170707 21:33:28.352"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.352">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170707 21:33:27.718" status="PASS" endtime="20170707 21:33:28.352"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.353">${host_state} = Quiesced</msg>
<status starttime="20170707 21:33:27.717" status="PASS" endtime="20170707 21:33:28.353"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170707 21:33:28.353" status="PASS" endtime="20170707 21:33:28.354"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.354">${status} = True</msg>
<status starttime="20170707 21:33:28.353" status="PASS" endtime="20170707 21:33:28.354"></status>
</kw>
<status starttime="20170707 21:33:27.717" status="PASS" endtime="20170707 21:33:28.354"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.354">${resp} = True</msg>
<status starttime="20170707 21:33:27.717" status="PASS" endtime="20170707 21:33:28.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.356">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170707 21:33:28.356" status="PASS" endtime="20170707 21:33:28.356"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.357">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 21:33:28.357" status="PASS" endtime="20170707 21:33:28.357"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.360">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:28.360" status="PASS" endtime="20170707 21:33:28.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:28.361" status="PASS" endtime="20170707 21:33:28.361"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.362">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:28.362" status="PASS" endtime="20170707 21:33:28.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:28.362" status="PASS" endtime="20170707 21:33:28.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:28.364" status="PASS" endtime="20170707 21:33:28.656"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:28.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.363" status="PASS" endtime="20170707 21:33:28.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.657" status="PASS" endtime="20170707 21:33:28.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.657" status="PASS" endtime="20170707 21:33:28.658"></status>
</kw>
<status starttime="20170707 21:33:28.360" status="PASS" endtime="20170707 21:33:28.658"></status>
</kw>
<status starttime="20170707 21:33:28.359" status="PASS" endtime="20170707 21:33:28.658"></status>
</kw>
<status starttime="20170707 21:33:28.358" status="PASS" endtime="20170707 21:33:28.658"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.659">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 21:33:28.658" status="PASS" endtime="20170707 21:33:28.659"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:28.659" status="PASS" endtime="20170707 21:33:28.659"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 21:33:28.659" status="PASS" endtime="20170707 21:33:28.660"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.661">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170707 21:33:28.661" status="PASS" endtime="20170707 21:33:28.661"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.668">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 21:33:28.662" status="PASS" endtime="20170707 21:33:28.668"></status>
</kw>
<status starttime="20170707 21:33:28.662" status="PASS" endtime="20170707 21:33:28.668"></status>
</kw>
<status starttime="20170707 21:33:28.660" status="PASS" endtime="20170707 21:33:28.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.879">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 21:33:28.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.668" status="PASS" endtime="20170707 21:33:28.879"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.881">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:28.881" status="PASS" endtime="20170707 21:33:28.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.883">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:28.883" status="PASS" endtime="20170707 21:33:28.883"></status>
</kw>
<status starttime="20170707 21:33:28.882" status="PASS" endtime="20170707 21:33:28.884"></status>
</kw>
<status starttime="20170707 21:33:28.880" status="PASS" endtime="20170707 21:33:28.884"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:28.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.358" status="PASS" endtime="20170707 21:33:28.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:28.884" status="PASS" endtime="20170707 21:33:28.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.885">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:28.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:28.885">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:28.885" status="PASS" endtime="20170707 21:33:28.885"></status>
</kw>
<status starttime="20170707 21:33:28.356" status="PASS" endtime="20170707 21:33:28.886"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 21:33:28.886" status="PASS" endtime="20170707 21:33:28.886"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:28.891">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:28.890" status="PASS" endtime="20170707 21:33:28.891"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:28.891" status="PASS" endtime="20170707 21:33:28.892"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:28.892" status="PASS" endtime="20170707 21:33:28.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:28.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:28.892" status="PASS" endtime="20170707 21:33:28.893"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:30.849">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:28.894" status="PASS" endtime="20170707 21:33:30.849"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:30.849">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:30.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.893" status="PASS" endtime="20170707 21:33:30.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:30.850">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:30.850" status="PASS" endtime="20170707 21:33:30.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:30.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:30.850" status="PASS" endtime="20170707 21:33:30.851"></status>
</kw>
<status starttime="20170707 21:33:28.890" status="PASS" endtime="20170707 21:33:30.851"></status>
</kw>
<status starttime="20170707 21:33:28.889" status="PASS" endtime="20170707 21:33:30.851"></status>
</kw>
<status starttime="20170707 21:33:28.889" status="PASS" endtime="20170707 21:33:30.851"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:30.852">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:33:30.851" status="PASS" endtime="20170707 21:33:30.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:30.854">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:30.853" status="PASS" endtime="20170707 21:33:30.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:30.855">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:30.855" status="PASS" endtime="20170707 21:33:30.855"></status>
</kw>
<status starttime="20170707 21:33:30.854" status="PASS" endtime="20170707 21:33:30.855"></status>
</kw>
<status starttime="20170707 21:33:30.853" status="PASS" endtime="20170707 21:33:30.855"></status>
</kw>
<status starttime="20170707 21:33:30.852" status="PASS" endtime="20170707 21:33:30.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:35.698">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:35.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:30.856" status="PASS" endtime="20170707 21:33:35.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:35.700">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:35.700" status="PASS" endtime="20170707 21:33:35.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:35.701">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:35.701" status="PASS" endtime="20170707 21:33:35.702"></status>
</kw>
<status starttime="20170707 21:33:35.701" status="PASS" endtime="20170707 21:33:35.702"></status>
</kw>
<status starttime="20170707 21:33:35.699" status="PASS" endtime="20170707 21:33:35.702"></status>
</kw>
<status starttime="20170707 21:33:35.699" status="PASS" endtime="20170707 21:33:35.702"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:35.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:28.888" status="PASS" endtime="20170707 21:33:35.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:35.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:35.702" status="PASS" endtime="20170707 21:33:35.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:35.703">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:35.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:35.703">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:35.703" status="PASS" endtime="20170707 21:33:35.703"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:35.704">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170707 21:33:28.888" status="PASS" endtime="20170707 21:33:35.704"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:35.704">${host_state} = Quiesced</msg>
<status starttime="20170707 21:33:28.887" status="PASS" endtime="20170707 21:33:35.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 21:33:35.705">Off != Quiesced</msg>
<status starttime="20170707 21:33:35.704" status="FAIL" endtime="20170707 21:33:35.705"></status>
</kw>
<status starttime="20170707 21:33:28.887" status="FAIL" endtime="20170707 21:33:35.705"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.713">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 21:33:45.713" status="PASS" endtime="20170707 21:33:45.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.715">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 21:33:45.714" status="PASS" endtime="20170707 21:33:45.715"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.716">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 21:33:45.715" status="PASS" endtime="20170707 21:33:45.716"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.717">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 21:33:45.716" status="PASS" endtime="20170707 21:33:45.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.898">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 21:33:45.717" status="PASS" endtime="20170707 21:33:45.899"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:45.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 21:33:45.899">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:45.717" status="PASS" endtime="20170707 21:33:45.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.900">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:45.899" status="PASS" endtime="20170707 21:33:45.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:45.900" status="PASS" endtime="20170707 21:33:45.900"></status>
</kw>
<status starttime="20170707 21:33:45.711" status="PASS" endtime="20170707 21:33:45.901"></status>
</kw>
<status starttime="20170707 21:33:45.711" status="PASS" endtime="20170707 21:33:45.901"></status>
</kw>
<status starttime="20170707 21:33:45.710" status="PASS" endtime="20170707 21:33:45.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.901">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 21:33:45.901" status="PASS" endtime="20170707 21:33:45.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.904">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:45.903" status="PASS" endtime="20170707 21:33:45.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.905">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 21:33:45.905" status="PASS" endtime="20170707 21:33:45.905"></status>
</kw>
<status starttime="20170707 21:33:45.904" status="PASS" endtime="20170707 21:33:45.905"></status>
</kw>
<status starttime="20170707 21:33:45.902" status="PASS" endtime="20170707 21:33:45.905"></status>
</kw>
<status starttime="20170707 21:33:45.902" status="PASS" endtime="20170707 21:33:45.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.988">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 21:33:45.988">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:45.905" status="PASS" endtime="20170707 21:33:45.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.990">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:45.990" status="PASS" endtime="20170707 21:33:45.990"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 21:33:45.991" status="PASS" endtime="20170707 21:33:45.993"></status>
</kw>
<status starttime="20170707 21:33:45.990" status="PASS" endtime="20170707 21:33:45.993"></status>
</kw>
<status starttime="20170707 21:33:45.989" status="PASS" endtime="20170707 21:33:45.993"></status>
</kw>
<status starttime="20170707 21:33:45.989" status="PASS" endtime="20170707 21:33:45.993"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:45.993">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 21:33:45.709" status="PASS" endtime="20170707 21:33:45.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 21:33:45.994" status="PASS" endtime="20170707 21:33:45.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:45.995">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 21:33:45.995">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 21:33:45.995">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170707 21:33:45.994" status="PASS" endtime="20170707 21:33:45.995"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:45.995">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170707 21:33:45.708" status="PASS" endtime="20170707 21:33:45.995"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:45.996">${host_state} = Off</msg>
<status starttime="20170707 21:33:45.707" status="PASS" endtime="20170707 21:33:45.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170707 21:33:45.996" status="PASS" endtime="20170707 21:33:45.996"></status>
</kw>
<status starttime="20170707 21:33:45.706" status="PASS" endtime="20170707 21:33:45.996"></status>
</kw>
<status starttime="20170707 21:33:28.886" status="PASS" endtime="20170707 21:33:45.996"></status>
</kw>
<status starttime="20170707 21:33:28.355" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:45.997">HOST is recovered from quiesced state</msg>
<status starttime="20170707 21:33:45.997" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<status starttime="20170707 21:33:28.355" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<status starttime="20170707 21:33:28.354" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<status starttime="20170707 21:33:27.716" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<status starttime="20170707 21:33:27.716" status="PASS" endtime="20170707 21:33:45.997"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.006">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170707 21:33:45.998" status="PASS" endtime="20170707 21:33:46.006"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.007">${FFDC_DIR_PATH} = /tmp/fspcibld/14999/obmc-robot/logs/20170707213302682911_TestsTestBasicPoweron/20170707213302682911_PowerOnTest/</msg>
<status starttime="20170707 21:33:46.007" status="PASS" endtime="20170707 21:33:46.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170707 21:33:46.007" status="PASS" endtime="20170707 21:33:46.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170707 21:33:46.008" status="PASS" endtime="20170707 21:33:46.008"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:46.009">Directory '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs"&gt;/tmp/fspcibld/14999/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170707 21:33:46.009" status="PASS" endtime="20170707 21:33:46.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:46.010">File '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170707 21:33:46.010" status="PASS" endtime="20170707 21:33:46.010"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.010">${exist} = True</msg>
<status starttime="20170707 21:33:46.009" status="PASS" endtime="20170707 21:33:46.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170707 21:33:46.010" status="PASS" endtime="20170707 21:33:46.011"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170707 21:33:46.011" status="PASS" endtime="20170707 21:33:46.011"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.012">${cur_time} = 2017-07-07 21:33:46:011997</msg>
<status starttime="20170707 21:33:46.012" status="PASS" endtime="20170707 21:33:46.012"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.013">${cur_time} = 20170707213346011997</msg>
<status starttime="20170707 21:33:46.012" status="PASS" endtime="20170707 21:33:46.013"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.013">${cur_time} = 20170707213346011997</msg>
<status starttime="20170707 21:33:46.011" status="PASS" endtime="20170707 21:33:46.013"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:46.014">Appended to file '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14999/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:46.013" status="PASS" endtime="20170707 21:33:46.014"></status>
</kw>
<status starttime="20170707 21:33:45.998" status="PASS" endtime="20170707 21:33:46.014"></status>
</kw>
<status starttime="20170707 21:32:59.232" status="PASS" endtime="20170707 21:33:46.014"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.016">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:33:46.016" status="PASS" endtime="20170707 21:33:46.016"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.017">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:33:46.016" status="PASS" endtime="20170707 21:33:46.017"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.017">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 21:33:46.015" status="PASS" endtime="20170707 21:33:46.017"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.018">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 21:33:46.018" status="PASS" endtime="20170707 21:33:46.018"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:33:46.019" status="PASS" endtime="20170707 21:33:46.019"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.026">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:33:46.040">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:33:46.040">${output} = /tmp/fspcibld/14999/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 21:33:46.019" status="PASS" endtime="20170707 21:33:46.040"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 21:33:46.043" status="PASS" endtime="20170707 21:33:46.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 21:33:46.044" status="PASS" endtime="20170707 21:33:46.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.045">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:33:46.045" status="PASS" endtime="20170707 21:33:46.045"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.046">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 21:33:46.017" status="PASS" endtime="20170707 21:33:46.046"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.046">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170707 21:33:46.046" status="PASS" endtime="20170707 21:33:46.046"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:33:46.047" status="PASS" endtime="20170707 21:33:46.047"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.052">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 21:33:46.086">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:33:46.086">${os_con_pid} = </msg>
<status starttime="20170707 21:33:46.048" status="PASS" endtime="20170707 21:33:46.086"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170707 21:33:46.089" status="PASS" endtime="20170707 21:33:46.090"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.090">${cmd_buf} = kill -9 </msg>
<status starttime="20170707 21:33:46.090" status="PASS" endtime="20170707 21:33:46.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 21:33:46.091" status="PASS" endtime="20170707 21:33:46.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.094">${rc} = None</msg>
<msg level="INFO" timestamp="20170707 21:33:46.094">${output} = None</msg>
<status starttime="20170707 21:33:46.092" status="PASS" endtime="20170707 21:33:46.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 21:33:46.094" status="PASS" endtime="20170707 21:33:46.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170707 21:33:46.100">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/14999/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/14999/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170707 21:33:46.096" status="PASS" endtime="20170707 21:33:46.100"></status>
</kw>
<status starttime="20170707 21:33:46.096" status="PASS" endtime="20170707 21:33:46.100"></status>
</kw>
<status starttime="20170707 21:33:46.095" status="PASS" endtime="20170707 21:33:46.100"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.101">${output} = </msg>
<status starttime="20170707 21:33:46.101" status="PASS" endtime="20170707 21:33:46.101"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170707 21:33:46.101">${loc_quiet} = 1</msg>
<status starttime="20170707 21:33:46.101" status="PASS" endtime="20170707 21:33:46.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170707 21:33:46.102" status="PASS" endtime="20170707 21:33:46.155"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.157">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 21:33:46.157">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[    6.011864] Unable to op...</msg>
<status starttime="20170707 21:33:46.102" status="PASS" endtime="20170707 21:33:46.157"></status>
</kw>
<msg level="INFO" timestamp="20170707 21:33:46.158">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[    6.011864] Unable to op...</msg>
<status starttime="20170707 21:33:46.014" status="PASS" endtime="20170707 21:33:46.158"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 21:33:46.160">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[    6.011864] Unable to open file: /etc/keys/x509_ima.der (-2)
[    6.011870] Unable to open file: /etc/keys/x509_evm.der (-2)
[   55.066054880,5] IPMI: Soft shutdown requested
[    6.024361] reboot: Power down
[   55.080073872,5] OPAL: Shutdown request type 0x0...
[    6.208032] tg3 0005:01:00.0: phy probe failed, err -19
[    6.208127] tg3 0005:01:00.0: Problem fetching invariants of chip, aborting
[    6.223368] tg3 0005:01:00.1: phy probe failed, err -19
[    6.223443] tg3 0005:01:00.1: Problem fetching invariants of chip, aborting
[    6.235364] tg3 0034:01:00.0: phy probe failed, err -19
[    6.235460] tg3 0034:01:00.0: Problem fetching invariants of chip, aborting
[    6.251349] tg3 0034:01:00.1: phy probe failed, err -19
[    6.251352] tg3 0034:01:00.1: Problem fetching invariants of chip, aborting
[    6.267359] tg3 0034:01:00.2: phy probe failed, err -19
[    6.267362] tg3 0034:01:00.2: Problem fetching invariants of chip, aborting
[    6.283353] tg3 0034:01:00.3: phy probe failed, err -19
[    6.283357] tg3 0034:01:00.3: Problem fetching invariants of chip, aborting


--== Welcome to Hostboot hostboot-d0a8f18/hbicore.bin ==--

  3.86004|secure|Booting in non-secure mode.
  3.86044|secure|SecureROM invalid - skipping functionality
  6.94561|ISTEP  6. 5 - host_init_fsi
  7.02397|ISTEP  6. 6 - host_set_ipl_parms
  7.39915|ISTEP  6. 7 - host_discover_targets
 10.56031|HWAS|PRESENT&gt; DIMM[03]=C3C3000000000000
 10.56032|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.62035|ISTEP  6. 8 - host_update_master_tpm
 10.63000|SECURE|Security Access Bit&gt; 0x0000000000000000
 10.63001|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 10.63022|ISTEP  6. 9 - host_gard
 10.68706|ISTEP  6.10 - host_revert_sbe_mcs_setup
 10.69958|ISTEP  6.11 - host_start_occ_xstop_handler
 10.70071|ISTEP  6.12 - host_voltage_config
 10.72709|ISTEP  7. 2 - mss_volt
 10.90927|ISTEP  7. 3 - mss_freq
 10.97437|ISTEP  7. 4 - mss_eff_config
 12.66509|ISTEP  7. 5 - mss_attr_update
 12.67297|ISTEP  8. 1 - host_slave_sbe_config
 12.93067|ISTEP  8. 2 - host_setup_sbe
 12.93703|ISTEP  8. 3 - host_cbs_start
 12.94609|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 20.16376|ISTEP  8. 5 - host_attnlisten_proc
 20.16477|ISTEP  8. 6 - host_p9_fbc_eff_config
 20.18401|ISTEP  8. 7 - host_p9_eff_config_links
 20.19351|ISTEP  8. 8 - proc_attr_update
 20.19528|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 20.24319|ISTEP  8.10 - proc_xbus_scominit
 23.20894|ISTEP  8.11 - proc_xbus_enable_ridi
 23.21334|ISTEP  9. 1 - fabric_erepair
 23.22302|ISTEP  9. 2 - fabric_io_dccal
 24.04938|ISTEP  9. 3 - fabric_pre_trainadv
 24.05376|ISTEP  9. 4 - fabric_io_run_training
 24.25638|ISTEP  9. 5 - fabric_post_trainadv
 24.26113|ISTEP  9. 6 - proc_smp_link_layer
 24.26597|ISTEP  9. 7 - proc_fab_iovalid
 24.28844|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.29953|ISTEP 10. 1 - proc_build_smp
 24.54182|ISTEP 10. 2 - host_slave_sbe_update
 24.76852|ISTEP 10. 3 - host_set_voltages
 24.77896|ISTEP 10. 4 - proc_cen_ref_clk_enable
 24.78400|ISTEP 10. 5 - proc_enable_osclite
 24.78480|ISTEP 10. 6 - proc_chiplet_scominit
 24.80920|ISTEP 10. 7 - proc_abus_scominit
 24.81102|ISTEP 10. 8 - proc_obus_scominit
 24.88898|ISTEP 10. 9 - proc_npu_scominit
 24.90893|ISTEP 10.10 - proc_pcie_scominit
 24.95343|ISTEP 10.11 - proc_scomoverride_chiplets
 24.95518|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.96039|ISTEP 10.13 - host_rng_bist
 24.96484|ISTEP 10.14 - host_update_redundant_tpm
 25.02194|ISTEP 11. 1 - host_prd_hwreconfig
 25.02778|ISTEP 12. 1 - mss_getecid
 25.03335|ISTEP 13. 1 - host_disable_memvolt
 25.04842|ISTEP 13. 2 - mem_pll_reset
 25.06177|ISTEP 13. 3 - mem_pll_initf
 25.08269|ISTEP 13. 4 - mem_pll_setup
 25.10918|ISTEP 13. 6 - mem_startclocks
 25.12570|ISTEP 13. 7 - host_enable_memvolt
 25.12775|ISTEP 13. 8 - mss_scominit
 25.45956|ISTEP 13. 9 - mss_ddr_phy_reset
 25.51449|ISTEP 13.10 - mss_draminit
 25.66549|ISTEP 13.11 - mss_draminit_training
 25.85274|ISTEP 13.12 - mss_draminit_trainadv
 25.85535|ISTEP 13.13 - mss_draminit_mc
 25.89706|ISTEP 14. 1 - mss_memdiag
 46.61089|ISTEP 14. 2 - mss_thermal_init
 46.62473|ISTEP 14. 3 - proc_pcie_config
 46.64168|ISTEP 14. 4 - mss_power_cleanup
 46.64657|ISTEP 14. 5 - proc_setup_bars
 46.68614|ISTEP 14. 6 - proc_htm_setup
 46.69489|ISTEP 14. 7 - proc_exit_cache_contained
 46.71349|ISTEP 15. 1 - host_build_stop_image
 83.78168|ISTEP 15. 2 - proc_set_pba_homer_bar
 83.78656|ISTEP 15. 3 - host_establish_ex_chiplet
 83.79760|ISTEP 15. 4 - host_start_stop_engine
 83.90386|ISTEP 16. 1 - host_activate_master
 85.00951|ISTEP 16. 2 - host_activate_slave_cores
 85.08540|ISTEP 16. 3 - host_secure_rng
 85.09433|ISTEP 16. 4 - mss_scrub
 85.10306|ISTEP 16. 5 - host_ipl_complete
 85.40216|ISTEP 16. 6 - host_load_io_ppe
 85.41367|ISTEP 18.11 - proc_tod_setup
 85.47717|ISTEP 18.12 - proc_tod_init
 85.47258|ISTEP 20. 1 - host_load_payload
 85.96230|ISTEP 20. 2 - host_load_hdat
 89.73227|ISTEP 21. 1 - host_runtime_setup
130.10054|================================================
130.10055|Error reported by occc (0x2A00) PLID 0x90000020
130.10055|  &lt;none&gt;
130.10225|  ModuleId   0x0d unknown
130.10225|  ReasonCode 0x2ada unknown
130.10396|  UserData1   : 0x0000000100000001
130.10397|  UserData2   : 0x00000000110d0000
130.10397|------------------------------------------------
130.10398|  Callout type             : Procedure Callout
130.10399|  Procedure                : EPUB_PRC_HB_CODE
130.10400|  Priority                 : SRCI_PRIORITY_LOW
130.10400|------------------------------------------------
130.10401|  Hostboot Build ID: hostboot-d0a8f18/hbicore.bin
130.10402|================================================
130.55224|================================================
130.55225|Error reported by occc (0x2A00) PLID 0x90000022
130.55226|  &lt;none&gt;
130.55226|  ModuleId   0x0d unknown
130.55227|  ReasonCode 0x2ada unknown
130.55228|  UserData1   : 0x0000000100000001
130.55229|  UserData2   : 0x00000000110d0000
130.55229|------------------------------------------------
130.55230|  Callout type             : Procedure Callout
130.55231|  Procedure                : EPUB_PRC_HB_CODE
130.55232|  Priority                 : SRCI_PRIORITY_LOW
130.55232|------------------------------------------------
130.55233|  Hostboot Build ID: hostboot-d0a8f18/hbicore.bin
130.55234|================================================
140.18442|IPMI: shutdown requested
140.50021|htmgt|OCCs are now running in ACTIVE state
140.51673|Stopping istep dispatcher
151.47921|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-d0a8f18/hbicore.bin ==--

  3.86005|secure|Booting in non-secure mode.
  3.86046|secure|SecureROM invalid - skipping functionality
  6.26266|ISTEP  6. 5 - host_init_fsi
  6.33674|ISTEP  6. 6 - host_set_ipl_parms
  6.81314|ISTEP  6. 7 - host_discover_targets
 10.53765|HWAS|PRESENT&gt; DIMM[03]=C3C3000000000000
 10.53767|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.57328|ISTEP  6. 8 - host_update_master_tpm
 10.58149|SECURE|Security Access Bit&gt; 0x0000000000000000
 10.58150|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 10.58169|ISTEP  6. 9 - host_gard
 10.63644|ISTEP  6.10 - host_revert_sbe_mcs_setup
 10.64904|ISTEP  6.11 - host_start_occ_xstop_handler
 10.65007|ISTEP  6.12 - host_voltage_config
 10.67646|ISTEP  7. 2 - mss_volt
 10.84543|ISTEP  7. 3 - mss_freq
 10.92126|ISTEP  7. 4 - mss_eff_config
 12.61441|ISTEP  7. 5 - mss_attr_update
 12.62198|ISTEP  8. 1 - host_slave_sbe_config
 12.65632|ISTEP  8. 2 - host_setup_sbe
 12.66287|ISTEP  8. 3 - host_cbs_start
 12.67187|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.89199|ISTEP  8. 5 - host_attnlisten_proc
 19.89280|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.90086|ISTEP  8. 7 - host_p9_eff_config_links
 19.91097|ISTEP  8. 8 - proc_attr_update
 19.91273|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.96063|ISTEP  8.10 - proc_xbus_scominit
 22.92807|ISTEP  8.11 - proc_xbus_enable_ridi
 22.93251|ISTEP  9. 1 - fabric_erepair
 22.94293|ISTEP  9. 2 - fabric_io_dccal
 23.77010|ISTEP  9. 3 - fabric_pre_trainadv
 23.77439|ISTEP  9. 4 - fabric_io_run_training
 23.97654|ISTEP  9. 5 - fabric_post_trainadv
 23.98126|ISTEP  9. 6 - proc_smp_link_layer
 23.98636|ISTEP  9. 7 - proc_fab_iovalid
 24.00876|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.01905|ISTEP 10. 1 - proc_build_smp
 24.43255|ISTEP 10. 2 - host_slave_sbe_update
 24.66423|ISTEP 10. 3 - host_set_voltages
 24.67479|ISTEP 10. 4 - proc_cen_ref_clk_enable
 24.68185|ISTEP 10. 5 - proc_enable_osclite
 24.68284|ISTEP 10. 6 - proc_chiplet_scominit
 24.70741|ISTEP 10. 7 - proc_abus_scominit
 24.70924|ISTEP 10. 8 - proc_obus_scominit
 24.78729|ISTEP 10. 9 - proc_npu_scominit
 24.80784|ISTEP 10.10 - proc_pcie_scominit
 24.85234|ISTEP 10.11 - proc_scomoverride_chiplets
 24.85432|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.86008|ISTEP 10.13 - host_rng_bist
 24.86486|ISTEP 10.14 - host_update_redundant_tpm
 24.92201|ISTEP 11. 1 - host_prd_hwreconfig
 24.92909|ISTEP 12. 1 - mss_getecid
 24.93785|ISTEP 13. 1 - host_disable_memvolt
 24.95305|ISTEP 13. 2 - mem_pll_reset
 24.96713|ISTEP 13. 3 - mem_pll_initf
 24.98637|ISTEP 13. 4 - mem_pll_setup
 25.01448|ISTEP 13. 6 - mem_startclocks
 25.03099|ISTEP 13. 7 - host_enable_memvolt
 25.03402|ISTEP 13. 8 - mss_scominit
 25.36057|ISTEP 13. 9 - mss_ddr_phy_reset
 25.41558|ISTEP 13.10 - mss_draminit
 25.55204|ISTEP 13.11 - mss_draminit_training
 25.73855|ISTEP 13.12 - mss_draminit_trainadv
 25.74130|ISTEP 13.13 - mss_draminit_mc
 25.75980|ISTEP 14. 1 - mss_memdiag
 46.59172|ISTEP 14. 2 - mss_thermal_init
 46.60515|ISTEP 14. 3 - proc_pcie_config
 46.62370|ISTEP 14. 4 - mss_power_cleanup
 46.62807|ISTEP 14. 5 - proc_setup_bars
 46.66897|ISTEP 14. 6 - proc_htm_setup
 46.67813|ISTEP 14. 7 - proc_exit_cache_contained
 46.69507|ISTEP 15. 1 - host_build_stop_image
</msg>
<status starttime="20170707 21:33:46.160" status="PASS" endtime="20170707 21:33:46.161"></status>
</kw>
<status starttime="20170707 21:32:59.232" status="PASS" endtime="20170707 21:33:46.161"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170707 21:19:18.813" critical="yes" status="FAIL" endtime="20170707 21:33:46.161">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170707 21:19:18.766" status="FAIL" endtime="20170707 21:33:46.163"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170707 21:19:10.675" status="FAIL" endtime="20170707 21:33:46.167"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
